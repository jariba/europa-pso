#summary Tweaks for building EUROPA on Windows

= Building EUROPA on Windows =

This page describes building Europa on Windows. This page is an addition to the [http://babelfish.arc.nasa.gov/trac/europa main Wiki].

I assume that you are building Europa using Ant build.xml file in the root of the project. The easiest thing is to use Ant from ext/ant. Make sure *ANT_HOME* is not set, or it will confuse the build.


== PThreads ==

Cygwin comes with pthreads. If you are building for Cygwin (which is not default), this is good enough. If you want to build for MinGW (default), use
http://sourceware.org/pthreads-win32/

Copy includes and libraries from this new PThreads installation into _/usr/include/mingw_ and _/lib/mingw_ respectively. Also

 * symlink pthread.dll to pthreadGC2.dll
 * symlink libpthread.a to libpthreadGC.a

== DLL paths ==

When you run Java examples, make sure the pthread DLL is in *PATH*. If it is not, you may get something like this:

{{{
[java]     Exception in thread "main" java.lang.UnsatisfiedLinkError:
C:\cygwin\Program\europa-2.1.2-windows\lib\System_g.dll: Can't find
dependent libraries
}}}

== Cygwin vs. MinGW ==

Cygwin is a UNIX-like environment for Windows. MinGW is a native port of the GNU Compiler Collection to Windows. In short, both Cygwin and MinGW have C++ compilers. The difference is that Cygwin has its own DLL, while MinGW uses native Windows libraries. By default, Europa wants to build for MinGW. If you are happy with just Cygwin, open build.xml and change the following line
{{{
          <property name="jam.misc" value="-sOS=CYGWIN -sNOCYGWIN=TRUE" />
}}}
to
{{{
          <property name="jam.misc" value="-sOS=CYGWIN" />
}}}


On pure Cygwin, both _build_ and _test_ targets work. MinGW has problems with some of the tests, because several tests use _cppunit_, which depends on Cygwin DLL. This causes the Windows equivalent of core dump if you try to run them.