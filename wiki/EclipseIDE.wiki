#summary Overview of Eclipse Plugin for EUROPA modeling, solving, and debugging.

= Quick Start =

_Option 1_:  Add plugin to existing Eclipse IDE.  Recommended.

 # Make sure you have EUROPA installed and running.
 # [http://code.google.com/p/europa-pso/downloads/list Download] the version of the Eclipse plugin that is compatible with your version of EUROPA.
 # ??? 

_Option 2_:  Build the plugin site yourself, and add plugin to existing Eclipse IDE.

 # Make sure you have EUROPA checked out, built, and running.
 # Build the Eclipse plugin update site (is this necessary if EUROPA is built? ... perhaps just need 'ant dist'?):
    # ???
    # ???
 # From Eclipse, point your update manager at ???
 
_Option 3_:  Run as a separate Eclipse Application (instead of updating your Eclipse IDE).
  # Make sure you have EUROPA checked out, built, and running.
  * Make sure EUROPA_HOME is on your LD_LIBRARY_PATH (PATH for Windows).
  # You need the plugin to be at the root level, in order for things to run correctly. So:
   1. File->Import->Existing Projects Into Worspace
   2. Choose 'PLASMA/src/Java/JavaUI' which will be the root directory (you now have two different 'views' into the same files in the workspace)
   3. Use the default name for the new 'project', which is 'Europa.java'
  # Copy PSEngine.jar from EUROPA (PLASMA/build/lib) into Europa.java/lib (NOTE: Whenever EUROPA gets updated, you'll need to redo this copy) 

= Overview =

The Eclipse plugin has two major components: an editor and an execution perspective. 

=== Components ===

 * _NDDL Editor_:  Syntax highlighting, syntax errors reported, structure linked to standard Outline View.
 * _Solver View_:  Start/stop the EUROPA engine, and configure and run a solver.
 * _Statistics View_:  Graphs of solver stats.
 * _Open Decision View_:  View of open decisions at each step of solving.
 * _Schema Browser View_:  View the schema for the active NDDL model.
 * _Gantt View_:  Once a solution is found, view the plan.
 * _Details View_:  Click on a token in the Gantt View to see it's details in this view.
 * _Run NDDL model_ perspective:  Includes all of the above components.

== Editor ==

Eclipse plugin registers a file type for ".nddl" and a default editor for it. The editor has syntax highlighting and an outline. The outline is updated every time an editor is saved. I am creating a brand new instance of the engine and deleting it after getting an AST tree. So far, if errors occur during parsing, the outline disappears. If/when we figure out some way to pass error messages to the Java side, I will add error markers to the editor.

Clicking in the outline navigates in the editor. Folding, control-clicking, and code assist are in future plans.

Note: I am not an artist, so complains about ugly icons will not be accepted. Better icons will be very much appreciated.

http://europa-pso.googlecode.com/svn/wiki/images/EclipseNddlEditor.png

There is a new "Run as" action that shows up for NDDL files, both in the editor and in the Package Explorer. It creates a launch configuration and switches the perspective to NDDL model execution.

http://europa-pso.googlecode.com/svn/wiki/images/EclipseRunAs.png

Like the Swing version, it takes a NDDL file and a planner configuration file to run. In Swing these were passed from the command line. In Eclipse plugin they are part of a launch configuration

http://europa-pso.googlecode.com/svn/wiki/images/LaunchConfiguration.png

== Run NDDL model perspective ==

The Run as NDDL model perspective is the Eclipse version of the Swing PSDesktop user interface. The main difference is the new button that lets you start and stop the engine. There can be only one engine running at any given moment. The engines used to get an outline do not count. 

http://europa-pso.googlecode.com/svn/wiki/images/EclipseRunPerspective.png

= Details =

See also [JavaUINotes Developer Notes] for the various EUROPA Java UI interfaces.