/*
 * Simple set of tests to ensure that the parser can handle
 * all of the grammar.
 */

// nddlStatement Tests:

#include "Plasma.nddl"

typedef int [1 inf] positive;
typedef float [-inf +inf] real;

///Suite of expression tests.

//Test functions
enforce(isSingleton(1));

//Test using functions with expressions as arguments
enforce(isSingleton(1 + 1));

string str;
str == "hi, i'm cool!";

int alphaalpha; //test arithmetic operations.
alphaalpha == 2 + 3 + 4 - 10;
eq(alphaalpha, -1);

12 == 3 * 4;

//test all relations.
1 < 2;
1 > 0;
0 == 0;
0 != 1;
1 <= 1;
1 <= 3;
0 >= 0;
1 >= 0;

//test ands and ors
true || false;
true && true;

//Functions tests
max(1, 2) == 2;
min(1, 2) == 1;
abs(-2) == 2;
sqrt(4) == 2;
mod(5, 3) == 2;
floor(5.4) == 5;
ceil(5.4) == 6;


eq(1, 1.0);

///End

positive pos;
real r = 50;

// Constraint Violation explanations

float x1,x2;
eq(x1,x2) : "x1 must equal x2";

int orderRelease,orderDuration,orderDueDate;
enforce orderRelease+orderDuration <= orderDueDate : "Order is late";
orderRelease+orderDuration <= orderDueDate : "Order is late";

enum Location {Hill,Lander,Rock}

Location l = Hill;

class superfoo {
    bool superleet;
    superfoo() {
    }
}

class foo extends superfoo {
    int x,y;
    positive posit;
    predicate p {}
    foo() {
    	super();
        posit = 1.0;
    }
}

foo::p {
       int alpha = 3;
       int beta = 2;
       int gamma = 3;
       int delta = 4;

       bool ret;

       if (alpha == beta - gamma + delta) {
          ret;
       } else {
          false;
       }

       if (isSingleton(ret)) {
          ret;
       } else {
          false;
       }

       Location location_enum;
       location_enum == Location.Hill;
}


foo fooa = new foo();
foo foob = new foo();
foo fooc = new foo();

new foo();

eq(pos, 23);


//pos.specify(40);
//pos.reset();
//pos.specify(60);

//pos.close();
//foo.close();

positive b;

addEq(40, 90, b);
close();

fact(foo.p fact1);
goal(foo.p goal1);
goal1.activate();
rejectable(foo.p somep);

fact1 before goal1;
goal1 meets somep;

//Test eight cases of temporalDistance
goal1.end + 0 == [0,inf];
goal1.end + somep.start == [0,inf];
goal1.end + 0 == somep.start;
//Three timepoints here will cause error
//Ignore all const
0 + goal1.end == [0,inf];
[0,inf] + 0 == somep.start;
0 + goal1.end == somep.start;

//Test eight cases of temporalDistance with subtraction
goal1.end - 0 == [0,inf];
goal1.end - somep.start == 0;
goal1.end - 0 == somep.start;
//Three timepoints here will cause error
//Ignore all const
[0,inf] - goal1.end == [0,inf];
[0,inf] - 0 == somep.start;
[0,inf] - goal1.end == somep.start;

//Three cases of precedes this way
[0,inf] <= somep.start;
goal1.end <= somep.start;
goal1.start <= [0,inf];

//Three cases of precedes the other way
[0,inf] >= somep.start;
somep.start >= 0;
somep.start >= goal1.end;

//Three cases of concurrent
goal1.end == somep.start;
goal1.end == [0,inf];
[0,inf] == somep.start;



//;;

// typeDefinition tests:

typedef int [0 1] boolean;
typedef int {2, 3, 5, 7, 11, 13, 17, 19} lowprime;
typedef float [0.0 1.0] normal;
typedef float {3.14159, 2.71828} pie;
typedef string {"Red", "Yellow", "Blue"} primary;
typedef bool {false} nope;
typedef foo {fooa, foob, fooc} somefoos;


// classDeclaration, classStatement, constructorStatement, predicateStatement tests:

class AClass;
class AClass {
  int a;

  AClass(int a) {
    this.a = a;
  }

  predicate p{}

  ;;
}

class BClass extends AClass {
  BClass(int b) {
    super(b);
    ;;
  }
  predicate q{
    eq(a, 50);
    int c = [40 100];
    c = 60;
  }
}


// rule tests:
BClass::q {
  // OH NOES RELATIONS!:
  any(object.q q0);
  ends(object.q q1);
  starts(object.q q2);
  equals(object.q q3);
  equals(object.q q4);
  before(object.q q5);
  after(object.q q6);
  contains(object.q q7);
  contained_by(object.q q8);
  ends_before(object.q q9);
  ends_after(object.q q10);
  starts_before_end(object.q q11);
  ends_after_start(object.q q12);
  contains_start(object.q q13);
  starts_during(object.q q14);
  contains_end(object.q q15);
  ends_during(object.q q16);
  meets(object.q q17);
  met_by(object.q q18);
  parallels(object.q q19);
  paralleled_by(object.q q20);
  starts_before(object.q q21);
  starts_after(object.q q22);
  int d = [40 100];
  eq(d, 50);
  if(d == 50) {
    eq(d,d);
  }
  else {
    eq(d,d);
  }

  //somefoos loopVar;

  //foreach(f in loopVar) {
  //  eq(f,f);
  //}

  ;;
}

