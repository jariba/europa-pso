#include "PlannerConfig.nddl"
#include "Resources.nddl"
constraint diffSquare(a, b, c) { a <: numeric && b <: numeric && c <: numeric }
constraint distanceSquares(a, b, c) { a <: numeric && b <: numeric && c <: numeric }
constraint neg(a, b) { a <: numeric && b <: numeric }

//*****************************************************************
class Battery extends Reservoir {
      Battery(float ic, float ll_min, float ll_max,
	float prod_max, float cm) {
        super(ic, ll_min, ll_max, prod_max, cm );
      }
}

//*****************************************************************
class Rover extends Timeline {
 Battery m_battery;

 Rover( float bat_start, float bat_low, float bat_high,
	float bat_prod, float mc ) {
  m_battery = new Battery(bat_start, bat_low, bat_high,
	bat_prod, mc);
 }
 // Do the work
 predicate Sample{
  int m_x, m_y;
 }

 predicate Drive {
  int m_from_x, m_from_y, m_to_x, m_to_y;
 }

 // Doing nothing, waiting for external forces to charge
 // our battery
 predicate Standby{
  int m_x, m_y;
  eq(duration, [1 +inf]);
 }

}

//*****************************************************************
// Energy producers
class Wind extends Timeline {
  predicate Velocity{
    float m_velocity;
  }
}

// class Sun{}

Wind::Velocity{
  any(Battery.produce ch);
  eq(ch.time, end);
  //windPower(ch.quantity, m_velocity);
  eq(ch.quantity, m_velocity);
}

// Sun::XXX

//*****************************************************************
class Mission extends Timeline {
  predicate SampleCycle{
    // Euclidean cordinates
    int m_x;
    int m_y;
  }
}

Mission::SampleCycle{
  contains(Rover.Sample sm);
  eq(sm.m_x, m_x);
  eq(sm.m_y, m_y);
  eq(duration, [1 90]);
}

Rover::Sample{
  // we care that it consumes the battery
  any(Battery.consume bc);
  // These should all be equivalent and all supported
  temporalDistance(start, [1 2], bc.time);

  // battery consumption and duration depend on work
  // should we pass coordinates here?
  //sampleBattery( bc.quantity, m_x, m_y );
  eq(bc.quantity, 10.0);

  //sampleDuration( duration, m_x, m_y );
  eq(duration, [3 10]);

  // What do we do after
  bool sw_after;
  if (sw_after==false) {
     meets(Drive dr);
     eq(dr.m_from_x, m_x);
     eq(dr.m_from_y, m_y);
  }
  if (sw_after==true) {
     meets(Standby sb);
     eq(sb.m_x, m_x);
     eq(sb.m_y, m_y);
  }
}

Rover::Drive{
  // we care that it consumes the battery
  any(Battery.consume bc);
  eq(bc.time, start);
  // to begin with, the charge is always negative
  // it is also never more than the battery's level (TBD as an argument)
  eq(bc.quantity, [0 50]);


  // Ensure that the end points are different

  float x_sq, y_sq, dist;
  diffSquare( m_from_x, m_to_x, x_sq );
  diffSquare( m_from_y, m_to_y, y_sq );
  distanceSquares( x_sq, y_sq, dist );
  neq( dist, 0 );

  // Battery consumption and driving duration are functions of distance
  //driveBattery( bc.quantity, dist );
  float intermediateQuantity;
  mulEq(dist, 4, intermediateQuantity);
  eq(intermediateQuantity, bc.quantity);

 //driveDuration( duration, dist );
  mulEq(dist, [1 2], duration);

  // What do we do after
  bool sw_after;
  if (sw_after==false) {
     meets(Sample sm);
     eq(m_to_x, sm.m_x);
     eq(m_to_y, sm.m_y);
  }
  if (sw_after==true) {
     meets(Standby sb);
     eq(sb.m_x, m_to_x);
     eq(sb.m_y, m_to_y);
  }
}

Rover::Standby{
  // just do not do anything, wait

  // What do we do after
  bool sw_after;
  if (sw_after==false) {
     meets(Drive dr);
     eq(dr.m_from_x, m_x);
     eq(dr.m_from_y, m_y);
  }
  if (sw_after==true) {
     meets(Sample sm);
     eq(sm.m_x, m_x);
     eq(sm.m_y, m_y);
  }
}

PlannerConfig world = new PlannerConfig(10, 101, 350);

Rover rover = new Rover(0.0, 0.0, 100.0, 70.0, 70.0);
Wind wind = new Wind();
Mission mission = new Mission();

close();

// Initially Rover stays at the source and does nothing
goal(Rover.Standby roverInit);
roverInit.m_x.specify(0);
roverInit.m_y.specify(0);
roverInit.start.specify(10);
////roverInit.activate();

// Wind pattern
goal(Wind.Velocity w1);
w1.start.specify(10);
w1.duration.specify(10);
w1.m_velocity.specify(0);
////w1.activate();

goal(Wind.Velocity w2);
w2.start.specify(20);
w2.duration.specify(10);
w2.m_velocity.specify(10);
////w2.activate();

goal(Wind.Velocity w3);
w3.start.specify(30);
w3.duration.specify(10);
w3.m_velocity.specify(20);
////w3.activate();

goal(Wind.Velocity w4);
w4.start.specify(40);
w4.duration.specify(10);
w4.m_velocity.specify(40);
////w4.activate();

// Mission goals
goal(Mission.SampleCycle goal1);
goal1.m_x.specify(3);
goal1.m_y.specify(0);
goal1.start.specify([10 100]);
goal1.end.specify([10 100]);
////goal1.activate();

goal(Mission.SampleCycle goal2);
goal2.m_x.specify(3);
goal2.m_y.specify(4);
goal2.start.specify([10 100]);
goal2.end.specify([10 100]);
////goal2.activate();

leq( goal1.end, goal2.start );
