#include "Constraints.nddl"

// Use enumerations to declare user-defined collections where the elements are primitves
typedef int {1, 2, 3, 4} Ints; // Enumeration of integers - numeric with no decimal
typedef float {1.2, 2.3, 3.4, 67.9} Floats; // Enumeration of floats - decimal point used
typedef string {"s1", "s2", "s3"} Strings; // Enumeration of strings... test altered for consistancy
enum Symbol {s4, s5, s6}; // Enumeration of symbols
enum Fruit {Apple, Orange, Banana}; // Enumeration of symbols
enum Speed {Slow, Medium, Fast}; // Enumeration of symbols
enum Color {Red, Orange, Yellow, Green, Blue};

// Allocate Variables of primitive type and eneumerated version of same type
int a;
Ints b;
float c;
Floats d;
string e = "s1";
Strings f;
Symbol g; // Cannot allocate a symbol singleton! No primitive for it.
Color color;
Fruit fruit = Orange;

// Post equality constraints demonstrating compatibility
eq(a, b);
eq(c, d);
eq(e, f);
eq(g, s4);

// TODO: this is not supported by interpreter
eq(color, Orange);
