///////////////////////////////////////////////////////////
// Defines a framework in Nddl for integration with EUROPA.
// Author: Conor McGann
// Date: April, 2004
///////////////////////////////////////////////////////////

#include "Constraints.nddl"

// Declare enumeration for Token States
enum TokenStates {INACTIVE, ACTIVE, MERGED, REJECTED} 

// Declare a marker class to indicate the base class, even if it
// is going to include predicates.
// class Object {}

// Declare a marker class to indicate the base class should be a Timeline
// which enforces a total order. This should only arise where we
// have predicates!
class Timeline {}

// Base class for adding multi-capacity, numeric resources to the NDDL language.
class Resource {
 // Specified resource properties
 float initialCapacity;
 float levelLimitMin;
 float levelLimitMax;
 float productionRateMax;
 float productionMax;
 float consumptionRateMax;
 float consumptionMax;

 // The only predicate we allow
 predicate change{
  float quantity;
 }

 Resource(float ic, float ll_min, float ll_max){
  initialCapacity = ic;
  levelLimitMin = ll_min;
  levelLimitMax = ll_max;
  productionRateMax = +inff;
  productionMax = +inff;
  consumptionRateMax = -inff;
  consumptionMax = -inff;
 }

 Resource(float ic, float ll_min, float ll_max, 
	float p_max, float c_max){
  initialCapacity = ic;
  levelLimitMin = ll_min;
  levelLimitMax = ll_max;
  productionRateMax = p_max; 
  productionMax = p_max; 
  consumptionRateMax = -16.0; // !!!!!!!! bug work around cm; // -inf;
  consumptionMax = c_max; // -inf;
 }

 Resource(float ic, float ll_min, float ll_max, 
	float pr_max, float p_max, float cr_max, float c_max){
  initialCapacity = ic;
  levelLimitMin = ll_min;
  levelLimitMax = ll_max;
  productionRateMax = pr_max; 
  productionMax = p_max; 
  consumptionRateMax = cr_max; 
  consumptionMax = c_max; 
 }
	
 Resource() {
  initialCapacity = 0.0;
  levelLimitMin = -inff;
  levelLimitMax = +inff;
  productionRateMax = +inff;
  productionMax = +inff;
  consumptionRateMax = -inff;
  consumptionMax = -inff;
 }
}

//typedef float [0.0 +inff] posfloat;

class Reservoir {
  float initialCapacity;
  float levelLimitMin;
  float levelLimitMax;
  float productionRateMax = [0.0 +inff];
  float productionMax = [0.0 +inff];
  float consumptionRateMax = [0.0 +inff];
  float consumptionMax = [0.0 +inff];
  //posfloat productionRateMax;
  //posfloat productionMax;
  //posfloat consumptionRateMax;
  //posfloat consumptionMax;

  predicate produce {
    //posfloat quantity;
    float quantity = [0.0 +inff];
  }
  
  predicate consume {
    //posfloat quantity;
    float quantity = [0.0 +inff];
  }

  Reservoir(float ic, float ll_min, float ll_max) {
    initialCapacity = ic;
    levelLimitMin = ll_min;
    levelLimitMax = ll_max;
    productionRateMax = +inff;
    productionMax = +inff;
    consumptionRateMax = +inff;
    consumptionMax = +inff;    
  }

  Reservoir(float ic, float ll_min, float ll_max, float p_max, float c_max) {
    initialCapacity = ic;
    levelLimitMin = ll_min;
    levelLimitMax = ll_max;
    productionRateMax = +inff;
    productionMax = p_max;
    consumptionRateMax = +inff;
    consumptionMax = c_max;      
  }

  Reservoir(float ic, float ll_min, float ll_max, float pr_max, float p_max,
            float cr_max, float c_max) {
    initialCapacity = ic;
    levelLimitMin = ll_min;
    levelLimitMax = ll_max;
    productionRateMax = pr_max;
    productionMax = p_max;
    consumptionRateMax = cr_max;
    consumptionMax = c_max;      
  }
}

class Reusable {
  float capacity;
  float levelLimitMin;
  float consumptionMax;
  float consumptionRateMax;
 
  predicate uses {
    float quantity = [0.0 +inff];
  }

  Reusable(float c, float ll_min) {
    capacity = c;
    levelLimitMin = ll_min;
    consumptionMax = +inff;
    consumptionRateMax = +inff;
  }

  Reusable(float c, float ll_min, float cr_max) {
    capacity = c;
    levelLimitMin = ll_min;
    consumptionMax = +inff;
    consumptionRateMax = cr_max;
  }

  Reusable(float c, float ll_min, float c_max, float cr_max) {
    capacity = c;
    levelLimitMin = ll_min;
    consumptionMax = c_max;
    consumptionRateMax = cr_max;
  }
}

class Unary {
  float consumptionMax;

  Unary() {
    consumptionMax = +inff;
  }

  Unary(float c_max) {
    consumptionMax = c_max;
  }
  predicate use {}
}

/**
 * A UnaryResource is a reusable, discrete, single-capacity resource
 * and is efficiently supported using a timeline rather than
 * independent consume and produce transactions.
 */
class UnaryResource extends Timeline {
 predicate uses{
  eq(state, ACTIVE); 
 }
}

/**
 * The StringData class is a base class for sets of arbitrary string data.
 */

class StringData {
  string data;
  StringData(string _data) { data = _data;}
}
