// simple-predicate.nddl

#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

  class Reusable;
  typedef Id<Reusable> ReusableId;
  typedef ObjectDomain ReusableDomain;
  
  class Unary;
  typedef Id<Unary> UnaryId;
  typedef ObjectDomain UnaryDomain;
  
  class UnaryResource;
  typedef Id<UnaryResource> UnaryResourceId;
  typedef ObjectDomain UnaryResourceDomain;
  
  class StringData;
  typedef Id<StringData> StringDataId;
  typedef ObjectDomain StringDataDomain;
  
  class Foo;
  typedef Id<Foo> FooId;
  typedef ObjectDomain FooDomain;
  
  class Bar;
  typedef Id<Bar> BarId;
  typedef ObjectDomain BarDomain;
  
  class World;
  typedef Id<World> WorldId;
  typedef ObjectDomain WorldDomain;
  
  
  
  // Plasma.nddl:10 TokenStates
  typedef SymbolDomain TokenStates;
  TokenStates TokenStatesBaseDomain();
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Timeline
  
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Resource
  
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Reservoir
  
  
  // Plasma.nddl:137 Reusable
  class Reusable : public Object {
  public:
    Reusable(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Reusable(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Reusable(const ObjectId& parent, const LabelStr& name);
    Reusable(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class uses;
    typedef Id<uses> usesId;
    ConstrainedVariableId capacity; // SchemaWriter::declareVariable
    ConstrainedVariableId levelLimitMin; // SchemaWriter::declareVariable
    ConstrainedVariableId consumptionMax; // SchemaWriter::declareVariable
    ConstrainedVariableId consumptionRateMax; // SchemaWriter::declareVariable
    
    // Plasma.nddl:143 uses
    class uses : public NddlToken {
    public:
      uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Reusable::uses, Reusable.uses);
      
      ConstrainedVariableId quantity; // SchemaWriter::declareVariable
    };
    
    // Plasma.nddl:137 Reusable
    virtual void constructor(float c, float ll_min);
    
    // Plasma.nddl:137 Reusable
    virtual void constructor(float c, float ll_min, float cr_max);
    
    // Plasma.nddl:137 Reusable
    virtual void constructor(float c, float ll_min, float c_max, float cr_max);
  };
  
  // Plasma.nddl:169 Unary
  class Unary : public Object {
  public:
    Unary(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Unary(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Unary(const ObjectId& parent, const LabelStr& name);
    Unary(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class use;
    typedef Id<use> useId;
    ConstrainedVariableId consumptionMax; // SchemaWriter::declareVariable
    
    // Plasma.nddl:169 Unary
    virtual void constructor();
    
    // Plasma.nddl:169 Unary
    virtual void constructor(float c_max);
    
    // Plasma.nddl:179 use
    class use : public NddlToken {
    public:
      use(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      use(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Unary::use, Unary.use);
      
    };
  };
  
  // Plasma.nddl:187 UnaryResource
  class UnaryResource : public Timeline {
  public:
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& name);
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class uses;
    typedef Id<uses> usesId;
    
    // Plasma.nddl:188 uses
    class uses : public NddlToken {
    public:
      uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(UnaryResource::uses, UnaryResource.uses);
      
    };
  };
  
  // Plasma.nddl:197 StringData
  class StringData : public Object {
  public:
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& name);
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId data; // SchemaWriter::declareVariable
    
    // Plasma.nddl:197 StringData
    virtual void constructor(const LabelStr& _data);
  };
  
  
  // simple-predicate.nddl:4 Locations
  typedef SymbolDomain Locations;
  Locations LocationsBaseDomain();
  
  // simple-predicate.nddl:8 Foo
  class Foo : public Timeline {
  public:
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class pred1;
    typedef Id<pred1> pred1Id;
    ConstrainedVariableId m_0; // SchemaWriter::declareVariable
    ConstrainedVariableId m_1; // SchemaWriter::declareVariable
    
    // simple-predicate.nddl:12 pred1
    class pred1 : public NddlToken {
    public:
      pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::pred1, Foo.pred1);
      
      ConstrainedVariableId m_0; // SchemaWriter::declareVariable
      ConstrainedVariableId m_1; // SchemaWriter::declareVariable
      ConstrainedVariableId m_2; // SchemaWriter::declareVariable
      ConstrainedVariableId m_3; // SchemaWriter::declareVariable
      ConstrainedVariableId m_4; // SchemaWriter::declareVariable
    };
    
    // simple-predicate.nddl:8 Foo
    virtual void constructor();
    
    // simple-predicate.nddl:8 Foo
    virtual void constructor(const LabelStr& s);
  };
  
  // simple-predicate.nddl:35 Bar
  class Bar : public Foo {
  public:
    Bar(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Bar(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Bar(const ObjectId& parent, const LabelStr& name);
    Bar(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class pred1;
    typedef Id<pred1> pred1Id;
    
    // simple-predicate.nddl:36 pred1
    class pred1 : public Foo::pred1 {
    public:
      pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Bar::pred1, Bar.pred1);
      
    };
  };
  
  // simple-predicate.nddl:45 World
  class World : public Timeline {
  public:
    World(const PlanDatabaseId& planDatabase, const LabelStr& name);
    World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class initialState;
    typedef Id<initialState> initialStateId;
    ConstrainedVariableId m_foo1; // SchemaWriter::declareVariable
    ConstrainedVariableId m_bar1; // SchemaWriter::declareVariable
    
    // simple-predicate.nddl:48 initialState
    class initialState : public NddlToken {
    public:
      initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(World::initialState, World.initialState);
      
    };
    
    // simple-predicate.nddl:45 World
    virtual void constructor();
  };
} // End NDDL namespace
