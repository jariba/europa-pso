#include "Plasma.nddl"

class Location{
 string name;
 Location(string _name){
  name = _name;
 }
}

class Path{
 Location from, to;
 int m_int; // To test intervals (GNATS 3132)
 
 Path(Location _from, Location _to){
  from = _from;
  to = _to;
  m_int = 1;
 }
}

class World extends Timeline {
 Location rock;
 Location hill;
 Location lander;
 Location martianCity;

 Path path1;
 Path path2;
 Path path3;
 Path path4;

 predicate Going{
  Location from;
  Location to;
  neq(from, to);
 }

 predicate initialState{}
 World(){
  rock = new Location("ROCK");
  hill = new Location("HILL");
  lander = new Location("LANDER");
  martianCity = new Location("MARTIAN_CITY");
  path1 = new Path(rock, hill);
  path2 = new Path(lander, hill);
  path3 = new Path(martianCity, hill);
  path4 = new Path(hill, lander);
 }
}

World::Going{
 int intVar;

 Path path;
 eq(path.from, from);
 eq(path.to, to);
 eq(path.m_int, intVar);

 Path p1;
}

World::initialState{
 any(Going going);
 eq(going.from, object.rock);
 eq(going.to, object.hill);

 Path p1;
 eq(p1.from, going.from);
 eq(p1.to, going.to);
 eq(p1.m_int, 1);


 // Now create a filter that will remove all values
 // but verify that no inconsistency is triggered. Note that if
 // the keyword 'filterOnly' is ommitted, then it will cause an inconsistency
 bool hasPath;
 if(hasPath){
  Path p2;
  eq(p2.from, going.from);
  eq(p2.to, going.to);
  eq(p2.m_int, 2);

  Location loc1;
  Location loc2;
  eq(loc1, object.rock);
  eq(loc2, object.rock);

  int filterVar;
  Path p4;
  eq(p4.from, loc1);
  eq(p4.to, loc2);
  eq(p4.m_int, filterVar);
 }

 Path p3;

 // Make sure that the model compiles if the filter
 // variable name is a substring of the constraint argument
 Path g;
 eq(g.from, going.from);

 // A no-op to test generation of code as an explcit guard on a proxy variable.
 // Arises in GNATS_3161
 if(g.m_int == 1){}
}

World world = new World();
close();
goal(World.initialState g0);
