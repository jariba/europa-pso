#include "Plasma.nddl"
#include "Resources.nddl"
#include "PlannerConfig.nddl"

class Decomposition { Decomposition() {} predicate execute {} }
Decomposition::execute {}

// TODO: add "object." prefix to member variable uses inside an action

class Location;
class Instrument;
class Battery;

class Rover 
{
    Battery battery_; 
    Instrument instrument_;
    Location location_;
    predicate Go {Location origin;Location dest;}
    predicate PhoneHome {}
    predicate PhoneLander {} 
    predicate TakeSample {Location rock;}
    predicate setValue {  Battery battery_; Instrument instrument_; Location location_; }

    Rover()
    {
        battery_ = new Battery();
        instrument_ = new Instrument();
        location_ = new Location();
    }
}

class Location extends Timeline
{
    predicate setValue {  
        string name; 
        int x; 
        int y; 
        int mustJustify = [0 1];
        Rover obj_Rover_location_;
    }
}

Location::setValue
{
    if (mustJustify == 1) {
        if (obj_Rover_location_) {
            met_by(obj_Rover_location_.Go v);
            //leq(start,v.end);
            //lt(v.end,end);            
        }
    }
}

class Path extends Timeline
{
    predicate setValue {  float cost; Location dest; string name; Location origin; }
}

Path::setValue
{
}

enum StowStateEnum {stowing,stowed,unstowing,unstowed};

class StowState extends Timeline
{
    predicate setValue { StowStateEnum value; }
}

StowState::setValue {}

StowState::setValue
{
}

class Battery extends Reusable
{
    Battery()
    {
        super(100.0,0.0);
    }
}

class Instrument
{
    StowState state_;
    predicate Place {Location rock;}
    predicate Sample {Location rock;}
    predicate Stow {}
    predicate TakeSample {Location rock;}
    predicate Unstow {}
    predicate setValue {  StowState state_; }

    Instrument()
    {
        state_ = new StowState();
    }
}

Instrument::Sample
{
    eq(duration,10);

}

Instrument::Place
{
    eq(duration,3);

}

Instrument::Stow
{
    eq(duration,2);

    // TODO:  generate NDDL for TransitionChangeFluent 
    // state_->"unstowed"->"stowing"->"stowed"
}

Instrument::Unstow
{
    eq(duration,2);

    // TODO:  generate NDDL for TransitionChangeFluent 
    // state_->"stowed"->"unstowing"->"unstowed"
}

Instrument::TakeSample
{
    // Decomposition start
    any(Decomposition.execute _ActionSet_5);
    any(Unstow _v_0);
    _ActionSet_5 contains _v_0;
    any(Place _v_1);
    _ActionSet_5 contains _v_1;
    any(Sample _v_2);
    _ActionSet_5 contains _v_2;
    any(Stow _v_3);
    _ActionSet_5 contains _v_3;
    _v_0 before _v_1;
    _v_1 before _v_2;
    _v_2 before _v_3;
    
    // TODO: containment relationship needs to be generated correctly
    leq(start,_ActionSet_5.start);
    leq(_ActionSet_5.end,end);
    eq(_ActionSet_5.start,_v_0.start);
    eq(_ActionSet_5.end,_v_3.end);

    // Decomposition end
}

Instrument::setValue
{
}

Rover::Go
{
    eq(duration,10);

    Path p;
    int act_dur;

    // CONDITION start
    any(object.location_.setValue _v_21);
    // TODO: generate this
    eq(_v_21.obj_Rover_location_,object);
    eq(_v_21.mustJustify,1);
    
    any(origin.setValue _v_22);
    // TODO: can't say contains
    //_v_22 contains _v_21;
    eq(_v_21.name,_v_22.name);
    eq(_v_21.x,_v_22.x);
    eq(_v_21.y,_v_22.y);

    leq(_v_21.start,start);
    lt(start,_v_21.end);
    // TODO: can't say contains
    leq(_v_22.start,start);
    lt(start,_v_22.end);
    
    // CONDITION end

    // CONDITION start
    //neq(origin,dest);
    //eq(p.origin,origin);
    //eq(p.dest,dest);
    // CONDITION end

    // TODO! Location is undefined in the middle
    any(object.location_.setValue _v_999);
    eq(_v_999.x,-1);
    eq(_v_999.y,-1);
    addEq(start,1,_v_999.start);
    eq(end,_v_999.end);

    // EFFECT start
    any(object.location_.setValue _v_23);
    // TODO: generate this
    //eq(_v_23.obj_Rover_location_,object);

    any(dest.setValue _v_24);
    //_v_24 contains _v_23;
    eq(_v_23.name,_v_24.name); 
    eq(_v_23.x,_v_24.x);
    eq(_v_23.y,_v_24.y);    
    
    leq(_v_23.start,end);
    lt(end,_v_23.end);
    leq(_v_24.start,end);
    lt(end,_v_24.end);

    // EFFECT end

    // TODO:  generate NDDL for ResourceChangeFluent
    contains(object.battery_.uses _v_25);
    eq(_v_25.quantity,100/*p.cost*/);
}

Rover::PhoneHome
{
    eq(duration,10);

    // TODO:  generate NDDL for ResourceChangeFluent
    contains(object.battery_.uses _v_26);
    eq(_v_26.quantity,60);
}

Rover::PhoneLander
{
    eq(duration,5);

    // TODO:  generate NDDL for ResourceChangeFluent
    contains(object.battery_.uses _v_27);
    eq(_v_27.quantity,20);
}

Rover::TakeSample
{
    //eq(duration,20);

    // CONDITION start
    any(object.location_.setValue _v_28);
    // TODO: generate this
    eq(_v_28.obj_Rover_location_,object);
    eq(_v_28.mustJustify,1);

    any(rock.setValue _v_29);
    //_v_29 contains _v_28;
    eq(_v_28.name,_v_29.name);
    eq(_v_28.x,_v_29.x);
    eq(_v_28.y,_v_29.y);
    leq(_v_28.start,start);
    leq(end,_v_28.end);
    leq(_v_29.start,start);
    leq(end,_v_29.end);

    // CONDITION end

    // Decomposition start
    any(Decomposition.execute _ActionSet_12);
    any(object.instrument_.TakeSample _v_6);
    _ActionSet_12 contains _v_6;
    any(Decomposition.execute _ActionSet_10);
    int _v_30= [0 1];
    if (_v_30 == 0) { 
        any(PhoneLander _v_7);
        // TODO generate equals instead of contains
       _ActionSet_10 equals _v_7;               
    }
    if (_v_30 == 1) { 
        any(PhoneHome _v_8);
       _ActionSet_10 equals _v_8;
    }
    _ActionSet_12 contains _ActionSet_10;
    _v_6 before _ActionSet_10;
    // TODO: temporal qualifier was generated wrong
    leq(start,_ActionSet_12.start);
    leq(_ActionSet_12.end,end);

    //TODO: add bounds for decomposition 
    eq(_ActionSet_12.start,_v_6.start);
    eq(_ActionSet_12.end,_ActionSet_10.end);

    // Decomposition end
}

Rover::setValue
{
}

