constraint leq(int x, int y) native;
constraint eq(int x, int y) native;
constraint eq(REC_Past x, REC_Past y) native;
constraint BOUNDS_RECORD_END_STORAGE(int Output, int Start_Storage, int End_Storage,
                                     Observation_Level ReqFPRate, Observation_Level ReqMosRate,
                                     int Length) native;
constraint BOUNDS_RECORD_START_STORAGE(int Output, int End_Storage, int Start_Storage,
                                       Observation_Level ReqFPRate, Observation_Level ReqMosRate,
                                       int Length) native;

// ------------------------------------------------------------------------
//               Object Classes
// ------------------------------------------------------------------------

class DNP_Science {
    Scan_Platform_Timeline Scan_Platform = new Scan_Platform_Timeline();
    Fields_and_Particles_Timeline Fields_and_Particles = new Fields_and_Particles_Timeline();
}

class Scan_Platform_Timeline {
    predicate Mosaic_LO {
        int ID;
        Observation_Level Data_Rate;
        int Length;

        eq(ID,[0 +inf]);
        eq(Length,[0 +inf]);
    }
    predicate Mosaic_HI {
        int ID;
        Observation_Level Data_Rate;
        int Length;

        eq(ID,[0 +inf]);
        eq(Length,[0 +inf]);
    }
    predicate Scan_Idle {}
}

class Fields_and_Particles_Timeline {
    predicate F_and_P_Observation_LO {
        int ID;
        Observation_Level Data_Rate;
        int Length;

        eq(ID,[0 +inf]);
        eq(Length,[0 +inf]);
    }
    predicate F_and_P_Observation_HI {
        int ID;
        Observation_Level Data_Rate;
        int Length;

        eq(ID,[0 +inf]);
        eq(Length,[0 +inf]);
    }
    predicate F_and_P_Idle {}
}

class DNP_Data {
    SSR_Storage_Use_Timeline SSR_Storage_Use = new SSR_Storage_Use_Timeline();
}

class SSR_Storage_Use_Timeline {
    predicate Record {
        int Start_Storage, End_Storage, Length;
        Observation_Level ReqFPRate;
        Observation_Level ReqMosRate;
        REC_Past Rec_Prior;
        REC_Future Rec_Post;
        Record_Obs What_obs;
        int DSS_Opp_Num;

        eq(Start_Storage,[0 9000000]);
        eq(End_Storage,[0 9000000]);
        eq(Length,[0 +inf]);
        eq(DSS_Opp_Num,[0 +inf]);
    }
    predicate Playback {
        int Start_Storage, End_Storage, Playback_Rate;
        DSS_Id Location;
        int DSS_Opp_Num;
        int Allowed_Earlier_Opps;
        End_Flag Flagged_End;
        PB_Past PB_Prior;

        eq(Start_Storage,[0 9000000]);
        eq(End_Storage,[0 9000000]);
        eq(DSS_Opp_Num,[0 +inf]);
        eq(Playback_Rate,[0 +inf]);
        eq(Allowed_Earlier_Opps,[0 +inf]);
    }
    predicate Constant_Storage {
        int SSR_Storage;
        int DSS_Opp_Num;
        End_Flag Flagged_End;
        CS_Past CS_Prior;
        CS_Future CS_Post;

        eq(SSR_Storage,[0 9000000]);
        eq(DSS_Opp_Num,[0 +inf]);
    }
}

class DNP_Comm {
    Comm_Activity_Timeline Comm_Activity = new Comm_Activity_Timeline();
}

class Comm_Activity_Timeline {
    predicate Pre_Cal {
        int Duration;
        End_Flag Flagged_End;
    }
    predicate Post_Cal {
        int Duration;
        End_Flag Flagged_End;
    }
    predicate Communicate {
        int Pre_Cal_Duration;
        int Post_Cal_Duration;
        DSS_Id Location;
        int Playback_Rate;
        End_Flag Flagged_End;

        eq(Playback_Rate,[0 +inf]);
    }
    predicate Comm_Idle {}
}

class DSS_Any {
    DSS_Availability_Timeline DSS_Availability = new DSS_Availability_Timeline();
}

class DSS_Availability_Timeline {
    predicate Downlink_Window {
        int Downlink_Rate, Pre_Cal_Time, Post_Cal_Time;
        DSS_Id loc;
        int Opp_Number;

        eq(Downlink_Rate,[0 +inf]);
        eq(Opp_Number,[0 +inf]);
    }
    predicate No_Window {}
}

// ------------------------------------------------------------------------
//                        Labels
// ------------------------------------------------------------------------

enum Observation_Level {ObsNo, ObsLo, ObsHi}
enum Done_Flag {Done, Undone}
enum End_Flag {End, Noend}
enum DSS_Id {DSS_15, DSS_45, DSS_14, DSS_65}

// Disjunction variable value declarations
// FP_Idle

enum FP_Idle_Past {FP_HI_Bef, FP_LO_Bef}
enum FP_Idle_Future {FP_HI_Aft, FP_LO_Aft}

// Scan_Idle

enum Mos_Idle_Past {Mos_HI_Bef, Mos_LO_Bef}
enum Mos_Idle_Future {Mos_HI_Aft, Mos_LO_Aft}

// Would be nice to be able to parse enumerated list
// compatibilities; would reduce this to 2 label sets

enum PB_Past {CS_Bef_PB, Rec_Bef_PB}
enum CS_Past {Rec_Bef_CS, PB_Bef_CS}
enum CS_Future {Rec_Aft_CS, PB_Aft_CS}
enum REC_Past {CS_Bef_Rec, Rec_Bef_Rec, PB_Bef_Rec}
enum REC_Future {CS_Aft_Rec, Rec_Aft_Rec, PB_Aft_Rec}

// Record-for

enum Record_Obs {FP_HI, FP_LO, Mos_HI, Mos_LO}

// ---------------------------------------------------------------------
// 
//   Compatibilities for DNP example
//   AKJ modifications: (all present in DNP)
//   removed some compats; fp, mosaic idles are simplified, 
//   record no longer starts observations
//   reduced the size of the ssr to provoke playbacks between observations
//   
//   JJ modifications: (Only present in this file so far)
//   comm idles are simplified in same way as fp, mosaic idles
//   communicate no longer equal to playback (this was redundant anyway)
//     (although this is irrelevant if the DSS_Opp_Num parameter constraint does the right thing)
//   Added end parameter flag to communicate, pre-cal and post-cal for heuristics
//   Added opid flag to Records to prevent many playbacks within single downlink window
//     (this flag propagates backwards only.)
//     
// ---------------------------------------------------------------------

Fields_and_Particles_Timeline::F_and_P_Observation_HI {
    DNP_Science DNP_Science_0;
    met_by(DNP_Science_0.Fields_and_Particles.F_and_P_Idle);
    DNP_Science DNP_Science_1;
    meets(DNP_Science_1.Fields_and_Particles.F_and_P_Idle);
    DNP_Data DNP_Data_0;
    starts(DNP_Data_0.SSR_Storage_Use.Record r);
    eq(r.Length,Length);
    eq(r.ReqFPRate,Data_Rate);
    eq(r.ReqMosRate,ObsNo);
    eq(r.What_obs,FP_HI);
}

Fields_and_Particles_Timeline::F_and_P_Observation_LO {
    DNP_Science DNP_Science_0;
    met_by(DNP_Science_0.Fields_and_Particles.F_and_P_Idle);
    DNP_Science DNP_Science_1;
    meets(DNP_Science_1.Fields_and_Particles.F_and_P_Idle);
    DNP_Data DNP_Data_0;
    starts(DNP_Data_0.SSR_Storage_Use.Record r);
    eq(r.Length,Length);
    eq(r.ReqFPRate,Data_Rate);
    eq(r.ReqMosRate,ObsNo);
    eq(r.What_obs,FP_LO);
}

Fields_and_Particles_Timeline::F_and_P_Idle {
    eq(duration,[1 +inf]);
}

// -----------------------------------------

Scan_Platform_Timeline::Mosaic_HI {
    DNP_Science DNP_Science_0;
    met_by(DNP_Science_0.Scan_Platform.Scan_Idle);
    DNP_Science DNP_Science_1;
    meets(DNP_Science_1.Scan_Platform.Scan_Idle);
    DNP_Data DNP_Data_0;
    starts(DNP_Data_0.SSR_Storage_Use.Record r);
    eq(r.Length,Length);
    eq(r.ReqFPRate,ObsNo);
    eq(r.ReqMosRate,Data_Rate);
    eq(r.What_obs,Mos_HI);
}

Scan_Platform_Timeline::Mosaic_LO {
    DNP_Science DNP_Science_0;
    met_by(DNP_Science_0.Scan_Platform.Scan_Idle);
    DNP_Science DNP_Science_1;
    meets(DNP_Science_1.Scan_Platform.Scan_Idle);
    DNP_Data DNP_Data_0;
    starts(DNP_Data_0.SSR_Storage_Use.Record r);
    eq(r.Length,Length);
    eq(r.ReqFPRate,ObsNo);
    eq(r.ReqMosRate,Data_Rate);
    eq(r.What_obs,Mos_LO);
}

Scan_Platform_Timeline::Scan_Idle {
    eq(duration,[1 +inf]);
}

// -----------------------------------------

SSR_Storage_Use_Timeline::Record {
    eq(duration,[1 +inf]);
    BOUNDS_RECORD_END_STORAGE(End_Storage,Start_Storage,ReqFPRate,ReqMosRate,Length);
    BOUNDS_RECORD_START_STORAGE(Start_Storage,End_Storage,ReqFPRate,ReqMosRate,Length);
    eq(Rec_Prior,{CS_Bef_Rec,Rec_Bef_Rec});
    switch (Rec_Prior) {
    case CS_Bef_Rec:
        DNP_Data DNP_Data_0;
        met_by(DNP_Data_0.SSR_Storage_Use.Constant_Storage cs);
        eq(cs.SSR_Storage,Start_Storage);
        eq(cs.DSS_Opp_Num,DSS_Opp_Num);
        eq(cs.CS_Post,Rec_Aft_CS);
    case Rec_Bef_Rec:
        DNP_Data DNP_Data_1;
        met_by(DNP_Data_1.SSR_Storage_Use.Record r);
        eq(r.End_Storage,Start_Storage);
        eq(r.Rec_Post,Rec_Aft_Rec);
        eq(r.DSS_Opp_Num,DSS_Opp_Num);
    }
    switch (follow) {
    case Rec_Aft_Rec:
        DNP_Data DNP_Data_2;
        meets(DNP_Data_2.SSR_Storage_Use.Record r);
        eq(r.Start_Storage,End_Storage);
        eq(r.Rec_Prior,Rec_Bef_Rec);
    case PB_Aft_Rec:
        DNP_Data DNP_Data_3;
        meets(DNP_Data_3.SSR_Storage_Use.Playback p);
        eq(p.Start_Storage,End_Storage);
        eq(p.PB_Prior,Rec_Bef_PB);
    case CS_Aft_Rec:
        DNP_Data DNP_Data_4;
        meets(DNP_Data_4.SSR_Storage_Use.Constant_Storage cs);
        eq(cs.SSR_Storage,End_Storage);
        eq(cs.CS_Prior,Rec_Bef_CS);
    }
}

SSR_Storage_Use_Timeline::Playback {
    eq(duration,[100 +inf]);
    COMPUTE_PLAYBACK_DURATION(duration,Start_Storage,End_Storage,Playback_Rate,start,end);
    BOUNDS_PLAYBACK_START_STORAGE(Start_Storage,End_Storage,Playback_Rate,duration);
    BOUNDS_PLAYBACK_END_STORAGE(End_Storage,Start_Storage,Playback_Rate,duration);
    FIGURE_EARLIER_OP_IDS(Allowed_Earlier_Opps,DSS_Opp_Num);
    switch (Rec_Prior) {
    case CS_Bef_PB:
        DNP_Data DNP_Data_0;
        met_by(DNP_Data_0.SSR_Storage_Use.Constant_Storage cs);
        eq(cs.SSR_Storage,Start_Storage);
        eq(cs.DSS_Opp_Num,Allowed_Earlier_Opps);
        eq(cs.Flagged_End,Flagged_End);
        eq(cs.CS_Post,PB_Aft_CS);
    case Rec_Bef_PB:
        DNP_Data DNP_Data_1;
        met_by(DNP_Data_1.SSR_Storage_Use.Record r);
        eq(r.End_Storage,Start_Storage);
        eq(r.Rec_Prior,PB_Aft_Rec);
        eq(r.DSS_Opp_Num,Allowed_Earlier_Opps);
    }
    // DNP_Data constant storage
    DNP_Data DNP_Data_2;
    meets(DNP_Data_2.SSR_Storage_Use.Constant_Storage cs);
    eq(cs.SSR_Storage,End_Storage);
    eq(cs.CS_Prior,PB_Bef_CS);
    // DNP_Comm communicate
    DNP_Comm DNP_Comm_0;
    equals(DNP_Comm_0.Comm_Activity.Communicate c);
    eq(c.Location,Location);
    eq(c.Playback_Rate,Playback_Rate);
    eq(c.Flagged_End,Flagged_End);

    DNP_Science DNP_Science_0;
    contained_by(DNP_Science_0.Scan_Platform.Scan_Idle);
    DNP_Science DNP_Science_1;
    contained_by(DNP_Science_1.Fields_and_Particles.F_and_P_Idle);
    DSS_Any DNP_Any_0;
    contained_by(DNP_Any_0.DSS_Availability.Downlink_Window dw);
    eq(dw.Downlink_Rate,Playback_Rate);
    eq(dw.loc,Location);
    eq(dw.Opp_Number,DSS_Opp_Num);
}

SSR_Storage_Use_Timeline::Constant_Storage {
    eq(duration,[1 +inf]);

    switch (Rec_Prior) {
    case PB_Bef_CS:
        DNP_Data DNP_Data_0;
        met_by(DNP_Data_0.SSR_Storage_Use.Playback p);
        eq(p.End_Storage,SSR_Storage);
        eq(p.DSS_Opp_Num,DSS_Opp_Num);
        eq(p.Flagged_End,Flagged_End);
    case Rec_Bef_CS:
        DNP_Data DNP_Data_1;
        met_by(DNP_Data_1.SSR_Storage_Use.Record r);
        eq(r.End_Storage,SSR_Storage);
        eq(r.Rec_Post,CS_Aft_Rec);
        eq(r.DSS_Opp_Num,DSS_Opp_Num);
    }
    switch (follow) {
    case Rec_Aft_CS:
        DNP_Data DNP_Data_2;
        meets(DNP_Data_2.SSR_Storage_Use.Record r);
        eq(r.Start_Storage,SSR_Storage);
        eq(r.Rec_Prior,CS_Bef_Rec);
    case PB_Aft_CS:
        DNP_Data DNP_Data_3;
        meets(DNP_Data_3.SSR_Storage_Use.Playback p);
        eq(p.Start_Storage,SSR_Storage);
        eq(p.PB_Prior,CS_Bef_PB);
    }
}

// -----------------------------------------

Comm_Activity_Timeline::Communicate {
    DSS_Any DSS_Any_0;
    contained_by(DSS_Any_0.DSS_Availability.Downlink_Window dw);
    eq(dw.Downlink_Rate,Playback_Rate);
    eq(dw.Pre_Cal_Time,Pre_Cal_Duration);
    eq(dw.Post_Cal_Time,Post_Cal_Duration);
    eq(dw.loc,Location);
    DNP_Comm DNP_Comm_0;
    met_by(DNP_Comm_0.Comm_Activity.Pre_Cal pre);
    eq(pre.Duration,Pre_Cal_Duration);
    eq(pre.Flagged_End,Flagged_End);
    DNP_Comm DNP_Comm_1;
    meets(DNP_Comm_1.Comm_Activity.Post_Cal post);
    eq(post.Duration,Post_Cal_Duration);
    eq(post.Flagged_End,Flagged_End);
}

Comm_Activity_Timeline::Pre_Cal {
    eq(duration,Duration);
    DNP_Comm DNP_Comm_0;
    met_by(DNP_Comm_0.Comm_Activity.Comm_Idle);
    DNP_Comm DNP_Comm_1;
    meets(DNP_Comm_1.Comm_Activity.Communicate c);
    eq(c.Pre_Cal_Duration,Duration);
    eq(c.Flagged_End,Flagged_End);
}

Comm_Activity_Timeline::Post_Cal {
    eq(duration,Duration);
    DNP_Comm DNP_Comm_0;
    meets(DNP_Comm_0.Comm_Activity.Comm_Idle);
    DNP_Comm DNP_Comm_1;
    met_by(DNP_Comm_1.Comm_Activity.Communicate c);
    eq(c.Post_Cal_Duration,Duration);
    eq(c.Flagged_End,Flagged_End);
}

Comm_Activity_Timeline::Comm_Idle {
    eq(duration,[1 +inf]);
}

// -----------------------------------------

DSS_Availability_Timeline::Downlink_Window {
    DSS_Any DSS_Any_0;
    meets(DSS_Any_0.DSS_Availability.No_Window);
    DSS_Any DSS_Any_1;
    met_by(DSS_Any_1.DSS_Availability.No_Window);
}

DSS_Availability_Timeline::No_Window {
    DSS_Any DSS_Any_0;
    meets(DSS_Any_0.DSS_Availability.Downlink_Window);
    DSS_Any DSS_Any_1;
    met_by(DSS_Any_1.DSS_Availability.Downlink_Window);
}


