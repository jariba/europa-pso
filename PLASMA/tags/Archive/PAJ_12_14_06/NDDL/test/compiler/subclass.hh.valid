// subclass.nddl

#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

  class Reusable;
  typedef Id<Reusable> ReusableId;
  typedef ObjectDomain ReusableDomain;
  
  class Unary;
  typedef Id<Unary> UnaryId;
  typedef ObjectDomain UnaryDomain;
  
  class UnaryResource;
  typedef Id<UnaryResource> UnaryResourceId;
  typedef ObjectDomain UnaryResourceDomain;
  
  class StringData;
  typedef Id<StringData> StringDataId;
  typedef ObjectDomain StringDataDomain;
  
  class Foo;
  typedef Id<Foo> FooId;
  typedef ObjectDomain FooDomain;
  
  class Bar;
  typedef Id<Bar> BarId;
  typedef ObjectDomain BarDomain;
  
  class Baz;
  typedef Id<Baz> BazId;
  typedef ObjectDomain BazDomain;
  
  class World;
  typedef Id<World> WorldId;
  typedef ObjectDomain WorldDomain;
  
  
  
  // Plasma.nddl:10 TokenStates
  typedef SymbolDomain TokenStates;
  TokenStates TokenStatesBaseDomain();
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Timeline
  
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Resource
  
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Reservoir
  
  
  // Plasma.nddl:137 Reusable
  class Reusable : public Object {
  public:
    Reusable(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Reusable(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Reusable(const ObjectId& parent, const LabelStr& name);
    Reusable(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class uses;
    typedef Id<uses> usesId;
    ConstrainedVariableId capacity; // SchemaWriter::declareVariable
    ConstrainedVariableId levelLimitMin; // SchemaWriter::declareVariable
    ConstrainedVariableId consumptionMax; // SchemaWriter::declareVariable
    ConstrainedVariableId consumptionRateMax; // SchemaWriter::declareVariable
    
    // Plasma.nddl:143 uses
    class uses : public NddlToken {
    public:
      uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Reusable::uses, Reusable.uses);
      
      ConstrainedVariableId quantity; // SchemaWriter::declareVariable
    };
    
    // Plasma.nddl:137 Reusable
    virtual void constructor(float c, float ll_min);
    
    // Plasma.nddl:137 Reusable
    virtual void constructor(float c, float ll_min, float cr_max);
    
    // Plasma.nddl:137 Reusable
    virtual void constructor(float c, float ll_min, float c_max, float cr_max);
  };
  
  // Plasma.nddl:169 Unary
  class Unary : public Object {
  public:
    Unary(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Unary(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Unary(const ObjectId& parent, const LabelStr& name);
    Unary(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class use;
    typedef Id<use> useId;
    ConstrainedVariableId consumptionMax; // SchemaWriter::declareVariable
    
    // Plasma.nddl:169 Unary
    virtual void constructor();
    
    // Plasma.nddl:169 Unary
    virtual void constructor(float c_max);
    
    // Plasma.nddl:179 use
    class use : public NddlToken {
    public:
      use(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      use(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Unary::use, Unary.use);
      
    };
  };
  
  // Plasma.nddl:187 UnaryResource
  class UnaryResource : public Timeline {
  public:
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& name);
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class uses;
    typedef Id<uses> usesId;
    
    // Plasma.nddl:188 uses
    class uses : public NddlToken {
    public:
      uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(UnaryResource::uses, UnaryResource.uses);
      
    };
  };
  
  // Plasma.nddl:197 StringData
  class StringData : public Object {
  public:
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& name);
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId data; // SchemaWriter::declareVariable
    
    // Plasma.nddl:197 StringData
    virtual void constructor(const LabelStr& _data);
  };
  
  // subclass.nddl:4 Foo
  class Foo : public Timeline {
  public:
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class p0;
    typedef Id<p0> p0Id;
    class p1;
    typedef Id<p1> p1Id;
    ConstrainedVariableId m_0; // SchemaWriter::declareVariable
    ConstrainedVariableId m_1; // SchemaWriter::declareVariable
    ConstrainedVariableId m_2; // SchemaWriter::declareVariable
    ConstrainedVariableId m_3; // SchemaWriter::declareVariable
    
    // subclass.nddl:10 p0
    class p0 : public NddlToken {
    public:
      p0(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      p0(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::p0, Foo.p0);
      
      ConstrainedVariableId arg0; // SchemaWriter::declareVariable
    };
    
    // subclass.nddl:14 p1
    class p1 : public NddlToken {
    public:
      p1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      p1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::p1, Foo.p1);
      
    };
    
    // subclass.nddl:4 Foo
    virtual void constructor();
  };
  
  // subclass.nddl:21 Bar
  class Bar : public Foo {
  public:
    Bar(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Bar(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Bar(const ObjectId& parent, const LabelStr& name);
    Bar(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class p0;
    typedef Id<p0> p0Id;
    class p1;
    typedef Id<p1> p1Id;
    class p2;
    typedef Id<p2> p2Id;
    ConstrainedVariableId m_4; // SchemaWriter::declareVariable
    
    // subclass.nddl:25 p0
    class p0 : public Foo::p0 {
    public:
      p0(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      p0(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Bar::p0, Bar.p0);
      
    };
    
    // subclass.nddl:30 p1
    class p1 : public Foo::p1 {
    public:
      p1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      p1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Bar::p1, Bar.p1);
      
      ConstrainedVariableId arg1; // SchemaWriter::declareVariable
    };
    
    // subclass.nddl:34 p2
    class p2 : public NddlToken {
    public:
      p2(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      p2(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Bar::p2, Bar.p2);
      
    };
  };
  
  // subclass.nddl:37 Baz
  class Baz : public Bar {
  public:
    Baz(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Baz(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Baz(const ObjectId& parent, const LabelStr& name);
    Baz(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class p0;
    typedef Id<p0> p0Id;
    class p1;
    typedef Id<p1> p1Id;
    
    // subclass.nddl:39 p0
    class p0 : public Bar::p0 {
    public:
      p0(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      p0(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Baz::p0, Baz.p0);
      
      ConstrainedVariableId arg1; // SchemaWriter::declareVariable
    };
    
    // subclass.nddl:44 p1
    class p1 : public Bar::p1 {
    public:
      p1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      p1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Baz::p1, Baz.p1);
      
      ConstrainedVariableId arg2; // SchemaWriter::declareVariable
    };
  };
  
  // subclass.nddl:49 World
  class World : public Timeline {
  public:
    World(const PlanDatabaseId& planDatabase, const LabelStr& name);
    World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class initialState;
    typedef Id<initialState> initialStateId;
    ConstrainedVariableId m_foo; // SchemaWriter::declareVariable
    ConstrainedVariableId m_foo2; // SchemaWriter::declareVariable
    ConstrainedVariableId m_bar; // SchemaWriter::declareVariable
    ConstrainedVariableId m_baz; // SchemaWriter::declareVariable
    
    // subclass.nddl:54 initialState
    class initialState : public NddlToken {
    public:
      initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(World::initialState, World.initialState);
      
    };
    
    // subclass.nddl:49 World
    virtual void constructor();
  };
} // End NDDL namespace
