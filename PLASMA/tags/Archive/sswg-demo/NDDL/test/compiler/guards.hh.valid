// guards.nddl

#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

  class Reusable;
  typedef Id<Reusable> ReusableId;
  typedef ObjectDomain ReusableDomain;
  
  class Unary;
  typedef Id<Unary> UnaryId;
  typedef ObjectDomain UnaryDomain;
  
  class UnaryResource;
  typedef Id<UnaryResource> UnaryResourceId;
  typedef ObjectDomain UnaryResourceDomain;
  
  class StringData;
  typedef Id<StringData> StringDataId;
  typedef ObjectDomain StringDataDomain;
  
  class Bar;
  typedef Id<Bar> BarId;
  typedef ObjectDomain BarDomain;
  
  class Foo;
  typedef Id<Foo> FooId;
  typedef ObjectDomain FooDomain;
  
  
  
  // Plasma.nddl:10 TokenStates
  typedef SymbolDomain TokenStates;
  TokenStates TokenStatesBaseDomain();
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Timeline
  
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Resource
  
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Reservoir
  
  
  // Plasma.nddl:137 Reusable
  class Reusable : public Object {
  public:
    Reusable(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Reusable(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Reusable(const ObjectId& parent, const LabelStr& name);
    Reusable(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class uses;
    typedef Id<uses> usesId;
    ConstrainedVariableId capacity; // SchemaWriter::declareVariable
    ConstrainedVariableId levelLimitMin; // SchemaWriter::declareVariable
    ConstrainedVariableId consumptionMax; // SchemaWriter::declareVariable
    ConstrainedVariableId consumptionRateMax; // SchemaWriter::declareVariable
    
    // Plasma.nddl:143 uses
    class uses : public NddlToken {
    public:
      uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Reusable::uses, Reusable.uses);
      
      ConstrainedVariableId quantity; // SchemaWriter::declareVariable
    };
    
    // Plasma.nddl:137 Reusable
    virtual void constructor(float c, float ll_min);
    
    // Plasma.nddl:137 Reusable
    virtual void constructor(float c, float ll_min, float cr_max);
    
    // Plasma.nddl:137 Reusable
    virtual void constructor(float c, float ll_min, float c_max, float cr_max);
  };
  
  // Plasma.nddl:169 Unary
  class Unary : public Object {
  public:
    Unary(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Unary(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Unary(const ObjectId& parent, const LabelStr& name);
    Unary(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class use;
    typedef Id<use> useId;
    ConstrainedVariableId consumptionMax; // SchemaWriter::declareVariable
    
    // Plasma.nddl:169 Unary
    virtual void constructor();
    
    // Plasma.nddl:169 Unary
    virtual void constructor(float c_max);
    
    // Plasma.nddl:179 use
    class use : public NddlToken {
    public:
      use(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      use(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Unary::use, Unary.use);
      
    };
  };
  
  // Plasma.nddl:187 UnaryResource
  class UnaryResource : public Timeline {
  public:
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& name);
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class uses;
    typedef Id<uses> usesId;
    
    // Plasma.nddl:188 uses
    class uses : public NddlToken {
    public:
      uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(UnaryResource::uses, UnaryResource.uses);
      
    };
  };
  
  // Plasma.nddl:197 StringData
  class StringData : public Object {
  public:
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& name);
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId data; // SchemaWriter::declareVariable
    
    // Plasma.nddl:197 StringData
    virtual void constructor(const LabelStr& _data);
  };
  
  
  // guards.nddl:3 Locations
  typedef SymbolDomain Locations;
  Locations LocationsBaseDomain();
  
  
  // guards.nddl:4 StringEnum
  typedef SymbolDomain StringEnum;
  StringEnum StringEnumBaseDomain();
  
  // guards.nddl:6 Bar
  class Bar : public Timeline {
  public:
    Bar(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Bar(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Bar(const ObjectId& parent, const LabelStr& name);
    Bar(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class pred;
    typedef Id<pred> predId;
    ConstrainedVariableId loc; // SchemaWriter::declareVariable
    
    // guards.nddl:8 pred
    class pred : public NddlToken {
    public:
      pred(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      pred(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Bar::pred, Bar.pred);
      
    };
  };
  
  // guards.nddl:11 Foo
  class Foo : public Timeline {
  public:
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class basicToken;
    typedef Id<basicToken> basicTokenId;
    class tokenWithParameters;
    typedef Id<tokenWithParameters> tokenWithParametersId;
    class impliedObjectGuard;
    typedef Id<impliedObjectGuard> impliedObjectGuardId;
    class impliedLocalVariableGuard;
    typedef Id<impliedLocalVariableGuard> impliedLocalVariableGuardId;
    class singletonGuard;
    typedef Id<singletonGuard> singletonGuardId;
    class mixGuardedWithUnguarded;
    typedef Id<mixGuardedWithUnguarded> mixGuardedWithUnguardedId;
    class localVariableGuard;
    typedef Id<localVariableGuard> localVariableGuardId;
    class multipleNestedGuards;
    typedef Id<multipleNestedGuards> multipleNestedGuardsId;
    ConstrainedVariableId arg1; // SchemaWriter::declareVariable
    ConstrainedVariableId arg2; // SchemaWriter::declareVariable
    
    // guards.nddl:11 Foo
    virtual void constructor();
    
    // guards.nddl:19 basicToken
    class basicToken : public NddlToken {
    public:
      basicToken(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      basicToken(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::basicToken, Foo.basicToken);
      
    };
    
    // guards.nddl:20 tokenWithParameters
    class tokenWithParameters : public NddlToken {
    public:
      tokenWithParameters(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      tokenWithParameters(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::tokenWithParameters, Foo.tokenWithParameters);
      
      ConstrainedVariableId int_arg; // SchemaWriter::declareVariable
      ConstrainedVariableId bool_arg; // SchemaWriter::declareVariable
      ConstrainedVariableId float_arg; // SchemaWriter::declareVariable
      ConstrainedVariableId location_arg; // SchemaWriter::declareVariable
      ConstrainedVariableId strEnum_arg; // SchemaWriter::declareVariable
    };
    
    // guards.nddl:28 impliedObjectGuard
    class impliedObjectGuard : public NddlToken {
    public:
      impliedObjectGuard(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      impliedObjectGuard(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::impliedObjectGuard, Foo.impliedObjectGuard);
      
      ConstrainedVariableId allFoo; // SchemaWriter::declareVariable
    };
    
    // guards.nddl:32 impliedLocalVariableGuard
    class impliedLocalVariableGuard : public NddlToken {
    public:
      impliedLocalVariableGuard(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      impliedLocalVariableGuard(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::impliedLocalVariableGuard, Foo.impliedLocalVariableGuard);
      
    };
    
    // guards.nddl:34 singletonGuard
    class singletonGuard : public NddlToken {
    public:
      singletonGuard(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      singletonGuard(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::singletonGuard, Foo.singletonGuard);
      
    };
    
    // guards.nddl:35 mixGuardedWithUnguarded
    class mixGuardedWithUnguarded : public NddlToken {
    public:
      mixGuardedWithUnguarded(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      mixGuardedWithUnguarded(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::mixGuardedWithUnguarded, Foo.mixGuardedWithUnguarded);
      
    };
    
    // guards.nddl:36 localVariableGuard
    class localVariableGuard : public NddlToken {
    public:
      localVariableGuard(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      localVariableGuard(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::localVariableGuard, Foo.localVariableGuard);
      
    };
    
    // guards.nddl:37 multipleNestedGuards
    class multipleNestedGuards : public NddlToken {
    public:
      multipleNestedGuards(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      multipleNestedGuards(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::multipleNestedGuards, Foo.multipleNestedGuards);
      
    };
  };
} // End NDDL namespace
