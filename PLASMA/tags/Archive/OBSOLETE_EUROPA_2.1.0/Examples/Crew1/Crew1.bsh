// Crew1.bsh

import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JInternalFrame;
import org.ops.ui.util.Util;
import org.ops.ui.PSDesktop;
import org.ops.ui.gantt.*;
import org.ops.ui.chart.*;
import org.ops.ui.mouse.*;
import psengine.*;

int month = GregorianCalendar.SEPTEMBER, day = 11; 
GregorianCalendar start = new GregorianCalendar(2006,month,day,0,0);
GregorianCalendar end = new GregorianCalendar(2006,month,day+4,12,0);

void usingCodeGeneration()
{
	cwd = bsh.cwd;
    psengine.loadModel(cwd+"/libCrew1_o.so");
    boolean isFile = true;
    boolean useInterpreter = false;
    psengine.executeTxns(cwd+"/Crew1-initial-state.xml",isFile,useInterpreter);	
    System.out.println("Used code generation");
}

void usingInterpreter()
{
	cwd = bsh.cwd;
    String nddlModel = cwd+"/Crew1-initial-state.nddl";
    psengine.executeScript("nddl",nddlModel);
}

void initPSEngine()
{
    //usingCodeGeneration();
    usingInterpreter();
}

void showCrewActivities()
{
    PSObjectList l = psengine.getObjectsByType("Crew");    	 
    for (int i=0;i<l.size();i++) 
    	desktop.showTokens(l.get(i));
}

void setupDesktop()
    throws Exception
{
    ActionViolationsPanel vp = (ActionViolationsPanel)desktop.makeViolationsFrame().getContentPane().getComponent(0);
    ActionDetailsPanel dp = (ActionDetailsPanel)desktop.makeDetailsFrame().getContentPane().getComponent(0);

    JInternalFrame ganttFrame = desktop.makeResourceGanttFrame("Crew",start,end);
    ganttFrame.setLocation(0,0);
    ganttFrame.setSize(1100,180);
    PSGantt gantt = (PSGantt)ganttFrame.getContentPane().getComponent(0);
    gantt.addMouseListener(vp);
    gantt.addMouseListener(dp);
    
    resourceFrame = desktop.makeResourcesFrame("Reusable",start);
    resourceFrame.setLocation(0,180);
    resourceFrame.setSize(500,300);    
    showCrewActivities();
}

horizonStart = 0;
horizonEnd = 5760;
maxSteps = 500;
maxDepth = 100000;
config = "PlannerConfig.xml";


try {
    initPSEngine();
    PSSolver solver = psengine.createSolver(config);
    solver.configure(horizonStart,horizonEnd);
    desktop.makeSolverDialog(solver);
}
catch (Exception e) {
	System.err.println("Failed Initializing : "+e);
}

//setupDesktop();

/*
 
String toRML()
{
    RMLWriter writer = new RMLWriter();
    return writer.toRML(psengine);
}
 
*/


 