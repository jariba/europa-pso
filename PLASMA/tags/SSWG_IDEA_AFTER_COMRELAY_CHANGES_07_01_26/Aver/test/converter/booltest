Test('Booltest',
At step = 0 : Count(Tokens()) < 1;
At step = 0 : Count(Tokens()) == 1;
At step = 0 : Count(Tokens()) > 1;
At step = 0 : Count(Tokens()) <= 1;
At step = 0 : Count(Tokens()) >= 1;
At step = 0 : Count(Tokens()) != 1;
At step = 0 : Count(Tokens()) in [0 3];
At step = 0 : Count(Tokens()) out [0 3];
At step = 0 : Count(Tokens()) < [0 3];
At step = 0 : Count(Tokens()) > [0 3];
At step = 0 : Count(Tokens()) <= [0 3];
At step = 0 : Count(Tokens()) >= [0 3];
At step = 0 : Count(Tokens()) in {3 5 7 9};
At step = 0 : Count(Tokens()) out {3 5 7 9};
At step = 0 : Count(Tokens()) < {3 5 7 9};
At step = 0 : Count(Tokens()) > {3 5 7 9};
At step = 0 : Count(Tokens()) <= {3 5 7 9};
At step = 0 : Count(Tokens()) >= {3 5 7 9};
At step = 0 : Tokens() < [0 3];
At step = 0 : Tokens() == [0 3];
At step = 0 : Tokens() > [0 3];
At step = 0 : Tokens() <= [0 3];
At step = 0 : Tokens() >= [0 3];
At step = 0 : Tokens() in [0 3];
At step = 0 : Tokens() out [0 3];
At step = 0 : Tokens() intersects {3 5 7 9};
At step = 0 : Tokens() < {3 5 7 9};
At step = 0 : Tokens() == {3 5 7 9};
At step = 0 : Tokens() > {3 5 7 9};
At step = 0 : Tokens() <= {3 5 7 9};
At step = 0 : Tokens() >= {3 5 7 9};
At step = 0 : Tokens() in {3 5 7 9};
At step = 0 : Tokens() out {3 5 7 9};
At step = 0 : Tokens() intersects {3 5 7 9};
At step = 0 : Tokens() < 3;
At step = 0 : Tokens() == 3;
At step = 0 : Tokens() > 3;
At step = 0 : Tokens() <= 3;
At step = 0 : Tokens() >= 3;
At step = 0 : Tokens() != 3;
);
