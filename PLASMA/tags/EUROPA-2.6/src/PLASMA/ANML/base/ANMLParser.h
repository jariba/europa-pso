/** \file
 *  This C header file was generated by $ANTLR version 3.1.2
 *
 *     -  From the grammar source file : ANML/base/antlr/ANML.g
 *     -                            On : 2011-08-19 15:00:50
 *     -                for the parser : ANMLParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser ANMLParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pANMLParser, which is returned from a call to ANMLParserNew().
 *
 * The methods in pANMLParser are  as follows:
 *
 *  - ANMLParser_anml_return      pANMLParser->anml(pANMLParser)
 *  - ANMLParser_type_decl_return      pANMLParser->type_decl(pANMLParser)
 *  - ANMLParser_type_decl_helper_return      pANMLParser->type_decl_helper(pANMLParser)
 *  - ANMLParser_type_ref_return      pANMLParser->type_ref(pANMLParser)
 *  - ANMLParser_type_name_return      pANMLParser->type_name(pANMLParser)
 *  - ANMLParser_set_return      pANMLParser->set(pANMLParser)
 *  - ANMLParser_enumeration_return      pANMLParser->enumeration(pANMLParser)
 *  - ANMLParser_range_return      pANMLParser->range(pANMLParser)
 *  - ANMLParser_type_spec_return      pANMLParser->type_spec(pANMLParser)
 *  - ANMLParser_type_enumeration_return      pANMLParser->type_enumeration(pANMLParser)
 *  - ANMLParser_type_enumeration_element_return      pANMLParser->type_enumeration_element(pANMLParser)
 *  - ANMLParser_param_list_return      pANMLParser->param_list(pANMLParser)
 *  - ANMLParser_param_return      pANMLParser->param(pANMLParser)
 *  - ANMLParser_object_block_return      pANMLParser->object_block(pANMLParser)
 *  - ANMLParser_const_decl_return      pANMLParser->const_decl(pANMLParser)
 *  - ANMLParser_const_decl_helper_return      pANMLParser->const_decl_helper(pANMLParser)
 *  - ANMLParser_const_var_decl_helper_return      pANMLParser->const_var_decl_helper(pANMLParser)
 *  - ANMLParser_const_fun_decl_helper_return      pANMLParser->const_fun_decl_helper(pANMLParser)
 *  - ANMLParser_fluent_decl_return      pANMLParser->fluent_decl(pANMLParser)
 *  - ANMLParser_fluent_fluent_decl_return      pANMLParser->fluent_fluent_decl(pANMLParser)
 *  - ANMLParser_fluent_var_decl_return      pANMLParser->fluent_var_decl(pANMLParser)
 *  - ANMLParser_fluent_fun_decl_return      pANMLParser->fluent_fun_decl(pANMLParser)
 *  - ANMLParser_fluent_predicate_decl_return      pANMLParser->fluent_predicate_decl(pANMLParser)
 *  - ANMLParser_predicate_helper_return      pANMLParser->predicate_helper(pANMLParser)
 *  - ANMLParser_decl_helper_return      pANMLParser->decl_helper(pANMLParser)
 *  - ANMLParser_var_decl_helper_return      pANMLParser->var_decl_helper(pANMLParser)
 *  - ANMLParser_init_return      pANMLParser->init(pANMLParser)
 *  - ANMLParser_fun_decl_helper_return      pANMLParser->fun_decl_helper(pANMLParser)
 *  - ANMLParser_action_decl_return      pANMLParser->action_decl(pANMLParser)
 *  - ANMLParser_durative_action_block_return      pANMLParser->durative_action_block(pANMLParser)
 *  - ANMLParser_action_block_return      pANMLParser->action_block(pANMLParser)
 *  - ANMLParser_action_block_h_return      pANMLParser->action_block_h(pANMLParser)
 *  - ANMLParser_decomp_block_return      pANMLParser->decomp_block(pANMLParser)
 *  - ANMLParser_problem_stmt_return      pANMLParser->problem_stmt(pANMLParser)
 *  - ANMLParser_fact_decl_return      pANMLParser->fact_decl(pANMLParser)
 *  - ANMLParser_fact_decl_helper_return      pANMLParser->fact_decl_helper(pANMLParser)
 *  - ANMLParser_goal_decl_return      pANMLParser->goal_decl(pANMLParser)
 *  - ANMLParser_goal_decl_helper_return      pANMLParser->goal_decl_helper(pANMLParser)
 *  - ANMLParser_stmt_return      pANMLParser->stmt(pANMLParser)
 *  - ANMLParser_stmt_primitive_return      pANMLParser->stmt_primitive(pANMLParser)
 *  - ANMLParser_stmt_block_return      pANMLParser->stmt_block(pANMLParser)
 *  - ANMLParser_stmt_contains_return      pANMLParser->stmt_contains(pANMLParser)
 *  - ANMLParser_stmt_when_return      pANMLParser->stmt_when(pANMLParser)
 *  - ANMLParser_stmt_forall_return      pANMLParser->stmt_forall(pANMLParser)
 *  - ANMLParser_stmt_exists_return      pANMLParser->stmt_exists(pANMLParser)
 *  - ANMLParser_stmt_timed_return      pANMLParser->stmt_timed(pANMLParser)
 *  - ANMLParser_stmt_chain_return      pANMLParser->stmt_chain(pANMLParser)
 *  - ANMLParser_stmt_chain_1_return      pANMLParser->stmt_chain_1(pANMLParser)
 *  - ANMLParser_stmt_delta_chain_return      pANMLParser->stmt_delta_chain(pANMLParser)
 *  - ANMLParser_stmt_delta_chain_1_return      pANMLParser->stmt_delta_chain_1(pANMLParser)
 *  - ANMLParser_stmt_timeless_return      pANMLParser->stmt_timeless(pANMLParser)
 *  - ANMLParser_guard_return      pANMLParser->guard(pANMLParser)
 *  - ANMLParser_interval_return      pANMLParser->interval(pANMLParser)
 *  - ANMLParser_univ_time_return      pANMLParser->univ_time(pANMLParser)
 *  - ANMLParser_exist_time_return      pANMLParser->exist_time(pANMLParser)
 *  - ANMLParser_delta_time_return      pANMLParser->delta_time(pANMLParser)
 *  - ANMLParser_bra_return      pANMLParser->bra(pANMLParser)
 *  - ANMLParser_ket_return      pANMLParser->ket(pANMLParser)
 *  - ANMLParser_lLimit_return      pANMLParser->lLimit(pANMLParser)
 *  - ANMLParser_rLimit_return      pANMLParser->rLimit(pANMLParser)
 *  - ANMLParser_expr_return      pANMLParser->expr(pANMLParser)
 *  - ANMLParser_e_prefix_return      pANMLParser->e_prefix(pANMLParser)
 *  - ANMLParser_e_log_1_return      pANMLParser->e_log_1(pANMLParser)
 *  - ANMLParser_e_log_2_return      pANMLParser->e_log_2(pANMLParser)
 *  - ANMLParser_e_log_3_return      pANMLParser->e_log_3(pANMLParser)
 *  - ANMLParser_e_log_4_return      pANMLParser->e_log_4(pANMLParser)
 *  - ANMLParser_e_log_5_return      pANMLParser->e_log_5(pANMLParser)
 *  - ANMLParser_e_log_6_return      pANMLParser->e_log_6(pANMLParser)
 *  - ANMLParser_e_log_7_return      pANMLParser->e_log_7(pANMLParser)
 *  - ANMLParser_e_num_return      pANMLParser->e_num(pANMLParser)
 *  - ANMLParser_e_num_1_return      pANMLParser->e_num_1(pANMLParser)
 *  - ANMLParser_e_num_2_return      pANMLParser->e_num_2(pANMLParser)
 *  - ANMLParser_e_num_3_return      pANMLParser->e_num_3(pANMLParser)
 *  - ANMLParser_e_num_4_return      pANMLParser->e_num_4(pANMLParser)
 *  - ANMLParser_e_atomic_return      pANMLParser->e_atomic(pANMLParser)
 *  - ANMLParser_time_complex_return      pANMLParser->time_complex(pANMLParser)
 *  - ANMLParser_ref_return      pANMLParser->ref(pANMLParser)
 *  - ANMLParser_time_primitive_return      pANMLParser->time_primitive(pANMLParser)
 *  - ANMLParser_arg_list_return      pANMLParser->arg_list(pANMLParser)
 *  - ANMLParser_builtinType_return      pANMLParser->builtinType(pANMLParser)
 *  - ANMLParser_literal_return      pANMLParser->literal(pANMLParser)
 *  - ANMLParser_num_relop_return      pANMLParser->num_relop(pANMLParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_ANMLParser_H
#define _ANMLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "AnmlInterpreter.hh"

using namespace EUROPA;

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct ANMLParser_Ctx_struct ANMLParser, * pANMLParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct ANMLParser_anml_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_anml_return;

typedef struct ANMLParser_type_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_type_decl_return;

typedef struct ANMLParser_type_decl_helper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_type_decl_helper_return;

typedef struct ANMLParser_type_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_type_ref_return;

typedef struct ANMLParser_type_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_type_name_return;

typedef struct ANMLParser_set_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_set_return;

typedef struct ANMLParser_enumeration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_enumeration_return;

typedef struct ANMLParser_range_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_range_return;

typedef struct ANMLParser_type_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_type_spec_return;

typedef struct ANMLParser_type_enumeration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_type_enumeration_return;

typedef struct ANMLParser_type_enumeration_element_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_type_enumeration_element_return;

typedef struct ANMLParser_param_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_param_list_return;

typedef struct ANMLParser_param_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_param_return;

typedef struct ANMLParser_object_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_object_block_return;

typedef struct ANMLParser_const_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_const_decl_return;

typedef struct ANMLParser_const_decl_helper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_const_decl_helper_return;

typedef struct ANMLParser_const_var_decl_helper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_const_var_decl_helper_return;

typedef struct ANMLParser_const_fun_decl_helper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_const_fun_decl_helper_return;

typedef struct ANMLParser_fluent_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_fluent_decl_return;

typedef struct ANMLParser_fluent_fluent_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_fluent_fluent_decl_return;

typedef struct ANMLParser_fluent_var_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_fluent_var_decl_return;

typedef struct ANMLParser_fluent_fun_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_fluent_fun_decl_return;

typedef struct ANMLParser_fluent_predicate_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_fluent_predicate_decl_return;

typedef struct ANMLParser_predicate_helper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_predicate_helper_return;

typedef struct ANMLParser_decl_helper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_decl_helper_return;

typedef struct ANMLParser_var_decl_helper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_var_decl_helper_return;

typedef struct ANMLParser_init_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_init_return;

typedef struct ANMLParser_fun_decl_helper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_fun_decl_helper_return;

typedef struct ANMLParser_action_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_action_decl_return;

typedef struct ANMLParser_durative_action_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_durative_action_block_return;

typedef struct ANMLParser_action_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_action_block_return;

typedef struct ANMLParser_action_block_h_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_action_block_h_return;

typedef struct ANMLParser_decomp_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_decomp_block_return;

typedef struct ANMLParser_problem_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_problem_stmt_return;

typedef struct ANMLParser_fact_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_fact_decl_return;

typedef struct ANMLParser_fact_decl_helper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_fact_decl_helper_return;

typedef struct ANMLParser_goal_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_goal_decl_return;

typedef struct ANMLParser_goal_decl_helper_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_goal_decl_helper_return;

typedef struct ANMLParser_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_return;

typedef struct ANMLParser_stmt_primitive_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_primitive_return;

typedef struct ANMLParser_stmt_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_block_return;

typedef struct ANMLParser_stmt_contains_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_contains_return;

typedef struct ANMLParser_stmt_when_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_when_return;

typedef struct ANMLParser_stmt_forall_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_forall_return;

typedef struct ANMLParser_stmt_exists_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_exists_return;

typedef struct ANMLParser_stmt_timed_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_timed_return;

typedef struct ANMLParser_stmt_chain_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_chain_return;

typedef struct ANMLParser_stmt_chain_1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_chain_1_return;

typedef struct ANMLParser_stmt_delta_chain_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_delta_chain_return;

typedef struct ANMLParser_stmt_delta_chain_1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_delta_chain_1_return;

typedef struct ANMLParser_stmt_timeless_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_stmt_timeless_return;

typedef struct ANMLParser_guard_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_guard_return;

typedef struct ANMLParser_interval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_interval_return;

typedef struct ANMLParser_univ_time_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_univ_time_return;

typedef struct ANMLParser_exist_time_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_exist_time_return;

typedef struct ANMLParser_delta_time_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_delta_time_return;

typedef struct ANMLParser_bra_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_bra_return;

typedef struct ANMLParser_ket_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_ket_return;

typedef struct ANMLParser_lLimit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_lLimit_return;

typedef struct ANMLParser_rLimit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_rLimit_return;

typedef struct ANMLParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_expr_return;

typedef struct ANMLParser_e_prefix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_prefix_return;

typedef struct ANMLParser_e_log_1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_log_1_return;

typedef struct ANMLParser_e_log_2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_log_2_return;

typedef struct ANMLParser_e_log_3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_log_3_return;

typedef struct ANMLParser_e_log_4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_log_4_return;

typedef struct ANMLParser_e_log_5_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_log_5_return;

typedef struct ANMLParser_e_log_6_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_log_6_return;

typedef struct ANMLParser_e_log_7_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_log_7_return;

typedef struct ANMLParser_e_num_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_num_return;

typedef struct ANMLParser_e_num_1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_num_1_return;

typedef struct ANMLParser_e_num_2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_num_2_return;

typedef struct ANMLParser_e_num_3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_num_3_return;

typedef struct ANMLParser_e_num_4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_num_4_return;

typedef struct ANMLParser_e_atomic_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_e_atomic_return;

typedef struct ANMLParser_time_complex_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_time_complex_return;

typedef struct ANMLParser_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_ref_return;

typedef struct ANMLParser_time_primitive_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_time_primitive_return;

typedef struct ANMLParser_arg_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_arg_list_return;

typedef struct ANMLParser_builtinType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_builtinType_return;

typedef struct ANMLParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_literal_return;

typedef struct ANMLParser_num_relop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    ANMLParser_num_relop_return;



/** Context tracking structure for ANMLParser
 */
struct ANMLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     ANMLParser_anml_return (*anml)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_type_decl_return (*type_decl)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_type_decl_helper_return (*type_decl_helper)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_type_ref_return (*type_ref)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_type_name_return (*type_name)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_set_return (*set)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_enumeration_return (*enumeration)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_range_return (*range)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_type_spec_return (*type_spec)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_type_enumeration_return (*type_enumeration)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_type_enumeration_element_return (*type_enumeration_element)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_param_list_return (*param_list)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_param_return (*param)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_object_block_return (*object_block)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_const_decl_return (*const_decl)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_const_decl_helper_return (*const_decl_helper)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_const_var_decl_helper_return (*const_var_decl_helper)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_const_fun_decl_helper_return (*const_fun_decl_helper)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_fluent_decl_return (*fluent_decl)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_fluent_fluent_decl_return (*fluent_fluent_decl)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_fluent_var_decl_return (*fluent_var_decl)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_fluent_fun_decl_return (*fluent_fun_decl)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_fluent_predicate_decl_return (*fluent_predicate_decl)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_predicate_helper_return (*predicate_helper)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_decl_helper_return (*decl_helper)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_var_decl_helper_return (*var_decl_helper)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_init_return (*init)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_fun_decl_helper_return (*fun_decl_helper)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_action_decl_return (*action_decl)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_durative_action_block_return (*durative_action_block)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_action_block_return (*action_block)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_action_block_h_return (*action_block_h)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_decomp_block_return (*decomp_block)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_problem_stmt_return (*problem_stmt)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_fact_decl_return (*fact_decl)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_fact_decl_helper_return (*fact_decl_helper)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_goal_decl_return (*goal_decl)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_goal_decl_helper_return (*goal_decl_helper)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_return (*stmt)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_primitive_return (*stmt_primitive)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_block_return (*stmt_block)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_contains_return (*stmt_contains)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_when_return (*stmt_when)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_forall_return (*stmt_forall)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_exists_return (*stmt_exists)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_timed_return (*stmt_timed)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_chain_return (*stmt_chain)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_chain_1_return (*stmt_chain_1)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_delta_chain_return (*stmt_delta_chain)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_delta_chain_1_return (*stmt_delta_chain_1)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_stmt_timeless_return (*stmt_timeless)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_guard_return (*guard)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_interval_return (*interval)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_univ_time_return (*univ_time)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_exist_time_return (*exist_time)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_delta_time_return (*delta_time)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_bra_return (*bra)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_ket_return (*ket)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_lLimit_return (*lLimit)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_rLimit_return (*rLimit)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_expr_return (*expr)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_prefix_return (*e_prefix)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_log_1_return (*e_log_1)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_log_2_return (*e_log_2)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_log_3_return (*e_log_3)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_log_4_return (*e_log_4)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_log_5_return (*e_log_5)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_log_6_return (*e_log_6)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_log_7_return (*e_log_7)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_num_return (*e_num)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_num_1_return (*e_num_1)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_num_2_return (*e_num_2)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_num_3_return (*e_num_3)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_num_4_return (*e_num_4)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_e_atomic_return (*e_atomic)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_time_complex_return (*time_complex)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_ref_return (*ref)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_time_primitive_return (*time_primitive)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_arg_list_return (*arg_list)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_builtinType_return (*builtinType)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_literal_return (*literal)	(struct ANMLParser_Ctx_struct * ctx);
     ANMLParser_num_relop_return (*num_relop)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred2_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred3_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred4_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred5_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred6_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred7_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred8_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred9_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred10_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred11_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred12_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred13_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred14_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred15_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred16_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred17_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred18_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred19_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred20_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred21_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred22_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred23_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred24_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred25_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred26_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred27_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred28_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred29_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred30_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred31_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred32_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred33_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred34_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred35_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred36_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred37_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred38_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred39_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred40_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred41_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred42_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred43_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred44_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred45_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred46_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred47_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred48_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred49_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred50_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred51_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred52_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred53_ANML)	(struct ANMLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred54_ANML)	(struct ANMLParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct ANMLParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pANMLParser ANMLParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pANMLParser ANMLParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define IndefinitePoint      31
#define Implies      100
#define Ket      33
#define LessThan      61
#define OrBit      107
#define AndLog      103
#define TDuration      41
#define Stmts      11
#define LETTER      134
#define Before      34
#define Fluents      7
#define Constants      6
#define Bind      18
#define After      36
#define DefinitePoint      29
#define XorLog      101
#define LabelRef      16
#define Lend      91
#define EOF      -1
#define Actions      8
#define LessThanE      129
#define AndBit      110
#define ProblemStmts      12
#define Variable      71
#define NotLog      79
#define ForAll      86
#define When      53
#define TEnd      40
#define NotBit      80
#define Access      19
#define Undefined      74
#define Use      92
#define ContainsAllExpr      48
#define ExistsExpr      51
#define Decompositions      14
#define ForAllStmt      50
#define TimedStmt      43
#define ContainsSomeExpr      47
#define This      58
#define DefiniteInterval      28
#define INT      121
#define Colon      99
#define Action      26
#define NotEqual      127
#define TimedExpr      44
#define Equal      82
#define Fluent      21
#define With      63
#define Object      120
#define Block      13
#define Float      117
#define LeftC      64
#define Range      56
#define Minus      106
#define WS      135
#define Semi      60
#define LeftB      66
#define Function      72
#define Times      108
#define OrLog      102
#define MLC      137
#define ExistsStmt      52
#define TBra      37
#define IndefiniteInterval      30
#define Else      85
#define Label      27
#define ForAllExpr      49
#define Types      5
#define End      114
#define Parameters      9
#define Fact      78
#define Unordered      111
#define Undefine      75
#define Within      93
#define LeftP      69
#define ESC      133
#define All      97
#define TStart      39
#define SLC      136
#define Decomposition      77
#define False      125
#define GreaterThanE      130
#define Constant      23
#define FLOAT      122
#define Enum      55
#define ID      57
#define GreaterThan      128
#define Consume      90
#define Arguments      10
#define Assign      62
#define Change      88
#define ANML      4
#define Chain      42
#define TypeRef      15
#define Produce      89
#define WhenElse      54
#define Ordered      112
#define ConstantFunction      24
#define Bra      32
#define Exists      87
#define DIGIT      131
#define String      119
#define Symbol      118
#define True      124
#define ContainsSomeStmt      45
#define Predicate      73
#define Vector      68
#define RightP      70
#define Start      113
#define At      35
#define Type      20
#define Delta      96
#define XorBit      104
#define Contains      84
#define TKet      38
#define ContainsAllStmt      46
#define RightC      65
#define SetAssign      94
#define RightB      67
#define Duration      76
#define Divide      109
#define Parameter      25
#define Goal      83
#define Skip      95
#define Ref      17
#define Plus      105
#define Boolean      115
#define Dot      132
#define Dots      98
#define EqualLog      81
#define Infinity      126
#define Comma      59
#define Integer      116
#define STRING      123
#define FluentFunction      22
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for ANMLParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
