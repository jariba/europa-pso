#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

// inheritance.2.nddl

  class StringData;
  typedef Id<StringData> StringDataId;
  typedef ObjectDomain StringDataDomain;
  
  class Foo;
  typedef Id<Foo> FooId;
  typedef ObjectDomain FooDomain;
  
  class Bar;
  typedef Id<Bar> BarId;
  typedef ObjectDomain BarDomain;
  
  class Baz;
  typedef Id<Baz> BazId;
  typedef ObjectDomain BazDomain;
  
  
  
  // Core.nddl:8 TokenStates
  typedef SymbolDomain TokenStates;
  TokenStates TokenStatesBaseDomain();
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Timeline
  
  
  // Plasma.nddl:15 StringData
  class StringData : public Object {
  public:
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& name);
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId data; // SchemaWriter::declareVariable
    
    // Plasma.nddl:15 StringData
    virtual void constructor(const LabelStr& _data);
  };
  
  // inheritance.2.nddl:4 Foo
  class Foo : public Timeline {
  public:
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class pred1;
    typedef Id<pred1> pred1Id;
    
    // inheritance.2.nddl:6 pred1
    class pred1 : public NddlToken {
    public:
      pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::pred1, Foo.pred1);
      
      ConstrainedVariableId arg1; // SchemaWriter::declareVariable
    };
  };
  
  // inheritance.2.nddl:12 Bar
  class Bar : public Foo {
  public:
    Bar(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Bar(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Bar(const ObjectId& parent, const LabelStr& name);
    Bar(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class pred2;
    typedef Id<pred2> pred2Id;
    
    // inheritance.2.nddl:13 pred2
    class pred2 : public NddlToken {
    public:
      pred2(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      pred2(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Bar::pred2, Bar.pred2);
      
    };
  };
  
  // inheritance.2.nddl:18 Baz
  class Baz : public Foo {
  public:
    Baz(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Baz(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Baz(const ObjectId& parent, const LabelStr& name);
    Baz(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class pred1;
    typedef Id<pred1> pred1Id;
    
    // inheritance.2.nddl:19 pred1
    class pred1 : public Foo::pred1 {
    public:
      pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Baz::pred1, Baz.pred1);
      
      ConstrainedVariableId arg2; // SchemaWriter::declareVariable
    };
  };
} // End NDDL namespace
