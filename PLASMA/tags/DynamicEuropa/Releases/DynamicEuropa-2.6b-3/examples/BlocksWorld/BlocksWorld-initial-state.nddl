#include "BlocksWorld-model.nddl"

// Allocate objects of the problem
int horizonEnd = 150;
Goal goalTower = new Goal();

close();

//Initial State

fact(Top.Clear top1InitiallyClear);
eq(top1InitiallyClear.theBlock, goalTower.firstBlock);
eq(top1InitiallyClear.start, 0);
precedes(top1InitiallyClear.end, horizonEnd);

fact(Bottom.OnTable bottom1InitiallyOnTable);
eq(bottom1InitiallyOnTable.theBlock, goalTower.firstBlock);
eq(bottom1InitiallyOnTable.start, 0);
precedes(bottom1InitiallyOnTable.end, horizonEnd);

fact(Top.Clear top2InitiallyClear);
eq(top2InitiallyClear.theBlock, goalTower.secondBlock);
eq(top2InitiallyClear.start, 0);
precedes(top2InitiallyClear.end, horizonEnd);

fact(Bottom.OnTable bottom2InitiallyOnTable);
eq(bottom2InitiallyOnTable.theBlock, goalTower.secondBlock);
eq(bottom2InitiallyOnTable.start, 0);
precedes(bottom2InitiallyOnTable.end, horizonEnd);

fact(Top.Clear top3InitiallyClear);
eq(top3InitiallyClear.theBlock, goalTower.thirdBlock);
eq(top3InitiallyClear.start, 0);
precedes(top3InitiallyClear.end, horizonEnd);

fact(Bottom.OnTable bottom3InitiallyOnTable);
eq(bottom3InitiallyOnTable.theBlock, goalTower.thirdBlock);
eq(bottom3InitiallyOnTable.start, 0);
//precedes(bottom3InitiallyOnTable.end, horizonEnd);

fact(Arm.ArmEmpty armInitiallyEmpty);
eq(armInitiallyEmpty.start, 0);
precedes(armInitiallyEmpty.end, horizonEnd);

// We know there is no overlap between the initial facts, so help the solver a little
top1InitiallyClear.activate();
bottom1InitiallyOnTable.activate();
top2InitiallyClear.activate();
bottom2InitiallyOnTable.activate();
top3InitiallyClear.activate();
bottom3InitiallyOnTable.activate();
armInitiallyEmpty.activate();

//Goal State

goal(goalTower.GoalAchieved towerFinallyDone);
precedes(0, towerFinallyDone.start);
precedes(towerFinallyDone.end, horizonEnd);



