if ! $(Antlr3Rules_INCLUDED) {
Antlr3Rules_INCLUDED = TRUE ;

include [ FDirName $(SUBDIR) JavaRules ] ;

ANTLR3_JAR ?= [ FDirName $(SUBDIR) .. .. ext lib antlr-3.jar ] ;

# Antlr3Grammar ParserPrefix : grammar.g grammar.tree.g ;
rule Antlr3Grammar
{
  local prefix = $(1) ;
  local grammar = $(2[1]) ;
  local grammar.tree = $(2[2]) ;

  local sources = [ FGristFiles $(prefix)Lexer.cpp $(prefix)Parser.cpp ] ;
  local headers = [ FGristFiles $(prefix)Lexer.h $(prefix)Parser.h $(prefix).tokens ] ;

  Antlr3Tool $(sources) $(headers) : $(grammar) ;
  Includes $(sources) : $(headers) ;

  local sources.tree = [ FGristFiles $(prefix)Tree.cpp ] ;
  local headers.tree = [ FGristFiles $(prefix)Tree.h $(prefix)Tree.tokens ] ;

  if $(grammar.tree) {
      Antlr3Tool $(sources.tree) $(headers.tree) : $(grammar.tree) ;
      Includes $(sources.tree) : $(headers.tree) ;
  }
}

rule Antlr3Tool
{
  local files = $(1) ;
  local grammar = $(2) ;

  LOCATE on $(files) = $(LOCATE_SOURCE) ;
  SEARCH on $(grammar) = $(SEARCH_SOURCE) ;
  RunAntlr3Tool $(files) : $(grammar) ;
}

actions RenameTarget.Action
{
	echo RenameTarget.Action : $(MV) $(1) $(2) ; 
	$(MV) $(1) $(2) ; 
}

rule RunAntlr3Tool
{
  local files = $(1) ;
  local grammar = $(2) ;

#  Echo RunAntlr3Tool $(files) . $(grammar) ;
  
  Depends $(files) : $(grammar) ;
#  LocalClean clean : $(files) ;
}

actions RunAntlr3Tool
{
  rm -f $(1)
  echo "(Tool)Command to build the parser is: $(JAVA) -cp $(ANTLR3_JAR) $(JREFLAGS) org.antlr.Tool -fo $(1[0]:D) $(2)"
  "$(JAVA)" -cp $(ANTLR3_JAR) $(JREFLAGS) org.antlr.Tool -fo $(1[0]:D) $(2)   

  mv $(1[1]:S=.c) $(1[1]) ; 
  if [ -e $(1[2]:S=.c) ] 
  	then
	  mv $(1[2]:S=.c) $(1[2]) ; 
  fi
}

} # Antlr3Rules_INCLUDED
