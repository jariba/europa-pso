#include "Plasma.nddl"

// Class declrataion and other preliminaries before we get to the use of
// Allen Relations for token ordering
class Foo extends Timeline { // Declare a basic class with a set of simple predicates
 predicate pred0{}
 predicate pred1{}
 predicate pred2{}
 predicate pred3{}
 predicate pred4{}
 predicate pred5{}
 predicate pred6{}
}

Foo foo = new Foo();
close();

goal(foo.pred0 t0); // Initially active
goal(foo.pred1 t1); // Initially active
goal(foo.pred2 t2); // Initially active
goal(foo.pred3 t3); // Initially active
goal(foo.pred4 t4); // Initially active
goal(foo.pred5 t5); // Initially active
goal(foo.pred6 t6); // Initially active

// Ground the start time of the first token and the end time of the last token
// to make the example more interesting
t0.start.specify(0);
t6.end.specify(10);

// Now define relations between tokens. In each case, we also add (redundantly) the equivalent constraints 
// on the timepoints to illustrate the mapping. This is also useful for testing to make sure things are
// as they should be! Should get the same results if you omit the redundant constraints
t0 before t1;
precedes(t0.end, t1.start); // Redundant constraint implied by Allen Relation 

t1 meets t2;
concurrent(t1.end, t2.start); // Redundant constraint implied by Allen Relation

t2 contains t3;
precedes(t2.start, t3.start); // Redundant constraint implied by Allen Relation
precedes(t3.end, t2.end); // Redundant constraint implied by Allen Relation

t3 starts t4;
concurrent(t3.start, t4.start); // Redundant constraint implied by Allen Relation

t4 ends t5;
concurrent(t4.end, t5.end); // Redundant constraint implied by Allen Relation

t5 equals t6;
concurrent(t5.start, t6.start); // Redundant constraint implied by Allen Relation
concurrent(t5.end, t6.end); // Redundant constraint implied by Allen Relation
