#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/
#include "NddlResource.hh"

namespace NDDL {

// simple-resources.nddl

  class Reusable;
  typedef Id<Reusable> ReusableId;
  typedef ObjectDomain ReusableDomain;
  
  class Unary;
  typedef Id<Unary> UnaryId;
  typedef ObjectDomain UnaryDomain;
  
  class UnaryResource;
  typedef Id<UnaryResource> UnaryResourceId;
  typedef ObjectDomain UnaryResourceDomain;
  
  class Battery;
  typedef Id<Battery> BatteryId;
  typedef ObjectDomain BatteryDomain;
  
  class Rover;
  typedef Id<Rover> RoverId;
  typedef ObjectDomain RoverDomain;
  
  class World;
  typedef Id<World> WorldId;
  typedef ObjectDomain WorldDomain;
  
  
  
  // Core.nddl:8 TokenStates
  typedef SymbolDomain TokenStates;
  TokenStates TokenStatesBaseDomain();
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Timeline
  
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Resource
  
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Reservoir
  
  
  // Resources.nddl:126 Reusable
  class Reusable : public Object {
  public:
    Reusable(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Reusable(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Reusable(const ObjectId& parent, const LabelStr& name);
    Reusable(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class uses;
    typedef Id<uses> usesId;
    ConstrainedVariableId capacity; // SchemaWriter::declareVariable
    ConstrainedVariableId levelLimitMin; // SchemaWriter::declareVariable
    ConstrainedVariableId consumptionMax; // SchemaWriter::declareVariable
    ConstrainedVariableId consumptionRateMax; // SchemaWriter::declareVariable
    
    // Resources.nddl:132 uses
    class uses : public NddlToken {
    public:
      uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Reusable::uses, Reusable.uses);
      
      ConstrainedVariableId quantity; // SchemaWriter::declareVariable
    };
    
    // Resources.nddl:126 Reusable
    virtual void constructor(float c, float ll_min);
    
    // Resources.nddl:126 Reusable
    virtual void constructor(float c, float ll_min, float cr_max);
    
    // Resources.nddl:126 Reusable
    virtual void constructor(float c, float ll_min, float c_max, float cr_max);
  };
  
  // Resources.nddl:158 Unary
  class Unary : public Object {
  public:
    Unary(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Unary(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Unary(const ObjectId& parent, const LabelStr& name);
    Unary(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class use;
    typedef Id<use> useId;
    ConstrainedVariableId consumptionMax; // SchemaWriter::declareVariable
    
    // Resources.nddl:158 Unary
    virtual void constructor();
    
    // Resources.nddl:158 Unary
    virtual void constructor(float c_max);
    
    // Resources.nddl:168 use
    class use : public NddlToken {
    public:
      use(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      use(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Unary::use, Unary.use);
      
    };
  };
  
  // Resources.nddl:176 UnaryResource
  class UnaryResource : public Timeline {
  public:
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& name);
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class uses;
    typedef Id<uses> usesId;
    
    // Resources.nddl:177 uses
    class uses : public NddlToken {
    public:
      uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(UnaryResource::uses, UnaryResource.uses);
      
    };
  };
  
  // simple-resources.nddl:3 Battery
  class Battery : public NddlResource {
  public:
    Battery(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Battery(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Battery(const ObjectId& parent, const LabelStr& name);
    Battery(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class change;
    typedef Id<change> changeId;
    
    // simple-resources.nddl:4 change
    class change : public NddlResource::change {
    public:
      change(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      change(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Battery::change, Battery.change);
      
      ConstrainedVariableId conversionRate; // SchemaWriter::declareVariable
      ConstrainedVariableId actualQuantity; // SchemaWriter::declareVariable
    };
    
    // simple-resources.nddl:3 Battery
    virtual void constructor(float ic, float ll_min, float ll_max);
  };
  
  
  // simple-resources.nddl:16 Location
  typedef SymbolDomain Location;
  Location LocationBaseDomain();
  
  // simple-resources.nddl:18 Rover
  class Rover : public Object {
  public:
    Rover(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Rover(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Rover(const ObjectId& parent, const LabelStr& name);
    Rover(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class At;
    typedef Id<At> AtId;
    class Going;
    typedef Id<Going> GoingId;
    
    // simple-resources.nddl:19 At
    class At : public NddlToken {
    public:
      At(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      At(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Rover::At, Rover.At);
      
      ConstrainedVariableId location; // SchemaWriter::declareVariable
    };
    
    // simple-resources.nddl:23 Going
    class Going : public NddlToken {
    public:
      Going(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      Going(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Rover::Going, Rover.Going);
      
      ConstrainedVariableId from; // SchemaWriter::declareVariable
      ConstrainedVariableId to; // SchemaWriter::declareVariable
    };
    ConstrainedVariableId mutex; // SchemaWriter::declareVariable
    
    // simple-resources.nddl:18 Rover
    virtual void constructor();
  };
  
  // simple-resources.nddl:41 World
  class World : public Timeline {
  public:
    World(const PlanDatabaseId& planDatabase, const LabelStr& name);
    World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class initialState;
    typedef Id<initialState> initialStateId;
    ConstrainedVariableId mainBattery; // SchemaWriter::declareVariable
    ConstrainedVariableId reserveBattery; // SchemaWriter::declareVariable
    
    // simple-resources.nddl:45 initialState
    class initialState : public NddlToken {
    public:
      initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(World::initialState, World.initialState);
      
    };
    
    // simple-resources.nddl:41 World
    virtual void constructor();
  };
} // End NDDL namespace
