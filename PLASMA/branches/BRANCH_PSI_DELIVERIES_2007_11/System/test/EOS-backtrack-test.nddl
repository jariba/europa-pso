#include "PlannerConfig.nddl"
#include "Plasma.nddl"
#include "Resources.nddl"

class Target {
 string m_name;
 int m_x;
 int m_y;
 int m_z;
 int m_size;
 float m_priority;
 bool m_mandatory;

 Target(string name, int x, int y, int z, int size, float priority) {
  m_name = name;
  m_x = x;
  m_y = y;
  m_z = z;
  m_size = size;
  m_priority = priority;
  m_mandatory = false;
 }

 Target(string name, int x, int y, int z, int size, float priority, bool mandatory) {
  m_name = name;
  m_x = x;
  m_y = y;
  m_z = z;
  m_size = size;
  m_priority = priority;
  m_mandatory = mandatory;
 }
}

class Antenna extends Resource { 
  Antenna(float initCap, float llmin, float llmax) {
    super(initCap, llmin, llmax);
  }
}

class Memory extends Resource {
 Memory(float initCap, float llmin, float llmax) {
    super(initCap, llmin, llmax);
  }

}

// Storage can only be consumed
class Storage extends Resource {
  Storage(float initCap, float llmin, float llmax) {
    super(initCap, llmin, llmax, 0.0, 0.0, -inff, -inff);
  }
}

class GroundStation {
  Storage m_disk;

 GroundStation () {
   m_disk = new Storage (10000000.0, 1000.0, 10000000.0);
 }

 predicate Receive {
   Target m_data;
 }
}

class Satellite extends Timeline {
 Antenna m_antenna;
 Memory m_memory;
 int m_slewRate;

 Satellite (int slewRate) {
  m_antenna = new Antenna (10000.0, 0.0, 10000.0);
  m_memory = new Memory (100000.0, 10.0, 100000.0);
  m_slewRate = slewRate;
 }

 predicate TakeImg {
   Target m_target;
   int m_duration;
   eq(duration, m_duration);
 }

 predicate Slew {
   Target m_from;
   Target m_to;
   int m_rate;
 }

 predicate HaveImg {
   Target m_target;
 }

 predicate Pointing {
   Target m_target;
 }

 predicate Transmit {
   GroundStation m_station;
   Target m_data;
 }
}


Satellite::TakeImg {
  met_by(object.Pointing p);
  eq(p.m_target,m_target);
  starts(object.m_memory.change tx);
  float qty;
  addEq(qty,m_target.m_size,0);
  eq(tx.quantity,qty);
  eq(duration,m_target.m_size);
  meets(object.HaveImg i);
  eq(i.m_target,m_target);
}

// doesn't calculate exact, but rather, linear distance as a simplification
Satellite::Slew {
  eq(object.m_slewRate,m_rate);
  met_by(object.Pointing pfrom);
  meets(object.Pointing pto);
  eq(pfrom.m_target,m_from);
  eq(pto.m_target,m_to);
  int dx, dy, dz;
  addEq(dx,pfrom.m_target.m_x,pto.m_target.m_x);
  addEq(dy,pfrom.m_target.m_y,pto.m_target.m_y);
  addEq(dz,pfrom.m_target.m_z,pto.m_target.m_z);
  int tmp, distance;
  addEq(dx,dy,tmp);
  addEq(tmp,dz,distance);
  mulEq(duration,m_rate, distance);
}

Satellite::HaveImg {
  met_by(object.TakeImg t);
  eq(t.m_target,m_target);
  meets(object.Transmit r);
  eq(r.m_data,m_target);
}

Satellite::Pointing {
  bool shoot;
  if (shoot == false) {
    meets(object.Slew s);
    eq(s.m_from, m_target);
  }
  if (shoot == true) {
    meets(object.TakeImg ti);
    eq(ti.m_target, m_target);
  }
  met_by(object.Slew s1);
  eq(s1.m_to, m_target);
}

Satellite::Transmit {
  eq(duration,m_data.m_size);
  met_by(object.HaveImg h);
  eq(m_data,h.m_target);
  starts(object.m_antenna.change tx1);
  float qty;
  addEq(qty,m_data.m_size,0);
  eq(tx1.quantity, qty);
  contains(m_station.Receive r);
  eq(r.m_data,m_data);
  eq(r.duration,duration); 
}

GroundStation::Receive {
  contained_by(Satellite.Transmit t);
  eq(t.m_station,object);
  starts(object.m_disk.change tx2);
  float qty;
  addEq(qty,m_data.m_size,0);
  eq(tx2.quantity, qty);
}

// create  objects
PlannerConfig world = new PlannerConfig(0,100,100);
Target target1 = new Target("target1",10,10,10,100,95.0);
Target target2 = new Target("target2",25,25,25,25,90.0);
Target target3 = new Target("target3",50,50,50,80,84.0);
Satellite satellite1 = new Satellite(10);
GroundStation ground1 = new GroundStation();
close();

// initial tokens
goal(Satellite.Pointing p);
eq(p.m_target, target1);
p.start.specify(0);

goal(GroundStation.Receive r1);
eq(r1.m_data, target1);
eq(r1.object,ground1);
leq(0,r1.start);
leq(r1.end,100);

rejectable(GroundStation.Receive r2);
eq(r2.m_data, target2);
eq(r2.object,ground1);
leq(0,r2.start);
leq(r2.end,100);
