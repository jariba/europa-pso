if ! $(PlatformRules_INCLUDED) {
PlatformRules_INCLUDED = TRUE ;

#
# Globals set by platform
#

# POSITION_INDEPENDENT_CODE_FLAG = Flag to generate position-independent code

if $(OS) = CYGWIN || $(OS) = MINGW {
  POSITION_INDEPENDENT_CODE_FLAG ?= ;
} else {
  POSITION_INDEPENDENT_CODE_FLAG ?= -fPIC ;
}

# LINKER_PASSTHROUGH_FLAG = Flag to pass an argument through to the linker

LINKER_PASSTHROUGH_FLAG ?= -Wl, ;

# SHARED_FLAG = Flag to generate shared library

if $(OS) = MACOSX {
  SHARED_FLAG ?= -fno-common -dynamiclib ;
} else {
  SHARED_FLAG ?= -shared ;
}

# ENV_VARS_OK = Required to build shared library.
#
# Inhibits building shared library on MAC OS X if
# user has not set DYLD_BIND_AT_LAUNCH=YES environment 
# variable that tells loader to do early binding.

if $(OS) = MACOSX {
  if $(DYLD_BIND_AT_LAUNCH) = YES {
     ENV_VARS_OK ?= YES ;
  } else {
     ENV_VARS_OK ?= NO ;
     ENV_VARS_MSG ?= DYLD_BIND_AT_LAUNCH=YES ;
  }
} else {
     ENV_VARS_OK ?= YES ;
}
  
# LIBRARY_PATH_SEARCH_FLAG = Library search path flag

LIBRARY_PATH_SEARCH_FLAG ?= -L ;

# RUNTIME_SHARED_LIBRARY_PATH_FLAG = Runtime shared library search path flag

if $(OS) = SOLARIS {
  RUNTIME_SHARED_LIBRARY_PATH_FLAG ?= -R ;
} else {
  RUNTIME_SHARED_LIBRARY_PATH_FLAG ?= -rpath ;
}

# LINKTIME_SHARED_LIBRARY_PATH_FLAG = Linktime shared library search path flag

if $(OS) = SOLARIS {
  STATIC_LIBRARY_PATH_FLAG ?= -L ;
} else {
  STATIC_LIBRARY_PATH_FLAG ?= -rpath-link ;
}

# GCC_ROOTDIR = GCC root directory
# CC = C compiler
# C++ = C++ compiler
# LINK = C/C++ linker

if $(GCC_ROOTDIR) {
  CC = $(GCC_PREFIX) $(GCC_ROOTDIR)/bin/gcc ;
  C++ = $(GCC_PREFIX) $(GCC_ROOTDIR)/bin/g++ ;
  LINK = $(C++) $(LINKER_PASSTHROUGH_FLAG)$(RUNTIME_SHARED_LIBRARY_PATH_FLAG)
                $(LINKER_PASSTHROUGH_FLAG)$(GCC_ROOTDIR)/lib
                $(LINKER_PASSTHROUGH_FLAG)$(STATIC_LIBRARY_PATH_FLAG)
                $(LINKER_PASSTHROUGH_FLAG)$(GCC_ROOTDIR)/lib ;
} else {
  CC = $(GCC_PREFIX) gcc ;
  C++ = $(GCC_PREFIX) g++ ;
  LINK = $(C++) ;
}

# PROFILE_FLAGS = flags for profiling
# there were once some shenanigans about using '-p' on some platforms
PROFILE_FLAGS ?= -pg ;

# OPTIMIZE_FLAGS = flags for optimization

OPTIMIZE_FLAGS ?= -O3 -DEUROPA_FAST ;
OPTIM = ; # suppress built-in optimization

# COVERAGE_FLAGS = flags for code coverage (e.g., gcov)

COVERAGE_FLAGS ?= -fprofile-arcs -ftest-coverage ;

# WARNING_FLAGS = flags for warnings

if $(OS) = BEOS {
  WARNING_FLAGS ?= -Wall -Wno-unused -Wno-sign-promo -Wno-multichar ;
} else {
  WARNING_FLAGS ?= -Wall ;
}

# DEBUG_FLAGS = flags to enable debugging

DEBUG_FLAGS ?= -g3 ;

# PTHREADS_LIBRARY = library with pthread related functions

if $(OS) = BEOS {
  PTHREADS_LIBRARY = condvar ;
} else if $(OS) = MINGW {
  PTHREADS_LIBRARY = pthreadGC2 ;
} else if $(OS) = SOLARIS {
  PTHREADS_LIBRARY = pthread socket ;
} else {
  PTHREADS_LIBRARY = pthread ;
}

# SUFSHARE = suffix for shared libraries

if $(OS) = CYGWIN || $(OS) = MINGW {
  SUFSHARE ?= .dll ;
} else {
  if $(OS) = MACOSX {
    SUFSHARE ?= .dylib ;
  }
  else 
  {
    SUFSHARE ?= .so ;
  }
}

# JAVA_HOME = java root directory
# JAVA = java virtual machine
# JAVAC = java compiler
# JAR = java archiver

if ! $(JAVA_HOME) {
  if $(OS) = MACOSX {
    JAVA_HOME = /System/Library/Frameworks/JavaVM.framework/Home ;
  }
}

if $(JAVA_HOME) {
  JAVA ?= [ FDirName $(JAVA_HOME:J=" ") bin java ] ;
  JAVAC ?= [ FDirName $(JAVA_HOME:J=" ") bin javac ] ;
  JAR ?= [ FDirName $(JAVA_HOME:J=" ") bin jar ] ;
} else {
  JAVA ?= java ;
  JAVAC ?= javac ;
  JAR ?= jar ;
}

if $(PLASMA_HOME) {
	ANT_HOME ?= [ FDirName $(PLASMA_HOME) ext ant ] ;
}
else if $(EUROPA_HOME) {
	ANT_HOME ?= [ FDirName $(EUROPA_HOME) ext ant ] ;
}
else {
	ANT_HOME ?= [ FDirName .. .. ext ant ] ;
}
ANT ?= [ FDirName $(ANT_HOME) bin ant ] ;

#SWIG_HOME ?= [ FDirName $(PLASMA) ext swig ] ;
SWIG ?= [ FDirName $(SWIG_HOME) swig ] ;

# CLASSPATH_SEPARATOR = separator for java class path

if $(OS) = CYGWIN {
  CLASSPATH_SEPARATOR = '";"' ;
  local colon = \: ;
  CLASSPATH = \"$(CLASSPATH:J=$(colon))\" ;
} else {
  CLASSPATH_SEPARATOR = ":" ;
}

#

if $(OS) = CYGWIN {
  PATH_PREPROCESSOR = "cygpath --windows" ;
} else {
  PATH_PREPROCESSOR = "echo" ;
}

# DLOPEN_LIBRARY = library with open libraries functions

if $(OS) = CYGWIN {
  DLOPEN_LIBRARY = ;
}
else if $(OS) = OSF {
  DLOPEN_LIBRARY = ;
}
else if $(OS) = MINGW {
  DLOPEN_LIBRARY = ;
}
else {
  DLOPEN_LIBRARY = dl ;
}

#
# Other miscellaneous platform tweaks
#

if $(OS) = CYGWIN {
  MKDIR = mkdir -p ;
  LINKFLAGS += -Wl,--add-stdcall-alias -I$(PLASMA_HOME)/build/lib -Wl,--enable-auto-import ;
}

if $(OS) = CYGWIN && $(NOCYGWIN) {
  LINKFLAGS += $(LIBRARY_PATH_SEARCH_FLAG)/usr/local/mingw/lib -mno-cygwin ;
  LINKFLAGS += -D_WIN32 ;  #to ensure Antlr3 compiles in win32 mode (see antlr3defs.h)
  PLATFORM_FLAGS += -D_NO_W32_PSEUDO_MODIFIERS -D__MINGW32__ -D_WIN32 -I/usr/local/mingw/include -mno-cygwin ;
  LINKLIBS += -lwsock32 ;  #winsock library is needed for Antlr3
  #The compiler optimazations for MinGW are too slow for autobuild, but they do work
  # -0 takes at least an hour, -01 >= 240 minutes,  -02 >= 230 minutes, -03 >= 350 minutes
  #OPTIMIZE_FLAGS = -O3 -DEUROPA_FAST ;  
  OPTIMIZE_FLAGS = -DEUROPA_FAST ;  
}

if $(OS) = MINGW {
  PLATFORM_FLAGS += -D_NO_W32_PSEUDO_MODIFIERS -D_WIN32 ;
}

if $(OS) = MACOSX {
  PLATFORM_FLAGS += -I/opt/local/include ;
}

if $(OS) = SOLARIS {
  LINKFLAGS += -Wl,-L/usr/local/lib -L/usr/lib ;
  LINKLIBS += -lsocket -lpthread ;
}

if $(OS) = BEOS {
  LINKLIBS += -lbe ;
}

if $(64BIT) = 1 {
  PLATFORM_FLAGS += -DEUROPA_64_BIT_PLATFORM ;
}

# Supress the message that ar usually prints (unifies build output further)
AR = $(AR[1]) $(AR[2])c $(AR[3-]) ;

# Using ar scan causes problems on MacOS X and Cygwin
# Without ar scan building static libraries is more
# compatible with building without libraries.

NOARSCAN = true ;

} # PlatformRules_INCLUDED
