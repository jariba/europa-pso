// ../../../ModuleTests/Parser/dnp2/DNP.compats.ddl

enum Observation_Level { 'ObsNo', 'ObsLo', 'ObsHi' } 

enum Done_Flag { 'Done', 'Undone' } 

enum End_Flag { 'End', 'Noend' } 

enum DSS_Id { 'DSS_15', 'DSS_45', 'DSS_14', 'DSS_65' } 

enum FP_Idle_Past { 'FP_HI_Bef', 'FP_LO_Bef' } 

enum FP_Idle_Future { 'FP_HI_Aft', 'FP_LO_Aft' } 

enum Mos_Idle_Past { 'Mos_HI_Bef', 'Mos_LO_Bef' } 

enum Mos_Idle_Future { 'Mos_HI_Aft', 'Mos_LO_Aft' } 

enum PB_Past { 'CS_Bef_PB', 'Rec_Bef_PB' } 

enum CS_Past { 'Rec_Bef_CS', 'PB_Bef_CS' } 

enum REC_Past { 'CS_Bef_Rec', 'Rec_Bef_Rec', 'PB_Bef_Rec' } 

enum CS_Future { 'Rec_Aft_CS', 'PB_Aft_CS' } 

enum REC_Future { 'CS_Aft_Rec', 'Rec_Aft_Rec', 'PB_Aft_Rec' } 

enum Record_Obs { 'FP_HI', 'FP_LO', 'Mos_HI', 'Mos_LO' } 

class DNP_Science___Scan_Platform {
  predicate Mosaic_LO {
    int ID;
    Observation_Level Data_Rate;
    int Length;
  }

  predicate Mosaic_HI {
    int ID;
    Observation_Level Data_Rate;
    int Length;
  }

  predicate Scan_Idle {
    Mos_Idle_Past Mos_Prior;
    Mos_Idle_Future Mos_Post;
  }

  DNP_Science __DDL__object;
  DNP_Science___Scan_Platform(DNP_Science object) {
    __DDL__object = object;
  }
}

class DNP_Science___Fields_and_Particles {
  predicate F_and_P_Observation_LO {
    int ID;
    Observation_Level Data_Rate;
    int Length;
  }

  predicate F_and_P_Observation_HI {
    int ID;
    Observation_Level Data_Rate;
    int Length;
  }

  predicate F_and_P_Idle {
    FP_Idle_Past FP_Prior;
    FP_Idle_Future FP_Post;
  }

  DNP_Science __DDL__object;
  DNP_Science___Fields_and_Particles(DNP_Science object) {
    __DDL__object = object;
  }
}

class DNP_Science {
  DNP_Science___Scan_Platform Scan_Platform;
  DNP_Science___Fields_and_Particles Fields_and_Particles;
  DNP_Science() {
    Scan_Platform = new DNP_Science___Scan_Platform(this);
    Fields_and_Particles = new DNP_Science___Fields_and_Particles(this);
  }
}

class DNP_Data___SSR_Storage_Use {
  predicate Record {
    int Start_Storage;
    int End_Storage;
    int Length;
    Observation_Level ReqFPRate;
    Observation_Level ReqMosRate;
    REC_Past Rec_Prior;
    REC_Future Rec_Post;
    Record_Obs What_obs;
  }

  predicate Playback {
    int Start_Storage;
    int End_Storage;
    int Playback_Rate;
    DSS_Id Location;
    int DSS_Opp_Num;
    int Allowed_Earlier_Opps;
    End_Flag Flagged_End;
    PB_Past PB_Prior;
  }

  predicate Constant_Storage {
    int SSR_Storage;
    int DSS_Opp_Num;
    End_Flag Flagged_End;
    CS_Past CS_Prior;
    CS_Future CS_Post;
  }

  DNP_Data __DDL__object;
  DNP_Data___SSR_Storage_Use(DNP_Data object) {
    __DDL__object = object;
  }
}

class DNP_Data {
  DNP_Data___SSR_Storage_Use SSR_Storage_Use;
  DNP_Data() {
    SSR_Storage_Use = new DNP_Data___SSR_Storage_Use(this);
  }
}

class DNP_Comm___Comm_Activity {
  predicate Pre_Cal {
    int Duration;
  }

  predicate Post_Cal {
    int Duration;
  }

  predicate Communicate {
    int Pre_Cal_Duration;
    int Post_Cal_Duration;
    DSS_Id Location;
    int Playback_Rate;
  }

  predicate Comm_Idle {
  }

  DNP_Comm __DDL__object;
  DNP_Comm___Comm_Activity(DNP_Comm object) {
    __DDL__object = object;
  }
}

class DNP_Comm {
  DNP_Comm___Comm_Activity Comm_Activity;
  DNP_Comm() {
    Comm_Activity = new DNP_Comm___Comm_Activity(this);
  }
}

class DSS_Any___DSS_Availability {
  predicate Downlink_Window {
    int Downlink_Rate;
    int Pre_Cal_Time;
    int Post_Cal_Time;
    DSS_Id loc;
    int Opp_Number;
  }

  predicate No_Window {
  }

  DSS_Any __DDL__object;
  DSS_Any___DSS_Availability(DSS_Any object) {
    __DDL__object = object;
  }
}

class DSS_Any {
  DSS_Any___DSS_Availability DSS_Availability;
  DSS_Any() {
    DSS_Availability = new DSS_Any___DSS_Availability(this);
  }
}

DNP_Science___Scan_Platform::Mosaic_LO {
  eq(ID, [0 +inf]);
  eq(Length, [0 +inf]);
  met_by(DNP_Science___Scan_Platform.Scan_Idle s0);
    eq(s0.Mos_Post, Mos_Idle_Future.'Mos_LO_Aft');
  meets(DNP_Science___Scan_Platform.Scan_Idle s1);
    eq(s1.Mos_Prior, Mos_Idle_Past.'Mos_LO_Bef');
  starts(DNP_Data___SSR_Storage_Use.Record s2);
    eq(s2.Length, Length);
    eq(s2.ReqFPRate, Observation_Level.'ObsNo');
    eq(s2.ReqMosRate, Data_Rate);
    eq(s2.What_obs, Record_Obs.'Mos_LO');
}

DNP_Science___Scan_Platform::Mosaic_HI {
  eq(ID, [0 +inf]);
  eq(Length, [0 +inf]);
  met_by(DNP_Science___Scan_Platform.Scan_Idle s0);
    eq(s0.Mos_Post, Mos_Idle_Future.'Mos_HI_Aft');
  meets(DNP_Science___Scan_Platform.Scan_Idle s1);
    eq(s1.Mos_Prior, Mos_Idle_Past.'Mos_HI_Bef');
  starts(DNP_Data___SSR_Storage_Use.Record s2);
    eq(s2.Length, Length);
    eq(s2.ReqFPRate, Observation_Level.'ObsNo');
    eq(s2.ReqMosRate, Data_Rate);
    eq(s2.What_obs, Record_Obs.'Mos_HI');
}

DNP_Science___Scan_Platform::Scan_Idle {
  if (Mos_Prior==Mos_Idle_Past.'Mos_HI_Bef') {
    met_by(DNP_Science___Scan_Platform.Mosaic_HI s0);
  }
  if (Mos_Prior==Mos_Idle_Past.'Mos_LO_Bef') {
    met_by(DNP_Science___Scan_Platform.Mosaic_LO s0);
  }
  if (Mos_Post==Mos_Idle_Future.'Mos_HI_Aft') {
    meets(DNP_Science___Scan_Platform.Mosaic_HI s0);
  }
  if (Mos_Post==Mos_Idle_Future.'Mos_LO_Aft') {
    meets(DNP_Science___Scan_Platform.Mosaic_LO s0);
  }
}

DNP_Science___Fields_and_Particles::F_and_P_Observation_LO {
  eq(ID, [0 +inf]);
  eq(Length, [0 +inf]);
  met_by(DNP_Science___Fields_and_Particles.F_and_P_Idle s0);
    eq(s0.FP_Post, FP_Idle_Future.'FP_LO_Aft');
  meets(DNP_Science___Fields_and_Particles.F_and_P_Idle s1);
    eq(s1.FP_Prior, FP_Idle_Past.'FP_LO_Bef');
  starts(DNP_Data___SSR_Storage_Use.Record s2);
    eq(s2.Length, Length);
    eq(s2.ReqFPRate, Data_Rate);
    eq(s2.ReqMosRate, Observation_Level.'ObsNo');
    eq(s2.What_obs, Record_Obs.'FP_LO');
}

DNP_Science___Fields_and_Particles::F_and_P_Observation_HI {
  eq(ID, [0 +inf]);
  eq(Length, [0 +inf]);
  met_by(DNP_Science___Fields_and_Particles.F_and_P_Idle s0);
    eq(s0.FP_Post, FP_Idle_Future.'FP_HI_Aft');
  meets(DNP_Science___Fields_and_Particles.F_and_P_Idle s1);
    eq(s1.FP_Prior, FP_Idle_Past.'FP_HI_Bef');
  starts(DNP_Data___SSR_Storage_Use.Record s2);
    eq(s2.Length, Length);
    eq(s2.ReqFPRate, Data_Rate);
    eq(s2.ReqMosRate, Observation_Level.'ObsNo');
    eq(s2.What_obs, Record_Obs.'FP_HI');
}

DNP_Science___Fields_and_Particles::F_and_P_Idle {
  if (FP_Prior==FP_Idle_Past.'FP_LO_Bef') {
    met_by(DNP_Science___Fields_and_Particles.F_and_P_Observation_LO s0);
  }
  if (FP_Prior==FP_Idle_Past.'FP_HI_Bef') {
    met_by(DNP_Science___Fields_and_Particles.F_and_P_Observation_HI s0);
  }
  if (FP_Post==FP_Idle_Future.'FP_LO_Aft') {
    meets(DNP_Science___Fields_and_Particles.F_and_P_Observation_LO s0);
  }
  if (FP_Post==FP_Idle_Future.'FP_HI_Aft') {
    meets(DNP_Science___Fields_and_Particles.F_and_P_Observation_HI s0);
  }
}

DNP_Data___SSR_Storage_Use::Record {
  BOUNDS_RECORD_END_STORAGE(End_Storage, Start_Storage, ReqFPRate, ReqMosRate, Length);
  BOUNDS_RECORD_START_STORAGE(Start_Storage, End_Storage, ReqFPRate, ReqMosRate, Length);
  eq(Start_Storage, [0 90000000]);
  eq(End_Storage, [0 90000000]);
  eq(Length, [0 +inf]);
  if (What_obs==Record_Obs.'FP_HI') {
    starts(DNP_Science___Fields_and_Particles.F_and_P_Observation_HI s0);
  }
  if (What_obs==Record_Obs.'FP_LO') {
    starts(DNP_Science___Fields_and_Particles.F_and_P_Observation_LO s0);
  }
  if (What_obs==Record_Obs.'Mos_HI') {
    starts(DNP_Science___Scan_Platform.Mosaic_HI s0);
  }
  if (What_obs==Record_Obs.'Mos_LO') {
    starts(DNP_Science___Scan_Platform.Mosaic_LO s0);
  }
  if (Rec_Prior==REC_Past.'CS_Bef_Rec') {
    met_by(DNP_Data___SSR_Storage_Use.Constant_Storage s0);
      eq(s0.SSR_Storage, Start_Storage);
      eq(s0.CS_Post, CS_Future.'Rec_Aft_CS');
  }
  if (Rec_Prior==REC_Past.'Rec_Bef_Rec') {
    met_by(DNP_Data___SSR_Storage_Use.Record s0);
      eq(s0.End_Storage, Start_Storage);
      eq(s0.Rec_Post, REC_Future.'Rec_Aft_Rec');
  }
  if (Rec_Post==REC_Future.'Rec_Aft_Rec') {
    meets(DNP_Data___SSR_Storage_Use.Record s0);
      eq(s0.Start_Storage, End_Storage);
      eq(s0.Rec_Prior, REC_Past.'Rec_Bef_Rec');
  }
  if (Rec_Post==REC_Future.'PB_Aft_Rec') {
    meets(DNP_Data___SSR_Storage_Use.Playback s0);
      eq(s0.Start_Storage, End_Storage);
      eq(s0.PB_Prior, PB_Past.'Rec_Bef_PB');
  }
  if (Rec_Post==REC_Future.'CS_Aft_Rec') {
    meets(DNP_Data___SSR_Storage_Use.Constant_Storage s0);
      eq(s0.SSR_Storage, End_Storage);
      eq(s0.CS_Prior, CS_Past.'Rec_Bef_CS');
  }
}

DNP_Data___SSR_Storage_Use::Playback {
  eq(duration, [100 +inf]);
  COMPUTE_PLAYBACK_DURATION(duration, Start_Storage, End_Storage, Playback_Rate, start, end);
  BOUNDS_PLAYBACK_START_STORAGE(Start_Storage, End_Storage, Playback_Rate, duration);
  BOUNDS_PLAYBACK_END_STORAGE(End_Storage, Start_Storage, Playback_Rate, duration);
  FIGURE_EARLIER_OP_IDS(Allowed_Earlier_Opps, DSS_Opp_Num);
  eq(Start_Storage, [0 90000000]);
  eq(End_Storage, [0 90000000]);
  eq(Playback_Rate, [0 +inf]);
  eq(DSS_Opp_Num, [0 +inf]);
  eq(Allowed_Earlier_Opps, [0 +inf]);
  meets(DNP_Data___SSR_Storage_Use.Constant_Storage s0);
    eq(s0.SSR_Storage, End_Storage);
    eq(s0.CS_Prior, CS_Past.'PB_Bef_CS');
  equals(DNP_Comm___Comm_Activity.Communicate s1);
    eq(s1.Location, Location);
    eq(s1.Playback_Rate, Playback_Rate);
  contained_by(DNP_Science___Scan_Platform.Scan_Idle s2);
  contained_by(DNP_Science___Fields_and_Particles.F_and_P_Idle s3);
  contained_by(DSS_Any___DSS_Availability.Downlink_Window s4);
    eq(s4.Downlink_Rate, Playback_Rate);
    eq(s4.loc, Location);
    eq(s4.Opp_Number, DSS_Opp_Num);
  if (PB_Prior==PB_Past.'CS_Bef_PB') {
    met_by(DNP_Data___SSR_Storage_Use.Constant_Storage s0);
      eq(s0.SSR_Storage, Start_Storage);
      eq(s0.DSS_Opp_Num, Allowed_Earlier_Opps);
      eq(s0.Flagged_End, Flagged_End);
      eq(s0.CS_Post, CS_Future.'PB_Aft_CS');
  }
  if (PB_Prior==PB_Past.'Rec_Bef_PB') {
    met_by(DNP_Data___SSR_Storage_Use.Record s0);
      eq(s0.End_Storage, Start_Storage);
      eq(s0.Rec_Post, REC_Future.'PB_Aft_Rec');
  }
}

DNP_Data___SSR_Storage_Use::Constant_Storage {
  eq(SSR_Storage, [0 90000000]);
  eq(DSS_Opp_Num, [0 +inf]);
  if (CS_Prior==CS_Past.'PB_Bef_CS') {
    met_by(DNP_Data___SSR_Storage_Use.Playback s0);
      eq(s0.End_Storage, SSR_Storage);
      eq(s0.DSS_Opp_Num, DSS_Opp_Num);
      eq(s0.Flagged_End, Flagged_End);
  }
  if (CS_Prior==CS_Past.'Rec_Bef_CS') {
    met_by(DNP_Data___SSR_Storage_Use.Record s0);
      eq(s0.End_Storage, SSR_Storage);
      eq(s0.Rec_Post, REC_Future.'CS_Aft_Rec');
  }
  if (CS_Post==CS_Future.'Rec_Aft_CS') {
    meets(DNP_Data___SSR_Storage_Use.Record s0);
      eq(s0.Start_Storage, SSR_Storage);
      eq(s0.Rec_Prior, REC_Past.'CS_Bef_Rec');
  }
  if (CS_Post==CS_Future.'PB_Aft_CS') {
    meets(DNP_Data___SSR_Storage_Use.Playback s0);
      eq(s0.Start_Storage, SSR_Storage);
      eq(s0.PB_Prior, PB_Past.'CS_Bef_PB');
  }
}

DNP_Comm___Comm_Activity::Pre_Cal {
  eq(duration, Duration);
  met_by(DNP_Comm___Comm_Activity.Comm_Idle s0);
  meets(DNP_Comm___Comm_Activity.Communicate s1);
    eq(s1.Pre_Cal_Duration, Duration);
}

DNP_Comm___Comm_Activity::Post_Cal {
  eq(duration, Duration);
  meets(DNP_Comm___Comm_Activity.Comm_Idle s0);
  met_by(DNP_Comm___Comm_Activity.Communicate s1);
    eq(s1.Post_Cal_Duration, Duration);
}

DNP_Comm___Comm_Activity::Communicate {
  eq(Playback_Rate, [0 +inf]);
  contained_by(DSS_Any___DSS_Availability.Downlink_Window s0);
    eq(s0.Downlink_Rate, Playback_Rate);
    eq(s0.Pre_Cal_Time, Pre_Cal_Duration);
    eq(s0.Post_Cal_Time, Post_Cal_Duration);
    eq(s0.loc, Location);
  met_by(DNP_Comm___Comm_Activity.Pre_Cal s1);
    eq(s1.Duration, Pre_Cal_Duration);
  meets(DNP_Comm___Comm_Activity.Post_Cal s2);
    eq(s2.Duration, Post_Cal_Duration);
}

DNP_Comm___Comm_Activity::Comm_Idle {
  met_by(DNP_Comm___Comm_Activity.Post_Cal s0);
  meets(DNP_Comm___Comm_Activity.Pre_Cal s1);
}

DSS_Any___DSS_Availability::Downlink_Window {
  eq(Downlink_Rate, [0 +inf]);
  eq(Opp_Number, [0 +inf]);
  meets(DSS_Any___DSS_Availability.No_Window s0);
  met_by(DSS_Any___DSS_Availability.No_Window s1);
}

DSS_Any___DSS_Availability::No_Window {
  meets(DSS_Any___DSS_Availability.Downlink_Window s0);
  met_by(DSS_Any___DSS_Availability.Downlink_Window s1);
}

