// xmonkey.ddl

enum Location_Label { Rock, Tree } 

enum Return_Status { OK, Failed } 

enum Horizon_Label { Intermediate_Horizon, End_Horizon } 

enum Agent_Mode_Label { Nominal, Standby } 

enum Agent_Status { Success, Failure } 

class Monkey_Class;
class Agent_Class;

class Monkey_Class___Location_SV {
  predicate At {
    Location_Label Loc_Label;
  }

  predicate Going {
    Location_Label From_Loc;
    Location_Label To_Loc;
    Return_Status status;
    bool status_rcvd;
  }

  Monkey_Class __DDL__object;
  Monkey_Class___Location_SV(Monkey_Class object) {
    __DDL__object = object;
  }
}

class Monkey_Class___Altitude_SV {
  predicate LOW {
  }

  predicate HIGH {
  }

  predicate CLIMBING {
    Return_Status status;
    bool status_rcvd;
  }

  predicate CLIMBING_DOWN {
    Return_Status status;
    bool status_rcvd;
  }

  Monkey_Class __DDL__object;
  Monkey_Class___Altitude_SV(Monkey_Class object) {
    __DDL__object = object;
  }
}

class Monkey_Class___Banana_SV {
  predicate NO_BANANA {
  }

  predicate NOT_HAVE_BANANA {
  }

  predicate HAVE_BANANA {
  }

  predicate GRABBING_BANANA {
    Return_Status status;
    bool status_rcvd;
  }

  Monkey_Class __DDL__object;
  Monkey_Class___Banana_SV(Monkey_Class object) {
    __DDL__object = object;
  }
}

class Monkey_Class {
  Monkey_Class___Location_SV Location_SV;
  Monkey_Class___Altitude_SV Altitude_SV;
  Monkey_Class___Banana_SV Banana_SV;
  Monkey_Class() {
    Location_SV = new Monkey_Class___Location_SV(this);
    Altitude_SV = new Monkey_Class___Altitude_SV(this);
    Banana_SV = new Monkey_Class___Banana_SV(this);
  }
}

class Agent_Class___Planner_SV {
  predicate Planning {
    int Start_Horizon;
    int Horizon_End;
    Return_Status status;
    bool status_rcvd;
  }

  predicate Planner_Idle {
  }

  Agent_Class __DDL__object;
  Agent_Class___Planner_SV(Agent_Class object) {
    __DDL__object = object;
  }
}

class Agent_Class___Planning_Horizon_SV {
  predicate Planning_Horizon {
    Horizon_Label horizon;
    int Token_Start;
    int Token_End;
    int Horizon_Start;
    int Horizon_End;
  }

  Agent_Class __DDL__object;
  Agent_Class___Planning_Horizon_SV(Agent_Class object) {
    __DDL__object = object;
  }
}

class Agent_Class___Agent_Mode_SV {
  predicate Agent_Mode {
    Agent_Mode_Label mode;
    Agent_Status status;
  }

  predicate Local_Abort {
  }

  Agent_Class __DDL__object;
  Agent_Class___Agent_Mode_SV(Agent_Class object) {
    __DDL__object = object;
  }
}

class Agent_Class {
  Agent_Class___Planner_SV Planner_SV;
  Agent_Class___Planning_Horizon_SV Planning_Horizon_SV;
  Agent_Class___Agent_Mode_SV Agent_Mode_SV;
  Agent_Class() {
    Planner_SV = new Agent_Class___Planner_SV(this);
    Planning_Horizon_SV = new Agent_Class___Planning_Horizon_SV(this);
    Agent_Mode_SV = new Agent_Class___Agent_Mode_SV(this);
  }
}

Monkey_Class___Location_SV::At {
  eq(duration, [4 +inf]);
//output subgoal
//outputSubgoalCreation
  met_by(Monkey_Class___Location_SV.Going s0);
    eq(s0.To_Loc, Loc_Label);
    eq(s0.status, Return_Status.OK);
    eq(s0.status_rcvd, true);
//output subgoal
//outputSubgoalCreation
  meets(Monkey_Class___Location_SV.Going s1);
    eq(s1.From_Loc, Loc_Label);
}

Monkey_Class___Location_SV::Going {
  eq(duration, [4 +inf]);
  neq(From_Loc, To_Loc);
//output subgoal
//outputSubgoalCreation
  met_by(Monkey_Class___Location_SV.At s0);
    eq(s0.Loc_Label, From_Loc);
//output subgoal
//outputSubgoalCreation
  meets(Monkey_Class___Location_SV.At s1);
    eq(s1.Loc_Label, To_Loc);
//output subgoal
//outputSubgoalCreation
  contained_by(Monkey_Class___Altitude_SV.LOW s2);
}

Monkey_Class___Altitude_SV::LOW {
  eq(duration, [4 +inf]);
//output subgoal
//outputSubgoalCreation
  met_by(Monkey_Class___Altitude_SV.CLIMBING_DOWN s0);
    eq(s0.status, Return_Status.OK);
    eq(s0.status_rcvd, true);
//output subgoal
//outputSubgoalCreation
  meets(Monkey_Class___Altitude_SV.CLIMBING s1);
}

Monkey_Class___Altitude_SV::HIGH {
  eq(duration, [4 +inf]);
//output subgoal
//outputSubgoalCreation
  met_by(Monkey_Class___Altitude_SV.CLIMBING s0);
    eq(s0.status, Return_Status.OK);
    eq(s0.status_rcvd, true);
//output subgoal
//outputSubgoalCreation
  meets(Monkey_Class___Altitude_SV.CLIMBING_DOWN s1);
}

Monkey_Class___Altitude_SV::CLIMBING {
  eq(duration, [4 +inf]);
//output subgoal
//outputSubgoalCreation
  met_by(Monkey_Class___Altitude_SV.LOW s0);
//output subgoal
//outputSubgoalCreation
  meets(Monkey_Class___Altitude_SV.HIGH s1);
//output subgoal
//outputSubgoalCreation
  contained_by(Monkey_Class___Location_SV.At s2);
    eq(s2.Loc_Label, Location_Label.Tree);
}

Monkey_Class___Altitude_SV::CLIMBING_DOWN {
  eq(duration, [4 +inf]);
//output subgoal
//outputSubgoalCreation
  met_by(Monkey_Class___Altitude_SV.HIGH s0);
//output subgoal
//outputSubgoalCreation
  meets(Monkey_Class___Altitude_SV.LOW s1);
}

Monkey_Class___Banana_SV::NO_BANANA {
  eq(duration, [4 +inf]);
}

Monkey_Class___Banana_SV::NOT_HAVE_BANANA {
  eq(duration, [4 +inf]);
//output subgoal
//outputSubgoalCreation
  meets(Monkey_Class___Banana_SV.GRABBING_BANANA s0);
}

Monkey_Class___Banana_SV::HAVE_BANANA {
  eq(duration, [4 +inf]);
//output subgoal
//outputSubgoalCreation
  met_by(Monkey_Class___Banana_SV.GRABBING_BANANA s0);
    eq(s0.status, Return_Status.OK);
    eq(s0.status_rcvd, true);
}

Monkey_Class___Banana_SV::GRABBING_BANANA {
  eq(duration, [4 12]);
//output subgoal
//outputSubgoalCreation
  met_by(Monkey_Class___Banana_SV.NOT_HAVE_BANANA s0);
//output subgoal
//outputSubgoalCreation
  meets(Monkey_Class___Banana_SV.HAVE_BANANA s1);
//output subgoal
//outputSubgoalCreation
  contained_by(Monkey_Class___Location_SV.At s2);
    eq(s2.Loc_Label, Location_Label.Tree);
//output subgoal
//outputSubgoalCreation
  contained_by(Monkey_Class___Altitude_SV.HIGH s3);
}

Agent_Class___Planner_SV::Planning {
  eq(duration, [4 3600]);
//output subgoal
//outputSubgoalCreation
  meets(Agent_Class___Planner_SV.Planner_Idle s0);
//output subgoal
//outputSubgoalCreation
  met_by(Agent_Class___Planner_SV.Planner_Idle s1);
//output subgoal
//outputSubgoalCreation
  contained_by(Agent_Class___Planning_Horizon_SV.Planning_Horizon s2);
  temporaldistance(s2.start, [4 +inf], this.start);
  temporaldistance(this.end, [4 +inf], s2.end);
    eq(s2.horizon, Horizon_Label.Intermediate_Horizon);
    eq(s2.Horizon_Start, Start_Horizon);
    eq(s2.Horizon_End, Horizon_End);
}

Agent_Class___Planner_SV::Planner_Idle {
  eq(duration, [4 +inf]);
//output subgoal
//outputSubgoalCreation
  met_by(Agent_Class___Planner_SV.Planning s0);
//output subgoal
//outputSubgoalCreation
  meets(Agent_Class___Planner_SV.Planning s1);
}

Agent_Class___Planning_Horizon_SV::Planning_Horizon {
  eq(Horizon_Start, [0 100000000]);
  eq(Horizon_End, [0 100000000]);
  if (horizon==Horizon_Label.End_Horizon) {
//output subgoal
//outputSubgoalCreation
    met_by(Agent_Class___Planning_Horizon_SV.Planning_Horizon s0);
      eq(s0.horizon, Horizon_Label.Intermediate_Horizon);
  }
  if (horizon==Horizon_Label.Intermediate_Horizon) {
//output subgoal
//outputSubgoalCreation
    met_by(Agent_Class___Planning_Horizon_SV.Planning_Horizon s0);
      eq(s0.horizon, Horizon_Label.Intermediate_Horizon);
  }
  if (horizon==Horizon_Label.Intermediate_Horizon) {
//output subgoal
//outputSubgoalCreation
    meets(Agent_Class___Planning_Horizon_SV.Planning_Horizon s0);
      eq(s0.Token_End, Horizon_End);
  }
  if (horizon==Horizon_Label.Intermediate_Horizon) {
//output subgoal
//outputSubgoalCreation
    contains(Agent_Class___Planner_SV.Planning s0);
      eq(s0.Start_Horizon, Horizon_Start);
      eq(s0.Horizon_End, Horizon_End);
  }
  if (horizon==Horizon_Label.End_Horizon) {
    eq(duration, [4 +inf]);
    eq(Token_Start, start);
    eq(Token_End, end);
  }
  if (horizon==Horizon_Label.Intermediate_Horizon) {
    eq(duration, [4 +inf]);
    eq(Token_Start, start);
    eq(Token_End, end);
    addeq(4, Horizon_Start, end);
  }
}

Agent_Class___Agent_Mode_SV::Agent_Mode {
  eq(duration, [4 +inf]);
  if (mode==Agent_Mode_Label.Standby) {
//output subgoal
//outputSubgoalCreation
    meets(Agent_Class___Agent_Mode_SV.Local_Abort s0);
  }
  if (mode==Agent_Mode_Label.Nominal) {
    if (status==Agent_Status.Success) {
//output subgoal
//outputSubgoalCreation
      contains_start(Monkey_Class___Banana_SV.HAVE_BANANA s0);
      temporaldistance(this.start, [0 +inf], s0.start);
      temporaldistance(s0.start, [0 +inf], this.end);
    }
  }
  if (mode==Agent_Mode_Label.Nominal) {
    if (status==Agent_Status.Success) {
    }
  }
  if (mode==Agent_Mode_Label.Nominal) {
    if (status==Agent_Status.Success) {
//output subgoal
//outputSubgoalCreation
      meets(Agent_Class___Agent_Mode_SV.Local_Abort s0);
    }
  }
  if (mode==Agent_Mode_Label.Nominal) {
    if (status==Agent_Status.Success) {
    }
  }
  if (mode==Agent_Mode_Label.Nominal) {
    if (status==Agent_Status.Failure) {
//output subgoal
//outputSubgoalCreation
      meets(Agent_Class___Agent_Mode_SV.Agent_Mode s0);
        eq(s0.mode, Agent_Mode_Label.Standby);
    }
  }
  if (mode==Agent_Mode_Label.Nominal) {
    if (status==Agent_Status.Failure) {
    }
  }
  if (mode==Agent_Mode_Label.Nominal) {
    eq(duration, [4 +inf]);
  }
  if (mode==Agent_Mode_Label.Standby) {
    eq(duration, [4 +inf]);
  }
}

Agent_Class___Agent_Mode_SV::Local_Abort {
  eq(duration, [4 +inf]);
//output subgoal
//outputSubgoalCreation
  met_by(Agent_Class___Agent_Mode_SV.Agent_Mode s0);
}

