// ../../../ModuleTests/Parser/monkey2/monkey.ddl

enum Location_Label { '"Rock"', '"Open Clearing"', '"Tree"' } 

class Monkey_Class___Location_SV {
  predicate At {
    Location_Label Loc_Label;

    eq(duration, [1 +inf]);
  }

  predicate Going {
    Location_Label From_Loc;
    Location_Label To_Loc;

    eq(duration, [5 +inf]);
    neq(From_Loc, To_Loc);
  }

  Monkey_Class __DDL__object;
  Monkey_Class___Location_SV(Monkey_Class object) {
    __DDL__object = object;
  }
}

class Monkey_Class___Altitude_SV {
  predicate LOW {
    eq(duration, [1 +inf]);
  }

  predicate HIGH {
    Location_Label Where;

    eq(duration, [1 +inf]);
  }

  predicate CLIMBING {
    Location_Label where;

    eq(duration, [10 +inf]);
    neq(where, Location_Label.'"Open Clearing"');
  }

  predicate CLIMBING_DOWN {
    Location_Label where;

    eq(duration, [1 +inf]);
  }

  Monkey_Class __DDL__object;
  Monkey_Class___Altitude_SV(Monkey_Class object) {
    __DDL__object = object;
  }
}

class Monkey_Class___Banana_SV {
  predicate NOT_HAVE_BANANA {
    eq(duration, [1 +inf]);
  }

  predicate HAVE_BANANA {
    eq(duration, [1 +inf]);
  }

  predicate GRABBING_BANANA {
    eq(duration, [1 +inf]);
  }

  Monkey_Class __DDL__object;
  Monkey_Class___Banana_SV(Monkey_Class object) {
    __DDL__object = object;
  }
}

class Monkey_Class {
  Monkey_Class___Location_SV Location_SV;
  Monkey_Class___Altitude_SV Altitude_SV;
  Monkey_Class___Banana_SV Banana_SV;
  Monkey_Class() {
    Location_SV = new Monkey_Class___Location_SV(this);
    Altitude_SV = new Monkey_Class___Altitude_SV(this);
    Banana_SV = new Monkey_Class___Banana_SV(this);
  }
}

Monkey_Class___Location_SV::At {
  met_by(Monkey_Class___Location_SV.Going s0);
    eq(s0.To_Loc, Loc_Label);
  meets(Monkey_Class___Location_SV.Going s1);
    eq(s1.From_Loc, Loc_Label);
}

Monkey_Class___Location_SV::Going {
  met_by(Monkey_Class___Location_SV.At s0);
    eq(s0.Loc_Label, From_Loc);
  meets(Monkey_Class___Location_SV.At s1);
    eq(s1.Loc_Label, To_Loc);
  contained_by(Monkey_Class___Altitude_SV.LOW s2);
  if (From_Loc==Location_Label.'"Rock"') {
    neq(To_Loc, Location_Label.'"Tree"');
  }
  if (From_Loc==Location_Label.'"Tree"') {
    neq(To_Loc, Location_Label.'"Rock"');
  }
}

Monkey_Class___Altitude_SV::LOW {
  met_by(Monkey_Class___Altitude_SV.CLIMBING_DOWN s0);
  meets(Monkey_Class___Altitude_SV.CLIMBING s1);
}

Monkey_Class___Altitude_SV::HIGH {
  contained_by(Monkey_Class___Location_SV.At s0);
    eq(s0.Loc_Label, Where);
  met_by(Monkey_Class___Altitude_SV.CLIMBING s1);
    eq(s1.where, Where);
  meets(Monkey_Class___Altitude_SV.CLIMBING_DOWN s2);
    eq(s2.where, Where);
}

Monkey_Class___Altitude_SV::CLIMBING {
  met_by(Monkey_Class___Altitude_SV.LOW s0);
  meets(Monkey_Class___Altitude_SV.HIGH s1);
    eq(s1.Where, where);
  if (where==Location_Label.'"Rock"') {
    contained_by(Monkey_Class___Location_SV.At s0);
      eq(s0.Loc_Label, Location_Label.'"Rock"');
  }
  if (where==Location_Label.'"Tree"') {
    contained_by(Monkey_Class___Location_SV.At s0);
      eq(s0.Loc_Label, Location_Label.'"Tree"');
  }
}

Monkey_Class___Altitude_SV::CLIMBING_DOWN {
  met_by(Monkey_Class___Altitude_SV.HIGH s0);
    eq(s0.Where, where);
  meets(Monkey_Class___Altitude_SV.LOW s1);
  if (where==Location_Label.'"Rock"') {
    contained_by(Monkey_Class___Location_SV.At s0);
      eq(s0.Loc_Label, Location_Label.'"Rock"');
  }
  if (where==Location_Label.'"Tree"') {
    contained_by(Monkey_Class___Location_SV.At s0);
      eq(s0.Loc_Label, Location_Label.'"Tree"');
  }
}

Monkey_Class___Banana_SV::NOT_HAVE_BANANA {
  meets(Monkey_Class___Banana_SV.GRABBING_BANANA s0);
}

Monkey_Class___Banana_SV::HAVE_BANANA {
  met_by(Monkey_Class___Banana_SV.GRABBING_BANANA s0);
}

Monkey_Class___Banana_SV::GRABBING_BANANA {
  met_by(Monkey_Class___Banana_SV.NOT_HAVE_BANANA s0);
  meets(Monkey_Class___Banana_SV.HAVE_BANANA s1);
  contained_by(Monkey_Class___Location_SV.At s2);
    eq(s2.Loc_Label, Location_Label.'"Tree"');
  contained_by(Monkey_Class___Altitude_SV.HIGH s3);
}

