// ../../../ModuleTests/Parser/rover/rover2a.ddl

enum Location_Label { 'lander', 'rock', 'hill', 'sand', 'martian_city' } 

class Rover_Class___location {
  predicate At {
    Location_Label Loc_Label;

    eq(duration, [1 +inf]);
  }

  predicate Going {
    Location_Label From_Loc;
    Location_Label To_Loc;

    eq(duration, [5 15]);
    neq(From_Loc, To_Loc);
  }

  Rover_Class __DDL__object;
  Rover_Class___location(Rover_Class object) {
    __DDL__object = object;
  }
}

class Rover_Class___activity {
  predicate Wave {
    Rover_Class rover;
    bool withArm;
    bool isLander;
    bool toLander;
    Location_Label toLocation;
    Location_Label fromLocation;

    eq(duration, [1 +inf]);
    neq(rover, object.__DDL__object);
    neq(withArm, false);
    neq(withArm, false);
    neq(withArm, false);
    condadiff(toLander, true, isLander);
    condadiff(isLander, true, toLander);
    condadiff(Location_Label.'lander', toLocation, isLander);
    neq(toLocation, fromLocation);
    condadiff(true, toLocation, fromLocation);
    condadiff(true, toLocation, fromLocation);
    condadiff(true, toLocation, fromLocation);
  }

  predicate Idle {
    eq(duration, [1 +inf]);
  }

  Rover_Class __DDL__object;
  Rover_Class___activity(Rover_Class object) {
    __DDL__object = object;
  }
}

class Rover_Class___foo {
  predicate DoFoo {
    int value;
    float real;
    float sum;
    float inf;
    float inf2;

    eq(duration, [1 +inf]);
    eq(real, [-1 15]);
    eq(sum, [0 10]);
    eq(inf, [-10 +inf]);
    sum(sum, real, [1.5 10], [0 10], inf);
    sum(real, inf, inf2);
    eq(inf2, [-inf 20]);
  }

  Rover_Class __DDL__object;
  Rover_Class___foo(Rover_Class object) {
    __DDL__object = object;
  }
}

class Rover_Class___bar {
  predicate DoBar {
    int value;

    eq(duration, [1 +inf]);
  }

  predicate NotDoBar {
    int value;

    eq(duration, [1 +inf]);
  }

  Rover_Class __DDL__object;
  Rover_Class___bar(Rover_Class object) {
    __DDL__object = object;
  }
}

class Rover_Class {
  Rover_Class___location location;
  Rover_Class___activity activity;
  Rover_Class___foo foo;
  Rover_Class___bar bar;
  Rover_Class() {
    location = new Rover_Class___location(this);
    activity = new Rover_Class___activity(this);
    foo = new Rover_Class___foo(this);
    bar = new Rover_Class___bar(this);
  }
}

Rover_Class___location::At {
  met_by(Going s0);
    eq(s0.To_Loc, Loc_Label);
  meets(Going s1);
    eq(s1.From_Loc, Loc_Label);
}

Rover_Class___location::Going {
  met_by(At s0);
    eq(s0.Loc_Label, From_Loc);
  meets(At s1);
    eq(s1.Loc_Label, To_Loc);
}

Rover_Class___activity::Wave {
  met_by(Idle s0);
  meets(Idle s1);
  contained_by(Rover_Class___location.At s2);
    eq(object.__DDL__object.location, s2.object);
    eq(s2.Loc_Label, fromLocation);
  contained_by(?rover___location.At s3);
    eq(s3.Loc_Label, toLocation);
}

Rover_Class___activity::Idle {
  met_by(Wave s0);
  meets(Wave s1);
}

Rover_Class___foo::DoFoo {
  contained_by(Rover_Class___bar.DoBar s0m0, Rover_Class___bar.NotDoBar s0m1);
    eq(object.__DDL__object.bar, s0m0.object);
    eq(object.__DDL__object.bar, s0m1.object);
    eq(s0m0.value, value);
    eq(s0m1.value, value);
}

Rover_Class___bar::DoBar {
  met_by(NotDoBar s0);
  meets(NotDoBar s1);
}

Rover_Class___bar::NotDoBar {
  met_by(DoBar s0);
  meets(DoBar s1);
}

