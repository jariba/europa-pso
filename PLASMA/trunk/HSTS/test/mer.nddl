// ../../../ModuleTests/Parser/mer/mer.model.ddl

enum Comm_Dir { 'UPLINK', 'DOWNLINK' } 

enum DSN_Antenna { 'HGA', 'LGA' } 

enum Comm_succ { 'TRANSMIT_MEETS_RECEIVE', 'TRANSMIT_MEETS_STOW', 'RECEIVE_MEETS_TRANSMIT', 'RECEIVE_MEETS_STOW' } 

enum Comm_pred { 'COMM_METBY_COMM', 'COMM_METBY_SLEW' } 

enum SurvivalHtr_Use { 'SLEW_TO_NOHTR', 'SLEW_TO_HTR' } 

enum IDD_Instrument { 'MI', 'MB', 'APXS', 'RAT' } 

enum IDD_Move_succ { 'MOVE_MEETS_ROTATE', 'MOVE_MEETS_GUARDEDMOVE', 'MOVE_MEETS_STOW' } 

enum IDD_Move_pred { 'MOVE_METBY_STOW', 'MOVE_METBY_INCONTACT' } 

enum IDD_Guarded_pred { 'GUARDEDMOVE_METBY_ROTATE', 'GUARDEDMOVE_METBY_MOVE' } 

enum MI_idle_succ { 'IDLE_MEETS_ACTIVE', 'IDLE_MEETS_NTHT' } 

enum MI_idle_pred { 'IDLE_METBY_ACTIVE', 'IDLE_MET_BY_NTHT' } 

enum IDD_Htr_Use { 'AFTER_OPHTR', 'BEFORE_SURVIVALHTR' } 

enum PMA_Mount_Slewing_succ { 'SLEWING_MEETS_IDLE', 'SLEWING_MEETS_PARKED' } 

enum PMA_Mount_Slewing_pred { 'SLEWING_MET_BY_IDLE', 'SLEWING_MET_BY_PARKED' } 

enum PMA_MT_Idle_succ { 'MT_IDLE_MEETS_SLEWING', 'MT_IDLE_MEETS_SURVIVE' } 

enum PMA_MT_Idle_pred { 'MT_IDLE_MET_BY_ACTIVE', 'MT_IDLE_MET_BY_SURVIVE' } 

enum PMA_PC_Idle_succ { 'PC_IDLE_MEETS_ACTIVE', 'PC_IDLE_MEETS_SURVIVE' } 

enum PMA_PC_Idle_pred { 'PC_IDLE_MET_BY_ACTIVE', 'PC_IDLE_MET_BY_SURVIVE' } 

enum PMA_Instrument { 'PC', 'NC', 'MT' } 

enum Slew_Within { 'MT_SLEW_WITHIN_IDLE', 'MT_SLEW_WITHIN_PARKED' } 

class Comm_Window_Class___Comm_DSN_SV {
  predicate Comm_DSN_Available {
    DSN_Antenna dsn_ant;
    Comm_Dir dir;
    int ddl_duration;
    int rate;

    eq(duration, ddl_duration);
  }

  predicate Comm_DSN_Unavail {
  }

  Comm_Window_Class __DDL__object;
  Comm_Window_Class___Comm_DSN_SV(Comm_Window_Class object) {
    __DDL__object = object;
  }
}

class Comm_Window_Class___Comm_Orbiter_SV {
  predicate Comm_Orbiter_Available {
    Comm_Dir dir;
    int ddl_duration;
    int rate;

    eq(duration, ddl_duration);
  }

  predicate Comm_Orbiter_Unavail {
  }

  Comm_Window_Class __DDL__object;
  Comm_Window_Class___Comm_Orbiter_SV(Comm_Window_Class object) {
    __DDL__object = object;
  }
}

class Comm_Window_Class {
  Comm_Window_Class___Comm_DSN_SV Comm_DSN_SV;
  Comm_Window_Class___Comm_Orbiter_SV Comm_Orbiter_SV;
  Comm_Window_Class() {
    Comm_DSN_SV = new Comm_Window_Class___Comm_DSN_SV(this);
    Comm_Orbiter_SV = new Comm_Window_Class___Comm_Orbiter_SV(this);
  }
}

class HGA_Class___HGA_Mode_SV {
  predicate HGA_Stow {
  }

  predicate HGA_Slew {
    int power;
    int negpower;
    int energy;
    SurvivalHtr_Use priorto_survival;

    eq(duration, 300);
    eq(priorto_survival, *);
    eq(power, 18);
    addmuleq(0, power, duration, energy);
  }

  predicate HGA_Comm {
    Comm_Dir dir;
    int ddl_duration;
    int rate;
    int power;
    int negpower;
    int energy;
    int data;
    Comm_succ succ;
    Comm_pred pred;
    int negdata;

    eq(pred, *);
    eq(data, [0 50000000]);
    eq(negdata, [-50000000 0]);
  }

  HGA_Class __DDL__object;
  HGA_Class___HGA_Mode_SV(HGA_Class object) {
    __DDL__object = object;
  }
}

class HGA_Class {
  HGA_Class___HGA_Mode_SV HGA_Mode_SV;
  HGA_Class() {
    HGA_Mode_SV = new HGA_Class___HGA_Mode_SV(this);
  }
}

class IDD_Class___IDD_IDD_SV {
  predicate IDD_Stow {
  }

  predicate IDD_Move {
    IDD_Move_succ succ;
    IDD_Move_pred pred;
    IDD_Htr_Use priorto_survival;
    int power;
    int negpower;
    int energy;

    eq(succ, *);
    eq(pred, *);
    eq(priorto_survival, *);
    eq(duration, 114);
    eq(power, 15);
    addmuleq(0, power, duration, energy);
  }

  predicate IDD_Rotate {
    IDD_Instrument tool;
    int power;
    int negpower;
    int energy;

    eq(duration, 114);
    eq(power, 15);
    addmuleq(0, power, duration, energy);
  }

  predicate IDD_Guarded_Move {
    IDD_Guarded_pred pred;
    int power;
    int negpower;
    int energy;

    eq(duration, 114);
    eq(pred, *);
    eq(power, 15);
    addmuleq(0, power, duration, energy);
  }

  predicate IDD_In_Contact {
  }

  IDD_Class __DDL__object;
  IDD_Class___IDD_IDD_SV(IDD_Class object) {
    __DDL__object = object;
  }
}

class IDD_Class___IDD_MI_SV {
  predicate IDD_MI_Idle {
    MI_idle_succ succ;
    MI_idle_pred pred;
  }

  predicate IDD_MI_Active {
  }

  predicate IDD_MI_SURVIVE {
    int power;
    int negpower;
    int energy;

    eq(power, 3);
    addmuleq(0, power, duration, energy);
  }

  IDD_Class __DDL__object;
  IDD_Class___IDD_MI_SV(IDD_Class object) {
    __DDL__object = object;
  }
}

class IDD_Class___IDD_MB_SV {
  predicate IDD_MB_Idle {
  }

  predicate IDD_MB_Active {
  }

  IDD_Class __DDL__object;
  IDD_Class___IDD_MB_SV(IDD_Class object) {
    __DDL__object = object;
  }
}

class IDD_Class___IDD_RAT_SV {
  predicate IDD_RAT_Idle {
  }

  predicate IDD_RAT_Active {
  }

  IDD_Class __DDL__object;
  IDD_Class___IDD_RAT_SV(IDD_Class object) {
    __DDL__object = object;
  }
}

class IDD_Class___IDD_APXS_SV {
  predicate IDD_APXS_Idle {
  }

  predicate IDD_APXS_Active {
  }

  IDD_Class __DDL__object;
  IDD_Class___IDD_APXS_SV(IDD_Class object) {
    __DDL__object = object;
  }
}

class IDD_Class___IDD_Goal_SV {
  predicate IDD_Goal_Active {
    IDD_Instrument instr;
    int ddl_duration;
    int power;
    int negpower;
    int energy;
    int ssr;
    bool crit_p;

    eq(duration, ddl_duration);
  }

  predicate IDD_Goal_Idle {
  }

  IDD_Class __DDL__object;
  IDD_Class___IDD_Goal_SV(IDD_Class object) {
    __DDL__object = object;
  }
}

class IDD_Class {
  IDD_Class___IDD_IDD_SV IDD_IDD_SV;
  IDD_Class___IDD_MI_SV IDD_MI_SV;
  IDD_Class___IDD_MB_SV IDD_MB_SV;
  IDD_Class___IDD_RAT_SV IDD_RAT_SV;
  IDD_Class___IDD_APXS_SV IDD_APXS_SV;
  IDD_Class___IDD_Goal_SV IDD_Goal_SV;
  IDD_Class() {
    IDD_IDD_SV = new IDD_Class___IDD_IDD_SV(this);
    IDD_MI_SV = new IDD_Class___IDD_MI_SV(this);
    IDD_MB_SV = new IDD_Class___IDD_MB_SV(this);
    IDD_RAT_SV = new IDD_Class___IDD_RAT_SV(this);
    IDD_APXS_SV = new IDD_Class___IDD_APXS_SV(this);
    IDD_Goal_SV = new IDD_Class___IDD_Goal_SV(this);
  }
}

class PMA_Class___PMA_MT_SV {
  predicate PMA_MT_Idle {
    PMA_MT_Idle_succ succ;
    PMA_MT_Idle_pred pred;
  }

  predicate PMA_MT_Active {
    int _0_anon_OR_tag_1;

    eq(_0_anon_OR_tag_1, [1 3]);
  }

  predicate PMA_MT_Slewing {
    int power;
    int negpower;
    int energy;
    Slew_Within within;

    eq(within, *);
    eq(duration, 120);
    eq(power, 14);
    addmuleq(0, power, duration, energy);
  }

  predicate PMA_MT_Survive {
    int power;
    int negpower;
    int energy;

    eq(power, 3);
    addmuleq(0, power, duration, energy);
  }

  PMA_Class __DDL__object;
  PMA_Class___PMA_MT_SV(PMA_Class object) {
    __DDL__object = object;
  }
}

class PMA_Class___PMA_Mount_SV {
  predicate PMA_Mount_Idle {
  }

  predicate PMA_Mount_Slewing {
    int power;
    int negpower;
    int energy;
    PMA_Mount_Slewing_succ succ;
    PMA_Mount_Slewing_pred pred;

    eq(power, 14);
    eq(duration, 120);
    addmuleq(0, power, duration, energy);
  }

  predicate PMA_Mount_Parked {
  }

  PMA_Class __DDL__object;
  PMA_Class___PMA_Mount_SV(PMA_Class object) {
    __DDL__object = object;
  }
}

class PMA_Class___PMA_PC_SV {
  predicate PMA_PC_Idle {
    PMA_PC_Idle_succ succ;
    PMA_PC_Idle_pred pred;
  }

  predicate PMA_PC_Active {
    int _0_anon_OR_tag_1;
    int _0_anon_OR_tag_2;
    int _0_anon_OR_tag_3;

    eq(_0_anon_OR_tag_1, [1 2]);
    eq(_0_anon_OR_tag_2, [1 2]);
    eq(_0_anon_OR_tag_3, [1 2]);
  }

  predicate PMA_PC_Survive {
    int power;
    int negpower;
    int energy;

    eq(power, 3);
    addmuleq(0, power, duration, energy);
  }

  PMA_Class __DDL__object;
  PMA_Class___PMA_PC_SV(PMA_Class object) {
    __DDL__object = object;
  }
}

class PMA_Class___PMA_NC_SV {
  predicate PMA_NC_Idle {
  }

  predicate PMA_NC_Active {
    int _0_anon_OR_tag_1;

    eq(_0_anon_OR_tag_1, [1 3]);
  }

  PMA_Class __DDL__object;
  PMA_Class___PMA_NC_SV(PMA_Class object) {
    __DDL__object = object;
  }
}

class PMA_Class___PMA_Goal_SV {
  predicate PMA_Goal_Active {
    PMA_Instrument instr;
    int ddl_duration;
    int power;
    int negpower;
    int energy;
    int ssr;
    bool crit_p;

    eq(duration, ddl_duration);
  }

  predicate PMA_Goal_Idle {
  }

  PMA_Class __DDL__object;
  PMA_Class___PMA_Goal_SV(PMA_Class object) {
    __DDL__object = object;
  }
}

class PMA_Class {
  PMA_Class___PMA_MT_SV PMA_MT_SV;
  PMA_Class___PMA_Mount_SV PMA_Mount_SV;
  PMA_Class___PMA_PC_SV PMA_PC_SV;
  PMA_Class___PMA_NC_SV PMA_NC_SV;
  PMA_Class___PMA_Goal_SV PMA_Goal_SV;
  PMA_Class() {
    PMA_MT_SV = new PMA_Class___PMA_MT_SV(this);
    PMA_Mount_SV = new PMA_Class___PMA_Mount_SV(this);
    PMA_PC_SV = new PMA_Class___PMA_PC_SV(this);
    PMA_NC_SV = new PMA_Class___PMA_NC_SV(this);
    PMA_Goal_SV = new PMA_Class___PMA_Goal_SV(this);
  }
}

class RCam_Class___HzC_F_SV {
  predicate HzC_F_Idle {
  }

  predicate HzC_F_Active {
    int power;
    int negpower;
    int energy;
    int ssr;

    eq(ssr, 1400);
    eq(power, 13);
    eq(duration, 108);
    addmuleq(0, power, duration, energy);
  }

  RCam_Class __DDL__object;
  RCam_Class___HzC_F_SV(RCam_Class object) {
    __DDL__object = object;
  }
}

class RCam_Class___SunC_SV {
  predicate SunC_Idle {
  }

  predicate SunC_Active {
  }

  RCam_Class __DDL__object;
  RCam_Class___SunC_SV(RCam_Class object) {
    __DDL__object = object;
  }
}

class RCam_Class {
  RCam_Class___HzC_F_SV HzC_F_SV;
  RCam_Class___SunC_SV SunC_SV;
  RCam_Class() {
    HzC_F_SV = new RCam_Class___HzC_F_SV(this);
    SunC_SV = new RCam_Class___SunC_SV(this);
  }
}

class SUN_Orient_Class___Sun_Orient_SV {
  predicate Sunrise {
    eq(duration, 300);
  }

  predicate Sunset {
    eq(duration, 300);
  }

  predicate Day_Ops {
  }

  predicate Nominal_Night_Ops {
    eq(duration, 18000);
  }

  predicate Survival_Night_Ops {
  }

  SUN_Orient_Class __DDL__object;
  SUN_Orient_Class___Sun_Orient_SV(SUN_Orient_Class object) {
    __DDL__object = object;
  }
}

class SUN_Orient_Class {
  SUN_Orient_Class___Sun_Orient_SV Sun_Orient_SV;
  SUN_Orient_Class() {
    Sun_Orient_SV = new SUN_Orient_Class___Sun_Orient_SV(this);
  }
}

class UHF_Class___UHF_Mode_SV {
  predicate UHF_Idle {
  }

  predicate UHF_Standby {
  }

  predicate UHF_Xmit {
    Comm_Dir dir;
    int ddl_duration;
    int rate;
    int power;
    int negpower;
    int energy;
    int data;

    eq(duration, ddl_duration);
  }

  UHF_Class __DDL__object;
  UHF_Class___UHF_Mode_SV(UHF_Class object) {
    __DDL__object = object;
  }
}

class UHF_Class {
  UHF_Class___UHF_Mode_SV UHF_Mode_SV;
  UHF_Class() {
    UHF_Mode_SV = new UHF_Class___UHF_Mode_SV(this);
  }
}

class OPHTR_Class___OPHTR_PMA_SV {
  predicate OPHTR_PMA_Active {
    int power;
    int negpower;
    int energy;

    eq(power, 13);
    addmuleq(0, power, duration, energy);
  }

  predicate OPHTR_PMA_Idle {
  }

  OPHTR_Class __DDL__object;
  OPHTR_Class___OPHTR_PMA_SV(OPHTR_Class object) {
    __DDL__object = object;
  }
}

class OPHTR_Class___OPHTR_PC_SV {
  predicate OPHTR_PC_Active {
    int power;
    int negpower;
    int energy;

    eq(power, 3);
    addmuleq(0, power, duration, energy);
  }

  predicate OPHTR_PC_Idle {
  }

  OPHTR_Class __DDL__object;
  OPHTR_Class___OPHTR_PC_SV(OPHTR_Class object) {
    __DDL__object = object;
  }
}

class OPHTR_Class___OPHTR_IDD_SV {
  predicate OPHTR_IDD_Active {
    int power;
    int negpower;
    int energy;

    eq(power, 22);
    addmuleq(0, power, duration, energy);
  }

  predicate OPHTR_IDD_Idle {
  }

  OPHTR_Class __DDL__object;
  OPHTR_Class___OPHTR_IDD_SV(OPHTR_Class object) {
    __DDL__object = object;
  }
}

class OPHTR_Class___OPHTR_RAT_SV {
  predicate OPHTR_RAT_Active {
    int power;
    int negpower;
    int energy;

    eq(power, 18);
    addmuleq(0, power, duration, energy);
  }

  predicate OPHTR_RAT_Idle {
  }

  OPHTR_Class __DDL__object;
  OPHTR_Class___OPHTR_RAT_SV(OPHTR_Class object) {
    __DDL__object = object;
  }
}

class OPHTR_Class___OPHTR_HGA_SV {
  predicate OPHTR_HGA_Active {
    int power;
    int negpower;
    int energy;

    eq(power, 21);
    addmuleq(0, power, duration, energy);
  }

  predicate OPHTR_HGA_Idle {
  }

  OPHTR_Class __DDL__object;
  OPHTR_Class___OPHTR_HGA_SV(OPHTR_Class object) {
    __DDL__object = object;
  }
}

class OPHTR_Class {
  OPHTR_Class___OPHTR_PMA_SV OPHTR_PMA_SV;
  OPHTR_Class___OPHTR_PC_SV OPHTR_PC_SV;
  OPHTR_Class___OPHTR_IDD_SV OPHTR_IDD_SV;
  OPHTR_Class___OPHTR_RAT_SV OPHTR_RAT_SV;
  OPHTR_Class___OPHTR_HGA_SV OPHTR_HGA_SV;
  OPHTR_Class() {
    OPHTR_PMA_SV = new OPHTR_Class___OPHTR_PMA_SV(this);
    OPHTR_PC_SV = new OPHTR_Class___OPHTR_PC_SV(this);
    OPHTR_IDD_SV = new OPHTR_Class___OPHTR_IDD_SV(this);
    OPHTR_RAT_SV = new OPHTR_Class___OPHTR_RAT_SV(this);
    OPHTR_HGA_SV = new OPHTR_Class___OPHTR_HGA_SV(this);
  }
}

Comm_Window_Class___Comm_DSN_SV::Comm_DSN_Available {
  if (dsn_ant==DSN_Antenna.'HGA') {
    contains [0 +inf] [0 +inf] (HGA_Class___HGA_Mode_SV.HGA_Comm s0);
      eq(s0.dir, dir);
      eq(s0.rate, rate);
  }
  if (dsn_ant==DSN_Antenna.'HGA') {
  }
}

Comm_Window_Class___Comm_DSN_SV::Comm_DSN_Unavail {
}

Comm_Window_Class___Comm_Orbiter_SV::Comm_Orbiter_Available {
  if (dir==Comm_Dir.'DOWNLINK') {
    equals(UHF_Class___UHF_Mode_SV.UHF_Xmit s0);
      eq(s0.dir, Comm_Dir.'DOWNLINK');
      eq(s0.ddl_duration, ddl_duration);
      eq(s0.rate, rate);
  }
  if (dir==Comm_Dir.'DOWNLINK') {
  }
}

Comm_Window_Class___Comm_Orbiter_SV::Comm_Orbiter_Unavail {
}

HGA_Class___HGA_Mode_SV::HGA_Stow {
  met_by(HGA_Class___HGA_Mode_SV.HGA_Comm s0);
  meets(HGA_Class___HGA_Mode_SV.HGA_Slew s1);
}

HGA_Class___HGA_Mode_SV::HGA_Slew {
  met_by(HGA_Class___HGA_Mode_SV.HGA_Stow s0);
  meets(HGA_Class___HGA_Mode_SV.HGA_Comm s1);
    eq(s1.pred, Comm_pred.'COMM_METBY_SLEW');
  if (priorto_survival==SurvivalHtr_Use.'SLEW_TO_NOHTR') {
    starts_before [300 +inf] (SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s0);
  }
  if (priorto_survival==SurvivalHtr_Use.'SLEW_TO_HTR') {
    after [0 300] (OPHTR_Class___OPHTR_HGA_SV.OPHTR_HGA_Active s0);
  }
}

HGA_Class___HGA_Mode_SV::HGA_Comm {
  if (pred==Comm_pred.'COMM_METBY_COMM') {
    met_by(HGA_Class___HGA_Mode_SV.HGA_Comm s0);
  }
  if (pred==Comm_pred.'COMM_METBY_SLEW') {
    met_by(HGA_Class___HGA_Mode_SV.HGA_Slew s0);
  }
  if (dir==Comm_Dir.'DOWNLINK') {
    if (succ==Comm_succ.'TRANSMIT_MEETS_RECEIVE') {
      meets(HGA_Class___HGA_Mode_SV.HGA_Comm s0);
        eq(s0.dir, Comm_Dir.'UPLINK');
        eq(s0.pred, Comm_pred.'COMM_METBY_COMM');
    }
  }
  if (dir==Comm_Dir.'DOWNLINK') {
    if (succ==Comm_succ.'TRANSMIT_MEETS_STOW') {
      meets(HGA_Class___HGA_Mode_SV.HGA_Stow s0);
    }
  }
  if (dir==Comm_Dir.'DOWNLINK') {
    eq(succ, {Comm_succ.'TRANSMIT_MEETS_RECEIVE', Comm_succ.'TRANSMIT_MEETS_STOW'});
    addmuleq(0, rate, duration, data);
    sum(0, negdata, data);
    eq(power, 81);
    addmuleq(0, power, duration, energy);
  }
  if (dir==Comm_Dir.'UPLINK') {
    if (succ==Comm_succ.'RECEIVE_MEETS_TRANSMIT') {
      meets(HGA_Class___HGA_Mode_SV.HGA_Comm s0);
        eq(s0.dir, Comm_Dir.'DOWNLINK');
        eq(s0.pred, Comm_pred.'COMM_METBY_COMM');
    }
  }
  if (dir==Comm_Dir.'UPLINK') {
    if (succ==Comm_succ.'RECEIVE_MEETS_STOW') {
      meets(HGA_Class___HGA_Mode_SV.HGA_Stow s0);
    }
  }
  if (dir==Comm_Dir.'UPLINK') {
    eq(succ, {Comm_succ.'RECEIVE_MEETS_TRANSMIT', Comm_succ.'RECEIVE_MEETS_STOW'});
    addmuleq(0, ddl_duration, rate, data);
    eq(power, 81);
    addmuleq(0, power, ddl_duration, energy);
  }
}

IDD_Class___IDD_IDD_SV::IDD_Stow {
  meets(IDD_Class___IDD_IDD_SV.IDD_Move s0);
    eq(s0.pred, IDD_Move_pred.'MOVE_METBY_STOW');
  met_by(IDD_Class___IDD_IDD_SV.IDD_Move s1);
    eq(s1.succ, IDD_Move_succ.'MOVE_MEETS_STOW');
}

IDD_Class___IDD_IDD_SV::IDD_Move {
  after [0 60] (RCam_Class___HzC_F_SV.HzC_F_Active s0);
  if (succ==IDD_Move_succ.'MOVE_MEETS_ROTATE') {
    meets(IDD_Class___IDD_IDD_SV.IDD_Rotate s0);
  }
  if (succ==IDD_Move_succ.'MOVE_MEETS_GUARDEDMOVE') {
    meets(IDD_Class___IDD_IDD_SV.IDD_Guarded_Move s0);
      eq(s0.pred, IDD_Guarded_pred.'GUARDEDMOVE_METBY_ROTATE');
  }
  if (succ==IDD_Move_succ.'MOVE_MEETS_STOW') {
    meets(IDD_Class___IDD_IDD_SV.IDD_Stow s0);
  }
  if (pred==IDD_Move_pred.'MOVE_METBY_STOW') {
    met_by(IDD_Class___IDD_IDD_SV.IDD_Stow s0);
  }
  if (pred==IDD_Move_pred.'MOVE_METBY_INCONTACT') {
    met_by(IDD_Class___IDD_IDD_SV.IDD_In_Contact s0);
  }
  if (priorto_survival==IDD_Htr_Use.'BEFORE_SURVIVALHTR') {
    starts_before [900 +inf] (SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s0);
  }
  if (priorto_survival==IDD_Htr_Use.'AFTER_OPHTR') {
    after [0 900] (OPHTR_Class___OPHTR_IDD_SV.OPHTR_IDD_Active s0);
  }
}

IDD_Class___IDD_IDD_SV::IDD_Rotate {
  met_by(IDD_Class___IDD_IDD_SV.IDD_Move s0);
    eq(s0.succ, IDD_Move_succ.'MOVE_MEETS_ROTATE');
  meets(IDD_Class___IDD_IDD_SV.IDD_Guarded_Move s1);
    eq(s1.pred, IDD_Guarded_pred.'GUARDEDMOVE_METBY_ROTATE');
}

IDD_Class___IDD_IDD_SV::IDD_Guarded_Move {
  meets(IDD_Class___IDD_IDD_SV.IDD_In_Contact s0);
  after [0 60] (RCam_Class___HzC_F_SV.HzC_F_Active s1);
  if (pred==IDD_Guarded_pred.'GUARDEDMOVE_METBY_MOVE') {
    met_by(IDD_Class___IDD_IDD_SV.IDD_Move s0);
      eq(s0.succ, IDD_Move_succ.'MOVE_MEETS_GUARDEDMOVE');
  }
  if (pred==IDD_Guarded_pred.'GUARDEDMOVE_METBY_ROTATE') {
    met_by(IDD_Class___IDD_IDD_SV.IDD_Rotate s0);
  }
}

IDD_Class___IDD_IDD_SV::IDD_In_Contact {
  met_by(IDD_Class___IDD_IDD_SV.IDD_Guarded_Move s0);
  meets(IDD_Class___IDD_IDD_SV.IDD_Move s1);
    eq(s1.pred, IDD_Move_pred.'MOVE_METBY_INCONTACT');
  before [0 60] (RCam_Class___HzC_F_SV.HzC_F_Active s2);
}

IDD_Class___IDD_MI_SV::IDD_MI_Idle {
}

IDD_Class___IDD_MI_SV::IDD_MI_Active {
  after [0 500] (IDD_Class___IDD_IDD_SV.IDD_Rotate s0);
    eq(s0.tool, IDD_Instrument.'MI');
  contained_by [15 +inf] [0 +inf] (IDD_Class___IDD_IDD_SV.IDD_In_Contact s1);
}

IDD_Class___IDD_MI_SV::IDD_MI_SURVIVE {
  meets(IDD_Class___IDD_MI_SV.IDD_MI_Active s0);
  met_by(IDD_Class___IDD_MI_SV.IDD_MI_Active s1);
  contained_by(SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s2);
}

IDD_Class___IDD_MB_SV::IDD_MB_Idle {
}

IDD_Class___IDD_MB_SV::IDD_MB_Active {
  after [0 500] (IDD_Class___IDD_IDD_SV.IDD_Rotate s0);
    eq(s0.tool, IDD_Instrument.'MB');
  contained_by(IDD_Class___IDD_IDD_SV.IDD_In_Contact s1);
}

IDD_Class___IDD_RAT_SV::IDD_RAT_Idle {
}

IDD_Class___IDD_RAT_SV::IDD_RAT_Active {
  after [0 500] (IDD_Class___IDD_IDD_SV.IDD_Rotate s0);
    eq(s0.tool, IDD_Instrument.'RAT');
  contained_by(IDD_Class___IDD_IDD_SV.IDD_In_Contact s1);
}

IDD_Class___IDD_APXS_SV::IDD_APXS_Idle {
}

IDD_Class___IDD_APXS_SV::IDD_APXS_Active {
  after [0 500] (IDD_Class___IDD_IDD_SV.IDD_Rotate s0);
    eq(s0.tool, IDD_Instrument.'APXS');
  contained_by(IDD_Class___IDD_IDD_SV.IDD_In_Contact s1);
}

IDD_Class___IDD_Goal_SV::IDD_Goal_Active {
  if (instr==IDD_Instrument.'MI') {
    equals(IDD_Class___IDD_MI_SV.IDD_MI_Active s0);
  }
  if (instr==IDD_Instrument.'MI') {
    eq(power, 9);
    addmuleq(0, power, ddl_duration, energy);
  }
  if (instr==IDD_Instrument.'MI') {
    if (crit_p==true) {
    }
  }
  if (instr==IDD_Instrument.'MB') {
    equals(IDD_Class___IDD_MB_SV.IDD_MB_Active s0);
  }
  if (instr==IDD_Instrument.'MB') {
    eq(power, 3);
    addmuleq(0, power, ddl_duration, energy);
  }
  if (instr==IDD_Instrument.'MB') {
    if (crit_p==true) {
    }
  }
  if (instr==IDD_Instrument.'APXS') {
    equals(IDD_Class___IDD_APXS_SV.IDD_APXS_Active s0);
  }
  if (instr==IDD_Instrument.'APXS') {
    eq(power, 3);
    addmuleq(0, power, ddl_duration, energy);
  }
  if (instr==IDD_Instrument.'APXS') {
    if (crit_p==true) {
    }
  }
  if (instr==IDD_Instrument.'RAT') {
    equals(IDD_Class___IDD_RAT_SV.IDD_RAT_Active s0);
  }
  if (instr==IDD_Instrument.'RAT') {
    eq(power, 18);
    addmuleq(0, power, ddl_duration, energy);
  }
}

IDD_Class___IDD_Goal_SV::IDD_Goal_Idle {
}

PMA_Class___PMA_MT_SV::PMA_MT_Idle {
}

PMA_Class___PMA_MT_SV::PMA_MT_Active {
  met_by(PMA_Class___PMA_MT_SV.PMA_MT_Slewing s0);
  if (_0_anon_OR_tag_1==1) {
    starts_before [300 +inf] (SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s0);
  }
  if (_0_anon_OR_tag_1==2) {
    after [0 300] (PMA_Class___PMA_MT_SV.PMA_MT_Slewing s0);
  }
  if (_0_anon_OR_tag_1==3) {
    after [0 300] (OPHTR_Class___OPHTR_PMA_SV.OPHTR_PMA_Active s0);
  }
}

PMA_Class___PMA_MT_SV::PMA_MT_Slewing {
  meets(PMA_Class___PMA_MT_SV.PMA_MT_Active s0);
  if (within==Slew_Within.'MT_SLEW_WITHIN_IDLE') {
    contained_by(PMA_Class___PMA_Mount_SV.PMA_Mount_Idle s0);
  }
  if (within==Slew_Within.'MT_SLEW_WITHIN_PARKED') {
    contained_by(PMA_Class___PMA_Mount_SV.PMA_Mount_Parked s0);
  }
}

PMA_Class___PMA_MT_SV::PMA_MT_Survive {
  contained_by(SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s0);
}

PMA_Class___PMA_Mount_SV::PMA_Mount_Idle {
}

PMA_Class___PMA_Mount_SV::PMA_Mount_Slewing {
  contained_by(PMA_Class___PMA_MT_SV.PMA_MT_Idle s0);
}

PMA_Class___PMA_Mount_SV::PMA_Mount_Parked {
  met_by(PMA_Class___PMA_Mount_SV.PMA_Mount_Slewing s0);
    eq(s0.succ, PMA_Mount_Slewing_succ.'SLEWING_MEETS_PARKED');
  meets(PMA_Class___PMA_Mount_SV.PMA_Mount_Slewing s1);
    eq(s1.pred, PMA_Mount_Slewing_pred.'SLEWING_MET_BY_PARKED');
}

PMA_Class___PMA_PC_SV::PMA_PC_Idle {
}

PMA_Class___PMA_PC_SV::PMA_PC_Active {
  met_by(PMA_Class___PMA_Mount_SV.PMA_Mount_Slewing s0);
  contained_by(PMA_Class___PMA_Mount_SV.PMA_Mount_Idle s1);
  contained_by(PMA_Class___PMA_NC_SV.PMA_NC_Idle s2);
  contained_by(PMA_Class___PMA_MT_SV.PMA_MT_Idle s3);
  if (_0_anon_OR_tag_1==1) {
    starts_before [300 +inf] (SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s0);
  }
  if (_0_anon_OR_tag_1==2) {
    if (_0_anon_OR_tag_2==1) {
      after [0 300] (PMA_Class___PMA_Mount_SV.PMA_Mount_Slewing s0);
    }
  }
  if (_0_anon_OR_tag_1==2) {
    if (_0_anon_OR_tag_2==2) {
      after [0 300] (OPHTR_Class___OPHTR_PMA_SV.OPHTR_PMA_Active s0);
    }
  }
  if (_0_anon_OR_tag_1==2) {
    if (_0_anon_OR_tag_3==1) {
      after [0 300] (PMA_Class___PMA_PC_SV.PMA_PC_Active s0);
    }
  }
  if (_0_anon_OR_tag_1==2) {
    if (_0_anon_OR_tag_3==2) {
      after [0 300] (OPHTR_Class___OPHTR_PC_SV.OPHTR_PC_Active s0);
    }
  }
}

PMA_Class___PMA_PC_SV::PMA_PC_Survive {
  contained_by(PMA_Class___PMA_Mount_SV.PMA_Mount_Parked s0);
  contained_by(SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s1);
}

PMA_Class___PMA_NC_SV::PMA_NC_Idle {
}

PMA_Class___PMA_NC_SV::PMA_NC_Active {
  met_by(PMA_Class___PMA_Mount_SV.PMA_Mount_Slewing s0);
  contained_by(PMA_Class___PMA_Mount_SV.PMA_Mount_Idle s1);
  contained_by(PMA_Class___PMA_PC_SV.PMA_PC_Idle s2);
  contained_by(PMA_Class___PMA_MT_SV.PMA_MT_Idle s3);
  if (_0_anon_OR_tag_1==1) {
    starts_before [300 +inf] (SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s0);
  }
  if (_0_anon_OR_tag_1==2) {
    after [0 300] (PMA_Class___PMA_Mount_SV.PMA_Mount_Slewing s0);
  }
  if (_0_anon_OR_tag_1==3) {
    after [0 300] (OPHTR_Class___OPHTR_PMA_SV.OPHTR_PMA_Active s0);
  }
}

PMA_Class___PMA_Goal_SV::PMA_Goal_Active {
  if (instr==PMA_Instrument.'PC') {
    equals(PMA_Class___PMA_PC_SV.PMA_PC_Active s0);
  }
  if (instr==PMA_Instrument.'PC') {
    eq(power, 18);
    addmuleq(0, power, ddl_duration, energy);
  }
  if (instr==PMA_Instrument.'PC') {
    if (crit_p==true) {
    }
  }
  if (instr==PMA_Instrument.'NC') {
    equals(PMA_Class___PMA_NC_SV.PMA_NC_Active s0);
  }
  if (instr==PMA_Instrument.'NC') {
    eq(power, 18);
    addmuleq(0, power, ddl_duration, energy);
  }
  if (instr==PMA_Instrument.'NC') {
    if (crit_p==true) {
    }
  }
  if (instr==PMA_Instrument.'MT') {
    equals(PMA_Class___PMA_MT_SV.PMA_MT_Active s0);
  }
  if (instr==PMA_Instrument.'MT') {
    eq(power, 15);
    addmuleq(0, power, ddl_duration, energy);
  }
  if (instr==PMA_Instrument.'MT') {
    if (crit_p==true) {
    }
  }
}

PMA_Class___PMA_Goal_SV::PMA_Goal_Idle {
}

RCam_Class___HzC_F_SV::HzC_F_Idle {
}

RCam_Class___HzC_F_SV::HzC_F_Active {
}

RCam_Class___SunC_SV::SunC_Idle {
}

RCam_Class___SunC_SV::SunC_Active {
}

SUN_Orient_Class___Sun_Orient_SV::Sunrise {
  meets(SUN_Orient_Class___Sun_Orient_SV.Day_Ops s0);
  met_by(SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s1);
}

SUN_Orient_Class___Sun_Orient_SV::Sunset {
  met_by(SUN_Orient_Class___Sun_Orient_SV.Day_Ops s0);
  meets(SUN_Orient_Class___Sun_Orient_SV.Nominal_Night_Ops s1);
}

SUN_Orient_Class___Sun_Orient_SV::Day_Ops {
  meets(SUN_Orient_Class___Sun_Orient_SV.Sunset s0);
  met_by(SUN_Orient_Class___Sun_Orient_SV.Sunrise s1);
}

SUN_Orient_Class___Sun_Orient_SV::Nominal_Night_Ops {
  met_by(SUN_Orient_Class___Sun_Orient_SV.Sunset s0);
  meets(SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s1);
}

SUN_Orient_Class___Sun_Orient_SV::Survival_Night_Ops {
  meets(SUN_Orient_Class___Sun_Orient_SV.Sunrise s0);
  met_by(SUN_Orient_Class___Sun_Orient_SV.Nominal_Night_Ops s1);
}

UHF_Class___UHF_Mode_SV::UHF_Idle {
}

UHF_Class___UHF_Mode_SV::UHF_Standby {
  met_by(UHF_Class___UHF_Mode_SV.UHF_Idle s0);
  meets(UHF_Class___UHF_Mode_SV.UHF_Xmit s1);
}

UHF_Class___UHF_Mode_SV::UHF_Xmit {
  met_by(UHF_Class___UHF_Mode_SV.UHF_Standby s0);
  meets(UHF_Class___UHF_Mode_SV.UHF_Idle s1);
}

OPHTR_Class___OPHTR_PMA_SV::OPHTR_PMA_Active {
  contained_by(SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s0);
}

OPHTR_Class___OPHTR_PMA_SV::OPHTR_PMA_Idle {
}

OPHTR_Class___OPHTR_PC_SV::OPHTR_PC_Active {
  contained_by(SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s0);
}

OPHTR_Class___OPHTR_PC_SV::OPHTR_PC_Idle {
}

OPHTR_Class___OPHTR_IDD_SV::OPHTR_IDD_Active {
  contained_by(SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s0);
}

OPHTR_Class___OPHTR_IDD_SV::OPHTR_IDD_Idle {
}

OPHTR_Class___OPHTR_RAT_SV::OPHTR_RAT_Active {
  contained_by(SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s0);
}

OPHTR_Class___OPHTR_RAT_SV::OPHTR_RAT_Idle {
}

OPHTR_Class___OPHTR_HGA_SV::OPHTR_HGA_Active {
  contained_by(SUN_Orient_Class___Sun_Orient_SV.Survival_Night_Ops s0);
}

OPHTR_Class___OPHTR_HGA_SV::OPHTR_HGA_Idle {
}

