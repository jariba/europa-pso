/**
* Original file 'psp2'
*/

#include "UBO-model.nddl"

PlannerConfig c = new PlannerConfig(0, 1000, +inf, +inf );

ProblemInstance problem = new ProblemInstance();

// Proven minimum duration for this problem is 45

int maxDuration;
int maxDurationPlusOne;

maxDuration.specify(70);
addEq(maxDuration,1,maxDurationPlusOne);

CapacityResource resource0 = new CapacityResource( 0.00000 , 10.0000 );
CapacityResource resource1 = new CapacityResource( 0.00000 , 10.0000 );
CapacityResource resource2 = new CapacityResource( 0.00000 , 10.0000 );
CapacityResource resource3 = new CapacityResource( 0.00000 , 10.0000 );
CapacityResource resource4 = new CapacityResource( 0.00000 , 10.0000 );

Allocation a0 = new Allocation( resource0 , 0 , 0.0 );
Allocation a1 = new Allocation( resource0, 1, 4.00000 );
Allocation a2 = new Allocation( resource1, 1, 3.00000 );
Allocation a3 = new Allocation( resource2, 1, 7.00000 );
Allocation a4 = new Allocation( resource3, 1, 7.00000 );
Allocation a5 = new Allocation( resource4, 1, 2.00000 );
Allocation a6 = new Allocation( resource0, 2, 1.00000 );
Allocation a7 = new Allocation( resource1, 2, 9.00000 );
Allocation a8 = new Allocation( resource2, 2, 6.00000 );
Allocation a9 = new Allocation( resource3, 2, 4.00000 );
Allocation a10 = new Allocation( resource4, 2, 1.00000 );
Allocation a11 = new Allocation( resource0, 3, 2.00000 );
Allocation a12 = new Allocation( resource3, 3, 4.00000 );
Allocation a13 = new Allocation( resource4, 3, 2.00000 );
Allocation a14 = new Allocation( resource1, 4, 7.00000 );
Allocation a15 = new Allocation( resource2, 4, 4.00000 );
Allocation a16 = new Allocation( resource3, 4, 7.00000 );
Allocation a17 = new Allocation( resource4, 4, 10.0000 );
Allocation a18 = new Allocation( resource0, 5, 6.00000 );
Allocation a19 = new Allocation( resource1, 5, 6.00000 );
Allocation a20 = new Allocation( resource2, 5, 3.00000 );
Allocation a21 = new Allocation( resource3, 5, 6.00000 );
Allocation a22 = new Allocation( resource4, 5, 6.00000 );
Allocation a23 = new Allocation( resource0, 6, 10.0000 );
Allocation a24 = new Allocation( resource1, 6, 1.00000 );
Allocation a25 = new Allocation( resource2, 6, 4.00000 );
Allocation a26 = new Allocation( resource3, 6, 7.00000 );
Allocation a27 = new Allocation( resource4, 6, 10.0000 );
Allocation a28 = new Allocation( resource0, 7, 9.00000 );
Allocation a29 = new Allocation( resource2, 7, 10.0000 );
Allocation a30 = new Allocation( resource3, 7, 4.00000 );
Allocation a31 = new Allocation( resource4, 7, 6.00000 );
Allocation a32 = new Allocation( resource0, 8, 4.00000 );
Allocation a33 = new Allocation( resource1, 9, 8.00000 );
Allocation a34 = new Allocation( resource0, 10, 4.00000 );
Allocation a35 = new Allocation( resource1, 10, 1.00000 );
Allocation a36 = new Allocation( resource2, 10, 6.00000 );
Allocation a37 = new Allocation( resource3, 10, 9.00000 );
Allocation a38 = new Allocation( resource4, 10, 6.00000 );
Allocation a39 = new Allocation( resource0, 11, 0.0 );

ActivityTimeline at0 = new ActivityTimeline(0);
ActivityTimeline at1 = new ActivityTimeline(1);
ActivityTimeline at2 = new ActivityTimeline(2);
ActivityTimeline at3 = new ActivityTimeline(3);
ActivityTimeline at4 = new ActivityTimeline(4);
ActivityTimeline at5 = new ActivityTimeline(5);
ActivityTimeline at6 = new ActivityTimeline(6);
ActivityTimeline at7 = new ActivityTimeline(7);
ActivityTimeline at8 = new ActivityTimeline(8);
ActivityTimeline at9 = new ActivityTimeline(9);
ActivityTimeline at10 = new ActivityTimeline(10);
ActivityTimeline at11 = new ActivityTimeline(11);

close();
 
goal( problem.Activity activity0 );
eq( activity0.duration, 1 );
eq( activity0.m_identifier, 0);
eq( activity0.timeline, at0);

goal( problem.Activity activity1 );
eq( activity1.duration, 4 );
eq( activity1.m_identifier, 1);
eq( activity1.timeline, at1);


goal( problem.Activity activity2 );
eq( activity2.duration, 4 );
eq( activity2.m_identifier, 2);
eq( activity2.timeline, at2);


goal( problem.Activity activity3 );
eq( activity3.duration, 10 );
eq( activity3.m_identifier, 3);
eq( activity3.timeline, at3);


goal( problem.Activity activity4 );
eq( activity4.duration, 10 );
eq( activity4.m_identifier, 4);
eq( activity4.timeline, at4);


goal( problem.Activity activity5 );
eq( activity5.duration, 3 );
eq( activity5.m_identifier, 5);
eq( activity5.timeline, at5);


goal( problem.Activity activity6 );
eq( activity6.duration, 1 );
eq( activity6.m_identifier, 6);
eq( activity6.timeline, at6);


goal( problem.Activity activity7 );
eq( activity7.duration, 8 );
eq( activity7.m_identifier, 7);
eq( activity7.timeline, at7);


goal( problem.Activity activity8 );
eq( activity8.duration, 10 );
eq( activity8.m_identifier, 8);
eq( activity8.timeline, at8);


goal( problem.Activity activity9 );
eq( activity9.duration, 9 );
eq( activity9.m_identifier, 9);
eq( activity9.timeline, at9);


goal( problem.Activity activity10 );
eq( activity10.duration, 5 );
eq( activity10.m_identifier, 10);
eq( activity10.timeline, at10);


goal( problem.Activity activity11 );
eq( activity11.duration, 1 );
eq( activity11.m_identifier, 11);
eq( activity11.timeline, at11);

temporalDistance( activity0.start, [ 0 +inf ], activity1.start );
temporalDistance( activity0.start, [ 0 +inf ], activity2.start );
temporalDistance( activity0.start, [ 0 +inf ], activity3.start );
temporalDistance( activity0.start, [ 0 +inf ], activity4.start );
temporalDistance( activity1.start, [ 9 +inf ], activity5.start );
temporalDistance( activity5.start, [ -inf 3 ], activity2.start );
temporalDistance( activity2.start, [ 8 +inf ], activity6.start );
temporalDistance( activity3.start, [ 24 +inf ], activity7.start );
temporalDistance( activity4.start, [ 22 +inf ], activity9.start );
temporalDistance( activity5.start, [ 4 +inf ], activity8.start );
temporalDistance( activity6.start, [ 3 +inf ], activity10.start );
temporalDistance( activity3.start, [ -inf 26 ], activity7.start );
temporalDistance( activity10.start, [ -inf 2 ], activity7.start );
temporalDistance( activity7.start, [ 8 +inf ], activity11.start );
temporalDistance( activity8.start, [ 10 +inf ], activity11.start );
temporalDistance( activity4.start, [ -inf 25 ], activity9.start );
temporalDistance( activity9.start, [ 9 +inf ], activity11.start );
temporalDistance( activity10.start, [ 5 +inf ], activity11.start );

precedes(0,activity0.start);  precedes( activity0.end, maxDuration);
precedes(0,activity1.start);  precedes( activity1.end, maxDuration);
precedes(0,activity2.start);  precedes( activity2.end, maxDuration);
precedes(0,activity3.start);  precedes( activity3.end, maxDuration);
precedes(0,activity4.start);  precedes( activity4.end, maxDuration);
precedes(0,activity5.start);  precedes( activity5.end, maxDuration);
precedes(0,activity6.start);  precedes( activity6.end, maxDuration);
precedes(0,activity7.start);  precedes( activity7.end, maxDuration);
precedes(0,activity8.start);  precedes( activity8.end, maxDuration);
precedes(0,activity9.start);  precedes( activity9.end, maxDuration);
precedes(0,activity10.start); precedes( activity10.end, maxDuration);
precedes(0,activity11.start); precedes( activity11.end, maxDurationPlusOne);

// We know all activity goals must be satisfied separately, therefore activate right away to prune useless search space for the planner: 
activity0.activate();
activity1.activate();
activity2.activate();
activity3.activate();
activity4.activate();
activity5.activate();
activity6.activate();
activity7.activate();
activity8.activate();
activity9.activate();
activity10.activate();
activity11.activate();


