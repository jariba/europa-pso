Known areas of performance improvement:
1. Object Filtering.
2. Deletion of the database.
3. Update of variables from Temporal Network.
4. Splitting merged tokens in a non-chronological backtrack.
5. Improve exchange of data in TemporalPropagator with  direct calculation of duration variables.
6. Update TemporalNetwork to adjust for deactivated constraints

M_16:
1. First tag in new PLASMA cvs directory.
2. Minor build patches.

MIGRATED:
1. Migrated to PLASMA build structure and cvs directory.

M_15:
1. Changed CBPlanner so that responsibilities for maintaining open
decisions in sorted order relies on the OpenDecisionManager rather than the
DecisionManager.  The DecisionManager manages events and processes them in
the order they should be processed.   This shouldn't have to change as long
as the planner is a backtracking planner.
2. Measured performance and there has been no degradation and no
perceptible improvement.

M_14:
**** Major Performance Milestone
1. Introduced CBPlanner which responds to PlanDatabase and ConstraintEngine
events to manage decisions directly without Flaws.
2. Moved java nddl parser.
3. Introduced support for Dynamic Objects

M_12:
**** Fixed problems creating Object Decision Points from flaws.
1. Introduced new test cases in Planner module to test backtracking due to
subgoaling.
2. ObjectFlaws now maintain the list of tokens involved in the flaw to ease
decision management.
3. Introduced a flaw decision map to manage map between flaws and
decisions, specifically in the case of multiple object decisions per object
flaw.
4. Cleaned up planner module tests
5. Removed redirection to file logging on SamplePlanDatabase.hh

M_11:
**** Fixed problems integrating the Temporal Network.
1. Lazy propagation of constraints added is not safe as it is required to obtain the context for returning no-goods.
2. Was allowing paths through incremental propagation even when the TNET was inconsistent.
3. Was allowing immediate execution of StartEndDuration relations in the propagator's execute method since consequences
of propagation could cause new constraints to be inserted on the agenda of constraints to execute, while we were executingthem. This meant they would execute before the tnet had a change to be updated and propagated. Consequently, we would see
side-effects from executing the constraint. It turns out we do not need to update the duration variable anyway, so we knowskip this constraint execution altogether.
4. Have greatly simplified the buffering model in the TemporalPropagator.
5. Added k9.backtrack.moderate to the system tests. This was breaking and is now fixed.
6. k9.huge also runs.
7. We appear to now have good memory performance. k9.huge completes in 18M.

M_10:
**** Performance improvement: beat betaPlanner by 66% up to 2 orders of magnitude on satellite problems.
1. Miscellaneous inlining
2. Added a cache from flaws to decisions to expedite decision processing in
synchronize flaws.
3. Added purging of entities, constraint engine, plan database, etc.
4. Hooked up FlawSynchConnector

M_9:
**** Performance milestone: beat betaPlanner by 30% up to 2 orders of magnitude on satellite problems.
1. Buffered addition of constraints to temporal network.
2. Optimized heuristic ordering.
3. Optimized apply flaw changes in decision handling.
4. Inlined a few heavily used methods.

M_8:
1. Updated Entity to allow linkage with an external entity. This allows efficient integration with
shadowed objects. In particular, we use this for Timepoints and TemporalConstraints in the
TempralNetwork
2. Removed TokenTemporalVariable
3. Made significant changes to the TemporalPropagator to avoid looking up links between entities, and
also to be more selective about restricting updates to active variables only.

M_7:
**** Removed FlawQuery, FlawQueryListener, FlawQueryLogger files 
1. Fixed bugs and cleaned up code in EUROPAHeuristicStrategy and Decision
handling.
2. Implemented Incremental flaw change synchronization.  Moved FlawQuery
functionality into FlawSource, removed FlawQuery and associated files.
Imposed correspondance between conditions, filters, and FlawSource.
Changed implementation of FlawSource to listen to messages to decide when
to evaluate flaws for possible change.
3. Tweaked TemporalPropagator to avoid adding and removing constraints
unnecessarily.
4. Added performance test framework to SystemTests

M_6:
1. Fixed bug in temporal network propagator execute method. It was masking side-effects which required further
propagation. Note that executing StartEndDuration may impact and of the start, end or duration variables.
2. Still have open bug where the Rover model backtracks when it shouldn't, at the direction of the TemporalNetwork,
and arising out of Merging and Activation decisions.
3. Still have open bug where transaction logging and replay leads to spurious behavior if done repeatedly. The general
symptom is that we get the CE in an inconsistent state when trying to constrain token(s) on an object.
4. Have implemented a write mechanism on the DbClient which gives us a pretty good checksum as a string for comparing
the copied plan.

M_5:
1. Principal Transaction Logging and replay infrastructure completed.

M_4:
1. Working version of DecisionPlay and Replay
2. Some minor fixes to the NddlCompiler
3. A bunch of new Constraints ported from EUROPA
4. Introduction of Constraint test harness
5. Other minor bug fixes

M_3:
1. Nddl Compiler Cleanup
2. Added Factories to NddlCompiler generation.
3. Added DbClient for playing logged transactions.

M_2:
1. Working integration of the Temporal Network
2. Support for nested guards.

M_1:
1. Baseline TAG.
