/** * @page debuggingguide Debugging Guide * * A very useful tool for debugging your models and planners is logging. We  * have extensive logging that you can configure through a file called * Debug.cfg.  This file must exist in the same directory as the executable or * the debug information will not be logged.  Debug information is by default * redirected to std::cout. You can change that by using * DebugMsg::setStream(). * * Code is instrumented with debug messages of the form: * *<i> *	debugMsg("marker", "token " << tokenId << " created"); *</i> * * Which produce output like this: * * <i> *	TokenNetwork.cc:6277: token id_56 created *</i> * * if and only if the marker is found in the Debug.cfg file or debugging has * been enabled in code.  * * The Debug.cfg file format is defined according to the following:  * <i>#</i> and <i>;</i> * are line comment characters and their scope ends at the end of line. You * can enable marker debug messages by file or all messages in a file or all * messages matching the marker across all files as in the following * examples: * * <i> * 	file : marker #comment <br> *	file /comment <br> *	:marker ;comment <br> * </i> * * Each non-comment (and non-empty) line enables all matching debug * messages, including any that have the given 'marker' string as any * substring of their own marker. *  * To enable debug messages in code, the stream to write them to must be * assigned: * * <i> *	DebugMessage::setStream(std::cerr); * </i> * * to send them to std::cerr.  All messages can then be enabled with: * * <i> *	DebugMessage::enableAll(); * </i> * * and an individual one can be enabled with: * * <i> * DebugMessage *msg; <br> *	msg->enable(); * </i> * * An individual debug message can be looked up using: * * <i> *	msg = DebugMessage::findMsg("file", "marker"); * </i> * * If this matches more then one existing debug message, the first one * found will be returned.  To find all messages in a given file, e.g.: * * <i> *	std::list<DebugMessage*> msgs; *	DebugMessage::findMatchingMsgs("file", "", &msgs); * </i> * * where the second argument is a empty (zero length) std::string. * Note that msgs is not cleared (emptied) by this function, only added * to.  An empty string can also be passed for the file name, so: * * <i> * DebugMessage::findMatchingMsgs("", "", &msgs); * </i> * * will have the same effect as: *  * <i> *	msgs = DebugMessage::getAllMsgs(); * </i> * * except the latter is (currently) a const reference to the internal * list and thus runs much faster but cannot be modified. * * In all cases, individual messages will not appear in such lists unless * the code in question (where the debugMsg() call appears) has already * been executed; until then, the info about the individual debug message * simply isn't available.  Removing this restriction would require the * complete list of debug messages to be constructed at compile time * (similar to how the entire list of parameter constraint functions is * presently done at compile time).  However, the calls: *  * <i> *	DebugMessage::enableAll(); <br> *	DebugMessage::disableAll(); <br> *	DebugMessage::readConfigFile(istream& is); <br> * </i> * * are not restricted to existing messages, as they store the * "patterns" that are presently enabled and, when a new message is * created that matches any of the enabled patterns, it is immediately * enabled (and therefore prints its message immediately after being * created, as part of the debugMsg() macro).  The method: *  * <i> *	DebugMessage::enableMatchingMessages("file", "marker"); * </i> * * adds the appropriate pattern to this internal list of enabled * patterns, which is checked immediately for existing debug messages and * also when a new debug message is created. * * There is no corresponding disableMatchingMessages() in the current * implementation, but that could be very tricky (or costly at run time) * to implement for cases like:  * * <i> *	DebugMessage::enableAll(); <br> *	DebugMessage::disableMatchingMsgs("", "marker"); <br> *	DebugMessage::disableMatchingMsgs("file", ""); <br> *	DebugMessage::enableMatchingMsgs("", "marker"); <br> * </i> * * since there is no explicit list of files or markers mentioned in * debug messages. */