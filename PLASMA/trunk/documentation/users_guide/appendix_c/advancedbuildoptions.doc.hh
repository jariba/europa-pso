/** * @page advancedbuildoptions Build Management *  * @section buildvariations Build Variants * * EUROPA2 can be built using a few variations.  The variations and * parameters of the build can be configured through environment * variables or parameters to jam. EUROPA2 supports building 1 or more "variants"  * at the same time.  The  valid variants are: * <ul> *    <li> DEV - unoptimized, unprofiled, debug *    <li> OPTIMIZED - optimized, unprofiled, no debug *    <li> PROFILE - unoptimized, profiled, no debug *    <li> COVERAGE - compiles with the flags required by the gcov code coverage tool. See @ref codecoverage  below for more information. *    <li> CUSTOM * </ul> * For example, to build an optimized build run jam like * this: (assumes bash) * *<center><i>  *% VARIANTS=OPTIMIZED jam *</i></center> * * Or alternatively: * <center><i> * % jam -sVARIANTS=OPTIMIZED * </i></center> * * The output files are named differently for each variant, * which makes it possible to build different variants at * the same time.  It is also not necessary to clean the * tree when switching variants.  Here are the naming * patterns for each of the main variants: * * <i> *	DEV = <filename>_g<ext><br> *	OPTIMIZED = <filename>_o<ext> <br> *	PROFILE = <filename>_p<ext><br> * </i> *  * The fourth variant, CUSTOM is a special variant that examines some * environment variables to determine the compilation flags.  These * environment variables are: * <ul> * <li>EUROPA_DEBUG - use debugging * <li>EUROPA_DEBUG_MESSAGE - enable DebugMsg * <li>EUROPA_OPTIMIZED - use optimization * <li>EUROPA_PROFILE - use profiling * <li>EUROPA_WARN - use additional warnings * </ul> * In the case of the CUSTOM variant, the five variables are used to * construct the name by composition.  E.g., the OPTIMIZED variant is * identical to the CUSTOM EUROPA_OPTIMIZED variant.  See the * VariantRules file for details. * * The default variant is DEV, which includes EUROPA_DEBUG_MESSAGE. * * The project tests building and testing EUROPA2 automatically overnight * using the shell script in PLASMA/System/test/autobuild via the UNIX & * Linux cron program.  See for usage information. * *<i><center> *% System/test/autobuild -h *</center></i> * * *@section buildconfiglibraries Configuring Build Libraries * * The EUROPA2 build supports building modules as different * kinds of libraries.  The building of modules as different * kinds of libraries is also controlled through environment * variables or parameters to jam. EUROPA2 supports building 1 or *  more library kinds at the * same time.  The valid library kinds are: *  *    <ul> *    <li>STATIC - using static compile time linking (*.a) *    <li>NONE - avoid using libraries (link *.o directly) *    <li>SHARED - using shared compile time linking (*.so) * * For example, to build without using libraries, run jam like * this: (assumes bash) * <center><i> * % LIBRARIES=NONE jam * </i></center> * Or alternatively: * * <center><i> * % jam -sLIBRARIES=NONE *</i></center> * * When building shared libraries, it is required to build * using position independent code, so the object files in * this case are named differently: * * <i> *  SHARED = <variant>_pic.o <br> *  STATIC/NONE = <variant>.o * </i> * * Also, depending on which type of libraries are used, the * target executable names are also different. * *<i> * STATIC = <filename>[.exe] <br> * NONE = <filename>_no[.exe] <br> * SHARED = <filename>_rt[.exe] <br> *</i> * * The default library kind is SHARED.  The library kind * NONE is only recommended for situations where cyclic * dependencies exist between modules.  The library kind * SHARED is often the most space efficient. * * When running with SHARED it is required to add the * EUROPA2 shared library directory to your library search * path.  The relevant variable depends on your platform, * and the way to set it depends on your shell.  Here is * an example for the sh and bash shells: * * <i><center> * % LD_LIBRARY_PATH="$LD_LIBRARY_PATH":/home/me/PLASMA/lib <br> * % export LD_LIBRARY_PATH * </center> </i> * * where you should replace '/home/me' with the full path to the * directory containing your EUROPA2 checkout from CVS. *  * For csh and tcsh and similar shells:  *  * <i><center> * % setenv LD_LIBRARY_PATH="$LD_LIBRARY_PATH":/home/me/PLASMA/lib * </center></i> * *  @section codecoverage Analyzing Code Coverage * * The Europa team use the gcov code coverage tool to identify the percentage of the code base * that is exercised by our module tests. This is an important quality metric for the system. The higher * the percentage of the code base exercised the more likely it is that the module tests will detect bugs.  * * Follow the folling procedure to produce code coverage information. * <ul> * <li> Go to the PLASMA directory and invoke the <i>coverage</i> script. This will compile the system  *      using the flags required by gcov and run all the module tests. An <i>ls</i> should reveal many <i>.bb</i> files in the *      directory if the coverage tool was run successfully.  * <li> [this should change!] You can now visit each source file in the system. Use the following command to inspect the coverage information *      <i> gcov -o [path to where you ran the coverage script] [file-name].cc | .hh * </ul> */