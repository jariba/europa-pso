/** * @page hellorovertutorial A Simple Introductory Example - helloRover * * @section roverTutorialObjective Objective * * Programming textbooks traditionally start the reader with a simple program * that, when executed, will print the message "Hello World" to the computer  * screen. We follow the spirit of that tradition in the tutorial by providing a very simple application of EUROPA2 that will  * produce a plan containing a number of "HelloRover" steps. Keeping the application simple right now will allow you to focus  * on the steps required to build and execute EUROPA2 applications. By the time you have finished you will be comfortable with * the basic operation of EUROPA2 and ready to tackle a realistic sized application based on an interplanetary rover in the * next section. Please do not get frustrated with the simplicity of this particular application and just view it as a teaching aide.  *  * It will take approximately one hour to complete this tutorial. *  * @section roverTutorialCreateProject Creating your Own Project * * We have provided a script to generate the files you need for this tutorial. As you advance, you will also use this same script to * build the initial infrastructure you need for you own projects. Please just keep this future use in the back of your mind for now. * * Open up a command line shell in your environment and move to the directory where you installed EUROPA2 then enter the PLASMA directory *  and enter the following command: * <br><br><center><i> * makeproject HelloRover * </i></center><br><br> * You will see the message "Creating directory: ./../HelloRover" followed by the trace of nine files being added to that directory. Change * directory to the newly created HelloRover directory. It will be in the directory above where you installed PLASMA. * * The directory contains nine files. We are going to step through each in turn and execute then execute the system on this simple applications. * * @section HelloRover-model.nddl * * Open the HelloRover-model.nddl file in your prefered text editor. This is the application model file that describes the actions available in our * domain and the constraints between those actions.  * *\#include "Plasma.nddl" *\#include "PlannerConfig.nddl" * /** * @brief Place holder class with a single predicate */class YourObject { predicate helloWorld{} /*!< Predicate with no arguments */}/** * @brief A simple rule to force a repeated cycle */YourObject::helloWorld{ eq(duration, 10); meets (object.helloWorld); met_by(object.helloWorld);} */ 