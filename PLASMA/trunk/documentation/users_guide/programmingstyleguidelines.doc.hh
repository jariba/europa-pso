/** * @page programmingstyle Programming Style Guidelines * * * @section programminggeneralpractices  General Practices * <ul> * <li>Ensure you declare variables and methods in their narrowest scope. * <li> If you declare a static variable inside a non-static method, double check that the method  * should not be static and also double check that the variable should not be a member of the class. * <li> We discourage writing code in header files unless needed for templates or proven performance. * <li> Use STL classes and methods unless what you need is not provided.  Same goes for any other code.  Re * use as much as possible.  * </ul> * *@section programmingprprocessing Pre-processing *<ul> *<li> Include system headers by using the angle bracket style. (\#include <stdio>) *<li> Include user files by using the double quote style. (\#include "File.h") *<li> Do not define your own pre-processor macros to control level of or presence of debugging  * output or error checks. *</ul> * *@section Namespaces *<ul> *<li>Use the std:: prefix, or 'using namespace std;' when using STL. *<li>Put Europa code in the Europa namespace. *</ul> * *@section Global Constants *<ul> * <li> Use DEFINE_GLOBAL_CONSTANT and DECLARE_GLOBAL_CONSTANT for globals. *</ul> * * @section Static Class Members * <ul> * <li> When handling static data, you must provide an automatic purge mechanism or provide an explicit purge method. *</ul> * * @section Module Initialization and Termination *<ul> *<li>We should standardize method calls to initialization and termination methods.  Such as nddl initialization which cascades onto constraint engine initialization. *</ul> * * @section Iterator Use * <ul>	  * <li>Use const iterators unless you have to use a non-const iterator.  * <li>When using const iterators, use ++iterator rather than iterator++. *  </ul> * * @section Pointer References *<ul>	 * <li>	Direct pointer references are discouraged; use class Id instead. * <li>	When creating a reference, create an m\_id member that holds the id that gets constructed in the constructor initializer, in the destructor the m\_id should be removed. *  <li>	When deleting references to ids call delete on the cast operator (e.g. delete (ConstrainedVariable *) ref). * </ul> * * @section Magic Numbers * <ul>       *  <li>	Define an enumerated type to handle number references instead of using magic numbers. * </ul> *  * @section Classes * <ul> *  <li>	Capitalize names of classes.  When composing names for classes capitalize the first letter of each word. * <li>	Declare a virtual destructor. * </ul> * * @section Pure Virtual Classes * <ul> * <li>	Declare a protected constructor. * <li>	Declare all functions pure virtual. * </ul> * @section Methods *<ul> * <li>	Declare a method const where possible. * <li>	Do not return bare pointers or non-const references. * <li>	If the caller can own a data structure that is to be populated in the callee, create the data structure in the caller and then pass it by reference as an argument. * <li>	Avoid copying of data structures where possible. * <li>	Declare non-primitive arguments as const references. * <li>	Return non-primitive values as const references. * </ul> *@section Error Checks *<ul> * <li>	Use checkError to express pre-conditions. * <li>	Use checkError to express invariants. * <li>	Use checkError to express post-conditions. * <li>	Avoid using non-const functions in checkError tests. * <li>	Do not use assert. * <li>	Do not use Id::isValid outside of checkError. * <li>	Do not write "if (Test) checkError(...Check...);".  Write "checkError(!Test $||$ ...Check...)". *</ul> * *@section Debugging Output *<ul> * <li>	Use the Europa debugging output management system. * <li>	Do not put debugging output into stdout or stderr. * </ul> * * @section  Documentation * <ul> * <li>	Use doxygen style comments with the javadoc style keywords. (@brief, etc.) * <li>	Enforce emacs macros * <li>	Class descriptions, file descriptions, parameters, method, return values, errors   * <li>	Documentation is required for header files, recommended for implementation files *</ul> *</ul> * *  */