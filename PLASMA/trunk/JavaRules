if ! $(JavaRules_INCLUDED) {
JavaRules_INCLUDED = TRUE ;

include [ FDirName $(SUBDIR) PlatformRules ] ;

# JavaJar jarname.jar : package.subpackage.classname ... ;
rule JavaJar
{
  local jar = $(1) ;
  local java_classes = $(2) ;

  LocalDepends lib : $(jar) ;
  MakeLocate $(jar) : $(JAVA_JARS_DIR) ;
  local java_class ;
  for java_class in $(java_classes) {
    local classname = [ MATCH "^\\.(.*)" : $(java_class:S) ] ;
#    Echo JavaJar . $(classname) ;
    local packagepath = [ FDirName [ FSplit "\\." : $(java_class:S=) ] ] ;
    local classfile = $(classname:S=.class) ;
    local javafile = $(classname:S=.java) ;
    MakeLocate $(classfile) : [ FDirName $(JAVA_CLASSES_DIR) $(packagepath) ] ;
    MakeLocate $(javafile) : [ FDirName $(JAVA_SRC_DIR) $(packagepath) ] ;

    UpdateJar $(jar) : $(classfile) ; 
    Depends $(java_class) : $(classfile) ;
    JavaCompile $(classfile) : $(javafile) ;
  }
  JavaClassPath [ FDirName $(JAVA_JARS_DIR) $(jar) ] ;
}

rule UpdateJar
{
  local jar = $(1) ;
  local classfile = $(2) ;

#  Echo UpdateJar $(jar) . $(classfile) ;

  Depends $(jar) : $(classfile) ;
  LocalClean clean : $(jar) ;
}

actions together UpdateJar 
{
  touch $(JAVA_CLASSES_DIR)$(SLASH)dummy.class
  $(JAR) cf $(1) -C $(JAVA_CLASSES_DIR) dummy.class $(2)
}
#  $(ZIP) -dq $(1) dummy.class

rule JavaCompile
{
  local classfile = $(classfile) ;
  local javafile = $(javafile) ;

#  Echo JavaCompile $(classfile) . $(javafile) ;

  Depends $(classfile) : $(javafile) ;
  LocalClean clean : $(classfile) ;
}

actions JavaCompile
{
  $(JAVAC) -sourcepath $(JAVA_SRC_DIR) -classpath $(CLASSPATH) -d $(JAVA_CLASSES_DIR) $(2) ;
}

rule JavaThirdPartyJar
{
  local jarpath = [ FDirName $(SUBDIR) $(1) ] ;
  JAVA_THIRD_PARTY_JARS += $(jarpath) ;
  JavaClassPath $(jarpath) ;
}

rule JavaClassPath
{
  CLASSPATH = $(CLASSPATH)$(CLASSPATH_SEPARATOR)$(1) ;
  CLASSPATH = $(CLASSPATH:E=$(1)) ;
}

}
