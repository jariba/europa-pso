Building PLASMA
by Andrew Bachmann
2004-07-13

$Id: BUILDING,v 1.4 2004-10-22 20:45:10 wedgingt Exp $


- Building Jam

The build PLASMA you must have Jam installed on your
system.  If you are building on a solaris box the
systems group may have already installed jam.  Type
"jam -v" to test your jam version.  Versions 2.4 and
versions 2.5rc3 are known to work.  

Although version 2.4 works, it is not recommended
because using it will result in the entire tree being
rebuilt even when it is run in a subdirectory.

Jam is open source and can be downloaded from:
ftp://ftp.perforce.com/pub/jam/


- Performing a build

If you run "jam" in a directory of the PLASMA tree, it
will build all files below that subdirectory, and any
files in the rest of the tree that the files in that
subdirectory depend on.  This includes libraries and
test executables.

If you run "jam tests" in a directory of the PLASMA
tree, it will build and run all the tests below that
subdirectory.  To build and run all tests in the
entire PLASMA tree, run "jam tests" at the PLASMA
directory.

If you run "jam clean" in a directory of the PLASMA
tree, it will remove generated files that are below
that subdirectory.  To remove generated files in the
entire PLASMA tree, run "jam clean" at the PLASMA
directory.


- Configuring the build : VARIANTS

The PLASMA build has a few variations that can be
built.  The variations and parameters of the build
can be configured through environment variables or
parameters to jam.

PLASMA supports building 1 or more "variants" at the
same time.  The valid variants are:

	1. DEV - unoptimized, unprofiled, debug
	2. OPTIMIZED - optimized, unprofiled, no debug
	3. PROFILE - unoptimized, profiled, no debug
	4. CUSTOM

For example, to build an optimized build run jam like
this: (assumes bash)

% VARIANTS=OPTIMIZED jam

Or alternatively:

% jam -sVARIANTS=OPTIMIZED

The output files are named differently for each variant,
which makes it possible to build different variants at
the same time.  It is also not necessary to clean the
tree when switching variants.  Here are the naming
patterns for each of the main variants:

	DEV = <filename>_g<ext>
	OPTIMIZED = <filename>_o<ext>
	PROFILE = <filename>_p<ext>

The fourth variant, CUSTOM is a special variant which examines some
environment variables to determine the compilation flags.  These
environment variables are:

	1. PLASMA_DEBUG - use debugging
	2. PLASMA_OPTIMIZE - use optimization
	3. PLASMA_PROFILE - use profiling
	4. PLASMA_WARN - use additional warnings

In the case of the CUSTOM variant, the above variables
are used to construct the name by composition.  Thus,
the DEV variant is identical to the CUSTOM DEBUG variant.

The default variant is DEV.


- Configuring the build : LIBRARIES

The PLASMA build supports building modules as different
kinds of libraries.  The building of modules as different
kinds of libraries is also controlled through environment
variables or parameters to jam.

PLASMA supports building 1 or more library kinds at the
same time.  The valid library kinds are:

	1. STATIC - using static compile time linking (*.a)
	2. NONE - avoid using libraries (link *.o directly)
	3. SHARED - using shared compile time linking (*.so)

For example, to build without using libraries, run jam like
this: (assumes bash)

% LIBRARIES=NONE jam

Or alternatively:

% jam -sLIBRARIES=NONE

When building shared libraries, it is required to build
using position independent code, so the object files in
this case are named differently:

  SHARED = <variant>_pic.o
  STATIC/NONE = <variant>.o

Also, depending on which type of libraries are used, the
target executable names are also different.

  STATIC = <filename>[.exe]
  NONE = <filename>_no[.exe]
  SHARED = <filename>_rt[.exe]

The default library kind is STATIC.  The library kind
NONE is only recommended for situations where cyclic
dependencies exist between modules.  The library kind
SHARED is often the most space efficient.

When running with SHARED it is required to add the
PLASMA shared library directory to your library search
path.  The relevant variable depends on your platform,
and the way to set it depends on your shell.  Here is
an example for the sh and bash shells:

% LD_LIBRARY_PATH="$LD_LIBRARY_PATH":/user/me/PLASMA/lib
% export LD_LIBRARY_PATH

- Getting more help

If you have difficulty with any part of these
instructions please contact the PLASMA development team.
