if ! $(TestLangRules_INCLUDED) {
TestLangRules_INCLUDED = TRUE ;

include [ FDirName $(SUBDIR) JavaRules ] ;

#TestLangMain exec : testfile : foo.o : module
rule TestLangMainNoNddl {
  local exe = $(1) ;
  local test = $(2) ;
  local code = $(3) ;
  local module = $(4) ;
  local build_target = $(5) ;
  
  local testxml = [ FGristFiles Test_$(test:S=.xml) ] ;
  local testhh = [ FGristFiles Test_$(test:S=.hh) ] ;
  local testcc = [ FGristFiles Test_$(test:S=.cc) ] ;
  TestLangToCpp $(testcc) : $(test) ;
  
  ModuleMain $(exe) : $(code) $(testcc) : $(module) : $(build_target) ;
}

#TestLangMain exec : testfile : foo.o : nddl.nddl : module
rule TestLangMain {
  local exe = $(1) ;
  local test = $(2) ;
  local code = $(3) ;
  local nddl = $(4) ;
  local module = $(5) ;
  local build_target = $(6) ;  

#  Echo TestLangMain $(exe) $(test) $(code) $(nddl) $(module) $(build_target) ;
  
  local testxml = [ FGristFiles Test_$(test:S=.xml) ] ; #$(test:S=.xml) ;
  local testhh = [ FGristFiles Test_$(test:S=.hh) ] ; #Test_$(test:S=.hh) ;
  local testcc = [ FGristFiles Test_$(test:S=.cc) ] ;
  #Includes $(testcc) : $(testhh) ;
  TestLangToCpp $(testcc) : $(test) ;

  local hh = [ FGristFiles $(model:S=.hh) ] ; #$(model:S=.hh) ;
  local cc = [ FGristFiles $(model:S=.cc) ] ;
  Includes $(cc) : $(hh) ;
  NddlCompiler $(hh) $(cc) : $(model) ;
  ModuleMain $(exe) : $(cc) $(code) $(testcc) : $(module) : $(build_target) ;
}

#TestLangToCpp out.cc : test.xml
#TestLangToCpp out.cc : test
rule TestLangToCpp {
  local code = $(1) ;
  local tl = $(2) ;

#  Echo TestLangToCpp $(code) $(tl) ;

  local xml ;
  if $(tl:S) = .xml {
    xml = $(tl) ;
  }
  else {
    xml = [ FGristFiles $(tl:S=.xml) ] ;
    TestLangToXml $(xml) : $(tl) ;
  }
  TestLangToCpp1 $(code) : [ FGristSourceFiles $(xml) ] ;
}

rule TestLangToCpp1 {
  local code = $(1) ;
  local xml = $(2) ;

  #Echo TestLangToCpp1 $(code) $(xml) ;

  SEARCH on $(xml) = $(SEARCH_SOURCE) ;
  Depends $(code) : testLang.jar ;
  Depends $(code) : $(xml) ;
  MakeLocate $(code) : $(LOCATE_TARGET) ;
  LocalClean clean : $(code) ;

}

actions TestLangToCpp1 {
  "$(JAVA)" -cp $(CLASSPATH) testLang.TestLangXMLToCpp $(2) ;
}

#TestLangToXML test.xml : test ;
rule TestLangToXml {
  local xml = $(1) ;
  local tl = $(2) ;

  #Echo TestLangToXml $(xml) $(tl) ;

  TestLangToXml1 $(xml) : [ FGristSourceFiles $(tl) ] ;
}

rule TestLangToXml1 {
  local xml = $(1) ;
  local tl = $(2) ;
  
  #Echo TestLangToXml1 $(xml) $(tl) ;

  LocalClean clean : $(xml) ;
  MakeLocate $(xml) : $(LOCATE_TARGET) ;
  SEARCH on $(tl) = $(SEARCH_SOURCE) ;

  Depends $(xml) : testLang.jar ;
  Depends $(xml) : $(tl) ;
}

actions TestLangToXml1 {
  "$(JAVA)" -cp $(CLASSPATH) testLang.TestLangToXML $(2) $(1) ;
}

}
