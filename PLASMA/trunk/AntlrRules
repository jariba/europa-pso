if ! $(AntlrRules_INCLUDED) {
AntlrRules_INCLUDED = TRUE ;

include [ FDirName $(SUBDIR) JavaRules ] ;

ANTLR_JAR ?= [ FDirName $(SUBDIR) ext lib antlr.jar ] ;

# AntlrGrammar ParserPrefix : grammar.g grammar.tree.g ;
rule AntlrGrammar
{
  local prefix = $(1) ;
  local grammar = $(2[1]) ;
  local grammar.tree = $(2[2]) ;

  local sources = [ FGristFiles $(prefix)Lexer.cpp $(prefix)Parser.cpp ] ;
  local headers = [ FGristFiles $(prefix)TokenTypes.hpp $(prefix)TokenTypes.txt $(prefix)Lexer.hpp $(prefix)Parser.hpp ] ;

  local sources.tree = [ FGristFiles $(prefix)TreeParser.cpp ] ;
  local headers.tree = [ FGristFiles $(prefix)TreeParserTokenTypes.hpp $(prefix)TreeParserTokenTypes.txt ] ;

#  Echo AntlrTool . $(prefix) . $(grammar) . $(grammar.tree) ;

  AntlrTool $(sources) $(headers) : $(grammar) ;

	Includes $(sources) : $(headers) ;

	if $(grammar.tree) {
  	AntlrTool $(sources.tree) $(headers.tree) : $(grammar.tree) ;

		Includes $(sources.tree) : $(headers.tree) ;
	}
}

rule AntlrTool
{
  local files = $(1) ;
  local grammar = $(2) ;

#  Echo AntlrTool . $(files) . $(grammar) ;

	LOCATE on $(files) = $(LOCATE_SOURCE) ;
  SEARCH on $(grammar) = $(SEARCH_SOURCE) ;
  RunAntlrTool $(files) : $(grammar) ;
}

rule RunAntlrTool
{
  local files = $(1) ;
  local grammar = $(2) ;

#  Echo RunAntlrTool . $(files) . $(grammar) ;

  Depends $(files) : $(grammar) ;
  LocalClean clean : $(files) ;
}

#  cd $(PATHNAME) 

actions RunAntlrTool
{
rm -f $(1)
$(JAVA) -cp $(ANTLR_JAR) $(JREFLAGS) antlr.Tool -traceParser -o ./$(1[0]:D) $(ANTLRFLAGS) $(2) 
}

} # AntlrRules_INCLUDED

