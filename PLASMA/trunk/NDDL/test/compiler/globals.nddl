#include "Plasma.nddl"

/**
 * Test use of global variables in various scopes.
 */

int global1=100;
int global2=200;
bool global3; // Leave unbound

class Foo extends Timeline {
 predicate pred1{
  int global1; // Mmake sure scope is OK
  int local1;
  neq(local1, global2); // Make sure can access in predicate spec too
 }
}

// Set of objects
Foo global4;

Foo::pred1{
 eq(global1, global2); // Should be consistent since we se the local version.

 if(global3==true){
  meets(pred1);
 }
 if(global3==false){
  met_by(pred1);
 }

 // Constrain against global object variable
 eq(global4, object);
}

float global5 = [1 18]; // Leave restricted but unbound

enum Color {red, green, blue};

enum Random {purple, violet};

// Correctly does not work: Color color = {red, violet};
Color color = {red, blue};

// Transactions

Foo f1 = new Foo();
Foo f2 = new Foo();
int i = [0 10];
float j;
j.specify([8.6 123.9]);

close();

goal(f1.pred1);