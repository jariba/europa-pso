// inheritance.2.xml

#include "inheritance.2.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  
  // inheritance.2.nddl:2 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Foo::constructor() {
  }
  
  
  // inheritance.2.nddl:2 Foo
  DECLARE_DEFAULT_OBJECT_FACTORY(FooFactory0, Foo);
  
  
  // inheritance.2.nddl:4 pred1
  Foo::pred1::pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::pred1::pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred1::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(arg1.isNoId()){
      arg1 = addParameter(IntervalIntDomain("int"), "arg1");
    }
    if (autoClose)
      close();
  }
  
  
  
  // inheritance.2.nddl:10 Bar
  Bar::Bar(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Foo(planDatabase, "Bar", name) {
  }
  Bar::Bar(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Foo(planDatabase, type, name) {
  }
  Bar::Bar(const ObjectId& parent, const LabelStr& name)
   : Foo(parent, "Bar", name) {}
  Bar::Bar(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Foo(parent, type, name) {}
  // default initialization of member variables
  void Bar::handleDefaults(bool autoClose) {
    Foo::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // inheritance.2.nddl:10 Bar
  DECLARE_DEFAULT_OBJECT_FACTORY(BarFactory1, Bar);
  
  
  // inheritance.2.nddl:11 pred2
  Bar::pred2::pred2(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Bar::pred2::pred2(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Bar::pred2::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  
  // inheritance.2.nddl:16 Baz
  Baz::Baz(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Foo(planDatabase, "Baz", name) {
  }
  Baz::Baz(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Foo(planDatabase, type, name) {
  }
  Baz::Baz(const ObjectId& parent, const LabelStr& name)
   : Foo(parent, "Baz", name) {}
  Baz::Baz(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Foo(parent, type, name) {}
  // default initialization of member variables
  void Baz::handleDefaults(bool autoClose) {
    Foo::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // inheritance.2.nddl:16 Baz
  DECLARE_DEFAULT_OBJECT_FACTORY(BazFactory2, Baz);
  
  
  // inheritance.2.nddl:17 pred1
  Baz::pred1::pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : Foo::pred1(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Baz::pred1::pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : Foo::pred1(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Baz::pred1::handleDefaults(bool autoClose) {
    Foo::pred1::handleDefaults(false);
    if(arg2.isNoId()){
      arg2 = addParameter(IntervalDomain("float"), "arg2");
    }
    if (autoClose)
      close();
    
    // Post parameter constraints
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("arg1")));
      vars.push_back(predicateVariable(IntervalIntDomain(0, 100, "int")));
      token_constraint(eq, vars);
    }
  }
  
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("inheritance.2");
    id->reset(); // Reset prior data if present. 
    
    // Invoke commands to populate schema with type definitions
    id->addPrimitive("int");
    id->addPrimitive("float");
    id->addPrimitive("bool");
    id->addPrimitive("string");
    id->addObjectType("Object");
    id->addObjectType("Timeline","Object");
    id->addObjectType("Foo", "Timeline");
    id->addPredicate("Foo.pred1");
    id->addMember("Foo.pred1", "int", "arg1");
    id->addObjectType("Bar", "Foo");
    id->addPredicate("Bar.pred2");
    id->addObjectType("Baz", "Foo");
    id->addPredicate("Baz.pred1");
    id->addMember("Baz.pred1", "float", "arg2");
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Foo::pred1::Factory);
    REGISTER_TOKEN_FACTORY(Bar::pred2::Factory);
    REGISTER_TOKEN_FACTORY(Baz::pred1::Factory);
    REGISTER_TYPE_FACTORY(Foo, ObjectDomain("Foo"));
    REGISTER_OBJECT_FACTORY(FooFactory0, Foo);
    REGISTER_TYPE_FACTORY(Bar, ObjectDomain("Bar"));
    REGISTER_OBJECT_FACTORY(BarFactory1, Bar);
    REGISTER_TYPE_FACTORY(Baz, ObjectDomain("Baz"));
    REGISTER_OBJECT_FACTORY(BazFactory2, Baz);
    // Allocate rules
    return id;
  }
  
}
