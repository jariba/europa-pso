// NDDL/test/compiler/interval-constants.xml

#include "interval-constants.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  
  // interval-constants.nddl:1 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if(f_var.isNoId()){
      f_var = addVariable(IntervalDomain("float"), "f_var");
    }
    if (autoClose)
      close();
  }
  
  
  
  // interval-constants.nddl:3 pred1
  Foo::pred1::pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::pred1::pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred1::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
    
    // Post parameter constraints
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("duration")));
      vars.push_back(predicateVariable(IntervalIntDomain(4, 10, "int")));
      token_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("start")));
      vars.push_back(predicateVariable(IntervalIntDomain(10,10, "int")));
      token_constraint(leq, vars);
    }
  }
  
  
  // interval-constants.nddl:1 Foo
  void Foo::constructor() {
    f_var = addVariable(IntervalDomain(10.9, 10.9, "float"), "f_var");
  }
  
  // interval-constants.nddl:1 Foo
  class FooFactory0: public ConcreteObjectFactory {
  public:
    FooFactory0(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 0);
      FooId instance = (new Foo(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  // interval-constants.nddl:13 pred1
  class Foo$pred1$0$0: public RuleInstance {
  public:
    Foo$pred1$0$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Foo$pred1$0, Foo$pred1$0$0, Foo.pred1, "interval-constants.nddl,13");
  
  void Foo$pred1$0$0::handleExecute() {
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("object"), std::string("f_var"), false));
      vars.push_back(ruleVariable(IntervalDomain(10.9, 10.9, "float")));
      rule_constraint(eq, vars);
    }
  }
  
  
  // interval-constants.nddl:17 World
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "World", name, true) {
  }
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  World::World(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "World", name, true) {}
  World::World(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void World::handleDefaults(bool autoClose) {
    check_error(obj1.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  
  // interval-constants.nddl:19 initialState
  World::initialState::initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  World::initialState::initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void World::initialState::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // interval-constants.nddl:17 World
  void World::constructor() {
    obj1 = addVariable(FooDomain((new Foo(m_id, "obj1"))->getId(), "Foo"), "obj1");
    Id<Foo>(singleton(obj1))->constructor();
    Id<Foo>(singleton(obj1))->handleDefaults();
  }
  
  // interval-constants.nddl:17 World
  class WorldFactory1: public ConcreteObjectFactory {
  public:
    WorldFactory1(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 0);
      WorldId instance = (new World(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  // interval-constants.nddl:27 initialState
  class World$initialState$1$0: public RuleInstance {
  public:
    World$initialState$1$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$World$initialState$1, World$initialState$1$0, World.initialState, "interval-constants.nddl,27");
  
  void World$initialState$1$0::handleExecute() {
    slave(Foo::pred1, Foo.pred1, foo, LabelStr("any"));
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("NDDL/test/compiler/interval-constants");
    id->reset(); // Reset prior data if present. 
    
    // Invoke commands to populate schema with type definitions
    id->addObjectType("Timeline","Object");
    id->addObjectType("Foo", "Timeline");
    id->addObjectType("World", "Timeline");
    id->addPrimitive("int");
    id->addPrimitive("float");
    id->addPrimitive("bool");
    id->addPrimitive("string");
    id->addMember("Foo", "float", "f_var");
    id->addPredicate("Foo.pred1");
    id->addMember("World", "Foo", "obj1");
    id->addPredicate("World.initialState");
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Foo::pred1::Factory);
    REGISTER_TOKEN_FACTORY(World::initialState::Factory);
    REGISTER_TYPE_FACTORY(Foo, ObjectDomain("Foo"));
    REGISTER_OBJECT_FACTORY(FooFactory0, Foo);
    REGISTER_TYPE_FACTORY(World, ObjectDomain("World"));
    REGISTER_OBJECT_FACTORY(WorldFactory1, World);
    // Allocate rules
    new Rule$World$initialState$1();
    new Rule$Foo$pred1$0();
    return id;
  }
  
}
