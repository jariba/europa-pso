// NDDL/test/compiler/simple-class.xml

#include "simple-class.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  Locations LocationsBaseDomain(){
    static Locations sl_enum("Locations");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("Hill"));
      sl_enum.insert(LabelStr("Rock"));
      sl_enum.insert(LabelStr("Lander"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  Strings StringsBaseDomain(){
    static Strings sl_enum("Strings");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("A1"));
      sl_enum.insert(LabelStr("B1"));
      sl_enum.insert(LabelStr("Martian City"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  Speeds SpeedsBaseDomain(){
    static Speeds sl_enum("Speeds");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(1);
      sl_enum.insert(10);
      sl_enum.insert(35);
      sl_enum.insert(100);
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  Frequencies FrequenciesBaseDomain(){
    static Frequencies sl_enum("Frequencies");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(1.9);
      sl_enum.insert(2.67);
      sl_enum.insert(3.78);
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  
  // simple-class.nddl:7 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if(m_0.isNoId()){
      m_0 = addVariable(IntervalIntDomain("int"), "m_0");
    }
    if(m_1.isNoId()){
      m_1 = addVariable(IntervalDomain("float"), "m_1");
    }
    if(m_2.isNoId()){
      m_2 = addVariable(BoolDomain("bool"), "m_2");
    }
    if(m_3.isNoId()){
      m_3 = addVariable(StringDomain("DefaultString"), "m_3");
    }
    if(m_4.isNoId()){
      m_4 = addVariable(LocationsBaseDomain(), "m_4");
    }
    if(m_5.isNoId()){
      m_5 = addVariable(SpeedsBaseDomain(), "m_5");
    }
    if(m_6.isNoId()){
      m_6 = addVariable(FrequenciesBaseDomain(), "m_6");
    }
    if(m_7.isNoId()){
      m_7 = addVariable(Foo::ClassScopedEnumBaseDomain(), "m_7");
    }
    if(m_8.isNoId()){
      m_8 = addVariable(StringsBaseDomain(), "m_8");
    }
    if (autoClose)
      close();
  }
  
  
  Foo::ClassScopedEnum Foo::ClassScopedEnumBaseDomain(){
    static Foo::ClassScopedEnum sl_enum("Foo::ClassScopedEnum");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("A"));
      sl_enum.insert(LabelStr("B"));
      sl_enum.insert(LabelStr("C"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  // simple-class.nddl:7 Foo
  void Foo::constructor() {
    m_3 = addVariable(StringDomain(LabelStr("This string must be initialized"), "string"), "m_3");
  }
  
  // simple-class.nddl:7 Foo
  class FooFactory0: public ConcreteObjectFactory {
  public:
    FooFactory0(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 0);
      FooId instance = (new Foo(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  // simple-class.nddl:7 Foo
  void Foo::constructor(int _m_0, float _m_1) {
    m_0 = addVariable(IntervalIntDomain(_m_0, _m_0, "int"), "m_0");
    m_1 = addVariable(IntervalDomain(_m_1, _m_1, "float"), "m_1");
    m_2 = addVariable(BoolDomain(false, "bool"), "m_2");
    m_3 = addVariable(StringDomain(LabelStr("This still must be set!"), "string"), "m_3");
    m_4 = addVariable(Locations(LabelStr("Hill"), "Locations"), "m_4");
    m_5 = addVariable(Speeds(100, "Speeds"), "m_5");
    m_6 = addVariable(Frequencies(3.78, "Frequencies"), "m_6");
    m_7 = addVariable(Foo::ClassScopedEnum(LabelStr("A"), "Foo::ClassScopedEnum"), "m_7");
    m_8 = addVariable(Strings(LabelStr("Martian City"), "Strings"), "m_8");
  }
  
  // simple-class.nddl:7 Foo
  class FooFactory1: public ConcreteObjectFactory {
  public:
    FooFactory1(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 2);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("int")), 
                  "Cannot convert " + arguments[0].first.toString() + " to int");
      check_error(arguments[0].second->isSingleton());
      int _m_0((int)arguments[0].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[1].first.toString() + " to float");
      check_error(arguments[1].second->isSingleton());
      float _m_1((float)arguments[1].second->getSingletonValue());
      
      FooId instance = (new Foo(planDb, objectType, objectName))->getId();
      instance->constructor(_m_0, _m_1);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // simple-class.nddl:37 World
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "World", name, true) {
  }
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  World::World(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "World", name, true) {}
  World::World(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void World::handleDefaults(bool autoClose) {
    if(m_0.isNoId()){
      m_0 = addVariable(IntervalIntDomain("int"), "m_0");
    }
    if(m_1.isNoId()){
      m_1 = addVariable(IntervalIntDomain("int"), "m_1");
    }
    check_error(m_foo1.isValid(), "object variables must be initialized explicitly");
    
    check_error(m_foo2.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  
  // simple-class.nddl:43 initialState
  World::initialState::initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  World::initialState::initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void World::initialState::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // simple-class.nddl:37 World
  void World::constructor() {
    m_foo1 = addVariable(FooDomain((new Foo(m_id, "m_foo1"))->getId(), "Foo"), "m_foo1");
    Id<Foo>(singleton(m_foo1))->constructor();
    Id<Foo>(singleton(m_foo1))->handleDefaults();
    m_foo2 = addVariable(FooDomain((new Foo(m_id, "m_foo2"))->getId(), "Foo"), "m_foo2");
    Id<Foo>(singleton(m_foo2))->constructor();
    Id<Foo>(singleton(m_foo2))->handleDefaults();
  }
  
  // simple-class.nddl:37 World
  class WorldFactory2: public ConcreteObjectFactory {
  public:
    WorldFactory2(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 0);
      WorldId instance = (new World(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("NDDL/test/compiler/simple-class");
    id->reset(); // Reset prior data if present. 
    
    // Invoke commands to populate schema with type definitions
    id->addPrimitive("int");
    id->addPrimitive("float");
    id->addPrimitive("bool");
    id->addPrimitive("string");
    id->addObjectType("Object");
    id->addObjectType("Timeline","Object");
    id->addObjectType("Foo", "Object");
    id->addMember("Foo", "int", "m_0");
    id->addMember("Foo", "float", "m_1");
    id->addMember("Foo", "bool", "m_2");
    id->addMember("Foo", "string", "m_3");
    id->addMember("Foo", "Locations", "m_4");
    id->addMember("Foo", "Speeds", "m_5");
    id->addMember("Foo", "Frequencies", "m_6");
    id->addMember("Foo", "Foo::ClassScopedEnum", "m_7");
    id->addMember("Foo", "Strings", "m_8");
    id->addObjectType("World", "Timeline");
    id->addMember("World", "int", "m_0");
    id->addMember("World", "int", "m_1");
    id->addMember("World", "Foo", "m_foo1");
    id->addMember("World", "Foo", "m_foo2");
    id->addPredicate("World.initialState");
    id->addEnum("Locations");
    id->addValue("Locations", LabelStr("Hill"));
    id->addValue("Locations", LabelStr("Rock"));
    id->addValue("Locations", LabelStr("Lander"));
    id->addEnum("Strings");
    id->addValue("Strings", LabelStr("A1"));
    id->addValue("Strings", LabelStr("B1"));
    id->addValue("Strings", LabelStr("Martian City"));
    id->addEnum("Speeds");
    id->addEnum("Frequencies");
    id->addEnum("Foo::ClassScopedEnum");
    id->addValue("Foo::ClassScopedEnum", LabelStr("A"));
    id->addValue("Foo::ClassScopedEnum", LabelStr("B"));
    id->addValue("Foo::ClassScopedEnum", LabelStr("C"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(World::initialState::Factory);
    REGISTER_TYPE_FACTORY(Locations, LocationsBaseDomain());
    REGISTER_TYPE_FACTORY(Strings, StringsBaseDomain());
    REGISTER_TYPE_FACTORY(Speeds, SpeedsBaseDomain());
    REGISTER_TYPE_FACTORY(Frequencies, FrequenciesBaseDomain());
    REGISTER_TYPE_FACTORY(Foo, ObjectDomain("Foo"));
    REGISTER_TYPE_FACTORY(Foo::ClassScopedEnum, Foo::ClassScopedEnumBaseDomain());
    REGISTER_OBJECT_FACTORY(FooFactory0, Foo);
    REGISTER_OBJECT_FACTORY(FooFactory1, Foo:int:float);
    REGISTER_TYPE_FACTORY(World, ObjectDomain("World"));
    REGISTER_OBJECT_FACTORY(WorldFactory2, World);
    // Allocate rules
    return id;
  }
  
}
