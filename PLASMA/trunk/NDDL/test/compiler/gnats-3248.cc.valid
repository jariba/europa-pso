// gnats-3248.xml

#include "gnats-3248.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  
  // PlannerConfig.nddl:7 PlannerConfig
  PlannerConfig::PlannerConfig(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "PlannerConfig", name, true) {
  }
  PlannerConfig::PlannerConfig(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  PlannerConfig::PlannerConfig(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "PlannerConfig", name, true) {}
  PlannerConfig::PlannerConfig(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void PlannerConfig::handleDefaults(bool autoClose) {
    if(m_horizonStart.isNoId()){
      m_horizonStart = addVariable(IntervalIntDomain("int"), "m_horizonStart");
    }
    if(m_horizonEnd.isNoId()){
      m_horizonEnd = addVariable(IntervalIntDomain("int"), "m_horizonEnd");
    }
    if(m_maxPlannerSteps.isNoId()){
      m_maxPlannerSteps = addVariable(IntervalIntDomain("int"), "m_maxPlannerSteps");
    }
    if(m_maxPlannerDepth.isNoId()){
      m_maxPlannerDepth = addVariable(IntervalIntDomain("int"), "m_maxPlannerDepth");
    }
    if (autoClose)
      close();
  }
  
  
  // PlannerConfig.nddl:7 PlannerConfig
  void PlannerConfig::constructor(int start, int end, int maxPlannerSteps, int maxPlannerDepth) {
    m_horizonStart = addVariable(IntervalIntDomain(start, start, "int"), "m_horizonStart");
    m_horizonEnd = addVariable(IntervalIntDomain(end, end, "int"), "m_horizonEnd");
    m_maxPlannerSteps = addVariable(IntervalIntDomain(maxPlannerSteps, maxPlannerSteps, "int"), "m_maxPlannerSteps");
    m_maxPlannerDepth = addVariable(IntervalIntDomain(maxPlannerDepth, maxPlannerDepth, "int"), "m_maxPlannerDepth");
  }
  
  // PlannerConfig.nddl:7 PlannerConfig
  class PlannerConfigFactory0: public ConcreteObjectFactory {
  public:
    PlannerConfigFactory0(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 4);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("int")), 
                  "Cannot convert " + arguments[0].first.toString() + " to int");
      check_error(arguments[0].second->isSingleton());
      int start((int)arguments[0].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1].second, 
                                                TypeFactory::baseDomain("int")), 
                  "Cannot convert " + arguments[1].first.toString() + " to int");
      check_error(arguments[1].second->isSingleton());
      int end((int)arguments[1].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2].second, 
                                                TypeFactory::baseDomain("int")), 
                  "Cannot convert " + arguments[2].first.toString() + " to int");
      check_error(arguments[2].second->isSingleton());
      int maxPlannerSteps((int)arguments[2].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[3].second, 
                                                TypeFactory::baseDomain("int")), 
                  "Cannot convert " + arguments[3].first.toString() + " to int");
      check_error(arguments[3].second->isSingleton());
      int maxPlannerDepth((int)arguments[3].second->getSingletonValue());
      
      PlannerConfigId instance = (new PlannerConfig(planDb, objectType, objectName))->getId();
      instance->constructor(start, end, maxPlannerSteps, maxPlannerDepth);
      instance->handleDefaults();
      return instance;
    }
  };
  
  // PlannerConfig.nddl:7 PlannerConfig
  void PlannerConfig::constructor(int start, int end, int maxPlannerSteps) {
    m_horizonStart = addVariable(IntervalIntDomain(start, start, "int"), "m_horizonStart");
    m_horizonEnd = addVariable(IntervalIntDomain(end, end, "int"), "m_horizonEnd");
    m_maxPlannerSteps = addVariable(IntervalIntDomain(maxPlannerSteps, maxPlannerSteps, "int"), "m_maxPlannerSteps");
    m_maxPlannerDepth = addVariable(IntervalIntDomain(+inf, +inf, "int"), "m_maxPlannerDepth");
  }
  
  // PlannerConfig.nddl:7 PlannerConfig
  class PlannerConfigFactory1: public ConcreteObjectFactory {
  public:
    PlannerConfigFactory1(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 3);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("int")), 
                  "Cannot convert " + arguments[0].first.toString() + " to int");
      check_error(arguments[0].second->isSingleton());
      int start((int)arguments[0].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1].second, 
                                                TypeFactory::baseDomain("int")), 
                  "Cannot convert " + arguments[1].first.toString() + " to int");
      check_error(arguments[1].second->isSingleton());
      int end((int)arguments[1].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2].second, 
                                                TypeFactory::baseDomain("int")), 
                  "Cannot convert " + arguments[2].first.toString() + " to int");
      check_error(arguments[2].second->isSingleton());
      int maxPlannerSteps((int)arguments[2].second->getSingletonValue());
      
      PlannerConfigId instance = (new PlannerConfig(planDb, objectType, objectName))->getId();
      instance->constructor(start, end, maxPlannerSteps);
      instance->handleDefaults();
      return instance;
    }
  };
  
  // PlannerConfig.nddl:7 PlannerConfig
  void PlannerConfig::constructor() {
    m_horizonStart = addVariable(IntervalIntDomain(0, 0, "int"), "m_horizonStart");
    m_horizonEnd = addVariable(IntervalIntDomain(100, 100, "int"), "m_horizonEnd");
    m_maxPlannerSteps = addVariable(IntervalIntDomain(200, 200, "int"), "m_maxPlannerSteps");
    m_maxPlannerDepth = addVariable(IntervalIntDomain(+inf, +inf, "int"), "m_maxPlannerDepth");
  }
  
  // PlannerConfig.nddl:7 PlannerConfig
  class PlannerConfigFactory2: public ConcreteObjectFactory {
  public:
    PlannerConfigFactory2(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 0);
      PlannerConfigId instance = (new PlannerConfig(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // gnats-3248.nddl:3 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Foo::constructor() {
  }
  
  
  // gnats-3248.nddl:3 Foo
  DECLARE_DEFAULT_OBJECT_FACTORY(FooFactory3, Foo);
  
  
  // gnats-3248.nddl:4 guard
  Foo::guard::guard(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::guard::guard(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::guard::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  
  // gnats-3248.nddl:5 boring
  Foo::boring::boring(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::boring::boring(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::boring::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // gnats-3248.nddl:9 guard
  class Foo$guard$0$0: public RuleInstance {
  public:
    Foo$guard$0$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  class Foo$guard$0$0$0: public RuleInstance {
  public:
    Foo$guard$0$0$0(const RuleInstanceId& parent, const ConstrainedVariableId& var, const AbstractDomain& domain, const bool positive)
    : RuleInstance(parent, var, domain, positive){}
    void handleExecute();
  };
  
  class Foo$guard$0$0$1: public RuleInstance {
  public:
    Foo$guard$0$0$1(const RuleInstanceId& parent, const ConstrainedVariableId& var, const AbstractDomain& domain, const bool positive)
    : RuleInstance(parent, var, domain, positive){}
    void handleExecute();
  };
  
  class Foo$guard$0$0$2: public RuleInstance {
  public:
    Foo$guard$0$0$2(const RuleInstanceId& parent, const ConstrainedVariableId& var, const AbstractDomain& domain, const bool positive)
    : RuleInstance(parent, var, domain, positive){}
    void handleExecute();
  };
  
  class Foo$guard$0$0$3: public RuleInstance {
  public:
    Foo$guard$0$0$3(const RuleInstanceId& parent, const ConstrainedVariableId& var, const AbstractDomain& domain, const bool positive)
    : RuleInstance(parent, var, domain, positive){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Foo$guard$0, Foo$guard$0$0, Foo.guard, "gnats-3248.nddl,9");
  
  void Foo$guard$0$0::handleExecute() {
    localVar(BoolDomain(), s_meet, true);
    localVar(BoolDomain(), s_met, true);
    addChildRule(new Foo$guard$0$0$0(m_id, var(getId(),std::string("s_met")), BoolDomain(true, "bool"), true));
    addChildRule(new Foo$guard$0$0$1(m_id, var(getId(),std::string("s_met")), BoolDomain(true, "bool"), false));
    addChildRule(new Foo$guard$0$0$2(m_id, var(getId(),std::string("s_meet")), BoolDomain(false, "bool"), false));
    addChildRule(new Foo$guard$0$0$3(m_id, var(getId(),std::string("s_meet")), BoolDomain(false, "bool"), true));
  }
  void Foo$guard$0$0$0::handleExecute() {
    slave(Foo::guard, Foo.guard, slave0, LabelStr("met_by"));
    sameObject(object, slave0);
    met_by(this, slave0);
  }
  void Foo$guard$0$0$1::handleExecute() {
    slave(Foo::boring, Foo.boring, slave1, LabelStr("met_by"));
    sameObject(object, slave1);
    met_by(this, slave1);
  }
  void Foo$guard$0$0$2::handleExecute() {
    slave(Foo::boring, Foo.boring, slave2, LabelStr("meets"));
    sameObject(object, slave2);
    meets(this, slave2);
  }
  void Foo$guard$0$0$3::handleExecute() {
    slave(Foo::guard, Foo.guard, slave3, LabelStr("meets"));
    sameObject(object, slave3);
    meets(this, slave3);
  }
  
  // gnats-3248.nddl:20 boring
  class Foo$boring$1$0: public RuleInstance {
  public:
    Foo$boring$1$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Foo$boring$1, Foo$boring$1$0, Foo.boring, "gnats-3248.nddl,20");
  
  void Foo$boring$1$0::handleExecute() {
    slave(Foo::guard, Foo.guard, slave4, LabelStr("meets"));
    sameObject(object, slave4);
    meets(this, slave4);
    slave(Foo::guard, Foo.guard, slave5, LabelStr("met_by"));
    sameObject(object, slave5);
    met_by(this, slave5);
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("gnats-3248");
    id->reset(); // Reset prior data if present. 
    
    // Invoke commands to populate schema with type definitions
    id->addObjectType("Timeline","Object");
    id->addObjectType("PlannerConfig", "Object");
    id->addObjectType("Foo", "Timeline");
    id->addPrimitive("int");
    id->addPrimitive("float");
    id->addPrimitive("bool");
    id->addPrimitive("string");
    id->addMember("PlannerConfig", "int", "m_horizonStart");
    id->addMember("PlannerConfig", "int", "m_horizonEnd");
    id->addMember("PlannerConfig", "int", "m_maxPlannerSteps");
    id->addMember("PlannerConfig", "int", "m_maxPlannerDepth");
    id->addPredicate("Foo.guard");
    id->addPredicate("Foo.boring");
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Foo::guard::Factory);
    REGISTER_TOKEN_FACTORY(Foo::boring::Factory);
    REGISTER_TYPE_FACTORY(Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(PlannerConfig, ObjectDomain("PlannerConfig"));
    REGISTER_OBJECT_FACTORY(PlannerConfigFactory0, PlannerConfig:int:int:int:int);
    REGISTER_OBJECT_FACTORY(PlannerConfigFactory1, PlannerConfig:int:int:int);
    REGISTER_OBJECT_FACTORY(PlannerConfigFactory2, PlannerConfig);
    REGISTER_TYPE_FACTORY(Foo, ObjectDomain("Foo"));
    REGISTER_OBJECT_FACTORY(FooFactory3, Foo);
    // Allocate rules
    new Rule$Foo$boring$1();
    new Rule$Foo$guard$0();
    return id;
  }
  
}
