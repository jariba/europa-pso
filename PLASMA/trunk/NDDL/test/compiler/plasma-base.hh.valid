#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

// plasma-base.nddl

  class StringData;
  typedef Id<StringData> StringDataId;
  typedef ObjectDomain StringDataDomain;
  
  class BaseTimeline;
  typedef Id<BaseTimeline> BaseTimelineId;
  typedef ObjectDomain BaseTimelineDomain;
  
  class World;
  typedef Id<World> WorldId;
  typedef ObjectDomain WorldDomain;
  
  
  
  // Core.nddl:8 TokenStates
  typedef SymbolDomain TokenStates;
  TokenStates TokenStatesBaseDomain();
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Timeline
  
  
  // Plasma.nddl:15 StringData
  class StringData : public Object {
  public:
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& name);
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId data; // SchemaWriter::declareVariable
    
    // Plasma.nddl:15 StringData
    virtual void constructor(const LabelStr& _data);
  };
  
  // plasma-base.nddl:8 BaseTimeline
  class BaseTimeline : public Timeline {
  public:
    BaseTimeline(const PlanDatabaseId& planDatabase, const LabelStr& name);
    BaseTimeline(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    BaseTimeline(const ObjectId& parent, const LabelStr& name);
    BaseTimeline(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class p0;
    typedef Id<p0> p0Id;
    
    // plasma-base.nddl:9 p0
    class p0 : public NddlToken {
    public:
      p0(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      p0(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(BaseTimeline::p0, BaseTimeline.p0);
      
    };
  };
  
  // plasma-base.nddl:12 World
  class World : public Object {
  public:
    World(const PlanDatabaseId& planDatabase, const LabelStr& name);
    World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId _o1; // SchemaWriter::declareVariable
    
    // plasma-base.nddl:12 World
    virtual void constructor();
  };
} // End NDDL namespace
