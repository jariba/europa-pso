// simple-predicate.xml

#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

  class Foo;
  typedef Id<Foo> FooId;
  typedef ObjectDomain FooDomain;
  
  class Bar;
  typedef Id<Bar> BarId;
  typedef ObjectDomain BarDomain;
  
  class World;
  typedef Id<World> WorldId;
  typedef ObjectDomain WorldDomain;
  
  
  
  // simple-predicate.nddl:2 Locations
  typedef SymbolDomain Locations;
  Locations LocationsBaseDomain();
  
  // simple-predicate.nddl:4 Foo
  class Foo : public Timeline {
  public:
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class pred1;
    typedef Id<pred1> pred1Id;
    ConstrainedVariableId m_0; // SchemaWriter::declareVariable
    ConstrainedVariableId m_1; // SchemaWriter::declareVariable
    
    // simple-predicate.nddl:8 pred1
    class pred1 : public NddlToken {
    public:
      pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::pred1, Foo.pred1);
      
      ConstrainedVariableId m_0; // SchemaWriter::declareVariable
      ConstrainedVariableId m_1; // SchemaWriter::declareVariable
      ConstrainedVariableId m_2; // SchemaWriter::declareVariable
      ConstrainedVariableId m_3; // SchemaWriter::declareVariable
      ConstrainedVariableId m_4; // SchemaWriter::declareVariable
    };
    
    // simple-predicate.nddl:4 Foo
    virtual void constructor();
    
    // simple-predicate.nddl:4 Foo
    virtual void constructor(const LabelStr& s);
  };
  
  // simple-predicate.nddl:31 Bar
  class Bar : public Foo {
  public:
    Bar(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Bar(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Bar(const ObjectId& parent, const LabelStr& name);
    Bar(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class pred1;
    typedef Id<pred1> pred1Id;
    
    // simple-predicate.nddl:32 pred1
    class pred1 : public Foo::pred1 {
    public:
      pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Bar::pred1, Bar.pred1);
      
    };
  };
  
  // simple-predicate.nddl:41 World
  class World : public Timeline {
  public:
    World(const PlanDatabaseId& planDatabase, const LabelStr& name);
    World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class initialState;
    typedef Id<initialState> initialStateId;
    ConstrainedVariableId m_foo1; // SchemaWriter::declareVariable
    ConstrainedVariableId m_bar1; // SchemaWriter::declareVariable
    
    // simple-predicate.nddl:44 initialState
    class initialState : public NddlToken {
    public:
      initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(World::initialState, World.initialState);
      
    };
    
    // simple-predicate.nddl:41 World
    virtual void constructor();
  };
} // End NDDL namespace
