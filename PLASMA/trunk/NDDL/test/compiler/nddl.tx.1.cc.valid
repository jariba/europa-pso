// nddl.tx.1.xml

#include "nddl.tx.1.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  
  // nddl.tx.1.nddl:3 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Foo::constructor() {
  }
  
  
  // nddl.tx.1.nddl:3 Foo
  DECLARE_DEFAULT_OBJECT_FACTORY(FooFactory0, Foo);
  
  
  // nddl.tx.1.nddl:4 pred0
  Foo::pred0::pred0(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::pred0::pred0(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred0::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  
  // nddl.tx.1.nddl:5 pred1
  Foo::pred1::pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::pred1::pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred1::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  
  // nddl.tx.1.nddl:6 pred2
  Foo::pred2::pred2(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::pred2::pred2(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred2::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  
  // nddl.tx.1.nddl:7 pred3
  Foo::pred3::pred3(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::pred3::pred3(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred3::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  
  // nddl.tx.1.nddl:8 pred4
  Foo::pred4::pred4(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::pred4::pred4(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred4::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  
  // nddl.tx.1.nddl:9 pred5
  Foo::pred5::pred5(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::pred5::pred5(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred5::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  
  // nddl.tx.1.nddl:10 pred6
  Foo::pred6::pred6(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::pred6::pred6(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred6::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("nddl.tx.1");
    id->reset(); // Reset prior data if present. 
    
    // Invoke commands to populate schema with type definitions
    id->addObjectType("Timeline","Object");
    id->addObjectType("Foo", "Timeline");
    id->addPrimitive("int");
    id->addPrimitive("float");
    id->addPrimitive("bool");
    id->addPrimitive("string");
    id->addPredicate("Foo.pred0");
    id->addPredicate("Foo.pred1");
    id->addPredicate("Foo.pred2");
    id->addPredicate("Foo.pred3");
    id->addPredicate("Foo.pred4");
    id->addPredicate("Foo.pred5");
    id->addPredicate("Foo.pred6");
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Foo::pred0::Factory);
    REGISTER_TOKEN_FACTORY(Foo::pred1::Factory);
    REGISTER_TOKEN_FACTORY(Foo::pred2::Factory);
    REGISTER_TOKEN_FACTORY(Foo::pred3::Factory);
    REGISTER_TOKEN_FACTORY(Foo::pred4::Factory);
    REGISTER_TOKEN_FACTORY(Foo::pred5::Factory);
    REGISTER_TOKEN_FACTORY(Foo::pred6::Factory);
    REGISTER_TYPE_FACTORY(Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(Foo, ObjectDomain("Foo"));
    REGISTER_OBJECT_FACTORY(FooFactory0, Foo);
    // Allocate rules
    return id;
  }
  
}
