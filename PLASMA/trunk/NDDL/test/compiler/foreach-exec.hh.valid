// NDDL/test/compiler/foreach-exec.xml

#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

  class UnaryResource;
  typedef Id<UnaryResource> UnaryResourceId;
  typedef ObjectDomain UnaryResourceDomain;
  
  class StringData;
  typedef Id<StringData> StringDataId;
  typedef ObjectDomain StringDataDomain;
  
  class Location;
  typedef Id<Location> LocationId;
  typedef ObjectDomain LocationDomain;
  
  class Path;
  typedef Id<Path> PathId;
  typedef ObjectDomain PathDomain;
  
  class Target;
  typedef Id<Target> TargetId;
  typedef ObjectDomain TargetDomain;
  
  class Trackable;
  typedef Id<Trackable> TrackableId;
  typedef ObjectDomain TrackableDomain;
  
  class NotTrackable;
  typedef Id<NotTrackable> NotTrackableId;
  typedef ObjectDomain NotTrackableDomain;
  
  class Rover;
  typedef Id<Rover> RoverId;
  typedef ObjectDomain RoverDomain;
  
  class World;
  typedef Id<World> WorldId;
  typedef ObjectDomain WorldDomain;
  
  
  
  // Plasma.nddl:8 TokenStates
  typedef SymbolDomain TokenStates;
  TokenStates TokenStatesBaseDomain();
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Timeline
  
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Resource
  
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Reservoir
  
  
  // Plasma.nddl:141 UnaryResource
  class UnaryResource : public Timeline {
  public:
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& name);
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class uses;
    typedef Id<uses> usesId;
    
    // Plasma.nddl:142 uses
    class uses : public NddlToken {
    public:
      uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(UnaryResource::uses, UnaryResource.uses);
      
    };
  };
  
  // Plasma.nddl:151 StringData
  class StringData : public Object {
  public:
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& name);
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId data; // SchemaWriter::declareVariable
    
    // Plasma.nddl:151 StringData
    virtual void constructor(const LabelStr& _data);
  };
  
  // foreach.nddl:11 Location
  class Location : public Object {
  public:
    Location(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Location(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Location(const ObjectId& parent, const LabelStr& name);
    Location(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId description; // SchemaWriter::declareVariable
    
    // foreach.nddl:11 Location
    virtual void constructor(const LabelStr& _description);
  };
  
  // foreach.nddl:18 Path
  class Path : public Object {
  public:
    Path(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Path(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Path(const ObjectId& parent, const LabelStr& name);
    Path(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId from; // SchemaWriter::declareVariable
    ConstrainedVariableId to; // SchemaWriter::declareVariable
    
    // foreach.nddl:18 Path
    virtual void constructor(const LocationId& _from, const LocationId& _to);
  };
  
  // foreach.nddl:27 Target
  class Target : public Timeline {
  public:
    Target(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Target(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Target(const ObjectId& parent, const LabelStr& name);
    Target(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class Tracking;
    typedef Id<Tracking> TrackingId;
    
    // foreach.nddl:28 Tracking
    class Tracking : public NddlToken {
    public:
      Tracking(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      Tracking(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Target::Tracking, Target.Tracking);
      
    };
  };
  
  // foreach.nddl:33 Trackable
  class Trackable : public Object {
  public:
    Trackable(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Trackable(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Trackable(const ObjectId& parent, const LabelStr& name);
    Trackable(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId path; // SchemaWriter::declareVariable
    ConstrainedVariableId target; // SchemaWriter::declareVariable
    
    // foreach.nddl:33 Trackable
    virtual void constructor(const PathId& _path, const TargetId& _target);
  };
  
  // foreach.nddl:44 NotTrackable
  class NotTrackable : public Trackable {
  public:
    NotTrackable(const PlanDatabaseId& planDatabase, const LabelStr& name);
    NotTrackable(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    NotTrackable(const ObjectId& parent, const LabelStr& name);
    NotTrackable(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    
    // foreach.nddl:44 NotTrackable
    virtual void constructor(const PathId& _path, const TargetId& _target);
  };
  
  // foreach.nddl:50 Rover
  class Rover : public Timeline {
  public:
    Rover(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Rover(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Rover(const ObjectId& parent, const LabelStr& name);
    Rover(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class Navigate;
    typedef Id<Navigate> NavigateId;
    
    // foreach.nddl:51 Navigate
    class Navigate : public NddlToken {
    public:
      Navigate(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      Navigate(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Rover::Navigate, Rover.Navigate);
      
      ConstrainedVariableId path; // SchemaWriter::declareVariable
      ConstrainedVariableId from; // SchemaWriter::declareVariable
      ConstrainedVariableId to; // SchemaWriter::declareVariable
    };
  };
  
  // foreach-exec.nddl:3 World
  class World : public Timeline {
  public:
    World(const PlanDatabaseId& planDatabase, const LabelStr& name);
    World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class initialState;
    typedef Id<initialState> initialStateId;
    ConstrainedVariableId rover; // SchemaWriter::declareVariable
    ConstrainedVariableId loc1; // SchemaWriter::declareVariable
    ConstrainedVariableId loc2; // SchemaWriter::declareVariable
    
    // foreach-exec.nddl:7 initialState
    class initialState : public NddlToken {
    public:
      initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(World::initialState, World.initialState);
      
    };
    
    // foreach-exec.nddl:3 World
    virtual void constructor(const LocationId& l1, const LocationId& l2);
  };
} // End NDDL namespace
