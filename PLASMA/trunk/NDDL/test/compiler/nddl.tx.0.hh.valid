#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

// nddl.tx.0.nddl

  class StringData;
  typedef Id<StringData> StringDataId;
  typedef ObjectDomain StringDataDomain;
  
  class Foo;
  typedef Id<Foo> FooId;
  typedef ObjectDomain FooDomain;
  
  
  
  // Core.nddl:8 TokenStates
  typedef SymbolDomain TokenStates;
  TokenStates TokenStatesBaseDomain();
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Timeline
  
  
  // StringData.nddl:5 StringData
  class StringData : public Object {
  public:
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& name);
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId data; // SchemaWriter::declareVariable
    
    // StringData.nddl:5 StringData
    virtual void constructor(const LabelStr& _data);
  };
  
  // nddl.tx.0.nddl:3 Foo
  class Foo : public Timeline {
  public:
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class pred;
    typedef Id<pred> predId;
    
    // nddl.tx.0.nddl:4 pred
    class pred : public NddlToken {
    public:
      pred(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool isFact = false, bool close = false);
      pred(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::pred, Foo.pred);
      
      ConstrainedVariableId arg; // SchemaWriter::declareVariable
    };
  };
} // End NDDL namespace
