// simple-rules.xml

#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

  class Foo;
  typedef Id<Foo> FooId;
  typedef ObjectDomain FooDomain;
  
  class Rover;
  typedef Id<Rover> RoverId;
  typedef ObjectDomain RoverDomain;
  
  class SuperRover;
  typedef Id<SuperRover> SuperRoverId;
  typedef ObjectDomain SuperRoverDomain;
  
  class World;
  typedef Id<World> WorldId;
  typedef ObjectDomain WorldDomain;
  
  
  
  // simple-rules.nddl:1 Locations
  typedef SymbolDomain Locations;
  Locations LocationsBaseDomain();
  
  
  // simple-rules.nddl:2 StringEnum
  typedef StringDomain StringEnum;
  StringEnum StringEnumBaseDomain();
  
  
  // simple-rules.nddl:3 NumericEnum
  typedef NumericDomain NumericEnum;
  NumericEnum NumericEnumBaseDomain();
  
  // simple-rules.nddl:5 Foo
  class Foo : public Timeline {
  public:
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class Bar;
    typedef Id<Bar> BarId;
    
    // simple-rules.nddl:6 Bar
    class Bar : public NddlToken {
    public:
      Bar(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      Bar(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::Bar, Foo.Bar);
      
    };
  };
  
  // simple-rules.nddl:9 Rover
  class Rover : public Timeline {
  public:
    Rover(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Rover(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Rover(const ObjectId& parent, const LabelStr& name);
    Rover(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class At;
    typedef Id<At> AtId;
    class Going;
    typedef Id<Going> GoingId;
    class AnyPredicate;
    typedef Id<AnyPredicate> AnyPredicateId;
    ConstrainedVariableId foo; // SchemaWriter::declareVariable
    
    // simple-rules.nddl:11 At
    class At : public NddlToken {
    public:
      At(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      At(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Rover::At, Rover.At);
      
      ConstrainedVariableId _location; // SchemaWriter::declareVariable
      ConstrainedVariableId _foo; // SchemaWriter::declareVariable
    };
    
    // simple-rules.nddl:16 Going
    class Going : public NddlToken {
    public:
      Going(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      Going(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Rover::Going, Rover.Going);
      
      ConstrainedVariableId _from; // SchemaWriter::declareVariable
      ConstrainedVariableId _to; // SchemaWriter::declareVariable
    };
    
    // simple-rules.nddl:20 AnyPredicate
    class AnyPredicate : public NddlToken {
    public:
      AnyPredicate(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      AnyPredicate(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Rover::AnyPredicate, Rover.AnyPredicate);
      
      ConstrainedVariableId v0; // SchemaWriter::declareVariable
      ConstrainedVariableId v1; // SchemaWriter::declareVariable
      ConstrainedVariableId v2; // SchemaWriter::declareVariable
      ConstrainedVariableId v3; // SchemaWriter::declareVariable
      ConstrainedVariableId v4; // SchemaWriter::declareVariable
    };
    
    // simple-rules.nddl:9 Rover
    virtual void constructor();
  };
  
  // simple-rules.nddl:65 SuperRover
  class SuperRover : public Rover {
  public:
    SuperRover(const PlanDatabaseId& planDatabase, const LabelStr& name);
    SuperRover(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    SuperRover(const ObjectId& parent, const LabelStr& name);
    SuperRover(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    
    // simple-rules.nddl:65 SuperRover
    virtual void constructor();
  };
  
  // simple-rules.nddl:72 World
  class World : public Timeline {
  public:
    World(const PlanDatabaseId& planDatabase, const LabelStr& name);
    World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class initialState;
    typedef Id<initialState> initialStateId;
    ConstrainedVariableId rover; // SchemaWriter::declareVariable
    
    // simple-rules.nddl:75 initialState
    class initialState : public NddlToken {
    public:
      initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(World::initialState, World.initialState);
      
    };
    
    // simple-rules.nddl:72 World
    virtual void constructor();
  };
} // End NDDL namespace
