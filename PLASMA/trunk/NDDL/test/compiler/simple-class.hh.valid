// NDDL/test/compiler/simple-class.xml

#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

  class Foo;
  typedef Id<Foo> FooId;
  typedef ObjectDomain FooDomain;
  
  class World;
  typedef Id<World> WorldId;
  typedef ObjectDomain WorldDomain;
  
  
  
  // simple-class.nddl:1 Locations
  typedef SymbolDomain Locations;
  Locations LocationsBaseDomain();
  
  
  // simple-class.nddl:2 Strings
  typedef SymbolDomain Strings;
  Strings StringsBaseDomain();
  
  
  // simple-class.nddl:3 Speeds
  typedef NumericDomain Speeds;
  Speeds SpeedsBaseDomain();
  
  
  // simple-class.nddl:4 Frequencies
  typedef NumericDomain Frequencies;
  Frequencies FrequenciesBaseDomain();
  
  // simple-class.nddl:7 Foo
  class Foo : public Object {
  public:
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    
    
    // simple-class.nddl:15 ClassScopedEnum
    typedef SymbolDomain Foo::ClassScopedEnum;
    static Foo::ClassScopedEnum Foo::ClassScopedEnumBaseDomain();
    ConstrainedVariableId m_0; // SchemaWriter::declareVariable
    ConstrainedVariableId m_1; // SchemaWriter::declareVariable
    ConstrainedVariableId m_2; // SchemaWriter::declareVariable
    ConstrainedVariableId m_3; // SchemaWriter::declareVariable
    ConstrainedVariableId m_4; // SchemaWriter::declareVariable
    ConstrainedVariableId m_5; // SchemaWriter::declareVariable
    ConstrainedVariableId m_6; // SchemaWriter::declareVariable
    ConstrainedVariableId m_7; // SchemaWriter::declareVariable
    ConstrainedVariableId m_8; // SchemaWriter::declareVariable
    
    // simple-class.nddl:7 Foo
    virtual void constructor();
    
    // simple-class.nddl:7 Foo
    virtual void constructor(int _m_0, float _m_1);
  };
  
  // simple-class.nddl:37 World
  class World : public Timeline {
  public:
    World(const PlanDatabaseId& planDatabase, const LabelStr& name);
    World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class initialState;
    typedef Id<initialState> initialStateId;
    ConstrainedVariableId m_0; // SchemaWriter::declareVariable
    ConstrainedVariableId m_1; // SchemaWriter::declareVariable
    ConstrainedVariableId m_foo1; // SchemaWriter::declareVariable
    ConstrainedVariableId m_foo2; // SchemaWriter::declareVariable
    
    // simple-class.nddl:43 initialState
    class initialState : public NddlToken {
    public:
      initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(World::initialState, World.initialState);
      
    };
    
    // simple-class.nddl:37 World
    virtual void constructor();
  };
} // End NDDL namespace
