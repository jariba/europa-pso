class Foo {
}


class Bar {
    Foo m_foo;

    Bar(Foo foo) {
	m_foo = foo;
    }

}

class Baz {
    Foo myfoo;
    Bar myBar;

    Baz(Bar bar, Foo foo) {
	myBar = bar;
	myfoo = foo;
    }

    predicate apred {
	Foo predFoo;
    } 

    predicate bpred {
	Bar predBar;
    }
}

Baz::apred {
    eq(object.myBar.m_foo, object.myfoo);
    meets(object.bpred bp);
    eq(bp.predBar.m_foo, this.predFoo);
}


class Mumble {
    Baz myBaz;

    Mumble(Baz baz) {
	myBaz = baz;
    }

    predicate mumbPred {
	Foo m_foo;
    }
}

Mumble::mumbPred {
    eq(object.myBaz.myBar.m_foo, m_foo);
}

Foo  f1 = new Foo();
Foo  f2 = new Foo();
Bar b = new Bar(f1);
Baz bz = new Baz(b, f1);
Mumble m1 = new Mumble(bz);

close();

goal(Mumble.mumbPred mp);

goal(Baz.apred ap);

goal(Baz.bpred bp);

//eq(bp.predBar.m_foo, f1);
