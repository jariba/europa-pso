
#include "Resources.nddl"

class Battery extends Resource {
 predicate change{
  float conversionRate;
  float actualQuantity;
  mulEq(quantity, conversionRate, actualQuantity);
 }

 
 Battery(float ic, float ll_min, float ll_max){
  super(ic, ll_min, ll_max);
 }
}

enum Location {Hill, Rock, Lander}

class Rover extends Object {
 predicate At{
  Location location;
 }

 predicate Going{
  Location from;
  Location to;
 }

 UnaryResource mutex;

 Rover(){
  mutex = new UnaryResource();
 }
}

Rover::At{
 meets (object.Going to);
 met_by (object.Going from);
 equals(UnaryResource.uses);
}

class World extends Timeline {
 Battery mainBattery;
 Battery reserveBattery;

 predicate initialState{}

 World(){
  mainBattery = new Battery(100, 0, 1000);
  reserveBattery = new Battery(100, 100, 1000);
 }
}

World::initialState{
 any(Battery.change tx);
 eq(tx.quantity, 4.0);
 eq(tx.conversionRate, 0.7);
}

World world = new World();
Rover rover = new Rover();
close();
goal(World.initialState g0);
goal(Rover.At g1);
