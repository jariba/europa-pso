// nddl.tx.2.nddl

#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

  class Foo;
  typedef Id<Foo> FooId;
  typedef ObjectDomain FooDomain;
  
  
  // nddl.tx.2.nddl:2 Foo
  class Foo : public Timeline {
  public:
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& name);
    Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class pred0;
    typedef Id<pred0> pred0Id;
    class pred1;
    typedef Id<pred1> pred1Id;
    class pred2;
    typedef Id<pred2> pred2Id;
    class pred3;
    typedef Id<pred3> pred3Id;
    class pred4;
    typedef Id<pred4> pred4Id;
    
    // nddl.tx.2.nddl:3 pred0
    class pred0 : public NddlToken {
    public:
      pred0(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      pred0(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::pred0, Foo.pred0);
      
    };
    
    // nddl.tx.2.nddl:4 pred1
    class pred1 : public NddlToken {
    public:
      pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::pred1, Foo.pred1);
      
    };
    
    // nddl.tx.2.nddl:5 pred2
    class pred2 : public NddlToken {
    public:
      pred2(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      pred2(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::pred2, Foo.pred2);
      
    };
    
    // nddl.tx.2.nddl:6 pred3
    class pred3 : public NddlToken {
    public:
      pred3(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      pred3(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::pred3, Foo.pred3);
      
    };
    
    // nddl.tx.2.nddl:7 pred4
    class pred4 : public NddlToken {
    public:
      pred4(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      pred4(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Foo::pred4, Foo.pred4);
      
    };
  };
} // End NDDL namespace
