#include "../../core/PlannerConfig.nddl"

enum Location {Hill, Rock, Lander};

class Path {
    Location _from;
    Location _to;

    Path(Location f, Location t) {
	_from = f;
	_to = t;
    }
}

class Enable {
    Location _t;
    Path _p;

    Enable(Location l, Path p) {
	_t = l;
	_p = p;
    }
}

class Position {

    predicate At {
	Location _l;
    }

    predicate Navigate {
	Location _from;
	Location _to;
        Path _p;
    }
}
 
class Foo {
    
    predicate FooPred {
	Location loc;
    }
}

Position::Navigate {

    Path p : {
	eq(p._from, _from);
	eq(p._to, _to);
    };

/* NOT CURRENTLY SUPPORTED
    Enable en : {
        eq(en._p, p);
        // Implied guard on _p for this
	eq(en._t, _p._from);
    };
*/

    if (p) {
	Enable enable : {
	    eq(enable._p, p);
	    eq(enable._t, p._from);
	};
        if (enable) {
	    any(Foo.FooPred fp);
	    eq(fp.loc, enable._t);
        }
    }
}


PlannerConfig world = new PlannerConfig(0, 10, 100);
Path p1 = new Path(Hill, Rock);
Path p2 = new Path(Hill, Lander);
Path p3 = new Path(Lander, Rock);
Enable e1 = new Enable(Lander, p1);
Enable e2 = new Enable(Hill, p1);
Foo foooo = new Foo();
Position pos = new Position();
close();

goal(Position.Navigate n);
n._p.specify(p3);
