#include "Constraints.nddl"

/**
 * Ensure we can handle creation of proxy variable for all types
 */
typedef int{1, 2, 3, 4, 5} numericEnum;
enum symbolicEnum {A, AB, ABC}

class Boo {}

class Foo {
 bool field1;
 int field2;
 //string field3;
 float field4;
 //numericEnum field5;
 symbolicEnum field6;
 Boo field7;

 Foo(bool _field1, int _field2, /*string _field3, */ float _field4, 
     /*numericEnum _field5,*/ symbolicEnum _field6, Boo _field7){
  field1 = _field1;
  field2 = _field2;
  //field3 = _field3;
  field4 = _field4;
  //field5 = _field5;
  field6 = _field6;
  field7 = _field7;
 }
}

class Bar{
 predicate pred{
  bool field1;
  int field2;
  //string field3;
  float field4;
  //numericEnum field5;
  symbolicEnum field6;
  Boo field7;
 }
}

Bar::pred{
 Foo f;
 eq(field1, f.field1);
 eq(field2, f.field2);
 //eq(field3, f.field3);
 eq(field4, f.field4);
 //eq(field5, f.field5);
 eq(field6, f.field6);
 eq(field7, f.field7);
}

Boo b1 = new Boo();
Boo b2 = new Boo();
Boo b3 = new Boo();

Foo f1 = new Foo(true, 12, /*"This is a string",*/ 11.45, /*1,*/ AB, b1);
//Foo f1 = new Foo(true, 12, "This is too", 11.45, 1, AB, b1);
//Foo f1 = new Foo(false, -45, "This is a string", 11.45, 1, AB, b2);
//Foo f1 = new Foo(true, +inf, "This too", 11.45, 1, AB, b3);
//Foo f1 = new Foo(true, 12, "This is a string", 11.45, 1, AB, b1);

Bar bar = new Bar();
close();

goal(bar.pred p);
