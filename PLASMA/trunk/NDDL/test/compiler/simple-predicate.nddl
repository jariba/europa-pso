// Simple class and predicates
enum Locations {Hill, Rock, Lander};

class Foo{
 int m_0;
 string m_1;
 predicate pred1{
  Locations m_0;
  int m_1;
  float m_2;
  bool m_3;
  World m_4;
 }

 Foo(){m_1 = "Hello World";}
}

Foo::pred1{
 meets (pred1 p1);
 met_by (pred1 p2);
}

class Bar extends Foo {}

// Declares mandatory world class, with constructor with no arguments.
class World {
 Foo m_foo1;
 Bar m_bar1;
 predicate initialState{}

 World(){
  m_foo1 = new Foo();
  m_bar1 = new Bar();
 }
}

World::initialState
{
 any(Foo.pred1 a);
 any(Bar.pred1 b);
}

World world = new World();
close();
goal(World.initialState g0);
g0.activate();

goal(Foo.pred1 g1);
g1.activate();
g1.m_0.specify(Rock);
g1.m_1.specify(10);
g1.m_2.specify(1245.87);
g1.m_3.specify(false);
g1.m_4.specify(world);

goal(Foo.pred1 g2);
g2.merge(g1);
g2.cancel();
g2.activate();
