// existential.nddl

#include "existential.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  TokenStates TokenStatesBaseDomain(){
    static TokenStates sl_enum("TokenStates");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("INACTIVE"));
      sl_enum.insert(LabelStr("ACTIVE"));
      sl_enum.insert(LabelStr("MERGED"));
      sl_enum.insert(LabelStr("REJECTED"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Timeline
  
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Resource
  
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Reservoir
  
  
  
  // Plasma.nddl:137 Reusable
  Reusable::Reusable(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Reusable", name, true) {
  }
  Reusable::Reusable(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Reusable::Reusable(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Reusable", name, true) {}
  Reusable::Reusable(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Reusable::handleDefaults(bool autoClose) {
    if(capacity.isNoId()){
      capacity = addVariable(IntervalDomain("float"), "capacity");
    }
    if(levelLimitMin.isNoId()){
      levelLimitMin = addVariable(IntervalDomain("float"), "levelLimitMin");
    }
    if(consumptionMax.isNoId()){
      consumptionMax = addVariable(IntervalDomain("float"), "consumptionMax");
    }
    if(consumptionRateMax.isNoId()){
      consumptionRateMax = addVariable(IntervalDomain("float"), "consumptionRateMax");
    }
    if (autoClose)
      close();
  }
  
  
  
  // Plasma.nddl:143 uses
  Reusable::uses::uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Reusable::uses::uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Reusable::uses::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(quantity.isNoId()){
      quantity = addParameter(IntervalDomain(0.0, +inf, "float"), "quantity");
    }
    if (autoClose)
      close();
  }
  
  
  // Plasma.nddl:137 Reusable
  void Reusable::constructor(float c, float ll_min) {
    capacity = addVariable(IntervalDomain(c, c, "float"), "capacity");
    levelLimitMin = addVariable(IntervalDomain(ll_min, ll_min, "float"), "levelLimitMin");
    consumptionMax = addVariable(IntervalDomain(+inf, +inf, "float"), "consumptionMax");
    consumptionRateMax = addVariable(IntervalDomain(+inf, +inf, "float"), "consumptionRateMax");
  }
  
  // Plasma.nddl:137 Reusable
  class ReusableFactory0: public ConcreteObjectFactory {
  public:
    ReusableFactory0(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 2);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to float");
      check_error(arguments[0]->isSingleton());
      float c((float)arguments[0]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1], 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[1]->getTypeName().toString() + " to float");
      check_error(arguments[1]->isSingleton());
      float ll_min((float)arguments[1]->getSingletonValue());
      
      ReusableId instance = (new Reusable(planDb, objectType, objectName))->getId();
      instance->constructor(c, ll_min);
      instance->handleDefaults();
      return instance;
    }
  };
  
  // Plasma.nddl:137 Reusable
  void Reusable::constructor(float c, float ll_min, float cr_max) {
    capacity = addVariable(IntervalDomain(c, c, "float"), "capacity");
    levelLimitMin = addVariable(IntervalDomain(ll_min, ll_min, "float"), "levelLimitMin");
    consumptionMax = addVariable(IntervalDomain(+inf, +inf, "float"), "consumptionMax");
    consumptionRateMax = addVariable(IntervalDomain(cr_max, cr_max, "float"), "consumptionRateMax");
  }
  
  // Plasma.nddl:137 Reusable
  class ReusableFactory1: public ConcreteObjectFactory {
  public:
    ReusableFactory1(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 3);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to float");
      check_error(arguments[0]->isSingleton());
      float c((float)arguments[0]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1], 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[1]->getTypeName().toString() + " to float");
      check_error(arguments[1]->isSingleton());
      float ll_min((float)arguments[1]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2], 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[2]->getTypeName().toString() + " to float");
      check_error(arguments[2]->isSingleton());
      float cr_max((float)arguments[2]->getSingletonValue());
      
      ReusableId instance = (new Reusable(planDb, objectType, objectName))->getId();
      instance->constructor(c, ll_min, cr_max);
      instance->handleDefaults();
      return instance;
    }
  };
  
  // Plasma.nddl:137 Reusable
  void Reusable::constructor(float c, float ll_min, float c_max, float cr_max) {
    capacity = addVariable(IntervalDomain(c, c, "float"), "capacity");
    levelLimitMin = addVariable(IntervalDomain(ll_min, ll_min, "float"), "levelLimitMin");
    consumptionMax = addVariable(IntervalDomain(c_max, c_max, "float"), "consumptionMax");
    consumptionRateMax = addVariable(IntervalDomain(cr_max, cr_max, "float"), "consumptionRateMax");
  }
  
  // Plasma.nddl:137 Reusable
  class ReusableFactory2: public ConcreteObjectFactory {
  public:
    ReusableFactory2(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 4);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to float");
      check_error(arguments[0]->isSingleton());
      float c((float)arguments[0]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1], 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[1]->getTypeName().toString() + " to float");
      check_error(arguments[1]->isSingleton());
      float ll_min((float)arguments[1]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2], 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[2]->getTypeName().toString() + " to float");
      check_error(arguments[2]->isSingleton());
      float c_max((float)arguments[2]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[3], 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[3]->getTypeName().toString() + " to float");
      check_error(arguments[3]->isSingleton());
      float cr_max((float)arguments[3]->getSingletonValue());
      
      ReusableId instance = (new Reusable(planDb, objectType, objectName))->getId();
      instance->constructor(c, ll_min, c_max, cr_max);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // Plasma.nddl:169 Unary
  Unary::Unary(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Unary", name, true) {
  }
  Unary::Unary(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Unary::Unary(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Unary", name, true) {}
  Unary::Unary(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Unary::handleDefaults(bool autoClose) {
    if(consumptionMax.isNoId()){
      consumptionMax = addVariable(IntervalDomain("float"), "consumptionMax");
    }
    if (autoClose)
      close();
  }
  
  
  // Plasma.nddl:169 Unary
  void Unary::constructor() {
    consumptionMax = addVariable(IntervalDomain(+inf, +inf, "float"), "consumptionMax");
  }
  
  // Plasma.nddl:169 Unary
  class UnaryFactory3: public ConcreteObjectFactory {
  public:
    UnaryFactory3(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 0);
      UnaryId instance = (new Unary(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  // Plasma.nddl:169 Unary
  void Unary::constructor(float c_max) {
    consumptionMax = addVariable(IntervalDomain(c_max, c_max, "float"), "consumptionMax");
  }
  
  // Plasma.nddl:169 Unary
  class UnaryFactory4: public ConcreteObjectFactory {
  public:
    UnaryFactory4(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to float");
      check_error(arguments[0]->isSingleton());
      float c_max((float)arguments[0]->getSingletonValue());
      
      UnaryId instance = (new Unary(planDb, objectType, objectName))->getId();
      instance->constructor(c_max);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // Plasma.nddl:179 use
  Unary::use::use(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Unary::use::use(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Unary::use::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  
  // Plasma.nddl:187 UnaryResource
  UnaryResource::UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "UnaryResource", name, true) {
  }
  UnaryResource::UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  UnaryResource::UnaryResource(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "UnaryResource", name, true) {}
  UnaryResource::UnaryResource(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void UnaryResource::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void UnaryResource::constructor() {
  }
  
  
  // Plasma.nddl:187 UnaryResource
  DECLARE_DEFAULT_OBJECT_FACTORY(UnaryResourceFactory5, UnaryResource);
  
  
  // Plasma.nddl:188 uses
  UnaryResource::uses::uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  UnaryResource::uses::uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void UnaryResource::uses::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
    
    // Post parameter constraints
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("state")));
      vars.push_back(predicateVariable(SymbolDomain(LabelStr("ACTIVE"), "TokenStates")));
      token_constraint(eq, vars);
    }
  }
  
  
  
  // Plasma.nddl:197 StringData
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "StringData", name, true) {
  }
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  StringData::StringData(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "StringData", name, true) {}
  StringData::StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void StringData::handleDefaults(bool autoClose) {
    if(data.isNoId()){
      data = addVariable(StringDomain("string"), "data");
    }
    if (autoClose)
      close();
  }
  
  
  // Plasma.nddl:197 StringData
  void StringData::constructor(const LabelStr& _data) {
    data = addVariable(StringDomain(_data, "string"), "data");
  }
  
  // Plasma.nddl:197 StringData
  class StringDataFactory6: public ConcreteObjectFactory {
  public:
    StringDataFactory6(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("string")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to string");
      check_error(arguments[0]->isSingleton());
      LabelStr _data((LabelStr)arguments[0]->getSingletonValue());
      
      StringDataId instance = (new StringData(planDb, objectType, objectName))->getId();
      instance->constructor(_data);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // existential.nddl:3 Location
  Location::Location(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Location", name, true) {
  }
  Location::Location(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Location::Location(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Location", name, true) {}
  Location::Location(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Location::handleDefaults(bool autoClose) {
    if(name.isNoId()){
      name = addVariable(StringDomain("string"), "name");
    }
    if (autoClose)
      close();
  }
  
  
  // existential.nddl:3 Location
  void Location::constructor(const LabelStr& _name) {
    name = addVariable(StringDomain(_name, "string"), "name");
  }
  
  // existential.nddl:3 Location
  class LocationFactory7: public ConcreteObjectFactory {
  public:
    LocationFactory7(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("string")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to string");
      check_error(arguments[0]->isSingleton());
      LabelStr _name((LabelStr)arguments[0]->getSingletonValue());
      
      LocationId instance = (new Location(planDb, objectType, objectName))->getId();
      instance->constructor(_name);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // existential.nddl:10 Path
  Path::Path(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Path", name, true) {
  }
  Path::Path(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Path::Path(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Path", name, true) {}
  Path::Path(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Path::handleDefaults(bool autoClose) {
    check_error(from.isValid(), "object variables must be initialized explicitly");
    
    check_error(to.isValid(), "object variables must be initialized explicitly");
    
    if(m_int.isNoId()){
      m_int = addVariable(IntervalIntDomain("int"), "m_int");
    }
    if (autoClose)
      close();
  }
  
  
  // existential.nddl:10 Path
  void Path::constructor(const LocationId& _from, const LocationId& _to) {
    from = addVariable(LocationDomain(_from, "Location"), "from");
    to = addVariable(LocationDomain(_to, "Location"), "to");
    m_int = addVariable(IntervalIntDomain(1, 1, "int"), "m_int");
  }
  
  // existential.nddl:10 Path
  class PathFactory8: public ConcreteObjectFactory {
  public:
    PathFactory8(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 2);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("Location")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to Location");
      check_error(arguments[0]->isSingleton());
      LocationId _from((LocationId)arguments[0]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1], 
                                                TypeFactory::baseDomain("Location")), 
                  "Cannot convert " + arguments[1]->getTypeName().toString() + " to Location");
      check_error(arguments[1]->isSingleton());
      LocationId _to((LocationId)arguments[1]->getSingletonValue());
      
      PathId instance = (new Path(planDb, objectType, objectName))->getId();
      instance->constructor(_from, _to);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // existential.nddl:21 World
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "World", name, true) {
  }
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  World::World(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "World", name, true) {}
  World::World(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void World::handleDefaults(bool autoClose) {
    check_error(rock.isValid(), "object variables must be initialized explicitly");
    
    check_error(hill.isValid(), "object variables must be initialized explicitly");
    
    check_error(lander.isValid(), "object variables must be initialized explicitly");
    
    check_error(martianCity.isValid(), "object variables must be initialized explicitly");
    
    check_error(path1.isValid(), "object variables must be initialized explicitly");
    
    check_error(path2.isValid(), "object variables must be initialized explicitly");
    
    check_error(path3.isValid(), "object variables must be initialized explicitly");
    
    check_error(path4.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  
  // existential.nddl:32 Going
  World::Going::Going(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  World::Going::Going(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void World::Going::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(from.isNoId()){
      from = addParameter(ObjectDomain("Location"), "from");
      completeObjectParam(Location, from);
    }
    if(to.isNoId()){
      to = addParameter(ObjectDomain("Location"), "to");
      completeObjectParam(Location, to);
    }
    if (autoClose)
      close();
    
    // Post parameter constraints
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("from")));
      vars.push_back(var(getId(),std::string("to")));
      token_constraint(neq, vars);
    }
  }
  
  
  
  // existential.nddl:38 initialState
  World::initialState::initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  World::initialState::initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void World::initialState::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // existential.nddl:21 World
  void World::constructor() {
    rock = addVariable(LocationDomain((new Location(m_id, "rock"))->getId(), "Location"), "rock");
    Id<Location>(singleton(rock))->constructor(LabelStr("ROCK"));
    Id<Location>(singleton(rock))->handleDefaults();
    hill = addVariable(LocationDomain((new Location(m_id, "hill"))->getId(), "Location"), "hill");
    Id<Location>(singleton(hill))->constructor(LabelStr("HILL"));
    Id<Location>(singleton(hill))->handleDefaults();
    lander = addVariable(LocationDomain((new Location(m_id, "lander"))->getId(), "Location"), "lander");
    Id<Location>(singleton(lander))->constructor(LabelStr("LANDER"));
    Id<Location>(singleton(lander))->handleDefaults();
    martianCity = addVariable(LocationDomain((new Location(m_id, "martianCity"))->getId(), "Location"), "martianCity");
    Id<Location>(singleton(martianCity))->constructor(LabelStr("MARTIAN_CITY"));
    Id<Location>(singleton(martianCity))->handleDefaults();
    path1 = addVariable(PathDomain((new Path(m_id, "path1"))->getId(), "Path"), "path1");
    Id<Path>(singleton(path1))->constructor(singleton(rock), singleton(hill));
    Id<Path>(singleton(path1))->handleDefaults();
    path2 = addVariable(PathDomain((new Path(m_id, "path2"))->getId(), "Path"), "path2");
    Id<Path>(singleton(path2))->constructor(singleton(lander), singleton(hill));
    Id<Path>(singleton(path2))->handleDefaults();
    path3 = addVariable(PathDomain((new Path(m_id, "path3"))->getId(), "Path"), "path3");
    Id<Path>(singleton(path3))->constructor(singleton(martianCity), singleton(hill));
    Id<Path>(singleton(path3))->handleDefaults();
    path4 = addVariable(PathDomain((new Path(m_id, "path4"))->getId(), "Path"), "path4");
    Id<Path>(singleton(path4))->constructor(singleton(hill), singleton(lander));
    Id<Path>(singleton(path4))->handleDefaults();
  }
  
  // existential.nddl:21 World
  class WorldFactory9: public ConcreteObjectFactory {
  public:
    WorldFactory9(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 0);
      WorldId instance = (new World(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  // existential.nddl:51 Going
  class World$Going$0$0: public RuleInstance {
  public:
    World$Going$0$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$World$Going$0, World$Going$0$0, World.Going, "existential.nddl,51");
  
  void World$Going$0$0::handleExecute() {
    localVar(IntervalIntDomain(), intVar, false);
    objectVar(Path, path, false, false);
    objectVar(Path, p1, false, false);
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("path"), std::string("from"), false));
      vars.push_back(var(getId(),std::string("from")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("path"), std::string("to"), false));
      vars.push_back(var(getId(),std::string("to")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("path"), std::string("m_int"), false));
      vars.push_back(var(getId(),std::string("intVar")));
      rule_constraint(eq, vars);
    }
  }
  
  // existential.nddl:62 initialState
  class World$initialState$1$0: public RuleInstance {
  public:
    World$initialState$1$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  class World$initialState$1$0$0: public RuleInstance {
  public:
    World$initialState$1$0$0(const RuleInstanceId& parent, const std::vector<ConstrainedVariableId>& vars, const bool positive)
    : RuleInstance(parent, vars, positive){}
    void handleExecute();
  };
  
  class World$initialState$1$0$1: public RuleInstance {
  public:
    World$initialState$1$0$1(const RuleInstanceId& parent, const ConstrainedVariableId& var, const AbstractDomain& domain, const bool positive)
    : RuleInstance(parent, var, domain, positive){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$World$initialState$1, World$initialState$1$0, World.initialState, "existential.nddl,62");
  
  void World$initialState$1$0::handleExecute() {
    objectVar(Path, p1, false, false);
    localVar(BoolDomain(), hasPath, true);
    objectVar(Path, p3, false, false);
    objectVar(Path, g, false, false);
    localSlave(Going, going, "any");
    sameObject(object, going);
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("going")), std::string("from")));
      vars.push_back(varFromObject(std::string("object"), std::string("rock"), false));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("going")), std::string("to")));
      vars.push_back(varFromObject(std::string("object"), std::string("hill"), false));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("p1"), std::string("from"), false));
      vars.push_back(varfromtok(tok(getId(), std::string("going")), std::string("from")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("p1"), std::string("to"), false));
      vars.push_back(varfromtok(tok(getId(), std::string("going")), std::string("to")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("p1"), std::string("m_int"), false));
      vars.push_back(ruleVariable(IntervalIntDomain(1,1, "int")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("g"), std::string("from"), false));
      vars.push_back(varfromtok(tok(getId(), std::string("going")), std::string("from")));
      rule_constraint(eq, vars);
    }
    addChildRule(new World$initialState$1$0$0(m_id, makeScope(var(getId(),std::string("hasPath"))),true));
    addChildRule(new World$initialState$1$0$1(m_id, varFromObject(std::string("g"), std::string("m_int"), true), IntervalIntDomain(1,1, "int"), true));
  }
  void World$initialState$1$0$0::handleExecute() {
    objectVar(Path, p2, false, false);
    objectVar(Location, loc1, false, false);
    objectVar(Location, loc2, false, false);
    localVar(IntervalIntDomain(), filterVar, false);
    objectVar(Path, p4, false, false);
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("p2"), std::string("from"), false));
      vars.push_back(varfromtok(tok(getId(), std::string("going")), std::string("from")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("p2"), std::string("to"), false));
      vars.push_back(varfromtok(tok(getId(), std::string("going")), std::string("to")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("p2"), std::string("m_int"), false));
      vars.push_back(ruleVariable(IntervalIntDomain(2,2, "int")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("loc1")));
      vars.push_back(varFromObject(std::string("object"), std::string("rock"), false));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("loc2")));
      vars.push_back(varFromObject(std::string("object"), std::string("rock"), false));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("p4"), std::string("from"), false));
      vars.push_back(var(getId(),std::string("loc1")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("p4"), std::string("to"), false));
      vars.push_back(var(getId(),std::string("loc2")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("p4"), std::string("m_int"), false));
      vars.push_back(var(getId(),std::string("filterVar")));
      rule_constraint(eq, vars);
    }
  }
  void World$initialState$1$0$1::handleExecute() {
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("existential");
    id->reset(); // Reset prior data if present. 
    
    // Register Constraints
    // Invoke commands to populate schema with type definitions
    id->addObjectType("Timeline","Object");
    id->addObjectType("Resource", "Object");
    id->addObjectType("Reservoir", "Object");
    id->addObjectType("Reusable", "Object");
    id->addObjectType("Unary", "Object");
    id->addObjectType("UnaryResource", "Timeline");
    id->addObjectType("StringData", "Object");
    id->addObjectType("Location", "Object");
    id->addObjectType("Path", "Object");
    id->addObjectType("World", "Timeline");
    id->addEnum("TokenStates");
    id->addMember("Resource", "float", "initialCapacity");
    id->addMember("Resource", "float", "levelLimitMin");
    id->addMember("Resource", "float", "levelLimitMax");
    id->addMember("Resource", "float", "productionRateMax");
    id->addMember("Resource", "float", "productionMax");
    id->addMember("Resource", "float", "consumptionRateMax");
    id->addMember("Resource", "float", "consumptionMax");
    id->addPredicate("Resource.change");
    id->addMember("Resource.change", "float", "quantity");
    id->addMember("Reservoir", "float", "initialCapacity");
    id->addMember("Reservoir", "float", "levelLimitMin");
    id->addMember("Reservoir", "float", "levelLimitMax");
    id->addMember("Reservoir", "float", "productionRateMax");
    id->addMember("Reservoir", "float", "productionMax");
    id->addMember("Reservoir", "float", "consumptionRateMax");
    id->addMember("Reservoir", "float", "consumptionMax");
    id->addPredicate("Reservoir.produce");
    id->addMember("Reservoir.produce", "float", "quantity");
    id->addPredicate("Reservoir.consume");
    id->addMember("Reservoir.consume", "float", "quantity");
    id->addMember("Reusable", "float", "capacity");
    id->addMember("Reusable", "float", "levelLimitMin");
    id->addMember("Reusable", "float", "consumptionMax");
    id->addMember("Reusable", "float", "consumptionRateMax");
    id->addPredicate("Reusable.uses");
    id->addMember("Reusable.uses", "float", "quantity");
    id->addMember("Unary", "float", "consumptionMax");
    id->addPredicate("Unary.use");
    id->addPredicate("UnaryResource.uses");
    id->addMember("StringData", "string", "data");
    id->addMember("Location", "string", "name");
    id->addMember("Path", "Location", "from");
    id->addMember("Path", "Location", "to");
    id->addMember("Path", "int", "m_int");
    id->addMember("World", "Location", "rock");
    id->addMember("World", "Location", "hill");
    id->addMember("World", "Location", "lander");
    id->addMember("World", "Location", "martianCity");
    id->addMember("World", "Path", "path1");
    id->addMember("World", "Path", "path2");
    id->addMember("World", "Path", "path3");
    id->addMember("World", "Path", "path4");
    id->addPredicate("World.Going");
    id->addMember("World.Going", "Location", "from");
    id->addMember("World.Going", "Location", "to");
    id->addPredicate("World.initialState");
    id->addValue("TokenStates", LabelStr("INACTIVE"));
    id->addValue("TokenStates", LabelStr("ACTIVE"));
    id->addValue("TokenStates", LabelStr("MERGED"));
    id->addValue("TokenStates", LabelStr("REJECTED"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Reusable::uses::Factory);
    REGISTER_TOKEN_FACTORY(Unary::use::Factory);
    REGISTER_TOKEN_FACTORY(UnaryResource::uses::Factory);
    REGISTER_TOKEN_FACTORY(World::Going::Factory);
    REGISTER_TOKEN_FACTORY(World::initialState::Factory);
    REGISTER_TYPE_FACTORY(Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(TokenStates, TokenStatesBaseDomain());
    REGISTER_TYPE_FACTORY(Timeline, ObjectDomain("Timeline"));
    REGISTER_TYPE_FACTORY(Resource, ObjectDomain("Resource"));
    REGISTER_TYPE_FACTORY(Reservoir, ObjectDomain("Reservoir"));
    REGISTER_TYPE_FACTORY(Reusable, ObjectDomain("Reusable"));
    REGISTER_OBJECT_FACTORY(ReusableFactory0, Reusable:float:float);
    REGISTER_OBJECT_FACTORY(ReusableFactory1, Reusable:float:float:float);
    REGISTER_OBJECT_FACTORY(ReusableFactory2, Reusable:float:float:float:float);
    REGISTER_TYPE_FACTORY(Unary, ObjectDomain("Unary"));
    REGISTER_OBJECT_FACTORY(UnaryFactory3, Unary);
    REGISTER_OBJECT_FACTORY(UnaryFactory4, Unary:float);
    REGISTER_TYPE_FACTORY(UnaryResource, ObjectDomain("UnaryResource"));
    REGISTER_OBJECT_FACTORY(UnaryResourceFactory5, UnaryResource);
    REGISTER_TYPE_FACTORY(StringData, ObjectDomain("StringData"));
    REGISTER_OBJECT_FACTORY(StringDataFactory6, StringData:string);
    REGISTER_TYPE_FACTORY(Location, ObjectDomain("Location"));
    REGISTER_OBJECT_FACTORY(LocationFactory7, Location:string);
    REGISTER_TYPE_FACTORY(Path, ObjectDomain("Path"));
    REGISTER_OBJECT_FACTORY(PathFactory8, Path:Location:Location);
    REGISTER_OBJECT_FACTORY(PathFactory8, Path:Location:Object);
    REGISTER_OBJECT_FACTORY(PathFactory8, Path:Object:Location);
    REGISTER_OBJECT_FACTORY(PathFactory8, Path:Object:Object);
    REGISTER_TYPE_FACTORY(World, ObjectDomain("World"));
    REGISTER_OBJECT_FACTORY(WorldFactory9, World);
    // Allocate rules
    new Rule$World$Going$0();
    new Rule$World$initialState$1();
    return id;
  }
  
}
