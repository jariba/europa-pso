// NDDL/test/compiler/existential.xml

#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

  class Location;
  typedef Id<Location> LocationId;
  typedef ObjectDomain LocationDomain;
  
  class Path;
  typedef Id<Path> PathId;
  typedef ObjectDomain PathDomain;
  
  class World;
  typedef Id<World> WorldId;
  typedef ObjectDomain WorldDomain;
  
  
  // existential.nddl:1 Location
  class Location : public Object {
  public:
    Location(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Location(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Location(const ObjectId& parent, const LabelStr& name);
    Location(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId name; // SchemaWriter::declareVariable
    
    // existential.nddl:1 Location
    virtual void constructor(const LabelStr& _name);
  };
  
  // existential.nddl:8 Path
  class Path : public Object {
  public:
    Path(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Path(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Path(const ObjectId& parent, const LabelStr& name);
    Path(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId from; // SchemaWriter::declareVariable
    ConstrainedVariableId to; // SchemaWriter::declareVariable
    ConstrainedVariableId m_int; // SchemaWriter::declareVariable
    
    // existential.nddl:8 Path
    virtual void constructor(const LocationId& _from, const LocationId& _to);
  };
  
  // existential.nddl:19 World
  class World : public Timeline {
  public:
    World(const PlanDatabaseId& planDatabase, const LabelStr& name);
    World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class Going;
    typedef Id<Going> GoingId;
    class initialState;
    typedef Id<initialState> initialStateId;
    ConstrainedVariableId rock; // SchemaWriter::declareVariable
    ConstrainedVariableId hill; // SchemaWriter::declareVariable
    ConstrainedVariableId lander; // SchemaWriter::declareVariable
    ConstrainedVariableId martianCity; // SchemaWriter::declareVariable
    ConstrainedVariableId path1; // SchemaWriter::declareVariable
    ConstrainedVariableId path2; // SchemaWriter::declareVariable
    ConstrainedVariableId path3; // SchemaWriter::declareVariable
    ConstrainedVariableId path4; // SchemaWriter::declareVariable
    
    // existential.nddl:30 Going
    class Going : public NddlToken {
    public:
      Going(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      Going(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(World::Going, World.Going);
      
      ConstrainedVariableId from; // SchemaWriter::declareVariable
      ConstrainedVariableId to; // SchemaWriter::declareVariable
    };
    
    // existential.nddl:36 initialState
    class initialState : public NddlToken {
    public:
      initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(World::initialState, World.initialState);
      
    };
    
    // existential.nddl:19 World
    virtual void constructor();
  };
} // End NDDL namespace
