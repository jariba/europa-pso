// NDDL/test/compiler/simple-resources.xml

#include "simple-resources.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  TokenStates TokenStatesBaseDomain(){
    static TokenStates sl_enum("TokenStates");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("INACTIVE"));
      sl_enum.insert(LabelStr("ACTIVE"));
      sl_enum.insert(LabelStr("MERGED"));
      sl_enum.insert(LabelStr("REJECTED"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Object
  
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Timeline
  
  
  
  // Resources.nddl:9 Resource
  Resource::Resource(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : NddlResource(planDatabase, "Resource", name, true) {
  }
  Resource::Resource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : NddlResource(planDatabase, type, name, true) {
  }
  Resource::Resource(const ObjectId& parent, const LabelStr& name)
   : NddlResource(parent, "Resource", name, true) {}
  Resource::Resource(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : NddlResource(parent, type, name, true) {}
  // default initialization of member variables
  void Resource::handleDefaults(bool autoClose) {
    if(initialCapacity.isNoId()){
      initialCapacity = addVariable(IntervalDomain("float"), "initialCapacity");
    }
    if(levelLimitMin.isNoId()){
      levelLimitMin = addVariable(IntervalDomain("float"), "levelLimitMin");
    }
    if(levelLimitMax.isNoId()){
      levelLimitMax = addVariable(IntervalDomain("float"), "levelLimitMax");
    }
    if(productionRateMax.isNoId()){
      productionRateMax = addVariable(IntervalDomain("float"), "productionRateMax");
    }
    if(productionMax.isNoId()){
      productionMax = addVariable(IntervalDomain("float"), "productionMax");
    }
    if(consumptionRateMax.isNoId()){
      consumptionRateMax = addVariable(IntervalDomain("float"), "consumptionRateMax");
    }
    if(consumptionMax.isNoId()){
      consumptionMax = addVariable(IntervalDomain("float"), "consumptionMax");
    }
    if (autoClose)
      close();
  }
  
  
  
  // Resources.nddl:20 change
  Resource::change::change(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlResourceTransaction(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Resource::change::change(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlResourceTransaction(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Resource::change::handleDefaults(bool autoClose) {
    if(quantity.isNoId()){
      quantity = addParameter(IntervalDomain("float"), "quantity");
    }
    if (autoClose)
      close();
  }
  
  
  // Resources.nddl:9 Resource
  void Resource::constructor(float ic, float ll_min, float ll_max) {
    initialCapacity = addVariable(IntervalDomain(ic, ic, "float"), "initialCapacity");
    levelLimitMin = addVariable(IntervalDomain(ll_min, ll_min, "float"), "levelLimitMin");
    levelLimitMax = addVariable(IntervalDomain(ll_max, ll_max, "float"), "levelLimitMax");
    productionRateMax = addVariable(IntervalDomain(+inf, +inf, "float"), "productionRateMax");
    productionMax = addVariable(IntervalDomain(+inf, +inf, "float"), "productionMax");
    consumptionRateMax = addVariable(IntervalDomain(-inf, -inf, "float"), "consumptionRateMax");
    consumptionMax = addVariable(IntervalDomain(-inf, -inf, "float"), "consumptionMax");
  }
  
  // Resources.nddl:9 Resource
  class ResourceFactory0: public ConcreteObjectFactory {
  public:
    ResourceFactory0(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 3);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[0].first.toString() + " to float");
      check_error(arguments[0].second->isSingleton());
      float ic((float)arguments[0].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[1].first.toString() + " to float");
      check_error(arguments[1].second->isSingleton());
      float ll_min((float)arguments[1].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[2].first.toString() + " to float");
      check_error(arguments[2].second->isSingleton());
      float ll_max((float)arguments[2].second->getSingletonValue());
      
      ResourceId instance = (new Resource(planDb, objectType, objectName))->getId();
      instance->constructor(ic, ll_min, ll_max);
      instance->handleDefaults();
      return instance;
    }
  };
  
  // Resources.nddl:9 Resource
  void Resource::constructor(float ic, float ll_min, float ll_max, float p_max, float c_max) {
    initialCapacity = addVariable(IntervalDomain(ic, ic, "float"), "initialCapacity");
    levelLimitMin = addVariable(IntervalDomain(ll_min, ll_min, "float"), "levelLimitMin");
    levelLimitMax = addVariable(IntervalDomain(ll_max, ll_max, "float"), "levelLimitMax");
    productionRateMax = addVariable(IntervalDomain(p_max, p_max, "float"), "productionRateMax");
    productionMax = addVariable(IntervalDomain(p_max, p_max, "float"), "productionMax");
    consumptionRateMax = addVariable(IntervalDomain(-inf, -inf, "float"), "consumptionRateMax");
    consumptionMax = addVariable(IntervalDomain(c_max, c_max, "float"), "consumptionMax");
  }
  
  // Resources.nddl:9 Resource
  class ResourceFactory1: public ConcreteObjectFactory {
  public:
    ResourceFactory1(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 5);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[0].first.toString() + " to float");
      check_error(arguments[0].second->isSingleton());
      float ic((float)arguments[0].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[1].first.toString() + " to float");
      check_error(arguments[1].second->isSingleton());
      float ll_min((float)arguments[1].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[2].first.toString() + " to float");
      check_error(arguments[2].second->isSingleton());
      float ll_max((float)arguments[2].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[3].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[3].first.toString() + " to float");
      check_error(arguments[3].second->isSingleton());
      float p_max((float)arguments[3].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[4].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[4].first.toString() + " to float");
      check_error(arguments[4].second->isSingleton());
      float c_max((float)arguments[4].second->getSingletonValue());
      
      ResourceId instance = (new Resource(planDb, objectType, objectName))->getId();
      instance->constructor(ic, ll_min, ll_max, p_max, c_max);
      instance->handleDefaults();
      return instance;
    }
  };
  
  // Resources.nddl:9 Resource
  void Resource::constructor(float ic, float ll_min, float ll_max, float pr_max, float p_max, float cr_max, float c_max) {
    initialCapacity = addVariable(IntervalDomain(ic, ic, "float"), "initialCapacity");
    levelLimitMin = addVariable(IntervalDomain(ll_min, ll_min, "float"), "levelLimitMin");
    levelLimitMax = addVariable(IntervalDomain(ll_max, ll_max, "float"), "levelLimitMax");
    productionRateMax = addVariable(IntervalDomain(pr_max, pr_max, "float"), "productionRateMax");
    productionMax = addVariable(IntervalDomain(p_max, p_max, "float"), "productionMax");
    consumptionRateMax = addVariable(IntervalDomain(cr_max, cr_max, "float"), "consumptionRateMax");
    consumptionMax = addVariable(IntervalDomain(c_max, c_max, "float"), "consumptionMax");
  }
  
  // Resources.nddl:9 Resource
  class ResourceFactory2: public ConcreteObjectFactory {
  public:
    ResourceFactory2(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 7);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[0].first.toString() + " to float");
      check_error(arguments[0].second->isSingleton());
      float ic((float)arguments[0].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[1].first.toString() + " to float");
      check_error(arguments[1].second->isSingleton());
      float ll_min((float)arguments[1].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[2].first.toString() + " to float");
      check_error(arguments[2].second->isSingleton());
      float ll_max((float)arguments[2].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[3].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[3].first.toString() + " to float");
      check_error(arguments[3].second->isSingleton());
      float pr_max((float)arguments[3].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[4].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[4].first.toString() + " to float");
      check_error(arguments[4].second->isSingleton());
      float p_max((float)arguments[4].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[5].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[5].first.toString() + " to float");
      check_error(arguments[5].second->isSingleton());
      float cr_max((float)arguments[5].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[6].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[6].first.toString() + " to float");
      check_error(arguments[6].second->isSingleton());
      float c_max((float)arguments[6].second->getSingletonValue());
      
      ResourceId instance = (new Resource(planDb, objectType, objectName))->getId();
      instance->constructor(ic, ll_min, ll_max, pr_max, p_max, cr_max, c_max);
      instance->handleDefaults();
      return instance;
    }
  };
  
  // Resources.nddl:9 Resource
  void Resource::constructor() {
    initialCapacity = addVariable(IntervalDomain(0, 0, "float"), "initialCapacity");
    levelLimitMin = addVariable(IntervalDomain(-inf, -inf, "float"), "levelLimitMin");
    levelLimitMax = addVariable(IntervalDomain(+inf, +inf, "float"), "levelLimitMax");
    productionRateMax = addVariable(IntervalDomain(+inf, +inf, "float"), "productionRateMax");
    productionMax = addVariable(IntervalDomain(+inf, +inf, "float"), "productionMax");
    consumptionRateMax = addVariable(IntervalDomain(-inf, -inf, "float"), "consumptionRateMax");
    consumptionMax = addVariable(IntervalDomain(-inf, -inf, "float"), "consumptionMax");
  }
  
  // Resources.nddl:9 Resource
  class ResourceFactory3: public ConcreteObjectFactory {
  public:
    ResourceFactory3(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 0);
      ResourceId instance = (new Resource(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // Resources.nddl:72 UnaryResource
  UnaryResource::UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "UnaryResource", name, true) {
  }
  UnaryResource::UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  UnaryResource::UnaryResource(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "UnaryResource", name, true) {}
  UnaryResource::UnaryResource(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void UnaryResource::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void UnaryResource::constructor() {
  }
  
  
  // Resources.nddl:72 UnaryResource
  DECLARE_DEFAULT_OBJECT_FACTORY(UnaryResourceFactory4, UnaryResource);
  
  
  // Resources.nddl:73 uses
  UnaryResource::uses::uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  UnaryResource::uses::uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void UnaryResource::uses::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
    
    // Post parameter constraints
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("state")));
      vars.push_back(predicateVariable(SymbolDomain(LabelStr("ACTIVE"), "TokenStates")));
      token_constraint(eq, vars);
    }
  }
  
  
  
  // simple-resources.nddl:4 Battery
  Battery::Battery(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Resource(planDatabase, "Battery", name) {
  }
  Battery::Battery(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Resource(planDatabase, type, name) {
  }
  Battery::Battery(const ObjectId& parent, const LabelStr& name)
   : Resource(parent, "Battery", name) {}
  Battery::Battery(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Resource(parent, type, name) {}
  // default initialization of member variables
  void Battery::handleDefaults(bool autoClose) {
    Resource::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // simple-resources.nddl:4 Battery
  DECLARE_DEFAULT_OBJECT_FACTORY(BatteryFactory5, Battery);
  
  
  // simple-resources.nddl:5 change
  Battery::change::change(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : Resource::change(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Battery::change::change(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : Resource::change(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Battery::change::handleDefaults(bool autoClose) {
    Resource::change::handleDefaults(false);
    if(conversionRate.isNoId()){
      conversionRate = addParameter(IntervalDomain("float"), "conversionRate");
    }
    if(actualQuantity.isNoId()){
      actualQuantity = addParameter(IntervalDomain("float"), "actualQuantity");
    }
    if (autoClose)
      close();
    
    // Post parameter constraints
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("quantity")));
      vars.push_back(var(getId(),std::string("conversionRate")));
      vars.push_back(var(getId(),std::string("actualQuantity")));
      token_constraint(mulEq, vars);
    }
  }
  
  
  Location LocationBaseDomain(){
    static Location sl_enum("Location");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("Hill"));
      sl_enum.insert(LabelStr("Rock"));
      sl_enum.insert(LabelStr("Lander"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  
  // simple-resources.nddl:14 Rover
  Rover::Rover(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Rover", name, true) {
  }
  Rover::Rover(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Rover::Rover(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Rover", name, true) {}
  Rover::Rover(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Rover::handleDefaults(bool autoClose) {
    check_error(mutex.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  
  // simple-resources.nddl:15 At
  Rover::At::At(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Rover::At::At(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Rover::At::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(location.isNoId()){
      location = addParameter(LocationBaseDomain(), "location");
    }
    if (autoClose)
      close();
  }
  
  
  
  // simple-resources.nddl:19 Going
  Rover::Going::Going(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Rover::Going::Going(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Rover::Going::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(from.isNoId()){
      from = addParameter(LocationBaseDomain(), "from");
    }
    if(to.isNoId()){
      to = addParameter(LocationBaseDomain(), "to");
    }
    if (autoClose)
      close();
  }
  
  
  // simple-resources.nddl:14 Rover
  void Rover::constructor() {
    mutex = addVariable(UnaryResourceDomain((new UnaryResource(m_id, "mutex"))->getId(), "UnaryResource"), "mutex");
    Id<UnaryResource>(singleton(mutex))->constructor();
    Id<UnaryResource>(singleton(mutex))->handleDefaults();
  }
  
  // simple-resources.nddl:14 Rover
  class RoverFactory6: public ConcreteObjectFactory {
  public:
    RoverFactory6(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 0);
      RoverId instance = (new Rover(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  // simple-resources.nddl:31 At
  class Rover$At$0$0: public RuleInstance {
  public:
    Rover$At$0$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Rover$At$0, Rover$At$0$0, Rover.At, "simple-resources.nddl,31");
  
  void Rover$At$0$0::handleExecute() {
    slave(Rover::Going, Rover.Going, to, LabelStr("meets"));
    sameObject(object, to);
    meets(this, to);
    slave(Rover::Going, Rover.Going, from, LabelStr("met_by"));
    sameObject(object, from);
    met_by(this, from);
    slave(UnaryResource::uses, UnaryResource.uses, slave2, LabelStr("equals"));
    equals(this, slave2);
  }
  
  
  // simple-resources.nddl:37 World
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "World", name, true) {
  }
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  World::World(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "World", name, true) {}
  World::World(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void World::handleDefaults(bool autoClose) {
    check_error(mainBattery.isValid(), "object variables must be initialized explicitly");
    
    check_error(reserveBattery.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  
  // simple-resources.nddl:41 initialState
  World::initialState::initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  World::initialState::initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void World::initialState::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // simple-resources.nddl:37 World
  void World::constructor() {
    mainBattery = addVariable(BatteryDomain((new Battery(m_id, "mainBattery"))->getId(), "Battery"), "mainBattery");
    Id<Battery>(singleton(mainBattery))->constructor(100, 0, 1000);
    Id<Battery>(singleton(mainBattery))->handleDefaults();
    reserveBattery = addVariable(BatteryDomain((new Battery(m_id, "reserveBattery"))->getId(), "Battery"), "reserveBattery");
    Id<Battery>(singleton(reserveBattery))->constructor(100, 100, 1000);
    Id<Battery>(singleton(reserveBattery))->handleDefaults();
  }
  
  // simple-resources.nddl:37 World
  class WorldFactory7: public ConcreteObjectFactory {
  public:
    WorldFactory7(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 0);
      WorldId instance = (new World(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  // simple-resources.nddl:49 initialState
  class World$initialState$1$0: public RuleInstance {
  public:
    World$initialState$1$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$World$initialState$1, World$initialState$1$0, World.initialState, "simple-resources.nddl,49");
  
  void World$initialState$1$0::handleExecute() {
    slave(Battery::change, Battery.change, tx, LabelStr("any"));
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("tx")), std::string("quantity")));
      vars.push_back(ruleVariable(IntervalDomain(4.0,4.0, "float")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("tx")), std::string("conversionRate")));
      vars.push_back(ruleVariable(IntervalDomain(0.7,0.7, "float")));
      rule_constraint(eq, vars);
    }
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("NDDL/test/compiler/simple-resources");
    id->reset(); // Reset prior data if present. 
    
    // Invoke commands to populate schema with type definitions
    id->addPrimitive("int");
    id->addPrimitive("float");
    id->addPrimitive("bool");
    id->addPrimitive("string");
    id->addObjectType("Object");
    id->addObjectType("Timeline", "Object");
    id->addObjectType("NddlResource", "Object");
    id->addObjectType("Resource", "NddlResource");
    id->addMember("Resource", "float", "initialCapacity");
    id->addMember("Resource", "float", "levelLimitMin");
    id->addMember("Resource", "float", "levelLimitMax");
    id->addMember("Resource", "float", "productionRateMax");
    id->addMember("Resource", "float", "productionMax");
    id->addMember("Resource", "float", "consumptionRateMax");
    id->addMember("Resource", "float", "consumptionMax");
    id->addPredicate("Resource.change");
    id->addMember("Resource.change", "float", "quantity");
    id->addObjectType("UnaryResource", "Timeline");
    id->addPredicate("UnaryResource.uses");
    id->addObjectType("Battery", "Resource");
    id->addPredicate("Battery.change");
    id->addMember("Battery.change", "float", "conversionRate");
    id->addMember("Battery.change", "float", "actualQuantity");
    id->addObjectType("Rover", "Object");
    id->addPredicate("Rover.At");
    id->addMember("Rover.At", "Location", "location");
    id->addPredicate("Rover.Going");
    id->addMember("Rover.Going", "Location", "from");
    id->addMember("Rover.Going", "Location", "to");
    id->addMember("Rover", "UnaryResource", "mutex");
    id->addObjectType("World", "Timeline");
    id->addMember("World", "Battery", "mainBattery");
    id->addMember("World", "Battery", "reserveBattery");
    id->addPredicate("World.initialState");
    id->addEnum("TokenStates");
    id->addValue("TokenStates", LabelStr("INACTIVE"));
    id->addValue("TokenStates", LabelStr("ACTIVE"));
    id->addValue("TokenStates", LabelStr("MERGED"));
    id->addValue("TokenStates", LabelStr("REJECTED"));
    id->addEnum("Location");
    id->addValue("Location", LabelStr("Hill"));
    id->addValue("Location", LabelStr("Rock"));
    id->addValue("Location", LabelStr("Lander"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Resource::change::Factory);
    REGISTER_TOKEN_FACTORY(UnaryResource::uses::Factory);
    REGISTER_TOKEN_FACTORY(Battery::change::Factory);
    REGISTER_TOKEN_FACTORY(Rover::At::Factory);
    REGISTER_TOKEN_FACTORY(Rover::Going::Factory);
    REGISTER_TOKEN_FACTORY(World::initialState::Factory);
    REGISTER_TYPE_FACTORY(TokenStates, TokenStatesBaseDomain());
    REGISTER_TYPE_FACTORY(Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(Timeline, ObjectDomain("Timeline"));
    REGISTER_TYPE_FACTORY(Resource, ObjectDomain("Resource"));
    REGISTER_OBJECT_FACTORY(ResourceFactory0, Resource:float:float:float);
    REGISTER_OBJECT_FACTORY(ResourceFactory1, Resource:float:float:float:float:float);
    REGISTER_OBJECT_FACTORY(ResourceFactory2, Resource:float:float:float:float:float:float:float);
    REGISTER_OBJECT_FACTORY(ResourceFactory3, Resource);
    REGISTER_TYPE_FACTORY(UnaryResource, ObjectDomain("UnaryResource"));
    REGISTER_OBJECT_FACTORY(UnaryResourceFactory4, UnaryResource);
    REGISTER_TYPE_FACTORY(Battery, ObjectDomain("Battery"));
    REGISTER_OBJECT_FACTORY(BatteryFactory5, Battery);
    REGISTER_TYPE_FACTORY(Location, LocationBaseDomain());
    REGISTER_TYPE_FACTORY(Rover, ObjectDomain("Rover"));
    REGISTER_OBJECT_FACTORY(RoverFactory6, Rover);
    REGISTER_TYPE_FACTORY(World, ObjectDomain("World"));
    REGISTER_OBJECT_FACTORY(WorldFactory7, World);
    // Allocate rules
    new Rule$World$initialState$1();
    new Rule$Rover$At$0();
    return id;
  }
  
}
