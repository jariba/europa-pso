// NDDL/test/compiler/multi-resources.xml

#include "Db.hh"
#include "NddlUtils.hh"
/** Custom Include Files **/

namespace NDDL {

  class Resource;
  typedef Id<Resource> ResourceId;
  typedef ObjectDomain ResourceDomain;
  
  class UnaryResource;
  typedef Id<UnaryResource> UnaryResourceId;
  typedef ObjectDomain UnaryResourceDomain;
  
  class StringData;
  typedef Id<StringData> StringDataId;
  typedef ObjectDomain StringDataDomain;
  
  class Battery;
  typedef Id<Battery> BatteryId;
  typedef ObjectDomain BatteryDomain;
  
  class SolarPanel;
  typedef Id<SolarPanel> SolarPanelId;
  typedef ObjectDomain SolarPanelDomain;
  
  class Rover;
  typedef Id<Rover> RoverId;
  typedef ObjectDomain RoverDomain;
  
  class World;
  typedef Id<World> WorldId;
  typedef ObjectDomain WorldDomain;
  
  
  
  // Plasma.nddl:8 TokenStates
  typedef SymbolDomain TokenStates;
  TokenStates TokenStatesBaseDomain();
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Object
  
  // SKIPPING DECLARATION FOR BUILT-IN CLASS Timeline
  
  
  // Plasma.nddl:20 Resource
  class Resource : public NddlResource {
  public:
    Resource(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Resource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Resource(const ObjectId& parent, const LabelStr& name);
    Resource(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class change;
    typedef Id<change> changeId;
    ConstrainedVariableId initialCapacity; // SchemaWriter::declareVariable
    ConstrainedVariableId levelLimitMin; // SchemaWriter::declareVariable
    ConstrainedVariableId levelLimitMax; // SchemaWriter::declareVariable
    ConstrainedVariableId productionRateMax; // SchemaWriter::declareVariable
    ConstrainedVariableId productionMax; // SchemaWriter::declareVariable
    ConstrainedVariableId consumptionRateMax; // SchemaWriter::declareVariable
    ConstrainedVariableId consumptionMax; // SchemaWriter::declareVariable
    
    // Plasma.nddl:31 change
    class change : public NddlResourceTransaction {
    public:
      change(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      change(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Resource::change, Resource.change);
      
      ConstrainedVariableId quantity; // SchemaWriter::declareVariable
    };
    
    // Plasma.nddl:20 Resource
    virtual void constructor(float ic, float ll_min, float ll_max);
    
    // Plasma.nddl:20 Resource
    virtual void constructor(float ic, float ll_min, float ll_max, float p_max, float c_max);
    
    // Plasma.nddl:20 Resource
    virtual void constructor(float ic, float ll_min, float ll_max, float pr_max, float p_max, float cr_max, float c_max);
    
    // Plasma.nddl:20 Resource
    virtual void constructor();
  };
  
  // Plasma.nddl:83 UnaryResource
  class UnaryResource : public Timeline {
  public:
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& name);
    UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& name);
    UnaryResource(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class uses;
    typedef Id<uses> usesId;
    
    // Plasma.nddl:84 uses
    class uses : public NddlToken {
    public:
      uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(UnaryResource::uses, UnaryResource.uses);
      
    };
  };
  
  // Plasma.nddl:93 StringData
  class StringData : public Object {
  public:
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& name);
    StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& name);
    StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    ConstrainedVariableId data; // SchemaWriter::declareVariable
    
    // Plasma.nddl:93 StringData
    virtual void constructor(const LabelStr& _data);
  };
  
  // multi-resources.nddl:3 Battery
  class Battery : public Resource {
  public:
    Battery(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Battery(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Battery(const ObjectId& parent, const LabelStr& name);
    Battery(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
  };
  
  // multi-resources.nddl:5 SolarPanel
  class SolarPanel : public Resource {
  public:
    SolarPanel(const PlanDatabaseId& planDatabase, const LabelStr& name);
    SolarPanel(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    SolarPanel(const ObjectId& parent, const LabelStr& name);
    SolarPanel(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
  };
  
  
  // multi-resources.nddl:7 Locations
  typedef SymbolDomain Locations;
  Locations LocationsBaseDomain();
  
  // multi-resources.nddl:9 Rover
  class Rover : public Timeline {
  public:
    Rover(const PlanDatabaseId& planDatabase, const LabelStr& name);
    Rover(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    Rover(const ObjectId& parent, const LabelStr& name);
    Rover(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    virtual void constructor(); // default constructoror
    
    class Drive;
    typedef Id<Drive> DriveId;
    
    // multi-resources.nddl:10 Drive
    class Drive : public NddlToken {
    public:
      Drive(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      Drive(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(Rover::Drive, Rover.Drive);
      
      ConstrainedVariableId from; // SchemaWriter::declareVariable
      ConstrainedVariableId to; // SchemaWriter::declareVariable
      ConstrainedVariableId expected_energy_used; // SchemaWriter::declareVariable
    };
  };
  
  // multi-resources.nddl:24 World
  class World : public Timeline {
  public:
    World(const PlanDatabaseId& planDatabase, const LabelStr& name);
    World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& name);
    World(const ObjectId& parent, const LabelStr& type, const LabelStr& name);
    void handleDefaults(bool autoClose = true); // default variable initialization
    
    class initialState;
    typedef Id<initialState> initialStateId;
    ConstrainedVariableId solarPanel; // SchemaWriter::declareVariable
    ConstrainedVariableId mainBattery; // SchemaWriter::declareVariable
    ConstrainedVariableId reserveBattery; // SchemaWriter::declareVariable
    ConstrainedVariableId rover; // SchemaWriter::declareVariable
    
    // multi-resources.nddl:30 initialState
    class initialState : public NddlToken {
    public:
      initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable = false, bool close = false);
      initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close = false);
      void handleDefaults(bool autoClose = true); // default variable initialization
      DECLARE_TOKEN_FACTORY(World::initialState, World.initialState);
      
    };
    
    // multi-resources.nddl:24 World
    virtual void constructor();
  };
} // End NDDL namespace
