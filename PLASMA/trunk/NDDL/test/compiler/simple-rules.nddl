enum Locations {Hill, Rock, Lander};
enum StringEnum {'s1', 's2', 's3'};
enum NumericEnum {1, 3, 4, 10.4};

class Foo {
 predicate Bar{}
}

class Rover{
 Foo foo;
 predicate At{
  Locations _location;
  Foo _foo;
 }

 predicate Going{
  Locations _from, _to;
 }

 predicate AnyPredicate{
  Locations v0;
  StringEnum v1;
  NumericEnum v2;
  int v3;
  float v4;

  eq(v0, {Hill, Lander});
  eq(v1, {'s1', 's2'});
  eq(v2, {1, 4, 10.4});
  eq(v3, [0 12]);
  eq(v4, [-1.98 2.67]);
  eq(v3, 8);
  //neq(v3, +inf);
  //neq(v4, [-inf -100]);
 }

 Rover(){
  foo = new Foo();
 }
}

Rover::At{
 meets(object.Going to);
 eq(to._from, _location);

 meets(Going from);
 eq(from._to, _location);

 // Test that we can reference other objects. Has semantics of posting
 // an equality constraint on the object variable
 meets(_foo.Bar bar);
 Foo localFoo;
 meets(localFoo.Bar baz);

 // Constrain common ancestor
 Rover r; // All rovers
 commonAncestor(from.object, to.object, r);
}

Rover::Going{
 neq(_from, _to);
}

// Introduce a derived class to ensure rules are inherited correctly
class SuperRover extends Rover {
 SuperRover(){
  super();
 }
}

// Defines the initial state for the problem.
class World {
 Rover rover;

 predicate initialState{}

 World(){
  rover = new Rover();
 }
}

World::initialState{
 // Enumerate all supported temporal relations
 contains(Rover.At s0);
 contained_by(Rover.At s1);
 meets(Rover.At s2);
 met_by(Rover.At s3);
 before(Rover.At s4);
 after(Rover.At s5);
 starts(Rover.At s6);
 ends(Rover.At s7);
 any(Rover.At s8);
 ends_after(Rover.At s9);
 ends_before(Rover.At s10);
 ends_after_start(Rover.At s11);
 starts_before_end(Rover.At s12);
 starts_during(Rover.At s13);
 contains_start(Rover.At s14);
 ends_during(Rover.At s15);
 contains_end(Rover.At s16);
 starts_before(Rover.At s17);
 starts_after(Rover.At s18);
 equals(Rover.At s19);

 // Subgoal and bind
 contains(Rover.At a);
 eq(a._location, Lander);

 contains(Rover.At b);
 eq(b._location, {Rock, Hill});

 leq(a.end, b.start);
 eq(a.start, [-10000 10000]);

 // Test rule to use local variables
 Rover r1;
 Rover r2;
 eq(r1, r2);

 // Test use of binary temporal relation
 b after (Rover.At c);
 a meets c;

 // test use of starts
 c starts (Rover.At d);
}

// Transactions
World world = new World();
SuperRover superRover = new SuperRover();

close();

goal(World.initialState t0);
t0.activate();

goal(Rover.At t1);
t1.activate();
goal(Rover.At t2);
t2.merge(t1);

goal(SuperRover.At t3);
t3.activate();

goal(Rover.At a1);

goal(Rover.At a2);
a1 contains a2;

goal(Rover.At a3);
a1 contained_by a3;

goal(Rover.At a4);
a1 meets a4;

goal(Rover.At a4);
a1 met_by a4;

goal(Rover.At a5);
a1 before a5;

goal(Rover.At a6);
a1 after a6;

goal(Rover.At a7);
a1 starts a7;

goal(Rover.At a8);
a1 ends a8;

goal(Rover.At a9);
a1 any a9;

goal(Rover.At a10);
a1 ends_after a10;

goal(Rover.At a11);
a1  ends_before a11;

goal(Rover.At a12);
a1 ends_after_start a12;

goal(Rover.At a13);
a1 starts_before_end a13;

goal(Rover.At a14);
a1 starts_during a14;

goal(Rover.At a15);
a1 contains_start a15;

goal(Rover.At a16);
a1 ends_during a16;

goal(Rover.At a17);
a1 contains_end a17;

goal(Rover.At a18);
a1 starts_before a18;

goal(Rover.At a19);
a1 starts_after a19;

goal(Rover.At a20);
a1 equals a20;

goal(Rover.AnyPredicate a21);
a21.activate();
