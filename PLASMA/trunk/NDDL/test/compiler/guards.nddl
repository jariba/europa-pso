enum Locations {Hill, Rock, Lander};
enum StringEnum {ONE, TWO, THREE}; //typedef string {"\"ONE\"", "\"TWO\"", "\"THREE\""} StringEnum;

class Bar{
 Locations loc;
 predicate pred{}
}

class Foo{
 int arg1=20;
 Bar arg2;

 Foo(){
  arg2 = new Bar();
 }

 predicate basicToken{}
 predicate tokenWithParameters{
  int int_arg;
  bool bool_arg;
  float float_arg;
  Locations location_arg;
  StringEnum strEnum_arg;
 }

 predicate impliedObjectGuard{
  Foo allFoo;
 }

 predicate impliedLocalVariableGuard{}

 predicate singletonGuard{}
 predicate mixGuardedWithUnguarded{}
 predicate localVariableGuard{}
 predicate multipleNestedGuards{}
}

// Guard on object being a singleton is implied
// by the constrain referencing a field. Expect a single 
// RuleInstance to be created, which is an object guarded instance
Foo::impliedObjectGuard{
 eq(allFoo.arg1, [0 100]); // 1: Guarded by allFoo

 eq(object.arg1, allFoo.arg1); // 2: Guarded by object and allFoo
 meets(basicToken g1);
 eq(g1.object.arg1, object.arg1); // 3: Guarded by g1.object and object

 Bar bar;
 eq(object.arg2, bar); // 4: Guarded by first, second ungaurded. Order changed.

 // Guards implied when used on slaves as shown below
 if(object){
  any(object.arg2.pred t0); // 5: Guarded by object
 }
 //if(object.arg1 == allFoo.arg1){ // 6: Guarded by object, allFoo, and the test for equality
  //any(basicToken);
 //}
}

// Guard on local variable of objects is implied
// by the constraint referencing a field.
Foo::impliedLocalVariableGuard{
 Foo f1;
 eq(f1.arg1, 20);
}

// Singleton guard. Can be variables of tokens too
Foo::singletonGuard{
 if(object){
  meets(basicToken g1);
  if(g1.object){
   met_by(basicToken g2);
   eq(g1.duration, g2.duration); // Should be able to reference the parent scope
  }
 }
}

Foo::tokenWithParameters{
 if(bool_arg == true){
  meets(basicToken t1);
 }
 if(int_arg == 10){
  meets(basicToken t2);
 }
 if(location_arg == Lander){
  meets(basicToken t3);
 }

 if(bool_arg == {false, true}){
  meets(basicToken t4);
 }
 if(int_arg == [1.3 2.4]){
  meets(basicToken t4);
 }
 if(float_arg == [1 9]){
  meets(basicToken t5);
 }
 if(location_arg == {Hill, Lander}){
  meets(basicToken t6);
 }
 if(strEnum_arg == {ONE, THREE}){
  meets(basicToken t6);
 }
}

// TODO: Generating a singleton test instead of a value guarded test with default value of true
Foo::tokenWithParameters{
 if(this.bool_arg){ 
  meets(basicToken t1);
 }
}

// Mix guarded elements, with unguarded elements
Foo::mixGuardedWithUnguarded{
 meets(tokenWithParameters t1);
 eq(t1.int_arg, 20);
 if(t1.bool_arg){ // TODO: Generating a singleton test instead of a value guarded test with default value of true
  meets(basicToken t2);
 }
}

// Test guard based on introduction of a local variable
Foo::localVariableGuard{
 bool b;
 if(b){
  meets(basicToken t);
 }
 if(b == true){
  meets(basicToken t);
 }
 if(b == false){
  meets(basicToken t);
 }

 Locations local_locations;
 if(local_locations == Hill){
  met_by(basicToken t2);
 }

 Foo f; // Set of objects
 if(f){ // When a singleton
  eq(f.arg1, 20); // Constrain its field
 }
}

// Test multiple levels of nesting
Foo::multipleNestedGuards{
 Locations locs;
 any(tokenWithParameters t1);
 if(t1.int_arg == 10){
  bool OR;
  if(OR == true){
   meets(tokenWithParameters t2);
   eq(locs, t2.location_arg);
   if(t1.location_arg == Hill){
    t2 meets (basicToken t3);
   }
  }
 }
}

Foo foo1 = new Foo();
Foo foo2 = new Foo();
close();

goal(Foo.impliedObjectGuard g1);
g1.allFoo.specify(foo1);
g1.object.specify(foo1);

goal(Foo.singletonGuard g2);
g2.object.specify(foo2);

goal(Foo.mixGuardedWithUnguarded g3);

goal(Foo.tokenWithParameters g4);
g4.bool_arg.specify(true);
g4.int_arg.specify(10);
g4.location_arg.specify(Lander);

goal(Foo.multipleNestedGuards g5);

goal(Foo.impliedLocalVariableGuard g6);
