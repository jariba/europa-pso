// NDDL/test/compiler/gnats_3140.xml

#include "gnats_3140.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  numericEnum numericEnumBaseDomain(){
    static numericEnum sl_enum("numericEnum");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(1);
      sl_enum.insert(2);
      sl_enum.insert(3);
      sl_enum.insert(4);
      sl_enum.insert(5);
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  symbolicEnum symbolicEnumBaseDomain(){
    static symbolicEnum sl_enum("symbolicEnum");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("A"));
      sl_enum.insert(LabelStr("AB"));
      sl_enum.insert(LabelStr("ABC"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  
  // gnats_3140.nddl:7 Boo
  Boo::Boo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Boo", name, true) {
  }
  Boo::Boo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Boo::Boo(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Boo", name, true) {}
  Boo::Boo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Boo::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Boo::constructor() {
  }
  
  
  // gnats_3140.nddl:7 Boo
  DECLARE_DEFAULT_OBJECT_FACTORY(BooFactory0, Boo);
  
  
  // gnats_3140.nddl:9 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if(field1.isNoId()){
      field1 = addVariable(BoolDomain("bool"), "field1");
    }
    if(field2.isNoId()){
      field2 = addVariable(IntervalIntDomain("int"), "field2");
    }
    if(field4.isNoId()){
      field4 = addVariable(IntervalDomain("float"), "field4");
    }
    if(field6.isNoId()){
      field6 = addVariable(symbolicEnumBaseDomain(), "field6");
    }
    check_error(field7.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  // gnats_3140.nddl:9 Foo
  void Foo::constructor(bool _field1, int _field2, float _field4, const LabelStr& _field6, const BooId& _field7) {
    field1 = addVariable(BoolDomain(_field1, "bool"), "field1");
    field2 = addVariable(IntervalIntDomain(_field2, _field2, "int"), "field2");
    field4 = addVariable(IntervalDomain(_field4, _field4, "float"), "field4");
    field6 = addVariable(symbolicEnum(_field6, "symbolicEnum"), "field6");
    field7 = addVariable(BooDomain(_field7, "Boo"), "field7");
  }
  
  // gnats_3140.nddl:9 Foo
  class FooFactory1: public ConcreteObjectFactory {
  public:
    FooFactory1(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 5);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("bool")), 
                  "Cannot convert " + arguments[0].first.toString() + " to bool");
      check_error(arguments[0].second->isSingleton());
      bool _field1((bool)arguments[0].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1].second, 
                                                TypeFactory::baseDomain("int")), 
                  "Cannot convert " + arguments[1].first.toString() + " to int");
      check_error(arguments[1].second->isSingleton());
      int _field2((int)arguments[1].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[2].first.toString() + " to float");
      check_error(arguments[2].second->isSingleton());
      float _field4((float)arguments[2].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[3].second, 
                                                TypeFactory::baseDomain("symbolicEnum")), 
                  "Cannot convert " + arguments[3].first.toString() + " to symbolicEnum");
      check_error(arguments[3].second->isSingleton());
      LabelStr _field6((LabelStr)arguments[3].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[4].second, 
                                                TypeFactory::baseDomain("Boo")), 
                  "Cannot convert " + arguments[4].first.toString() + " to Boo");
      check_error(arguments[4].second->isSingleton());
      BooId _field7((BooId)arguments[4].second->getSingletonValue());
      
      FooId instance = (new Foo(planDb, objectType, objectName))->getId();
      instance->constructor(_field1, _field2, _field4, _field6, _field7);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // gnats_3140.nddl:30 Bar
  Bar::Bar(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Bar", name, true) {
  }
  Bar::Bar(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Bar::Bar(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Bar", name, true) {}
  Bar::Bar(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Bar::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Bar::constructor() {
  }
  
  
  // gnats_3140.nddl:30 Bar
  DECLARE_DEFAULT_OBJECT_FACTORY(BarFactory2, Bar);
  
  
  // gnats_3140.nddl:31 pred
  Bar::pred::pred(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Bar::pred::pred(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Bar::pred::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(field1.isNoId()){
      field1 = addParameter(BoolDomain("bool"), "field1");
    }
    if(field2.isNoId()){
      field2 = addParameter(IntervalIntDomain("int"), "field2");
    }
    if(field4.isNoId()){
      field4 = addParameter(IntervalDomain("float"), "field4");
    }
    if(field6.isNoId()){
      field6 = addParameter(symbolicEnumBaseDomain(), "field6");
    }
    if(field7.isNoId()){
      field7 = addParameter(ObjectDomain("Boo"), "field7");
      completeObjectParam(Boo, field7);
    }
    if (autoClose)
      close();
  }
  
  
  // gnats_3140.nddl:42 pred
  class Bar$pred$0$0: public RuleInstance {
  public:
    Bar$pred$0$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Bar$pred$0, Bar$pred$0$0, Bar.pred, "gnats_3140.nddl,42");
  
  void Bar$pred$0$0::handleExecute() {
    objectVar(Foo, f, false, false);
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("field1")));
      vars.push_back(varFromObject(std::string("f"), std::string("field1"), false));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("field2")));
      vars.push_back(varFromObject(std::string("f"), std::string("field2"), false));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("field4")));
      vars.push_back(varFromObject(std::string("f"), std::string("field4"), false));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("field6")));
      vars.push_back(varFromObject(std::string("f"), std::string("field6"), false));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("field7")));
      vars.push_back(varFromObject(std::string("f"), std::string("field7"), false));
      rule_constraint(eq, vars);
    }
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("NDDL/test/compiler/gnats_3140");
    id->reset(); // Reset prior data if present. 
    
    // Invoke commands to populate schema with type definitions
    id->addPrimitive("int");
    id->addPrimitive("float");
    id->addPrimitive("bool");
    id->addPrimitive("string");
    id->addObjectType("Object");
    id->addObjectType("Timeline","Object");
    id->addObjectType("Boo", "Object");
    id->addObjectType("Foo", "Object");
    id->addMember("Foo", "bool", "field1");
    id->addMember("Foo", "int", "field2");
    id->addMember("Foo", "float", "field4");
    id->addMember("Foo", "symbolicEnum", "field6");
    id->addMember("Foo", "Boo", "field7");
    id->addObjectType("Bar", "Timeline");
    id->addPredicate("Bar.pred");
    id->addMember("Bar.pred", "bool", "field1");
    id->addMember("Bar.pred", "int", "field2");
    id->addMember("Bar.pred", "float", "field4");
    id->addMember("Bar.pred", "symbolicEnum", "field6");
    id->addMember("Bar.pred", "Boo", "field7");
    id->addEnum("numericEnum");
    id->addEnum("symbolicEnum");
    id->addValue("symbolicEnum", LabelStr("A"));
    id->addValue("symbolicEnum", LabelStr("AB"));
    id->addValue("symbolicEnum", LabelStr("ABC"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Bar::pred::Factory);
    REGISTER_TYPE_FACTORY(numericEnum, numericEnumBaseDomain());
    REGISTER_TYPE_FACTORY(symbolicEnum, symbolicEnumBaseDomain());
    REGISTER_TYPE_FACTORY(Boo, ObjectDomain("Boo"));
    REGISTER_OBJECT_FACTORY(BooFactory0, Boo);
    REGISTER_TYPE_FACTORY(Foo, ObjectDomain("Foo"));
    REGISTER_OBJECT_FACTORY(FooFactory1, Foo:bool:int:float:symbolicEnum:Boo);
    REGISTER_OBJECT_FACTORY(FooFactory1, Foo:bool:int:float:symbolicEnum:Object);
    REGISTER_TYPE_FACTORY(Bar, ObjectDomain("Bar"));
    REGISTER_OBJECT_FACTORY(BarFactory2, Bar);
    // Allocate rules
    new Rule$Bar$pred$0();
    return id;
  }
  
}
