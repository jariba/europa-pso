// NDDL/test/compiler/multi-resources.xml

#include "multi-resources.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  TokenStates TokenStatesBaseDomain(){
    static TokenStates sl_enum("TokenStates");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("INACTIVE"));
      sl_enum.insert(LabelStr("ACTIVE"));
      sl_enum.insert(LabelStr("MERGED"));
      sl_enum.insert(LabelStr("REJECTED"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Timeline
  
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Resource
  
  
  
  // Plasma.nddl:83 UnaryResource
  UnaryResource::UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "UnaryResource", name, true) {
  }
  UnaryResource::UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  UnaryResource::UnaryResource(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "UnaryResource", name, true) {}
  UnaryResource::UnaryResource(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void UnaryResource::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void UnaryResource::constructor() {
  }
  
  
  // Plasma.nddl:83 UnaryResource
  DECLARE_DEFAULT_OBJECT_FACTORY(UnaryResourceFactory0, UnaryResource);
  
  
  // Plasma.nddl:84 uses
  UnaryResource::uses::uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  UnaryResource::uses::uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void UnaryResource::uses::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
    
    // Post parameter constraints
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("state")));
      vars.push_back(predicateVariable(SymbolDomain(LabelStr("ACTIVE"), "TokenStates")));
      token_constraint(eq, vars);
    }
  }
  
  
  
  // Plasma.nddl:93 StringData
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "StringData", name, true) {
  }
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  StringData::StringData(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "StringData", name, true) {}
  StringData::StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void StringData::handleDefaults(bool autoClose) {
    if(data.isNoId()){
      data = addVariable(StringDomain("DefaultString"), "data");
    }
    if (autoClose)
      close();
  }
  
  
  // Plasma.nddl:93 StringData
  void StringData::constructor(const LabelStr& _data) {
    data = addVariable(StringDomain(_data, "string"), "data");
  }
  
  // Plasma.nddl:93 StringData
  class StringDataFactory1: public ConcreteObjectFactory {
  public:
    StringDataFactory1(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("string")), 
                  "Cannot convert " + arguments[0].first.toString() + " to string");
      check_error(arguments[0].second->isSingleton());
      LabelStr _data((LabelStr)arguments[0].second->getSingletonValue());
      
      StringDataId instance = (new StringData(planDb, objectType, objectName))->getId();
      instance->constructor(_data);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // multi-resources.nddl:3 Battery
  Battery::Battery(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : NddlResource(planDatabase, "Battery", name, true) {
  }
  Battery::Battery(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : NddlResource(planDatabase, type, name, true) {
  }
  Battery::Battery(const ObjectId& parent, const LabelStr& name)
   : NddlResource(parent, "Battery", name, true) {}
  Battery::Battery(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : NddlResource(parent, type, name, true) {}
  // default initialization of member variables
  void Battery::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  
  // multi-resources.nddl:3 Battery
  void Battery::constructor(float ic, float ll_min, float ll_max) {
    NddlResource::constructor(ic, ll_min, ll_max);
  }
  
  // multi-resources.nddl:3 Battery
  class BatteryFactory2: public ConcreteObjectFactory {
  public:
    BatteryFactory2(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 3);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[0].first.toString() + " to float");
      check_error(arguments[0].second->isSingleton());
      float ic((float)arguments[0].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[1].first.toString() + " to float");
      check_error(arguments[1].second->isSingleton());
      float ll_min((float)arguments[1].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[2].first.toString() + " to float");
      check_error(arguments[2].second->isSingleton());
      float ll_max((float)arguments[2].second->getSingletonValue());
      
      BatteryId instance = (new Battery(planDb, objectType, objectName))->getId();
      instance->constructor(ic, ll_min, ll_max);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // multi-resources.nddl:9 SolarPanel
  SolarPanel::SolarPanel(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : NddlResource(planDatabase, "SolarPanel", name, true) {
  }
  SolarPanel::SolarPanel(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : NddlResource(planDatabase, type, name, true) {
  }
  SolarPanel::SolarPanel(const ObjectId& parent, const LabelStr& name)
   : NddlResource(parent, "SolarPanel", name, true) {}
  SolarPanel::SolarPanel(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : NddlResource(parent, type, name, true) {}
  // default initialization of member variables
  void SolarPanel::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  
  // multi-resources.nddl:9 SolarPanel
  void SolarPanel::constructor(float ic, float ll_min, float ll_max) {
    NddlResource::constructor(ic, ll_min, ll_max);
  }
  
  // multi-resources.nddl:9 SolarPanel
  class SolarPanelFactory3: public ConcreteObjectFactory {
  public:
    SolarPanelFactory3(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 3);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[0].first.toString() + " to float");
      check_error(arguments[0].second->isSingleton());
      float ic((float)arguments[0].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[1].first.toString() + " to float");
      check_error(arguments[1].second->isSingleton());
      float ll_min((float)arguments[1].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2].second, 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[2].first.toString() + " to float");
      check_error(arguments[2].second->isSingleton());
      float ll_max((float)arguments[2].second->getSingletonValue());
      
      SolarPanelId instance = (new SolarPanel(planDb, objectType, objectName))->getId();
      instance->constructor(ic, ll_min, ll_max);
      instance->handleDefaults();
      return instance;
    }
  };
  
  Locations LocationsBaseDomain(){
    static Locations sl_enum("Locations");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("Here"));
      sl_enum.insert(LabelStr("There"));
      sl_enum.insert(LabelStr("Everywhere"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  
  // multi-resources.nddl:17 Rover
  Rover::Rover(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Rover", name, true) {
  }
  Rover::Rover(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Rover::Rover(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Rover", name, true) {}
  Rover::Rover(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Rover::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Rover::constructor() {
  }
  
  
  // multi-resources.nddl:17 Rover
  DECLARE_DEFAULT_OBJECT_FACTORY(RoverFactory4, Rover);
  
  
  // multi-resources.nddl:18 Drive
  Rover::Drive::Drive(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Rover::Drive::Drive(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Rover::Drive::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(from.isNoId()){
      from = addParameter(LocationsBaseDomain(), "from");
    }
    if(to.isNoId()){
      to = addParameter(LocationsBaseDomain(), "to");
    }
    if(expected_energy_used.isNoId()){
      expected_energy_used = addParameter(IntervalDomain("float"), "expected_energy_used");
    }
    if (autoClose)
      close();
  }
  
  
  // multi-resources.nddl:24 Drive
  class Rover$Drive$0$0: public RuleInstance {
  public:
    Rover$Drive$0$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Rover$Drive$0, Rover$Drive$0$0, Rover.Drive, "multi-resources.nddl,24");
  
  void Rover$Drive$0$0::handleExecute() {
    slave(Battery::change, Battery.change, battery, LabelStr("meets"));
    meets(this, battery);
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("from")));
      vars.push_back(var(getId(),std::string("to")));
      rule_constraint(neq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("battery")), std::string("quantity")));
      vars.push_back(var(getId(),std::string("expected_energy_used")));
      rule_constraint(eq, vars);
    }
  }
  
  
  // multi-resources.nddl:32 World
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "World", name, true) {
  }
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  World::World(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "World", name, true) {}
  World::World(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void World::handleDefaults(bool autoClose) {
    check_error(solarPanel.isValid(), "object variables must be initialized explicitly");
    
    check_error(mainBattery.isValid(), "object variables must be initialized explicitly");
    
    check_error(reserveBattery.isValid(), "object variables must be initialized explicitly");
    
    check_error(rover.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  
  // multi-resources.nddl:38 initialState
  World::initialState::initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  World::initialState::initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void World::initialState::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // multi-resources.nddl:32 World
  void World::constructor() {
    solarPanel = addVariable(SolarPanelDomain((new SolarPanel(m_id, "solarPanel"))->getId(), "SolarPanel"), "solarPanel");
    Id<SolarPanel>(singleton(solarPanel))->constructor(10, 0, 30);
    Id<SolarPanel>(singleton(solarPanel))->handleDefaults();
    mainBattery = addVariable(BatteryDomain((new Battery(m_id, "mainBattery"))->getId(), "Battery"), "mainBattery");
    Id<Battery>(singleton(mainBattery))->constructor(1000, 100, 1200);
    Id<Battery>(singleton(mainBattery))->handleDefaults();
    reserveBattery = addVariable(BatteryDomain((new Battery(m_id, "reserveBattery"))->getId(), "Battery"), "reserveBattery");
    Id<Battery>(singleton(reserveBattery))->constructor(1000, 100, 1200);
    Id<Battery>(singleton(reserveBattery))->handleDefaults();
    rover = addVariable(RoverDomain((new Rover(m_id, "rover"))->getId(), "Rover"), "rover");
    Id<Rover>(singleton(rover))->constructor();
    Id<Rover>(singleton(rover))->handleDefaults();
  }
  
  // multi-resources.nddl:32 World
  class WorldFactory5: public ConcreteObjectFactory {
  public:
    WorldFactory5(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 0);
      WorldId instance = (new World(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  // multi-resources.nddl:48 initialState
  class World$initialState$1$0: public RuleInstance {
  public:
    World$initialState$1$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$World$initialState$1, World$initialState$1$0, World.initialState, "multi-resources.nddl,48");
  
  void World$initialState$1$0::handleExecute() {
    slave(Rover::Drive, Rover.Drive, a, LabelStr("any"));
    slave(Rover::Drive, Rover.Drive, b, LabelStr("any"));
    slave(Battery::change, Battery.change, tx, LabelStr("any"));
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("a")), std::string("from")));
      vars.push_back(ruleVariable(SymbolDomain(LabelStr("Here"), "Locations")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("a")), std::string("to")));
      vars.push_back(ruleVariable(SymbolDomain(LabelStr("There"), "Locations")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("b")), std::string("from")));
      vars.push_back(ruleVariable(SymbolDomain(LabelStr("There"), "Locations")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("b")), std::string("to")));
      vars.push_back(ruleVariable(SymbolDomain(LabelStr("Everywhere"), "Locations")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("a")), std::string("end")));
      vars.push_back(varfromtok(tok(getId(), std::string("b")), std::string("start")));
      rule_constraint(leq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("tx")), std::string("quantity")));
      vars.push_back(ruleVariable(IntervalIntDomain(4,4, "int")));
      rule_constraint(eq, vars);
    }
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("NDDL/test/compiler/multi-resources");
    id->reset(); // Reset prior data if present. 
    
    // Invoke commands to populate schema with type definitions
    id->addObjectType("Timeline","Object");
    id->addObjectType("Resource", "Object");
    id->addObjectType("UnaryResource", "Timeline");
    id->addObjectType("StringData", "Object");
    id->addObjectType("Battery", "Resource");
    id->addObjectType("SolarPanel", "Resource");
    id->addObjectType("Rover", "Timeline");
    id->addObjectType("World", "Timeline");
    id->addPrimitive("int");
    id->addPrimitive("float");
    id->addPrimitive("bool");
    id->addPrimitive("string");
    id->addEnum("TokenStates");
    id->addMember("Resource", "float", "initialCapacity");
    id->addMember("Resource", "float", "levelLimitMin");
    id->addMember("Resource", "float", "levelLimitMax");
    id->addMember("Resource", "float", "productionRateMax");
    id->addMember("Resource", "float", "productionMax");
    id->addMember("Resource", "float", "consumptionRateMax");
    id->addMember("Resource", "float", "consumptionMax");
    id->addPredicate("Resource.change");
    id->addMember("Resource.change", "float", "quantity");
    id->addPredicate("UnaryResource.uses");
    id->addMember("StringData", "string", "data");
    id->addEnum("Locations");
    id->addPredicate("Rover.Drive");
    id->addMember("Rover.Drive", "Locations", "from");
    id->addMember("Rover.Drive", "Locations", "to");
    id->addMember("Rover.Drive", "float", "expected_energy_used");
    id->addMember("World", "SolarPanel", "solarPanel");
    id->addMember("World", "Battery", "mainBattery");
    id->addMember("World", "Battery", "reserveBattery");
    id->addMember("World", "Rover", "rover");
    id->addPredicate("World.initialState");
    id->addValue("TokenStates", LabelStr("INACTIVE"));
    id->addValue("TokenStates", LabelStr("ACTIVE"));
    id->addValue("TokenStates", LabelStr("MERGED"));
    id->addValue("TokenStates", LabelStr("REJECTED"));
    id->addValue("Locations", LabelStr("Here"));
    id->addValue("Locations", LabelStr("There"));
    id->addValue("Locations", LabelStr("Everywhere"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(UnaryResource::uses::Factory);
    REGISTER_TOKEN_FACTORY(Rover::Drive::Factory);
    REGISTER_TOKEN_FACTORY(World::initialState::Factory);
    REGISTER_TYPE_FACTORY(Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(TokenStates, TokenStatesBaseDomain());
    REGISTER_TYPE_FACTORY(Timeline, ObjectDomain("Timeline"));
    REGISTER_TYPE_FACTORY(Resource, ObjectDomain("Resource"));
    REGISTER_TYPE_FACTORY(UnaryResource, ObjectDomain("UnaryResource"));
    REGISTER_OBJECT_FACTORY(UnaryResourceFactory0, UnaryResource);
    REGISTER_TYPE_FACTORY(StringData, ObjectDomain("StringData"));
    REGISTER_OBJECT_FACTORY(StringDataFactory1, StringData:string);
    REGISTER_TYPE_FACTORY(Battery, ObjectDomain("Battery"));
    REGISTER_OBJECT_FACTORY(BatteryFactory2, Battery:float:float:float);
    REGISTER_TYPE_FACTORY(SolarPanel, ObjectDomain("SolarPanel"));
    REGISTER_OBJECT_FACTORY(SolarPanelFactory3, SolarPanel:float:float:float);
    REGISTER_TYPE_FACTORY(Locations, LocationsBaseDomain());
    REGISTER_TYPE_FACTORY(Rover, ObjectDomain("Rover"));
    REGISTER_OBJECT_FACTORY(RoverFactory4, Rover);
    REGISTER_TYPE_FACTORY(World, ObjectDomain("World"));
    REGISTER_OBJECT_FACTORY(WorldFactory5, World);
    // Allocate rules
    new Rule$Rover$Drive$0();
    new Rule$World$initialState$1();
    return id;
  }
  
}
