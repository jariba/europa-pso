// NDDL/test/compiler/nddl.tx.0.xml

#include "nddl.tx.0.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  TokenStates TokenStatesBaseDomain(){
    static TokenStates sl_enum("TokenStates");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("INACTIVE"));
      sl_enum.insert(LabelStr("ACTIVE"));
      sl_enum.insert(LabelStr("MERGED"));
      sl_enum.insert(LabelStr("REJECTED"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Object
  
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Timeline
  
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Resource
  
  
  
  // Plasma.nddl:83 UnaryResource
  UnaryResource::UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "UnaryResource", name, true) {
  }
  UnaryResource::UnaryResource(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  UnaryResource::UnaryResource(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "UnaryResource", name, true) {}
  UnaryResource::UnaryResource(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void UnaryResource::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void UnaryResource::constructor() {
  }
  
  
  // Plasma.nddl:83 UnaryResource
  DECLARE_DEFAULT_OBJECT_FACTORY(UnaryResourceFactory0, UnaryResource);
  
  
  // Plasma.nddl:84 uses
  UnaryResource::uses::uses(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  UnaryResource::uses::uses(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void UnaryResource::uses::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
    
    // Post parameter constraints
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("state")));
      vars.push_back(predicateVariable(SymbolDomain(LabelStr("ACTIVE"), "TokenStates")));
      token_constraint(eq, vars);
    }
  }
  
  
  
  // Plasma.nddl:93 StringData
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "StringData", name, true) {
  }
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  StringData::StringData(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "StringData", name, true) {}
  StringData::StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void StringData::handleDefaults(bool autoClose) {
    if(data.isNoId()){
      data = addVariable(StringDomain("DefaultString"), "data");
    }
    if (autoClose)
      close();
  }
  
  
  // Plasma.nddl:93 StringData
  void StringData::constructor(const LabelStr& _data) {
    data = addVariable(StringDomain(_data, "string"), "data");
  }
  
  // Plasma.nddl:93 StringData
  class StringDataFactory1: public ConcreteObjectFactory {
  public:
    StringDataFactory1(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("string")), 
                  "Cannot convert " + arguments[0].first.toString() + " to string");
      check_error(arguments[0].second->isSingleton());
      LabelStr _data((LabelStr)arguments[0].second->getSingletonValue());
      
      StringDataId instance = (new StringData(planDb, objectType, objectName))->getId();
      instance->constructor(_data);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // nddl.tx.0.nddl:3 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Foo::constructor() {
  }
  
  
  // nddl.tx.0.nddl:3 Foo
  DECLARE_DEFAULT_OBJECT_FACTORY(FooFactory2, Foo);
  
  
  // nddl.tx.0.nddl:4 pred
  Foo::pred::pred(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::pred::pred(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(arg.isNoId()){
      arg = addParameter(IntervalIntDomain("int"), "arg");
    }
    if (autoClose)
      close();
  }
  
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("NDDL/test/compiler/nddl.tx.0");
    id->reset(); // Reset prior data if present. 
    
    // Invoke commands to populate schema with type definitions
    id->addPrimitive("int");
    id->addPrimitive("float");
    id->addPrimitive("bool");
    id->addPrimitive("string");
    id->addObjectType("Object");
    id->addObjectType("Timeline","Object");
    id->addObjectType("Resource", "Object");
    id->addMember("Resource", "float", "initialCapacity");
    id->addMember("Resource", "float", "levelLimitMin");
    id->addMember("Resource", "float", "levelLimitMax");
    id->addMember("Resource", "float", "productionRateMax");
    id->addMember("Resource", "float", "productionMax");
    id->addMember("Resource", "float", "consumptionRateMax");
    id->addMember("Resource", "float", "consumptionMax");
    id->addPredicate("Resource.change");
    id->addMember("Resource.change", "float", "quantity");
    id->addObjectType("UnaryResource", "Timeline");
    id->addPredicate("UnaryResource.uses");
    id->addObjectType("StringData", "Object");
    id->addMember("StringData", "string", "data");
    id->addObjectType("Foo", "Timeline");
    id->addPredicate("Foo.pred");
    id->addMember("Foo.pred", "int", "arg");
    id->addEnum("TokenStates");
    id->addValue("TokenStates", LabelStr("INACTIVE"));
    id->addValue("TokenStates", LabelStr("ACTIVE"));
    id->addValue("TokenStates", LabelStr("MERGED"));
    id->addValue("TokenStates", LabelStr("REJECTED"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(UnaryResource::uses::Factory);
    REGISTER_TOKEN_FACTORY(Foo::pred::Factory);
    REGISTER_TYPE_FACTORY(TokenStates, TokenStatesBaseDomain());
    REGISTER_TYPE_FACTORY(Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(Timeline, ObjectDomain("Timeline"));
    REGISTER_TYPE_FACTORY(Resource, ObjectDomain("Resource"));
    REGISTER_TYPE_FACTORY(UnaryResource, ObjectDomain("UnaryResource"));
    REGISTER_OBJECT_FACTORY(UnaryResourceFactory0, UnaryResource);
    REGISTER_TYPE_FACTORY(StringData, ObjectDomain("StringData"));
    REGISTER_OBJECT_FACTORY(StringDataFactory1, StringData:string);
    REGISTER_TYPE_FACTORY(Foo, ObjectDomain("Foo"));
    REGISTER_OBJECT_FACTORY(FooFactory2, Foo);
    // Allocate rules
    return id;
  }
  
}
