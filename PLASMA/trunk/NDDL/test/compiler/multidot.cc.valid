// NDDL/test/compiler/multidot.xml

#include "multidot.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  
  // multidot.nddl:1 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Foo::constructor() {
  }
  
  
  // multidot.nddl:1 Foo
  DECLARE_DEFAULT_OBJECT_FACTORY(FooFactory0, Foo);
  
  
  // multidot.nddl:5 Bar
  Bar::Bar(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Bar", name, true) {
  }
  Bar::Bar(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Bar::Bar(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Bar", name, true) {}
  Bar::Bar(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Bar::handleDefaults(bool autoClose) {
    check_error(m_foo.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  // multidot.nddl:5 Bar
  void Bar::constructor(const FooId& foo) {
    m_foo = addVariable(FooDomain(foo, "Foo"), "m_foo");
  }
  
  // multidot.nddl:5 Bar
  class BarFactory1: public ConcreteObjectFactory {
  public:
    BarFactory1(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("Foo")), 
                  "Cannot convert " + arguments[0].first.toString() + " to Foo");
      check_error(arguments[0].second->isSingleton());
      FooId foo((FooId)arguments[0].second->getSingletonValue());
      
      BarId instance = (new Bar(planDb, objectType, objectName))->getId();
      instance->constructor(foo);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // multidot.nddl:14 Baz
  Baz::Baz(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Baz", name, true) {
  }
  Baz::Baz(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Baz::Baz(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Baz", name, true) {}
  Baz::Baz(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Baz::handleDefaults(bool autoClose) {
    check_error(myfoo.isValid(), "object variables must be initialized explicitly");
    
    check_error(myBar.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  // multidot.nddl:14 Baz
  void Baz::constructor(const BarId& bar, const FooId& foo) {
    myBar = addVariable(BarDomain(bar, "Bar"), "myBar");
    myfoo = addVariable(FooDomain(foo, "Foo"), "myfoo");
  }
  
  // multidot.nddl:14 Baz
  class BazFactory2: public ConcreteObjectFactory {
  public:
    BazFactory2(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 2);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("Bar")), 
                  "Cannot convert " + arguments[0].first.toString() + " to Bar");
      check_error(arguments[0].second->isSingleton());
      BarId bar((BarId)arguments[0].second->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1].second, 
                                                TypeFactory::baseDomain("Foo")), 
                  "Cannot convert " + arguments[1].first.toString() + " to Foo");
      check_error(arguments[1].second->isSingleton());
      FooId foo((FooId)arguments[1].second->getSingletonValue());
      
      BazId instance = (new Baz(planDb, objectType, objectName))->getId();
      instance->constructor(bar, foo);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // multidot.nddl:23 apred
  Baz::apred::apred(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Baz::apred::apred(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Baz::apred::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(predFoo.isNoId()){
      predFoo = addParameter(ObjectDomain("Foo"), "predFoo");
      completeObjectParam(Foo, predFoo);
    }
    if (autoClose)
      close();
  }
  
  
  
  // multidot.nddl:27 bpred
  Baz::bpred::bpred(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Baz::bpred::bpred(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Baz::bpred::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(predBar.isNoId()){
      predBar = addParameter(ObjectDomain("Bar"), "predBar");
      completeObjectParam(Bar, predBar);
    }
    if (autoClose)
      close();
  }
  
  
  // multidot.nddl:32 apred
  class Baz$apred$0$0: public RuleInstance {
  public:
    Baz$apred$0$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Baz$apred$0, Baz$apred$0$0, Baz.apred, "multidot.nddl,32");
  
  void Baz$apred$0$0::handleExecute() {
    slave(Baz::bpred, Baz.bpred, bp, LabelStr("meets"));
    sameObject(object, bp);
    meets(this, bp);
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("object"), std::string("myBar.m_foo"), false));
      vars.push_back(varFromObject(std::string("object"), std::string("myfoo"), false));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("bp")), std::string("predBar.m_foo")));
      vars.push_back(var(getId(),std::string("predFoo")));
      rule_constraint(eq, vars);
    }
  }
  
  
  // multidot.nddl:39 Mumble
  Mumble::Mumble(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Mumble", name, true) {
  }
  Mumble::Mumble(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Mumble::Mumble(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Mumble", name, true) {}
  Mumble::Mumble(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Mumble::handleDefaults(bool autoClose) {
    check_error(myBaz.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  // multidot.nddl:39 Mumble
  void Mumble::constructor(const BazId& baz) {
    myBaz = addVariable(BazDomain(baz, "Baz"), "myBaz");
  }
  
  // multidot.nddl:39 Mumble
  class MumbleFactory3: public ConcreteObjectFactory {
  public:
    MumbleFactory3(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<ConstructorArgument>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0].second, 
                                                TypeFactory::baseDomain("Baz")), 
                  "Cannot convert " + arguments[0].first.toString() + " to Baz");
      check_error(arguments[0].second->isSingleton());
      BazId baz((BazId)arguments[0].second->getSingletonValue());
      
      MumbleId instance = (new Mumble(planDb, objectType, objectName))->getId();
      instance->constructor(baz);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // multidot.nddl:46 mumbPred
  Mumble::mumbPred::mumbPred(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Mumble::mumbPred::mumbPred(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Mumble::mumbPred::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(m_foo.isNoId()){
      m_foo = addParameter(ObjectDomain("Foo"), "m_foo");
      completeObjectParam(Foo, m_foo);
    }
    if (autoClose)
      close();
  }
  
  
  // multidot.nddl:51 mumbPred
  class Mumble$mumbPred$1$0: public RuleInstance {
  public:
    Mumble$mumbPred$1$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Mumble$mumbPred$1, Mumble$mumbPred$1$0, Mumble.mumbPred, "multidot.nddl,51");
  
  void Mumble$mumbPred$1$0::handleExecute() {
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varFromObject(std::string("object"), std::string("myBaz.myBar.m_foo"), false));
      vars.push_back(var(getId(),std::string("m_foo")));
      rule_constraint(eq, vars);
    }
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("NDDL/test/compiler/multidot");
    id->reset(); // Reset prior data if present. 
    
    // Invoke commands to populate schema with type definitions
    id->addObjectType("Timeline","Object");
    id->addObjectType("Foo", "Object");
    id->addObjectType("Bar", "Object");
    id->addObjectType("Baz", "Timeline");
    id->addObjectType("Mumble", "Timeline");
    id->addPrimitive("int");
    id->addPrimitive("float");
    id->addPrimitive("bool");
    id->addPrimitive("string");
    id->addMember("Bar", "Foo", "m_foo");
    id->addMember("Baz", "Foo", "myfoo");
    id->addMember("Baz", "Bar", "myBar");
    id->addPredicate("Baz.apred");
    id->addMember("Baz.apred", "Foo", "predFoo");
    id->addPredicate("Baz.bpred");
    id->addMember("Baz.bpred", "Bar", "predBar");
    id->addMember("Mumble", "Baz", "myBaz");
    id->addPredicate("Mumble.mumbPred");
    id->addMember("Mumble.mumbPred", "Foo", "m_foo");
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Baz::apred::Factory);
    REGISTER_TOKEN_FACTORY(Baz::bpred::Factory);
    REGISTER_TOKEN_FACTORY(Mumble::mumbPred::Factory);
    REGISTER_TYPE_FACTORY(Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(Foo, ObjectDomain("Foo"));
    REGISTER_OBJECT_FACTORY(FooFactory0, Foo);
    REGISTER_TYPE_FACTORY(Bar, ObjectDomain("Bar"));
    REGISTER_OBJECT_FACTORY(BarFactory1, Bar:Foo);
    REGISTER_OBJECT_FACTORY(BarFactory1, Bar:Object);
    REGISTER_TYPE_FACTORY(Baz, ObjectDomain("Baz"));
    REGISTER_OBJECT_FACTORY(BazFactory2, Baz:Bar:Foo);
    REGISTER_OBJECT_FACTORY(BazFactory2, Baz:Bar:Object);
    REGISTER_OBJECT_FACTORY(BazFactory2, Baz:Object:Foo);
    REGISTER_OBJECT_FACTORY(BazFactory2, Baz:Object:Object);
    REGISTER_TYPE_FACTORY(Mumble, ObjectDomain("Mumble"));
    REGISTER_OBJECT_FACTORY(MumbleFactory3, Mumble:Baz);
    REGISTER_OBJECT_FACTORY(MumbleFactory3, Mumble:Timeline);
    // Allocate rules
    new Rule$Mumble$mumbPred$1();
    new Rule$Baz$apred$0();
    return id;
  }
  
}
