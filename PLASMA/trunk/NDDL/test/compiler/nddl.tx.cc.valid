// NDDL/test/compiler/nddl.tx.xml

#include "nddl.tx.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  
  // nddl.tx.nddl:1 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Foo::constructor() {
  }
  
  
  // nddl.tx.nddl:1 Foo
  DECLARE_DEFAULT_OBJECT_FACTORY(FooFactory0, Foo);
  
  
  // nddl.tx.nddl:2 pred
  Foo::pred::pred(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool close)
   : NddlToken(planDatabase, name, rejectable, false) {
    handleDefaults(close);
  }
  
  Foo::pred::pred(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(arg.isNoId()){
      arg = addParameter(IntervalIntDomain("int"), "arg");
    }
    if (autoClose)
      close();
  }
  
  
  Color ColorBaseDomain(){
    static Color sl_enum("Color");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("Red"));
      sl_enum.insert(LabelStr("Yellow"));
      sl_enum.insert(LabelStr("Blue"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("NDDL/test/compiler/nddl.tx");
    id->reset(); // Reset prior data if present. 
    
    // Invoke commands to populate schema with type definitions
    id->addPrimitive("int");
    id->addPrimitive("float");
    id->addPrimitive("bool");
    id->addPrimitive("string");
    id->addObjectType("Object");
    id->addObjectType("Timeline", "Object");
    id->addObjectType("NddlResource", "Object");
    id->addObjectType("Foo", "Timeline");
    id->addPredicate("Foo.pred");
    id->addMember("Foo.pred", "int", "arg");
    id->addEnum("Color");
    id->addValue("Color", LabelStr("Red"));
    id->addValue("Color", LabelStr("Yellow"));
    id->addValue("Color", LabelStr("Blue"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Foo::pred::Factory);
    REGISTER_TYPE_FACTORY(Foo, ObjectDomain("Foo"));
    REGISTER_OBJECT_FACTORY(FooFactory0, Foo);
    REGISTER_TYPE_FACTORY(Color, ColorBaseDomain());
    // Allocate rules
    return id;
  }
  
}
