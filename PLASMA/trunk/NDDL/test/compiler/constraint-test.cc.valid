// constraint-test.nddl

#include "constraint-test.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  TokenStates TokenStatesBaseDomain(){
    static TokenStates sl_enum("TokenStates");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("INACTIVE"));
      sl_enum.insert(LabelStr("ACTIVE"));
      sl_enum.insert(LabelStr("MERGED"));
      sl_enum.insert(LabelStr("REJECTED"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Timeline
  
  
  
  // Plasma.nddl:15 StringData
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "StringData", name, true) {
  }
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  StringData::StringData(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "StringData", name, true) {}
  StringData::StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void StringData::handleDefaults(bool autoClose) {
    if(data.isNoId()){
      data = addVariable(StringDomain("string"), "data");
    }
    if (autoClose)
      close();
  }
  
  
  // Plasma.nddl:15 StringData
  void StringData::constructor(const LabelStr& _data) {
    data = addVariable(StringDomain(_data, "string"), "data");
  }
  
  // Plasma.nddl:15 StringData
  class StringDataFactory0: public ConcreteObjectFactory {
  public:
    StringDataFactory0(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("string")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to string");
      check_error(arguments[0]->isSingleton());
      LabelStr _data((LabelStr)arguments[0]->getSingletonValue());
      
      StringDataId instance = (new StringData(planDb, objectType, objectName))->getId();
      instance->constructor(_data);
      instance->handleDefaults();
      return instance;
    }
  };
  
  ENUM ENUMBaseDomain(){
    static ENUM sl_enum("ENUM");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("foo"));
      sl_enum.insert(LabelStr("bar"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  Fruits FruitsBaseDomain(){
    static Fruits sl_enum("Fruits");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("X"));
      sl_enum.insert(LabelStr("Y"));
      sl_enum.insert(LabelStr("Z"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  
  // constraint-test.nddl:10 Sample
  Sample::Sample(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Sample", name, true) {
  }
  Sample::Sample(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Sample::Sample(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Sample", name, true) {}
  Sample::Sample(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Sample::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Sample::constructor() {
  }
  
  
  // constraint-test.nddl:10 Sample
  DECLARE_DEFAULT_OBJECT_FACTORY(SampleFactory1, Sample);
  
  
  // constraint-test.nddl:11 sample
  Sample::sample::sample(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool isFact, bool close)
   : NddlToken(planDatabase, name, rejectable, isFact, false) {
    handleDefaults(close);
  }
  
  Sample::sample::sample(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Sample::sample::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(p1.isNoId()){
      p1 = addParameter(IntervalIntDomain("int"), "p1");
    }
    if(p2.isNoId()){
      p2 = addParameter(IntervalIntDomain("int"), "p2");
    }
    if(p3.isNoId()){
      p3 = addParameter(IntervalIntDomain("int"), "p3");
    }
    if(p4.isNoId()){
      p4 = addParameter(IntervalDomain("float"), "p4");
    }
    if (autoClose)
      close();
    
    // Post parameter constraints
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("p1")));
      vars.push_back(var(getId(),std::string("p2")));
      token_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("p2")));
      vars.push_back(var(getId(),std::string("p3")));
      token_constraint(subsetOf, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("p2")));
      vars.push_back(predicateVariable(IntervalIntDomain(10, 20, "int")));
      token_constraint(subsetOf, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("p4")));
      vars.push_back(predicateVariable(IntervalDomain(1.0, 2.0, "float")));
      token_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("p2")));
      vars.push_back(predicateVariable(IntervalDomain(11.0, 18.0, "float")));
      token_constraint(eq, vars);
    }
  }
  
  
  // constraint-test.nddl:24 sample
  class Sample$sample$0$0: public RuleInstance {
  public:
    Sample$sample$0$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Sample$sample$0, Sample$sample$0$0, Sample.sample, "constraint-test.nddl,24");
  
  void Sample$sample$0$0::handleExecute() {
    objectVar(Sample, s, false, false);
    localVar(IntervalIntDomain(), lv1, false);
    localVar(IntervalIntDomain(), lv2, false);
    localVar(FruitsBaseDomain(), f, false);
    slave(Sample::sample, Sample.sample, sample, LabelStr("any"));
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("s")));
      rule_constraint(exists, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("p1")));
      vars.push_back(var(getId(),std::string("p2")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("p2")));
      vars.push_back(var(getId(),std::string("p3")));
      rule_constraint(subsetOf, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("p2")));
      vars.push_back(ruleVariable(IntervalIntDomain(10, 20, "int")));
      rule_constraint(subsetOf, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("p1")));
      vars.push_back(var(getId(),std::string("p2")));
      vars.push_back(var(getId(),std::string("p3")));
      vars.push_back(var(getId(),std::string("p4")));
      rule_constraint(veryLongConstraint, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("lv1")));
      vars.push_back(var(getId(),std::string("lv2")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("lv1")));
      vars.push_back(var(getId(),std::string("p1")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("start")));
      vars.push_back(varfromtok(tok(getId(), std::string("sample")), std::string("start")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("object")));
      vars.push_back(varfromtok(tok(getId(), std::string("sample")), std::string("object")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("f")));
      vars.push_back(ruleVariable(SymbolDomain(listFromString("X$Z$",false), "Fruits")));
      rule_constraint(SubsetOf, vars);
    }
  }
  
  
  // constraint-test.nddl:43 World
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "World", name, true) {
  }
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  World::World(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "World", name, true) {}
  World::World(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void World::handleDefaults(bool autoClose) {
    check_error(sample.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  
  // constraint-test.nddl:45 initialState
  World::initialState::initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool isFact, bool close)
   : NddlToken(planDatabase, name, rejectable, isFact, false) {
    handleDefaults(close);
  }
  
  World::initialState::initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void World::initialState::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // constraint-test.nddl:43 World
  void World::constructor() {
    sample = addVariable(SampleDomain((new Sample(m_id, "sample"))->getId(), "Sample"), "sample");
    Id<Sample>(singleton(sample))->constructor();
    Id<Sample>(singleton(sample))->handleDefaults();
  }
  
  // constraint-test.nddl:43 World
  class WorldFactory2: public ConcreteObjectFactory {
  public:
    WorldFactory2(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 0);
      WorldId instance = (new World(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  // constraint-test.nddl:51 initialState
  class World$initialState$1$0: public RuleInstance {
  public:
    World$initialState$1$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$World$initialState$1, World$initialState$1$0, World.initialState, "constraint-test.nddl,51");
  
  void World$initialState$1$0::handleExecute() {
    slave(Sample::sample, Sample.sample, s, LabelStr("any"));
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(ruleVariable(SymbolDomain(LabelStr("foo"), "ENUM")));
      vars.push_back(ruleVariable(SymbolDomain(LabelStr("foo"), "ENUM")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(ruleVariable(StringDomain(LabelStr("bing"), "string")));
      vars.push_back(ruleVariable(StringDomain(LabelStr("baz"), "string")));
      rule_constraint(neq, vars);
    }
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::instance("constraint-test");
    // Register Constraints
    // Invoke commands to populate schema with type definitions
    id->addObjectType("Timeline","Object");
    id->addObjectType("StringData", "Object");
    id->addObjectType("Sample", "Timeline");
    id->addObjectType("World", "Timeline");
    id->addEnum("TokenStates");
    id->addMember("StringData", "string", "data");
    id->addEnum("ENUM");
    id->addEnum("Fruits");
    id->addPredicate("Sample.sample");
    id->addMember("Sample.sample", "int", "p1");
    id->addMember("Sample.sample", "int", "p2");
    id->addMember("Sample.sample", "int", "p3");
    id->addMember("Sample.sample", "float", "p4");
    id->addMember("World", "Sample", "sample");
    id->addPredicate("World.initialState");
    id->addValue("TokenStates", LabelStr("INACTIVE"));
    id->addValue("TokenStates", LabelStr("ACTIVE"));
    id->addValue("TokenStates", LabelStr("MERGED"));
    id->addValue("TokenStates", LabelStr("REJECTED"));
    id->addValue("ENUM", LabelStr("foo"));
    id->addValue("ENUM", LabelStr("bar"));
    id->addValue("Fruits", LabelStr("X"));
    id->addValue("Fruits", LabelStr("Y"));
    id->addValue("Fruits", LabelStr("Z"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Sample::sample::Factory);
    REGISTER_TOKEN_FACTORY(World::initialState::Factory);
    REGISTER_TYPE_FACTORY(Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(TokenStates, TokenStatesBaseDomain());
    REGISTER_TYPE_FACTORY(Timeline, ObjectDomain("Timeline"));
    REGISTER_TYPE_FACTORY(StringData, ObjectDomain("StringData"));
    REGISTER_OBJECT_FACTORY(StringDataFactory0, StringData:string);
    REGISTER_TYPE_FACTORY(ENUM, ENUMBaseDomain());
    REGISTER_TYPE_FACTORY(Fruits, FruitsBaseDomain());
    REGISTER_TYPE_FACTORY(Sample, ObjectDomain("Sample"));
    REGISTER_OBJECT_FACTORY(SampleFactory1, Sample);
    REGISTER_TYPE_FACTORY(World, ObjectDomain("World"));
    REGISTER_OBJECT_FACTORY(WorldFactory2, World);
    // Allocate rules
    new Rule$Sample$sample$0();
    new Rule$World$initialState$1();
    return id;
  }
  
}
