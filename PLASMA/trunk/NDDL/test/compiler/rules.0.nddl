// Include prior model file, re-using the definition of Navigator
#include "classes.2.nddl"

// Define the rules that must be obeyed to satisfy an At predicate
Navigator::At{
 // The next statement, meets, has the following effects:
 // 1. Introduce a subgoal token - instance of Going predicate.
 // 2. Creates a constraint such that 'end == successor.start' where end is the end timepoint of this At token.
 // 3. Creates a constraint such that 'object == successor.object' where object is the object variable of this At token.
 meets(object.Going successor);

 // This next statement adds a constraint such that 'sucessor.from == location' which is a relation between arguments of
 // the respective At and Going predicates.
 eq(successor.from, location);

 // The next statement, met_by, has the following effects:
 // 1. Introduce a subgoal token - instance of Going predicate.
 // 2. Creates a constraint such that 'start == predecessor.end' where start is the start timepoint of this At token.
 // 3. Creates a constraint such that 'object == predecessor.object' where object is the object variable of this At token.
 met_by(object.Going predecessor);
 eq(predecessor.to, location);
}

// Similarly, we define the rules from the perspective of the Going predicate
Navigator::Going{
 meets(object.At successor);
 eq(from, successor.location);

 met_by(object.At predecessor);
 eq(to, predecessor.location);
}