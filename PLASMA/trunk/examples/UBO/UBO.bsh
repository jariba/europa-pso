// UBO.bsh

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.JInternalFrame;
import org.ops.ui.util.Util;
import org.ops.ui.PSDesktop;
import psengine.*;
import org.ops.ui.mouse.*;
import org.ops.ui.gantt.*;
import org.ops.ui.chart.*;
import org.ops.ui.solver.*;
import UBO.*;

int month = GregorianCalendar.SEPTEMBER, day = 11; 
GregorianCalendar start = new GregorianCalendar(2006,month,day,0,0);
GregorianCalendar end = new GregorianCalendar(2006,month,day,1,30);

void usingCodeGeneration()
{
	cwd = bsh.cwd;
    psengine.loadModel(cwd+"/libUBO_o.so");
    psengine.executeScript("nddl-xml-txn",cwd+"/UBO-initial-state.xml",true/*isFile*/);		
}

void usingXmlInterpreter()
{
	cwd = bsh.cwd;
    String nddlModel = cwd+"/UBO-initial-state.xml";
    psengine.executeScript("nddl-xml",nddlModel,true/*isFile*/);
}

void usingInterpreter()
{
	cwd = bsh.cwd;
    String nddlModel = cwd+"/UBO-initial-state.nddl";
    psengine.executeScript("nddl",nddlModel,true/*isFile*/);
}

void initPSEngine()
{
	//usingCodeGeneration();
	//usingXmlInterpreter();
	usingInterpreter();
}

void showResourceProfiles()
{
    resourceFrame = desktop.makeResourcesFrame("CapacityResource",start);
    resourceFrame.setLocation(0,180);
    resourceFrame.setSize(500,300);	
}

void setupDesktop()
    throws Exception
{
    ActionDetailsPanel dp = (ActionDetailsPanel)desktop.makeDetailsFrame().getContentPane().getComponent(0);
    ActionViolationsPanel vp = (ActionViolationsPanel)desktop.makeViolationsFrame().getContentPane().getComponent(0);

    JInternalFrame ganttFrame = desktop.makeResourceGanttFrame("ActivityTimeline",start,end);
    ganttFrame.setLocation(0,0);
    ganttFrame.setSize(700,300);
    PSGantt gantt = (PSGantt)ganttFrame.getContentPane().getComponent(0);
    gantt.addMouseListener(dp);    
    gantt.addMouseListener(vp);  
    
    //desktop.showTokens(psengine.getObjectsByType("ActivityTimeline").get(0));
    showResourceProfiles();    
}


UBOSolverListener listener;

void showHistory()
{
    String[] fields1 = {"toString"};
    desktop.makeTableFrame("Decision History",listener.getDecisionHistory(),fields1);
    String[] fields2 = {"StepNumber","RemainingTreeSize","CurrentTree","CurrentPlan"};
    desktop.makeTableFrame("Plan History",listener.getPlanHistory(),fields2);
}

IFlatIRelaxSolver runIFIR(long timeout,int bound, boolean usePSResources)
{
	s = new IFlatIRelaxSolver();
	s.solve(psengine,timeout,bound,usePSResources);
	RCPSPUtil.ground(s.getActivities());
	
	return s;
}

void undoIFIR(IFlatIRelaxSolver s)
{
	RCPSPUtil.undoGround(s.getActivities());
    s.undoSolve();    
}

void showResourceTokens()
{
  qry = "select key,toString from psengine.PSToken where name like 'Capacity%'";
  desktop.makeTableFrame("Resource Tokens",Util.SWIGList(psengine.getTokens()), qry);	
}

void printProfile(PSResource r)
{
	PSResourceProfile prof = r.getLevels();
	PSTimePointList times = prof.getTimes();
	for (int i=0; i<times.size(); i++) {
		int time = times.get(i);
		print(times.get(i)+" ["+prof.getLowerBound(time)+","+prof.getUpperBound(time)+"]");
	}
}

//main()

System.out.println("HI");
horizonStart = 0;
horizonEnd = 1000;
maxSteps = 1000;
config = "PlannerConfig.xml";
PSSolver solver;

try {
    initPSEngine();
    solver = psengine.createSolver(config);
    solver.configure(horizonStart,horizonEnd);
    solverDialog = desktop.makeSolverDialog(solver);

	// Run built-in solver to activate ActivityTimeline::act tokens used for gantt display
    // Priorities are set up in PlannerConfig.xml to make sure that happens first
    // TODO: hardcoded 24 steps, it'll only work for problem with 11 activities

    System.out.println("Starting...");
    
    for (int i=0;i<24;i++)
    	solver.step();

    listener = new UBOSolverListener();
    //solverDialog.addListener(listener);
}    
catch (Exception e) {
  	System.err.println("Failed Initializing : "+e.getMessage());
}

//ifirSolver = runIFIR(60000/*timeout*/,47/*bound*/,false/*usePSResources*/);
/*
setupDesktop();
howHistory();
undoIFIR(ifirSolver);
*/

