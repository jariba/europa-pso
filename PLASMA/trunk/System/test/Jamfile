SubDir PLASMA System test ;

if ! $(PLASMA_READY) {

#
# TRANSACTION TESTS
#

ModuleObjects DefaultTestInit.cc : System ;
ModuleObjects runTransactionTest.cc : System ;
ModuleMain runModel : runModel.cc : System ;

local model ;
for model in
	basic-types.nddl Rover-transaction.nddl basic-model-transaction.nddl k9.backtrack.moderate-transaction.nddl
	k9-transaction.nddl path-filter-transaction.nddl foreach-transaction.nddl force-object-distribution.nddl 
	resource-backtrack-test.nddl rejection.nddl constrain-transaction.nddl parent-predicate.nddl
	EOS-backtrack-test.nddl k9-initial.nddl
	backtr.nddl better-res.nddl CAPER.nddl
{
  local exe = $(model:S=) ;
  local hh = $(model:S=.hh) ;
  local cc = [ FGristFiles $(model:S=.cc) ] ;
  local xml = $(model:S=.xml) ;
  local o = $(cc:S=.o) ;
  local lib = $(model:S=) ;

  # create .hh, .cc, .o, and .xml for a .nddl
  Includes $(cc) : $(hh) ;
  NddlCompiler $(hh) $(cc) : $(model) ;
  ModuleObjects $(cc) : NDDL ;

  # create planner with linked model
  ModuleMain $(exe) : $(o) runTransactionTest.o DefaultTestInit.o : System ;
  RunModuleMain run-$(exe) : $(exe) : $(xml) ;
  LocalDepends run-nddl-planner-tests : run-$(exe) ;

  # create planner with dlopen model
  ModuleSharedLibrary $(lib) : $(o) : NDDL ;
  local variant ;
  for variant in $(VARIANTS) {
    local libname = [ FModuleSharedLibraryName $(lib) : $(variant) ] ;
    local run_variant_name = [ FVariantName runModel : $(variant) ] ;
    run_variant_name = $(run_variant_name)_rt ;
    local arguments = $(PWD)$(SLASH)$(SUBDIR)$(SLASH)$(libname) $(xml) ;
    RunModuleMain run-model-$(exe) : runModel : $(arguments) ;
    Depends RUN_$(run_variant_name).$(arguments:J=.) : $(libname) $(xml) ;
    LocalDepends run-model-tests : run-model-$(exe) ;
  }
}

#
# PERFORMANCE TESTS
#

Main stackGenerator : stackGenerator.cc ;
ObjectHdrs stackGenerator.cc : [ FDirName $(PLASMA) Utils core ] ;
MakeLocate [ FAppendSuffix stackGenerator : $(SUFEXE) ] : $(SUBDIR) ;

rule FSatelliteModel {
  local arguments = $(1) ;
  return satellites-$(arguments:J=-).nddl ;
}

rule GenerateStack {
  local output = $(1) ;
  local generator = $(2) ;
  local arguments = $(3) ;
  Depends $(output) : $(generator) ;
  ARGUMENTS on $(output) = $(arguments) ;
  MakeLocate $(output) : $(SUBDIR) ;
}

actions GenerateStack {
  $(2) $(ARGUMENTS) $(1:S=) 
}

ModuleObjects runTest.cc : System ;

local numSatellites ;
for numSatellites in 1 10 50 100 {
  local numTargets ;
  for numTargets in 10 {
    local numParams ;
    for numParams in 0 10 {
      local numParamChoices ;
      for numParamChoices in 0 10 {
        if $(numParamChoices) <= $(numParams) {
          local model = [ FSatelliteModel $(numSatellites) $(numTargets) $(numParams) $(numParamChoices) ] ;
          local exe = $(model:S=) ;
          GenerateStack [ FGristFiles $(model) ] : [ FAppendSuffix stackGenerator : $(SUFEXE) ] : $(numSatellites) $(numTargets) $(numParams) $(numParamChoices) ;
          NddlMain $(exe) : runTest.o : $(model) : System : performance-tests ;
          RunModuleMain run-$(exe) : $(exe) ;
          LocalDepends run-performance-tests : run-$(exe) ;
        }
      }
    }
  }
}

#
# PLANNER CONTROL TESTS
#
ModuleMain runPlannerControlTest : runPlannerControlTest.cc : System : planner-control-tests ;
LinkSharedLibrariesNoDeps runPlannerControlTest_g_rt : $(DLOPEN_LIBRARY) ;

#
# TestLanguage TEST
#

SubInclude PLASMA System test testLang ;

} # PLASMA_READY
