SubDir PLASMA System test ;

if ! $(PLASMA_READY) {

#
# TRANSACTION TESTS
#

if $(LIBRARIES) = SHARED {
  EXTRA_DEFS = -DSTANDALONE ;
  ModuleNamedObjects runProblem_standalone : runProblem.cc : System ;
  ModuleMain runProblem : runProblem_standalone.o : System ;
}

EXTRA_DEFS = ;
ModuleNamedObjects runProblem_link : runProblem.cc : System ;

# Not working due at least to gnats 2583
# EOS-backtrack-test.nddl 

local model ;
for model in
        basic-types.nddl Rover-transaction.nddl basic-model-transaction.nddl 
        k9.backtrack.moderate-transaction.nddl k9-transaction.nddl 
        path-filter-transaction.nddl foreach-transaction.nddl force-object-distribution.nddl 
        resource-backtrack-test.nddl rejection.nddl constrain-transaction.nddl 
        parent-predicate.nddl k9-initial.nddl backtr.nddl 
        better-res.nddl CAPER.nddl monkey1monkey-transaction.nddl
	basic-model-backtrack.nddl
{
  local exe = $(model:S=) ;
  local hh = $(model:S=.hh) ;
  local cc = [ FGristFiles $(model:S=.cc) ] ;
  local xml = $(model:S=.xml) ;
  local o = $(cc:S=.o) ;
  local lib = $(model:S=) ;

  # create .hh, .cc, .o, and .xml for a .nddl
  Includes $(cc) : $(hh) ;
  NddlCompiler $(hh) $(cc) : $(model) ;
  ModuleObjects $(cc) : NDDL ;
  #ModuleObjects $(cc) : NDDL Aver ;

  # create planner with linked model
  ModuleMain $(exe) : $(o) runProblem_link.o : System Aver ;
  RunModuleMain run-$(exe) : $(exe) : $(xml) ;
  LocalDepends run-nddl-planner-tests : run-$(exe) ;

  if $(LIBRARIES) = SHARED {
    # create planner with dlopen model
    ModuleSharedLibrary $(lib) : $(o) : NDDL ;
    local variant ;
    for variant in $(VARIANTS) {
      local libname = [ FModuleSharedLibraryName $(lib) : $(variant) ] ;
      local run_variant_name = [ FVariantName runProblem : $(variant) ] ;
      run_variant_name = $(run_variant_name)_rt ;
      local arguments = $(PWD)$(SLASH)$(SUBDIR)$(SLASH)$(libname) $(xml) ;
      Depends run-problem-$(exe) : $(libname) ;
      RunModuleMain run-problem-$(exe) : runProblem : $(arguments) ;
      Depends RUN_$(run_variant_name).$(arguments:J=.) : $(libname) $(xml) ;
      LocalDepends run-model-tests : run-problem-$(exe) ;
    }
    Depends run-all-tests : run-model-tests ;
  }
}

#
# PERFORMANCE TESTS
#

Main stackGenerator : stackGenerator.cc ;
ObjectHdrs stackGenerator.cc : [ FDirName $(PLASMA) Utils core ] ;
MakeLocate [ FAppendSuffix stackGenerator : $(SUFEXE) ] : $(SUBDIR) ;

rule FSatelliteModel {
  local arguments = $(1) ;
  return satellites-$(arguments:J=-).nddl ;
}

rule GenerateStack {
  local output = $(1) ;
  local generator = $(2) ;
  local arguments = $(3) ;
  Depends $(output) : $(generator) ;
  ARGUMENTS on $(output) = $(arguments) ;
  MakeLocate $(output) : $(SUBDIR) ;
}

actions GenerateStack {
  $(2) $(ARGUMENTS) $(1:S=) 
}

local numSatellites ;
#for numSatellites in 1 10 50 100 {
for numSatellites in 1 {
  local numTargets ;
# numTargets == 1 has no plan, so do not add it here.
#  --wedgingt@email.arc.nasa.gov 2004 Dec 10
#  for numTargets in 10 50 100 200 300 400 500 1000 2000 {
  for numTargets in 10 50 100 1000 {
    local numParams ;
#    for numParams in 0 10 {
     for numParams in 0 {
      local numParamChoices ;
#      for numParamChoices in 0 10 {
       for numParamChoices in 0 {
        if $(numParamChoices) <= $(numParams) {
          local model = [ FSatelliteModel $(numSatellites) $(numTargets) $(numParams) $(numParamChoices) ] ;
          local exe = $(model:S=) ;
          local xml = $(model:S=.xml) ;
          GenerateStack [ FGristFiles $(model) ] : [ FAppendSuffix stackGenerator : $(SUFEXE) ] : $(numSatellites) $(numTargets) $(numParams) $(numParamChoices) ;
          NddlMain $(exe) : runProblem_link.o : $(model) : System : performance-tests ;
          RunModuleMain run-$(exe) : $(exe) : $(xml) : time ;
          LocalDepends run-performance-tests : run-$(exe) ;
        }
      }
    }
  }
}

#
# PLANNER CONTROL TESTS
#
ModuleMain runPlannerControlTest : runPlannerControlTest.cc :  : planner-control-tests ;
LinkSharedLibrariesNoDeps runPlannerControlTest_g_rt : $(DLOPEN_LIBRARY) ;


} # PLASMA_READY
