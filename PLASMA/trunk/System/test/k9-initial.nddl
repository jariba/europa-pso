// /home/sailesh/work/EXPERIMENTS/CPlan1.5/model/k9.ddl

#include "NddlWorld.nddl"

class Location {

    predicate NotTracked {
      Location target;
      eq(object, target);
    }

    predicate trackstart {
      Location target;
      eq(object, target);
    }

    predicate Tracked {
      Location target;
      eq(object, target);
    }

    predicate trackstop {
      Location target;
      eq(object, target);
    }
}



class Path {
  Location m_from, m_to;

  Path(Location from, Location to) {
    m_from = from;
    m_to = to;
  }  
}

class Position {  
  predicate At {
    Location location;
  }
  
  predicate navigate {
    Location from;
    Location to;
    neq(from, to);
    eq(duration, 1);
  }  
}

Position::At{
  meets(navigate a);
  eq(location , a.from);
  
  met_by(navigate b);
  eq(location, b.to);
}

    

Position::navigate{

  Path path : {
    eq(path.m_from, from);
    eq(path.m_to, to);
  };

  meets(At a);
  eq(to , a.location);
  
  met_by(At b);
  eq(b.location, from);

}

class Tracker{

  predicate TrackingOff {
  }

  predicate trackloadgroup {
  }

  predicate LandmarksDefined {
  }

  predicate StartTracking {    
  }

  predicate TrackingOn {
  }

  predicate trackfreeze {
  }

  predicate TrackingFrozen {
  }

  predicate trackunfreeze {
  }

}

class OpportunisticScience {

  predicate OppSciIdle {   
  }

  predicate oppscidefineproc {
  }

  predicate OppSciProcDefined {
  }

  predicate oppscisetparams {
  }

  predicate OppSciParamsSet {
  }

  predicate oppscilooknow {
    Location target;
    Location at_loc;
    neq(target, at_loc);
  }

  predicate OppSciDoneLookNow {
    Location  target;
    Location at_loc;
    neq(target, at_loc);
  }

  predicate oppscigetstatus {
    Location  target;
    Location at_loc;
    neq(target, at_loc);
  }
}

class CHAMP {
  predicate IPIdle {
  }
  
  predicate ipgetname {
    Location target;
    Location at_loc;
    ////eq(duration,[1 +inf]);
  }

  predicate IPHaveName {
    Location target;
    Location at_loc;
  }

  predicate ipsettarget {
    Location target;
    Location at_loc;
    //eq(duration,[1 +inf]);
  }
  
  predicate IPTargetSet {
    Location target;
    Location at_loc;
  }

  predicate ipplaceinstrument {
    Location target;
    Location at_loc;
    //eq(duration,[1 +inf]);
  }

  predicate IPDonePlaceInstrument {
    Location target;
    Location at_loc;
  }

  predicate ipgetstatus {
    Location target;
    Location at_loc;
    //eq(duration,[1 +inf]);
  }
}

class Rover {

  Position m_position;
  Tracker m_tracker;
  OpportunisticScience m_oppsci;
  CHAMP m_champ;

  Rover() {    
    m_position = new Position() ;
    m_tracker = new Tracker() ;
    m_oppsci = new OpportunisticScience ();
    m_champ = new CHAMP ();
  }

}

// Now establish the initai state
NddlWorld world = new NddlWorld(0, 100, 500);
Rover rover = new Rover();
Location l1 = new Location();
Location l2 = new Location();
Location l3 = new Location();
Location l4 = new Location();
Location l5 = new Location();
Location l6 = new Location();
Path p1 = new Path(l1, l2);
Path p2 = new Path(l1, l3);
Path p3 = new Path(l2, l5);
Path p4 = new Path(l5, l6);
Path p5 = new Path(l3, l6);
Path p6 = new Path(l2, l3);

close();
goal(Position.At a);
a.activate();
a.object.specify(rover.m_position);

goal(Position.At b);
b.activate();
b.object.specify(rover.m_position);

leq(world.m_horizonStart, a.start);
leq(world.m_horizonStart, b.start);
leq(world.m_horizonEnd, a.end);
leq(world.m_horizonEnd, b.end);

a.location.specify(l1);
b.location.specify(l5);

leq(a.end, b.start);