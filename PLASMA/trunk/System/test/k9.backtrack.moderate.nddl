
/*;;; Problem statistics
;;; Number of targets: 5 
;;;   Utilities: 217 201 191 98 95 
;;;   Sum utility: 802 
;;; Number of paths: 34 
;;;   Max Consumption: 6299.68 */

#include "k9.model.backtrack.moderate.nddl"
#include "NddlWorld.nddl"

class World extends NddlWorld {
Rover m_rover;

//Locations
Target L0_target; 
CHAMP_Accessable ch_L0_target;
OppSci_Accessable op_L0_target;
Target L1_target; 
CHAMP_Accessable ch_L1_target;
OppSci_Accessable op_L1_target;
Target L2_target; 
CHAMP_Accessable ch_L2_target;
OppSci_Accessable op_L2_target;
Target L3_target; 
CHAMP_Accessable ch_L3_target;
OppSci_Accessable op_L3_target;
Target L4_target; 
CHAMP_Accessable ch_L4_target;
OppSci_Accessable op_L4_target;
Location D14;
Location D13;
Location C1;
Location L4;
Location L3;
Location L2;
Location L1;
Location L0;
Location start;

//Paths
Path L4D14;
Path D14L4;
Path L2D13;
Path D13L2;
Path C1D14;
Path D14C1;
Path L3D14;
Path D14L3;
Path D14L1;
Path L1D14;
Path C1D13;
Path D13C1;
Path L4D13;
Path D13L4;
Path D13L0;
Path L0D13;
Path L4C1;
Path C1L3;
Path L3C1;
Path C1L4;
Path C1L2;
Path L2C1;
Path L4L1;
Path L1L4;
Path L4start;
Path startL4;
Path L3L2;
Path L2L3;
Path L2L0;
Path L0L2;
Path L1start;
Path startL1;
Path L0start;
Path startL0;

predicate initialState{} 

  World(){ 
 super(0,500,5000); 
    m_rover = new Rover(0,500,1000);

//Location construction
D14 = new Location();
D13 = new Location();
C1 = new Location();
L4 = new Location();
L3 = new Location();
L2 = new Location();
L1 = new Location();
L0 = new Location();
start = new Location();

L0_target = new Target();
ch_L0_target = new CHAMP_Accessable(L0, L0_target);
op_L0_target = new OppSci_Accessable(L0, L0_target);
L1_target = new Target();
ch_L1_target = new CHAMP_Accessable(L1, L1_target);
op_L1_target = new OppSci_Accessable(L1, L1_target);
L2_target = new Target();
ch_L2_target = new CHAMP_Accessable(L2, L2_target);
op_L2_target = new OppSci_Accessable(L2, L2_target);
L3_target = new Target();
ch_L3_target = new CHAMP_Accessable(L3, L3_target);
op_L3_target = new OppSci_Accessable(L3, L3_target);
L4_target = new Target();
ch_L4_target = new CHAMP_Accessable(L4, L4_target);
op_L4_target = new OppSci_Accessable(L4, L4_target);

//Paths
L4D14 = new Path(L4, D14);
D14L4 = new Path(D14, L4);
L2D13 = new Path(L2, D13);
D13L2 = new Path(D13, L2);
C1D14 = new Path(C1, D14);
D14C1 = new Path(D14, C1);
L3D14 = new Path(L3, D14);
D14L3 = new Path(D14, L3);
D14L1 = new Path(D14, L1);
L1D14 = new Path(L1, D14);
C1D13 = new Path(C1, D13);
D13C1 = new Path(D13, C1);
L4D13 = new Path(L4, D13);
D13L4 = new Path(D13, L4);
D13L0 = new Path(D13, L0);
L0D13 = new Path(L0, D13);
L4C1 = new Path(L4, C1);
C1L3 = new Path(C1, L3);
L3C1 = new Path(L3, C1);
C1L4 = new Path(C1, L4);
C1L2 = new Path(C1, L2);
L2C1 = new Path(L2, C1);
L4L1 = new Path(L4, L1);
L1L4 = new Path(L1, L4);
L4start = new Path(L4, start);
startL4 = new Path(start, L4);
L3L2 = new Path(L3, L2);
L2L3 = new Path(L2, L3);
L2L0 = new Path(L2, L0);
L0L2 = new Path(L0, L2);
L1start = new Path(L1, start);
startL1 = new Path(start, L1);
L0start = new Path(L0, start);
startL0 = new Path(start, L0);

     }
} 

 World::initialState{ 
   leq(object.m_horizonStart, start); 
leq(end, object.m_horizonEnd);
contains(Position.At a);
eq(a.location, object.start);
eq(a.start, 0);
hasAncestor(a.object, object.m_rover);

 contains(CHAMP.ipgetstatus ipg);
  eq(ipg.target, object.L4_target);
//  leq(a.end, ipg.start);
  a before ipg;

contains(Tracker.TrackingOff toff);
eq(toff.start, 0);
hasAncestor(toff.object, object.m_rover);
contains(OpportunisticScience.OppSciIdle oidle);
eq(oidle.start, 0);
hasAncestor(cidle.object, object.m_rover);
contains(CHAMP.IPIdle cidle);
eq(cidle.start, 0);
hasAncestor(cidle.object, object.m_rover);

//target tracking initialization
contains(Target.NotTracked nt_L0_target);
eq(nt_L0_target.target, object.L0_target);
eq(nt_L0_target.start, 0);

contains(Target.NotTracked nt_L1_target);
eq(nt_L1_target.target, object.L1_target);
eq(nt_L1_target.start, 0);

contains(Target.NotTracked nt_L2_target);
eq(nt_L2_target.target, object.L2_target);
eq(nt_L2_target.start, 0);

contains(Target.NotTracked nt_L3_target);
eq(nt_L3_target.target, object.L3_target);
eq(nt_L3_target.start, 0);

contains(Target.NotTracked nt_L4_target);
eq(nt_L4_target.target, object.L4_target);
eq(nt_L4_target.start, 0);

}

//EOF
