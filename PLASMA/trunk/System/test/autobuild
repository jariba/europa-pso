#!/bin/bash
# $Id: autobuild,v 1.87 2004-09-28 18:21:06 wedgingt Exp $
#
# Automatically build some variants of the PLASMA planner system

echo ''
echo 'PLASMA autobuild script'
echo ''
info=`uname -a; echo ''; g++ --version ; hostname ; pwd`
echo "$info"

# Usually, this is run via cron, which does not use the usual $PATH
OS="`uname -s`"
case "$OS" in
    Linux)
        CVS_HOME=/usr
        GCC_HOME=/usr
        JAM_HOME=/usr/local/jam2.4
        JAVA_HOME=/usr/java/j2sdk1.4.2_04
        ;;
    SunOS)
        CVS_HOME=/usr/local
        GCC_HOME=/usr/local/beta/gcc-3.2.2
        JAM_HOME=/usr/local/bin
        JAVA_HOME=/usr/local/j2sdk1.4.1
        ;;
esac

for x in "$CVS_HOME"/bin/cvs "$GCC_HOME"/bin/g++ "$JAM_HOME"/jam "$JAVA_HOME"/bin/javac "$GCC_HOME"/lib
do
  if test ! -x "$x"
  then
    echo ''
    echo "$0"': cannot find '"$x"
    exit 2
  fi
done

PATH="$JAVA_HOME"/bin:"$JAM_HOME":"$GCC_HOME"/bin:"$CVS_HOME"/bin:"$PATH"
export JAVA_HOME PATH

# Make sure that libstdc++.so is in this.
#   Cannot test for it since some installs don't create libstdc++.so
#     itself, but only with a version appended.
#   In general, may have to ask the compiler where the libraries are.
if test -z "$LD_LIBRARY_PATH"
then
    LD_LIBRARY_PATH="$GCC_HOME"/lib
else
    LD_LIBRARY_PATH="$LD_LIBRARY_PATH":"$GCC_HOME"/lib
fi
export LD_LIBRARY_PATH

# Address to mail messages to.
email=checkins@postdoc.arc.nasa.gov

# CVS info
CVS_RSH=ssh
CVSROOT='copernicus.arc.nasa.gov:/home/cvs/ISG-Repository'
export CVS_RSH CVSROOT

# For this to work, this script must always be called by its full path name.
startdir="`dirname $0`"
startdir="`cd $startdir; pwd`"
cd "$startdir"

# Don't run this script more than once in the same directory.
#   Should figure out a way to require at most one run on a computer at a time,
#     as that's the real requirement (related to the CVS tagging scheme).
if mkdir working
then
    # Remove the "lock" when this shell process exits.
    trap 'rmdir $startdir/working' 0
else
    echo ''
    echo "$0"': could not create lock directory; already running?'
    exit 1
fi


rm -rf Old
test -d Prior && mv Prior Old

# Refuse to run if a prior check out is present.
if test -d PLASMA -o -d Prior
then
  (echo "$info";
     echo '';
     echo 'PLASMA directory already present or configuration botch; aborting autobuild') | \
    Mail -s 'PLASMA Autobuild on '"`hostname`"' in '"`pwd`"' aborted' "$email"
  mkdir working/aborted
  exit 1
fi

mkdir Prior
mv cvs.PLASMA jam.* Prior/

# The (compilation) variants to build and test.
variants='DEV OPTIMIZED PROFILE'

# The different ways of building the libraries.
libmethods='STATIC NONE'

# Don't try to use X11 (mostly to prevent Purify from doing so)
DISPLAY=
export DISPLAY

# On Linux, debug memory allocation.
MALLOC_CHECK_=2
export MALLOC_CHECK_

# Apply limits; some compiles (on SunOS of NewPlan) have run computers out of swap space.
ulimit -c 300000
ulimit -d 2000000
ulimit -s 2000000
ulimit -v 2000000

# Print the limits so it is obvious what they are when something goes wrong.
ulimit -a

# Perform a cvs command, checking that it succeeds, etc., and send email if something goes wrong.
function cvsCmd() {
  if test "$1" != 'co' -a "$1" != 'rtag'
  then
    mkdir PLASMA/autobuild.bug
    (echo "$info"; echo ''; echo 'cvsCmd() called with unexpected arguments: '"$*") | \
        Mail -s 'PLASMA autobuild bug on '"`hostname`"' in '"`pwd`"' failed' "$email"
    mkdir working/failed
    exit 22
  fi
  echo Calling cvs $* at "`date`" ... >> cvs.PLASMA 2>&1
  cvs $* >> cvs.PLASMA 2>&1
  status=$?
  echo '"cvs '"$*"' in '"`pwd`"' exited '"$status"
  if test "$status" != 0
  then
    mkdir PLASMA/cvs.failed
    (echo "$info"; echo ''; echo '"cvs '"$*"' failed; aborting autobuild'; tail cvs.PLASMA) | \
        Mail -s 'PLASMA Autobuild cvs on '"`hostname`"' in '"`pwd`"' failed' "$email"
    mkdir working/failed
    exit "$status"
  fi
}

# Run jam with the given arguments, saving the output in a specific file
#   and complaining via email if something fails.
function jamCmd() {
  jam $args $1 > jam.$2.$var.$libmethod 2>&1
  status=$?
  echo 'jam '"$args $1"' in '"`pwd`"' exited '"$status"
  if test $status -ne 0
  then
    (echo "$info";
     echo '';
     echo 'PPW_Config='"$PPW_Config"'; export PPW_Config';
     echo 'jam '"$args $1"' in '"`pwd`"' exited '"$status";
     more jam.$2.$var.$libmethod < /dev/null) | \
        Mail -s 'PLASMA Autobuild jam '"$args $1"' on '"`hostname`"' failed' "$email"
    mkdir working/failed
    exit $status
  fi
}

# This tag - and all others used by this script - must be unique to
#   this computer, or two autobuild scripts running on different hosts
#   are likely to interfere with each other.
testingTag=AutobuildTesting_"`hostname | sed -e 's/[.].*//'`"

# This is needed if nothing under PLASMA has "$testingTag".
cvsCmd rtag -F "$testingTag" PLASMA/README
# Remove the prior testing tag before ...
cvsCmd rtag -d "$testingTag" PLASMA
# ... tagging the to-be-tested version:
cvsCmd rtag -rHEAD "$testingTag" PLASMA

# Now, for the primary purpose: run all the tests of all build variants.
for var in $variants
do
  for libmethod in $libmethods
  do
    cvsCmd co -r "$testingTag" PLASMA
    cd PLASMA
    args='-sVARIANTS='"$var"' -sLIBRARIES='"$libmethod"
    jamCmd '' build
    for target in run-all-tests clean
    do
      jamCmd $target $target
    done
    PPW_Config="$startdir"'/PLASMA/CBPlanner/component/sample-ppw-config'
    export PPW_Config
    jamCmd run-nddl-planner-tests withPPW
    jamCmd clean clean
    (echo "$info"; echo ''; echo 'PLASMA autobuild and tests of variant '"$var"' with library method '"$libmethod"' in '"`pwd`"' passed.';
        more jam.*.$var.$libmethod < /dev/null) | \
      Mail -s 'PLASMA Autobuild '"$var"' '"$libmethod"' on '"`hostname`"' passed' "$email"
    # Save the output files.
    mv -f jam.* ..
    cd ..
    # Remove everything so that each variant is tested completely independently.
    #   Should probably test everything without removing in between as well, but ...
    rm -rf PLASMA
  done
done

# All the tests have passed (or jamCmd would have exit'd this script)

tag=AutobuildPassed_"`hostname | sed -e 's/[.].*//'`"
prior="$tag"'_old'
# Make sure the prior tag is in CVS:
cvsCmd rtag -F "$prior" PLASMA/README
# ... before removing it:
cvsCmd rtag -d "$prior" PLASMA
# ... and changing it to the previous successful tag,
#   again after making sure that tag is in CVS:
cvsCmd rtag -rHEAD "$tag" PLASMA/README
cvsCmd rtag -F -r "$tag" "$prior" PLASMA
# ... and removing "$tag" so that any files that are later 'cvs remove'd are no longer tagged:
cvsCmd rtag -d "$tag" PLASMA

# Finally, tag the tested version to indicate it passed the tests:
cvsCmd rtag -r "$testingTag" "$tag" PLASMA

(echo "$info";
    echo '';
    echo "All builds, tests, and cleans passed for each variant (of $variants) and";
    echo "  each method of building the libraries (of $libmethods).";
    echo "Tagged: 'cvs rtag $tag'") | \
  Mail -s 'PLASMA Autobuild on '"`hostname`"' passed' "$email"

date > lastCompleted

exit 0
