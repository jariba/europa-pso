#!/bin/bash
# $Id: autobuild,v 1.92 2004-09-29 21:52:41 wedgingt Exp $ @email.arc.nasa.gov
#
# Automatically build most/all variants of the PLASMA planner system.

# $email is the address to mail messages to.
# If a user name or email address is given as an argument, send email to that
#   address instead, do not call cvs except to update and get diffs,
#   do not remove PLASMA, and require starting within an existing PLASMA checkout.
if test -z "$1"
then
    email=checkins@postdoc.arc.nasa.gov
    removePlasma=true
else
    email="$1"
    removePlasma=false
fi

echo ''
echo 'PLASMA autobuild script'
echo ''
info="Emailing to $email; removePlasma is $removePlasma`echo ''; uname -a; echo ''; g++ --version ; pwd ; echo ''`"
echo "$info"

# "Guess" where the programs that we need are, based on the operating system.
#   Almost certainly only works at NASA/Ames in Code IC.
OS="`uname -s`"
case "$OS" in
    [Ll][Ii][Nn][Uu][Xx])
        CVS_HOME=/usr
        GCC_ROOTDIR=/usr
        JAM_HOME=/usr/local/jam2.4
        JAVA_HOME=/usr/java/j2sdk1.4.2_04
        ;;
    [Ss][Uu][Nn][Oo][Ss])
        CVS_HOME=/usr/local
        GCC_ROOTDIR=/usr/local/beta/gcc-3.2.2
        JAM_HOME=/usr/local/beta/bin
        JAVA_HOME=/usr/local/j2sdk1.4.1
        ;;
esac

for x in "$CVS_HOME"/bin/cvs "$GCC_ROOTDIR"/bin/g++ "$JAM_HOME"/jam "$JAVA_HOME"/bin/javac "$GCC_ROOTDIR"/lib
do
  if test ! -x "$x"
  then
    echo ''
    echo "$0"': cannot find '"$x"
    exit 2
  fi
done

# Usually, this is run via cron, which does not use the usual $PATH
PATH="$JAVA_HOME"/bin:"$JAM_HOME":"$GCC_ROOTDIR"/bin:"$CVS_HOME"/bin:"$PATH"
export GCC_ROOTDIR JAVA_HOME PATH

# Make sure that libstdc++.so is in this.
#   Cannot easily test for it since some installs don't create libstdc++.so per se,
#     but only with a version number appended.
#   In general, may have to ask the compiler where the libraries are, which
#     only gcc/g++ supports (to my knowledge).
if test -z "$LD_LIBRARY_PATH"
then
    LD_LIBRARY_PATH="$GCC_ROOTDIR"/lib
else
    LD_LIBRARY_PATH="$LD_LIBRARY_PATH":"$GCC_ROOTDIR"/lib
fi
export LD_LIBRARY_PATH

# CVS info
CVS_RSH=ssh
CVSROOT='copernicus.arc.nasa.gov:/home/cvs/ISG-Repository'
export CVS_RSH CVSROOT

if "$removePlasma"
then
    # For this to work, this script must always be called by its full path name.
    startdir="`dirname $0`"
    startdir="`cd $startdir; pwd`"
    cd "$startdir"
else
    startdir="`pwd`"
    case "$startdir" in
    *PLASMA)
            ;;
    *)
            echo "$0"': run inside existing PLASMA checkout when giving email address'
            exit 22
            ;;
    esac
fi

# Don't run this script more than once in the same directory.
#   Should figure out a way to require at most one run on a computer at a time,
#     as that's the real requirement (related to the CVS tagging scheme).
if mkdir working
then
    # Remove the "lock" when this shell process exits.
    trap 'rmdir $startdir/working' 0
else
    echo ''
    echo "$0"': could not create lock directory; already running?'
    exit 1
fi

if "$removePlasma"
then
    rm -rf Old
    test -d Prior && mv Prior Old
    # Refuse to run if a prior check out is present.
    if test -d PLASMA -o -d Prior
    then
        (echo "$info";
            echo 'PLASMA directory already present or configuration botch; aborting autobuild') | \
                Mail -s 'PLASMA Autobuild on '"`hostname`"' in '"`pwd`"' aborted' "$email"
        mkdir working/aborted
        exit 1
    fi
    mkdir Prior
    mv cvs.PLASMA jam.* Prior/
fi

# The (compilation) variants to build and test.
variants='DEV OPTIMIZED PROFILE'

# The different ways of building the libraries.
libmethods='STATIC NONE'

# Don't try to use X11 (mostly to prevent Purify from doing so)
DISPLAY=
export DISPLAY

# On Linux, debug memory allocation.
MALLOC_CHECK_=2
export MALLOC_CHECK_

# Apply limits; some compiles (on SunOS of NewPlan) have run computers out of swap space.
ulimit -c 300000
ulimit -d 2000000
ulimit -s 2000000
ulimit -v 2000000

# Print the limits so it is obvious what they are when something goes wrong.
ulimit -a

# Perform a cvs command, checking that it succeeds, etc., and send email if something goes wrong.
function cvsCmd() {
  if test "$1" != 'co' -a "$1" != 'checkout' -a "$1" != 'rtag' -a "$removePlasma" = 'true'
  then
    mkdir PLASMA/autobuild.bug
    (echo "$info"; echo ''; echo 'cvsCmd() called with unexpected arguments: '"$*") | \
        Mail -s 'PLASMA autobuild bug on '"`hostname`"' in '"`pwd`"' failed' "$email"
    mkdir working/failed
    exit 22
  fi
  if test "$1" != '-q' -a "$2" != 'update' -a "$removePlasma" = 'false'
  then
    mkdir PLASMA/autobuild.bug
    (echo "$info"; echo ''; echo 'cvsCmd() called with unexpected arguments: '"$*") | \
        Mail -s 'PLASMA autobuild bug on '"`hostname`"' in '"`pwd`"' failed' "$email"
    mkdir working/failed
    exit 22
  fi
  echo Calling cvs $* at "`date`" ... >> cvs.PLASMA 2>&1
  cvs $* >> cvs.PLASMA 2>&1
  status=$?
  echo '"cvs '"$*"' in '"`pwd`"' exited '"$status"
  if test "$status" != 0
  then
    mkdir PLASMA/cvs.failed
    (echo "$info"; echo ''; echo '"cvs '"$*"' failed; aborting autobuild'; tail cvs.PLASMA) | \
        Mail -s 'PLASMA Autobuild cvs on '"`hostname`"' in '"`pwd`"' failed' "$email"
    mkdir working/failed
    exit "$status"
  fi
}

# Run jam with the given arguments, saving the output in a specific file
#   and complaining via email if something fails.
function jamCmd() {
  jam $jam_args $1 > jam.$2.$var.$libmethod 2>&1
  status=$?
  echo 'jam '"$jam_args $1"' in '"`pwd`"' exited '"$status"
  if test $status -ne 0
  then
    (echo "$info";
     echo '';
     echo 'PPW_Config='"$PPW_Config"'; export PPW_Config';
     echo 'jam '"$jam_args $1"' in '"`pwd`"' exited '"$status";
     more jam.$2.$var.$libmethod < /dev/null) | \
        Mail -s 'PLASMA Autobuild jam '"$jam_args $1"' on '"`hostname`"' failed' "$email"
    mkdir working/failed
    exit $status
  fi
}

if "$removePlasma"
then
    # This tag - and all others used by this script - must be unique to
    #   this computer, or two autobuild scripts running on different hosts
    #   are likely to interfere with each other.
    testingTag=AutobuildTesting_"`hostname | sed -e 's/[.].*//'`"

    # This is needed if nothing under PLASMA has "$testingTag".
    cvsCmd rtag -F "$testingTag" PLASMA/README
    # Remove the prior testing tag before ...
    cvsCmd rtag -d "$testingTag" PLASMA
    # ... tagging the to-be-tested version:
    cvsCmd rtag -rHEAD "$testingTag" PLASMA
else
    # Update once, before running jam.
    cvsCmd -q update -d -P
fi

# Now, for the primary purpose: run all the tests of all build variants.
for var in $variants
do
  for libmethod in $libmethods
  do
    if "$removePlasma"
    then
        cvsCmd co -r "$testingTag" PLASMA
        cd PLASMA
    fi
    jam_args='-sVARIANTS='"$var"' -sLIBRARIES='"$libmethod"
    jamCmd '' build
    for target in run-all-tests clean
    do
      jamCmd $target $target
    done
    if "$removePlasma"
    then
        PPW_Config="$startdir"'/PLASMA/CBPlanner/component/sample-ppw-config'
    else
        PPW_Config="$startdir"'/CBPlanner/component/sample-ppw-config'
    fi
    export PPW_Config
    jamCmd run-nddl-planner-tests withPPW
    jamCmd clean clean
    (echo "$info"; echo 'PLASMA autobuild and tests of variant '"$var"' with library method '"$libmethod"' in '"`pwd`"' passed.';
        more jam.*.$var.$libmethod < /dev/null) | \
      Mail -s 'PLASMA Autobuild '"$var"' '"$libmethod"' on '"`hostname`"' passed' "$email"
    if "$removePlasma"
    then
        # Save the output files.
        mv -f jam.* ..
        cd ..
        # Remove everything so that each variant is tested completely independently.
        #   Should probably test everything without removing in between as well, but ...
        rm -rf PLASMA
    fi
  done
done

# All the tests have passed (or jamCmd would have exit'd this script)

if "$removePlasma"
then
    tag=AutobuildPassed_"`hostname | sed -e 's/[.].*//'`"
    prior="$tag"'_old'
    # Make sure the prior tag is in CVS:
    cvsCmd rtag -F "$prior" PLASMA/README
    # ... before removing it:
    cvsCmd rtag -d "$prior" PLASMA
    # ... and changing it to the previous successful tag,
    #   again after making sure that tag is in CVS:
    cvsCmd rtag -rHEAD "$tag" PLASMA/README
    cvsCmd rtag -F -r "$tag" "$prior" PLASMA
    # ... and removing "$tag" so that any files that are later 'cvs remove'd are no longer tagged:
    cvsCmd rtag -d "$tag" PLASMA

    # Finally, tag the tested version to indicate it passed the tests:
    cvsCmd rtag -r "$testingTag" "$tag" PLASMA
else
    cvs -q diff -c > cvs.diff-c 2>&1
fi

(echo "$info";
    echo '';
    echo "All builds, tests, and cleans passed for each variant (of $variants) and";
    echo "  each method of building the libraries (of $libmethods).";
    echo "Tagged: 'cvs rtag $tag'") | \
  Mail -s 'PLASMA Autobuild on '"`hostname`"' passed' "$email"

date > lastCompleted

exit 0
