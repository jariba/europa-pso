#!/bin/sh
# $Id: autobuild,v 1.56 2003-09-10 19:14:40 wedgingt Exp $
#
# Automatically build some variants of the Europa planner system

set -x

# Usually, this is run via cron, which does not use the usual $PATH
PATH=/usr/local/bin:"$PATH"
export PATH

startdir="`dirname $0`"
startdir="`cd $startdir; pwd`"
cd "$startdir"

# Don't run this script more than once in the same directory.
mkdir working || exit 1

trap 'rmdir $startdir/working; rm -f $startdir/.tokens.$$' 0

# Address to mail exit status messages to
email=checkins@postdoc.arc.nasa.gov

# Subdirectories to build in
# Profiling and shared in one executable no longer works, it seems
#subdirs='cvs fast opt optFast profOptFast shareOptFast debug debugOpt noErr shareOptNoErr'
subdirs='cvs optFast profOptFast shareOptFast debug debugOpt'

# Token (.arc.nasa.gov) does not have AFS nor a second compiler, so comment this out for now
# Location of a newer compiler.
#AFS_GNU='/afs/ic-afs.arc.nasa.gov/apps/gcc-3.2.1/'
# See if we have an AFS token so we can get at the newer compiler.
#tokens > .tokens.$$
#cmp .tokens.$$ .notokens
#status=$?
#if test $status != 0 -a -f .notokens -a -f .tokens.$$ -a -d "$AFS_GNU" -a -x "$AFS_GNU"/bin/g++
#then
#	haveAFS=true
#else
#	haveAFS=false
#fi

# CVS info
CVS_RSH=ssh
export CVS_RSH
CVSROOT='copernicus.arc.nasa.gov:/home/cvs/ISG-Repository'
export CVSROOT

# Don't try to use X11 (mostly to prevent Purify from doing so)
DISPLAY=
export DISPLAY

# Make sure that libstdc++.so is in this
LD_LIBRARY_PATH='/usr/lib'
export LD_LIBRARY_PATH

# Debug memory allocation; one variant fails in allocation presently here on Slayton
MALLOC_CHECK_=2
export MALLOC_CHECK_

# Apply limits; some compiles run out of swap space.
ulimit -c 300000
ulimit -d 2000000
ulimit -s 2000000
ulimit -v 2000000

# Print the limits so it is obvious what they are when something goes wrong.
ulimit -a

# Primary compilation loop
for dir in $subdirs
do

    cd "$startdir"

    if test ! -d "$dir"
    then
        mkdir "$dir"
        test $? = 0 || exit $?
    fi

    cd "$dir"

    if test -d NewPlan
    then
	mkdir NewPlan/working || exit 2
	mkdir NewPlan/working/rerun || exit 2
    else
	cvs co NewPlan > cvs.co.NewPlan 2>&1
	status=$?
	echo '"cvs co NewPlan" in '"`pwd`"' exited '"$status"
	mkdir NewPlan/working || exit 2
	if test "$status" != 0
	then
	    mkdir NewPlan/working/cvs.co.failed
	    exit "$status"
	fi
	if test -f make.options
	then
            # Add to commonMakeOptions.imake
	    head -2 NewPlan/commonMakeOptions.imake > cMO.new
	    cat make.options >> cMO.new
	    echo '' >> cMO.new
	    tail +3 NewPlan/commonMakeOptions.imake >> cMO.new
	    mv -f cMO.new NewPlan/commonMakeOptions.imake
	fi
    fi

    cd NewPlan

    test -d "$startdir"/working || exit 2

    make $makeopt EuropaDist.tar >> make.tests 2>&1
    statusMakeTar=$?
    echo '"make '"$makeopt"' EuropaDist.tar" in '"`pwd`"' exited '"$statusMakeTar"

    make $makeopt unofficial >> make.tests 2>&1
    status=$?
    echo '"make '"$makeopt"' unofficial" in '"`pwd`"' exited '"$status"

    mkdir ../testDist && cd ../testDist && tar -xpf ../NewPlan/EuropaDist.tar
    statusTarExtract=$?
    echo '"tar -xpf EuropaDist.tar" in '"`pwd`"' exited '"$statusTarExtract"

    make $makeopt simple >> make.simple 2>&1
    statusMakeDist=$?
    echo '"make '"$makeopt"' simple" in '"`pwd`"' exited '"$statusMakeDist"

    cd ..

    if test $statusMakeTar$status$statusTarExtract$statusMakeDist = 0000
    then
        (uname -a; echo ''; cat make.options; echo ''; g++ --version) | \
            Mail -s 'Autobuild on '"`hostname`"' in '"`pwd`"' succeeded' "$email"

        # If appropriate, look for and save the profiling data
        if egrep PROFILE make.options > /dev/null 2>&1
        then
            find "$HOME"/europa.profiles -type d -mtime +7 -ls > .autobuild.profFind
            if test -s .autobuild.profFind
            then
                NewPlan/SupportFiles/gather.gprofs
		cvs tag -F Europa-Auto-Profiled-"`uname -n | sed -e 's/[.].*$//'`"
            fi
            rm -rf .autobuild.profFind
        fi
    else
        ( uname -a; echo ''; cat make.options; echo ''; g++ --version; echo ''; tail -40 NewPlan/make.tests) | \
            Mail -s 'Autobuild in '"`pwd`"' failed; exited '"$status" "$email"
        mkdir NewPlan/working/failed
    fi

    # Save the make output files
    mv NewPlan/make.tests . || exit 2
    mv testDist/make.simple . || exit 2

    # Would continue with the next one after a failure,
    #   but the disk space might not be available.
    rmdir NewPlan/working || exit 1

    # Now, wipe out all that hard work
    rm -rf NewPlan testDist

done
exit 0
