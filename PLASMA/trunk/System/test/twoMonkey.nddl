#include "../../NDDL/core/Plasma.nddl"

// From NewPlan/ModuleTests/Parser/monkey1/monkey-compats.objvar.ddl
// monkey-compats.objvar.ddl

enum Location_Label { Rock,  Tree } 

class Monkey_Class___Location_SV {
  predicate At {
    Location_Label Loc_Label;

    eq(duration, [1 +inf]);
  }

  predicate Going {
    Location_Label From_Loc;
    Location_Label To_Loc;

    eq(duration, [5 +inf]);
    neq(From_Loc, To_Loc);
  }

  Monkey_Class __DDL__object;
  Monkey_Class___Location_SV(Monkey_Class object) {
    __DDL__object = object;
  }
}

class Monkey_Class___Altitude_SV {
  predicate LOW {
    eq(duration, [1 +inf]);
  }

  predicate HIGH {
    eq(duration, [1 +inf]);
  }

  predicate CLIMBING {
    int _0_anon_OR_tag_1;

    eq(duration, [10 +inf]);
    eq(_0_anon_OR_tag_1, [1 2]);
  }

  predicate CLIMBING_DOWN {
    eq(duration, [1 +inf]);
  }

  Monkey_Class __DDL__object;
  Monkey_Class___Altitude_SV(Monkey_Class object) {
    __DDL__object = object;
  }
}

class Monkey_Class___Banana_SV {
  predicate NOT_HAVE_BANANA {
    eq(duration, [1 +inf]);
  }

  predicate HAVE_BANANA {
    Monkey_Class Who;

    eq(duration, [1 +inf]);
    eq(Who, object.__DDL__object);
  }

  predicate GRABBING_BANANA {
    eq(duration, [1 2]);
  }

  Monkey_Class __DDL__object;
  Monkey_Class___Banana_SV(Monkey_Class object) {
    __DDL__object = object;
  }
}

class Monkey_Class {
  Monkey_Class___Location_SV Location_SV;
  Monkey_Class___Altitude_SV Altitude_SV;
  Monkey_Class___Banana_SV Banana_SV;
  Monkey_Class() {
    Location_SV = new Monkey_Class___Location_SV(this);
    Altitude_SV = new Monkey_Class___Altitude_SV(this);
    Banana_SV = new Monkey_Class___Banana_SV(this);
  }
}

Monkey_Class___Location_SV::At {
  met_by(Going s0);
    eq(s0.To_Loc, Loc_Label);
  meets(Going s1);
    eq(s1.From_Loc, Loc_Label);
}

Monkey_Class___Location_SV::Going {
  met_by(At s0);
    eq(s0.Loc_Label, From_Loc);
  meets(At s1);
    eq(s1.Loc_Label, To_Loc);
  contained_by(Monkey_Class___Altitude_SV.LOW s2);
    eq(__DDL__object.Altitude_SV, s2.object);
}

Monkey_Class___Altitude_SV::LOW {
  met_by(CLIMBING_DOWN s0);
  meets(CLIMBING s1);
}

Monkey_Class___Altitude_SV::HIGH {
  met_by(CLIMBING s0);
  meets(CLIMBING_DOWN s1);
}

Monkey_Class___Altitude_SV::CLIMBING {
  met_by(LOW s0);
  meets(HIGH s1);
  if (_0_anon_OR_tag_1==1) {
    contained_by(Monkey_Class___Location_SV.At s0);
      eq(__DDL__object.Location_SV, s0.object);
      eq(s0.Loc_Label, Rock);
  }
  if (_0_anon_OR_tag_1==2) {
    contained_by(Monkey_Class___Location_SV.At s0);
      eq(__DDL__object.Location_SV, s0.object);
      eq(s0.Loc_Label, Tree);
  }
}

Monkey_Class___Altitude_SV::CLIMBING_DOWN {
  met_by(HIGH s0);
  meets(LOW s1);
}

Monkey_Class___Banana_SV::NOT_HAVE_BANANA {
  meets(GRABBING_BANANA s0);
  met_by(GRABBING_BANANA s1);
}

Monkey_Class___Banana_SV::HAVE_BANANA {
  met_by(GRABBING_BANANA s0);
}

Monkey_Class___Banana_SV::GRABBING_BANANA {
  met_by(NOT_HAVE_BANANA s0);
  meets(HAVE_BANANA s1);
  contained_by(Monkey_Class___Location_SV.At s2);
    eq(__DDL__object.Location_SV, s2.object);
    eq(s2.Loc_Label, Tree);
  contained_by(Monkey_Class___Altitude_SV.HIGH s3);
    eq(__DDL__object.Altitude_SV, s3.object);
}
