#include "NddlWorld.nddl"


//*****************************************************************
// Reproduces:
// GNATS 2519: Typefactory not registered.
// GNATS 2491, 2520, : Bad domain in temporal propagator, updating.
//****************************************************************
class Rover{
 Antenna m_antenna;
 Memory m_memory;

 Rover() {
   m_antenna = new Antenna();
   m_memory = new Memory();
 }

 // Do the work
 predicate Sample{
  int m_x, m_y;
 }

 predicate Drive {
  int m_from_x, m_from_y, m_to_x, m_to_y;
  eq(duration, 4); // Any thing at all that is small
 }

 // Doing nothing, waiting for external forces to charge 
 // our battery
 predicate Standby{
  int m_x, m_y;
 }

}

Rover::Sample{
  eq(duration, 2);

  // Should transmit at some later point
  meets(Memory.Full fullMem);
  met_by(Memory.Empty emptyMem);
  any(Memory.Busy busy);
  eq(busy.start, start);
  eq(busy.end, end);

  // What do we do after
  bool sw_after;
  if (sw_after==false) {
     meets(Drive dr);
     eq(dr.m_from_x, m_x);
     eq(dr.m_from_y, m_y);
  }
  if (sw_after==true) {
     meets(Standby sb);
     eq(sb.m_x, m_x);
     eq(sb.m_y, m_y);
  }
}

Rover::Drive{
  // Ensure that the end points are different
  float x_sq, y_sq, dist;
  neq( dist, 0 );

  // Battery consumption and driving duration are functions of distance
  driveDuration( duration, dist );

  // What do we do after
  bool sw_after;
  if (sw_after==false) {
     meets(Sample sm);
     eq(m_to_x, sm.m_x);
     eq(m_to_y, sm.m_y);
  }
  if (sw_after==true) {
     meets(Standby sb);
     eq(sb.m_x, m_to_x);
     eq(sb.m_y, m_to_y);
  }
  /*
  // What do we do before
  bool sw_before;
  if (sw_before==false) {
     met_by(Sample sm2);
     eq(sm2.m_x, m_from_x);
     eq(sm2.m_y, m_from_y);
  }
  if (sw_before==true) {
     met_by(Standby sb2);
     eq(sb2.m_x, m_from_x);
     eq(sb2.m_y, m_from_y);
  }
 */
}

Rover::Standby{
  // What do we do after
  bool sw_after;
  if (sw_after==false) {
     meets(Drive dr);
     eq(dr.m_from_x, m_x);
     eq(dr.m_from_y, m_y);
  }
  if (sw_after==true) {
     meets(Sample sm);
     eq(sm.m_x, m_x);
     eq(sm.m_y, m_y);
  }
  /*
  // What do we do before
  bool sw_before;
  if (sw_before==false) {
     met_by(Drive dr2);
     eq(dr2.m_to_x, m_x);
     eq(dr2.m_to_y, m_y);
  }
  if (sw_before==true) {
     met_by(Sample sm2);
     eq(sm2.m_x, m_x);
     eq(sm2.m_y, m_y);
  }
  */
}

class Antenna {
  predicate Transmit{}
  predicate Idle{}
}

Antenna::Transmit {
  eq(duration, 4);

  meets(Idle idle1);
  met_by(Idle idle2);

  met_by(Memory.Full fullMem);
  meets(Memory.Empty emptyMem);
  any(Memory.Busy busy);
  eq(busy.start, start);
  eq(busy.end, end);
}

Antenna::Idle {
  meets(Transmit t1);
  met_by(Transmit t2);
}

class Memory {
  predicate Full{}
  predicate Empty{}
  predicate Busy{}
}

Memory::Full{
  meets(Antenna.Transmit tr);
  // met_by(Rover.Sample sm);
}
Memory::Empty{
  met_by(Antenna.Transmit tr);
  // meets(Rover.Sample sm);
}





NddlWorld world = new NddlWorld(10, 101, 1000);

Rover rover = new Rover();

// Initially Rover stays at the source and does nothing
rejectable(Rover.Standby roverInit);
roverInit.m_x.specify(0);
roverInit.m_y.specify(0);
roverInit.start.specify(10);
////roverInit.activate();

// Mission goals
rejectable(Rover.Sample goal1);
goal1.m_x.specify(3);
goal1.m_y.specify(0);
goal1.start.specify([10 100]);
goal1.end.specify([10 100]);
////goal1.activate();

rejectable(Rover.Sample goal2);
goal2.m_x.specify(3);
goal2.m_y.specify(4);
goal2.start.specify([10 100]);
goal2.end.specify([10 100]);
////goal2.activate();

leq( goal1.end, goal2.start );

// At the start and at the end Antenna is idle
rejectable(Antenna.Idle sIdle);
sIdle.start.specify(10);

rejectable(Antenna.Idle eIdle);
eIdle.end.specify(100);

// The memory at the start at the end is empty
rejectable(Memory.Empty sMem);
sMem.start.specify(10);

rejectable(Memory.Empty eMem);
eMem.end.specify(100);
eMem.activate();

close();
