#include "Plasma.nddl"
#include "PlannerTestConfig.nddl"

class Foo {
  bool b;
  Foo(bool _b) {
    b = _b;
  }
}

class Bar extends Object {
  bool b;
  Bar(){b = true;}

  predicate somePred {
    bool arg;
    eq(duration, 1);
  }

  predicate otherPred{
    eq(duration, 1);
  }
}

Bar::somePred {
  Foo f;
  if(f.b == false) {
    if(arg == true) {
      //create an inconsistency
      eq(arg, f.b);
    }
  }
}

Bar::otherPred {
 Bar bar; // Will be a singleton base domain
 if(bar.b == true){
  neq(bar.b, true); // Always fail
 }
}

Foo x = new Foo(true);
Foo y = new Foo(false);
Bar b = new Bar();

// Set it up to be only compatible with one value, forcing a backtrack.
goal(b.somePred first);
first.arg.specify(true); // Force it to be specified right off the bat

rejectable(b.otherPred second);

// Expected behavior
// 1. activate token, which will immediatly fire impossible guard since base is a singleton
// 2. reject token
// 3. bind local variable to x, causing backtrack
// 4. bind local variable to y, succeeding
// Steps == 4, Depth == 2
PlannerTestConfig world = new PlannerTestConfig(0, 10, 4, 2);
eq(first.start, world.m_horizonStart);
eq(second.start, world.m_horizonStart);
close();
