#include "NddlWorld.nddl"
#include "../NddlCompiler/Resources.nddl"

enum Locations {Hill, Rock, Lander};

class Battery extends Resource {
      Battery(int hs, int he, float ic, float ll_min, float ll_max) {
        super(hs, he, ic, ll_min, ll_max);
      } 
}

class Rover{
 Battery m_battery;

 Rover() {
  m_battery = new Battery(0, 100, 5, 0, 100);
 }

 predicate At{
  Locations m_location;
  eq(duration, 1);
 }

 predicate Going{
  Locations m_from, m_to;
  eq(duration, 1);
  neq(m_from, m_to);
 }
}

Rover::At{
 meets(Resource.change tx);
 eq(tx.quantity, 5);

 meets(Going to);
 eq(to.m_from, m_location);

 met_by(Going from);
 eq(from.m_to, m_location);
}

Rover::Going{
  met_by(At from);
  eq(m_from, from.m_location);

  meets(At to);
  eq(m_to, to.m_location);

  meets(Resource.change tx);
  eq(tx.quantity, -5);
}

// Defines the initial state for the problem.
class World extends NddlWorld {
 Rover m_rover;

 predicate initialState{}

 World(){
  super(10, 101, 350);
  m_rover = new Rover();
 }
}

World::initialState{
 // Enforce horizon bounds on initialState
 leq(object.m_horizonStart, start);
 leq(end, object.m_horizonEnd);
 
 any(Rover.At a);
 eq(a.m_location, Lander);
 eq(a.start, 1);

 any(Rover.At b);
 eq(b.m_location, Rock);
 eq(b.start, 98);

 leq(a.end, b.start);
}