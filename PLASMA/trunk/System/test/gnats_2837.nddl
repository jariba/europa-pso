#include "Plasma.nddl"
#include "PlannerConfig.nddl"

/**
 * Locations with plane coordinates and labels.
 */

class Location {
 int x;
 int y;
 string label;

 Location(int _x, int _y){
  x = _x;
  y = _y;
  label = "anonymous";
 }

 Location(int _x, int _y, string _label){
  x = _x;
  y = _y;
  label = _label;
 }
}

/*
 * Instruments can be positioned on destinations which must be locations
 */

class Instrument {

 predicate Position {
  Location destination;
  int position_speed;
  eq(position_speed, duration);
 }
 
 predicate StandBy {}
 
 predicate Positioned { 
  Location destination; 
 } 

}

/*
 * Stowable Instruments inherit all properties from Instruments and in
 * addition, can be stowed and unstowed.
 */

class Stowable_Instrument extends Instrument {
 int stow_speed;
 int unstow_speed;
 Stowable_Instrument(int _stow_spd, int _unstow_spd) {
  stow_speed = _stow_spd;
  unstow_speed = _unstow_spd;
 }
 predicate Stow { }
 predicate Unstow { }
 predicate Stowed { }
 predicate Unstowed { }
}

/*
 * A rover composes instruments, a navigator and a battery.
 */

class Rover {
 Instrument antenna;
 Stowable_Instrument rat;
 Rover(){
  antenna = new Instrument();
  rat = new Stowable_Instrument(10,15);
 }
}

/// RULES

Instrument::Position{
 meets(object.Positioned p); 
 eq(p.destination,destination);
}

Instrument::Positioned {
 met_by(object.Position p);
 eq(p.destination, destination);
}

Stowable_Instrument::Position {
 met_by(object.Unstowed u);
}

Stowable_Instrument::Positioned {
 meets(object.Stow u);
}

Stowable_Instrument::Unstow{
 eq(object.unstow_speed, duration);

 meets(object.Unstowed a);
 met_by(object.StandBy b);
}

Stowable_Instrument::Stow{
 eq(object.stow_speed, duration);

 meets(object.Stowed a);
 met_by(Instrument.Positioned b);
 eq(b.object,object);
}

Stowable_Instrument::Stowed {
 met_by(object.Stow a);
 meets(object.StandBy b);
}

Stowable_Instrument::Unstowed {
 met_by(object.Unstow a);
 meets(Instrument.Position b);
 eq(b.object,object);
}

Stowable_Instrument::StandBy {
 met_by(object.Stowed a);
 meets(object.Unstow b);
}
