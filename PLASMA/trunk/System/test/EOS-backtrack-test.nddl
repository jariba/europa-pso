#include "NddlWorld.nddl"
#include "../../NDDL/core/Resources.nddl"

class Target {
 string m_name;
 int m_x;
 int m_y;
 int m_z;
 double m_priority;
 bool m_mandatory;

 Target(string name, int x, int y, int z, double priority) {
  m_name = name;
  m_x = x;
  m_y = y;
  m_z = z;
  m_priority = priority;
  m_mandatory = false;
 }

 Target(string name, int x, int y, int z, double priority, bool mandatory) {
  m_name = name;
  m_x = x;
  m_y = y;
  m_z = z;
  m_priority = priority;
  m_mandatory = mandatory;
 }
}

class Satellite {
 Antenna m_antenna;
 Memory m_memory;

 Satellite () {
  m_antenna = new Antenna (0, 200, 10000, 0, 10000);
  m_memory = new Memory (0, 200, 100000, 10, 100000);
 }

 predicate TakeImg {
   Target m_target;
   int m_duration;
   int m_size;
   eq(duration, m_duration);
 }

 predicate Slew {
   Target m_from;
   Target m_to;
   int m_rate;
 }

 predicate HaveImg {
   Target m_target;   
 }

 predicate Pointing {
   Target m_target;
 }

 predicate Transmit {
   GroundStation m_station;
   Target m_data;
 }
}

class GroundStation {
  Storage m_disk;

 GroundStation () {
   m_disk = new Storage (0, 200, 10000000, 1000, 10000000);
 }

 predicate Idle {}

 predicate Receive {
   Target m_data;
 }
}

class Antenna extends Resource { 
  Antenna(int horStart, int horEnd, float initCap, float llmin, float llmax) {
    super(horStart, horEnd, initCap, llmin, llmax);
  }
}

class Memory extends Resource {
 Memory(int horStart, int horEnd, float initCap, float llmin, float llmax) {
    super(horStart, horEnd, initCap, llmin, llmax);
  }

}

// Storage can only be consumed
class Storage extends Resource {
  Storage(int horStart, int horEnd, float initCap, float llmin, float llmax) {
    super(horStart, horEnd, initCap, llmin, llmax, 0, 0, MINUS_INFINITY, MINUS_INFINITY);
  }
}

Satellite::TakeImg {
  metby(object.Pointing p);
  starts(Memory.change tx);
  eq(tx.quantity,m_size);
}

Satellite::Slew {
  metby(object.Pointing pfrom);
  meets(object.Pointing pto);
  eq(pfrom.target,m_from);
  eq(pto.target,m_to);
}

Satellite::HaveImg {
  metby(object.TakeImg t);
}

Satellite::Pointing {
}

Satellite::Transmit {
  metby(object.HaveImg h);
}