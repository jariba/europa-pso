#include "../../NDDL/core/Resources.nddl"

class Location {
 string name;
 int x;
 int y;

 Location(string _name, int _x, int _y){
  name = _name;
  x = _x;
  y = _y;
 }
}

class Rock extends Location
{
 Rock(string _name, int _x, int _y){
  super(_name, _x, _y);
 }
}


class Navigator
{
 predicate At{
  Location location;
 }

 predicate Going{
  Location from;
  Location to;
  neq(from, to);
 }
}

Navigator::At{
 met_by(object.Going from);
 eq(from.to, location);
 meets(object.Going to);
 eq(to.from, location);
}

Navigator::Going{
 met_by(object.At _from);
 eq(_from.location, from);
 meets(object.At _to);
 eq(_to.location, to);

 // Pull juice from the battery. Should be based on path length.
 starts(Resource.change tx);
 eq(tx.quantity, 400);
}

class Commands{
 predicate TakeSample{
  Rock rock;
  eq(duration, [20 25]); // Flexible durations for taking a sample
 }
}

Commands::TakeSample{
 contains(Instrument.TakeSample a);
 eq(a.rock, rock);
 Rover rovers;
 commonAncestor(a.object, this.object, rovers);
}

class Instrument{
 predicate TakeSample{
  Rock rock;
  leq(10, duration);
 }

 predicate Place{
  Rock rock;
  eq([3 12], duration);
 }

 predicate Stow{
  leq([2 6], duration);
 }

 predicate Unstow{
  leq([2 6], duration);
 }

 predicate Stowed{}
}

Instrument::TakeSample{
 // Same rover must be at the target rock throughout (Need a shared macro for this)
 contained_by(Navigator.At at);
 eq(at.location, rock);
 Rover rovers;
 commonAncestor(at.object, this.object, rovers);

 // Preceded by placing the instrument
 met_by(Place b);
 eq(b.rock, rock);

 // Succeded by stowing the instrument
 meets(Stow c);

 starts(Resource.change tx);
 eq(tx.quantity, 120);
}

Instrument::Place{
 contained_by(Navigator.At at);
 eq(at.location, rock);
 Rover rovers;
 commonAncestor(at.object, this.object, rovers);

 meets(TakeSample a);
 eq(a.rock, rock);
 met_by(Unstow b);

 starts(Resource.change tx);
 eq(tx.quantity, 20);
}

Instrument::Unstow{
 contained_by(Navigator.At at);
 Rover rovers;
 commonAncestor(at.object, this.object, rovers);

 meets(Place a);
 met_by(Stowed b);

 starts(Resource.change tx);
 eq(tx.quantity, 20);
}

Instrument::Stow{
 contained_by(Navigator.At at);
 Rover rovers;
 commonAncestor(at.object, this.object, rovers);

 meets(Stowed a);
 met_by(TakeSample b);

 starts(Resource.change tx);
 eq(tx.quantity, 20);
}


Instrument::Stowed{
 met_by(Stow a);
 meets(Unstow b);
}


class Rover {
 Commands commands; // High-level rover commands
 Navigator navigator; // Handles position control and achievement
 Instrument instrument;
 Resource mainBattery;

 Rover(Resource r){
  commands = new Commands();
  navigator = new Navigator();
  instrument = new Instrument();
  mainBattery = r;
 }
}