
// TODO: this needs to be part of a class Library
class ANMLBool extends Timeline
{
    predicate setValue { bool value; };
}

ANMLBool::setValue
{
}

class YourObject
{
    ANMLBool busy;
       
    predicate action_HelloWorld {};
    predicate action_HelloWorld_cond1 {};
    predicate action_HelloWorld_effect1 {};    
}
   
YourObject::YourObject()
{
    busy = new ANMLBool();
}   

// TODO: should make sure all conditions are satisfied before attempting to add effects to the plan?
// This can be done by generating a PlannerConfig.xml
YourObject::action_HelloWorld()
{
    eq(duration,10);
    
    // condition1 : at start { busy=true; }
    object.busy_eq_true cond1;
    leq(cond1.start, start);
    leq(start,cond1.end);
    
    // effect1 : over all { busy=true; }
    object.busy_eq_true_effect effect1;
    eq(effect1.start,start);        
    eq(effect1.end,end);        
}

YourObject::busy_eq_true()
{
    int option = [1 2];

    // A goal can be satisfied by being in the plan already, or by actions that bring it about    
    
    if (option == 1) { // see if the goal is already in the plan
        // TODO: Use planner config to make sure that this can only be merged
        equals(object.busy_eq_true_effect mergeOnly);
    }
    
    // For each condition, we'd need to look for actions that
    // can bring them about and generate a disjunction here
    if (option == 2) {
        contains(object.action_HelloWorld);
    }
}

// This is also what can be stated as a fact
// TODO: would busy_eq_true_fact be a better name for this?
YourObject::busy_eq_true_effect()
{
    // The semantics of an assignment in ANML is that we do nothing if
    // the variable already has that value and that the value persists 
    // until another assignment changes it
    contained_by(busy.setValue(true));
}
