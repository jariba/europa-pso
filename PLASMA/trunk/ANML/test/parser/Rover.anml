
vartype Location : vector(string name, int x, int y);
vartype Path : vector(string name, Location _from, Location _to, float cost);
vartype StowState : string { "stowed", "unstowed" };

objtype Rover {
}

objtype Battery : Resource {
	
}

action TakeSample(Location rock) {
	duration [20 25];
	decomposition { contains all ordered(
		Instrument.TakeSample(rock),
	  or(PhoneHome(),
		   PhoneLander())
	);
	};
}

action PhoneHome() {
	change at start { uses(Battery, 600); };
}

action PhoneLander() {
	change at start { uses(Battery, 20); };
}

objtype Navigator {
	Location location;
	action Go(Location _from, Location _to) {
		condition at start { location = _from; };
		effect at end { location = _to; };
		neq(_from, _to);
		// assert existance of path from _from to _to
		//exists (Path p)
		//Path p;
		//eq(p._from, _from);
		//eq(p._to, _to);
		//change at start { uses(Battery, p.cost); };
	}
}

objtype Instrument {
	StowState _state;

	action TakeSample(Location rock) {
		condition contains all { Navigator.location = rock; };
		decomposition over all ordered (
			Unstow(),
			Place(rock),
			Sample(rock),
			stow()
		);
	}

	action Sample(Location rock) {
		duration [0 10];
	}

	action Place(Location rock) {
		duration [3 12];
	}

	action Stow() {
		duration [2 6];
		condition at start { _state = "unstowed"; };
		effect at end { _state = "stowed"; };
	}

	action Unstow() {
		duration [2 6];
		condition at start { _state = "stowed"; };
		effect at end { _state = "unstowed"; };
	}
}
