/*
 * @author Javier Barreiro
 * @brief Crew Planning model for SAVH demo. translation from NDDL into ANML
 */
 
// Time unit is minutes throughout the model

vartype int [0 +inf] PositiveInt;

vartype PositiveInt TDRS; // Communication Channels
vartype PositiveInt ExerciseEquipment; 
vartype PositiveInt PRACapacity; // Max number of Physically Restraining activities  


// TODO: corect syntax for declaring vartypes?
vartype  {changing,changed} FilterState;
vartype  {in_progress,finished} MedConfState;


/* 
 * Class and actions to keep track of fasting window
 * this would be better handled through a state constraint        
 */
objtype FastingWindow
{
    State state { range {fasting,not_fasting}; }
      
    action not_fasting {
        changes over all : state -> {fasting,not_fasting,fasting};
    }
}
 
// TODO: if we put it inside CrewMember, does that mean we have to specify a CrewMember when we set up a goal?
predicate payload_act_completed(        
    int id,
    string desc,
    int length,
    int priority, 
    int dueDate,
    int usesComms,
    int isPhysicallyRestraining);
    
objtype CrewMember
{
    FastingWindow fw_;
    MedConfState mcs_;

        
    action pre_sleep { 
        condition over all : fw_.state == not_fasting(); 
        duration == 120; 
        
    }
    
    action sleep { 
        duration == 480; 
    }
    
    action post_sleep { 
        condition over all : fw_.state == not_fasting(); 
        duration == 180; 
    }
    
    action dpc { 
        duration == 15;
    }
    
    action meal { 
        condition over all : fw_.state == not_fasting();
        
        // keep separation between meals >= 4 hrs
        condition over [start-240 start] : fw_.state == fasting();  
        condition over [end end+240] : fw_.state == fasting();  

        duration == 60; 
    }
    
    action exercise { 
        // Can't excercise within an hour of finishing a meal
        condition over [start-60 start] : fw_.state == fasting();
        change over all : uses(ExerciseEquipment,1);

        duration == 60; 
    } 
    
    action change_filter(FilterState fs) {         
        change over all : fs -> {changed,changing,changed};
        
        // make sure next filter change happens within the next 24 to 48 hours
        effect in [end+1440 end+2880] : fs == changing;
        
        duration == 60; 
    }    
    
    action medical_conference { 
        change over all : mcs_ -> {finished,in_progress,finished};
        
        // make sure next medical conference happens within the next 24 to 48 hours
        effect in [end+1440 end+2880] : mcs_ == in_progress;
        
        duration == 60; 
    }

  
    action payload_activity (
        int id,
        string desc,
        int length,
        int priority, 
        int dueDate,
        int usesComms,
        TDRS comms,
        int isPhysicallyRestraining,
        PRACapacity praCapacity) {
        
        condition start >= 0; // Is this still necessary to force into planning window? 
        condition end <= dueDate;
        
        effect when (usesComms == 1) : uses(comms,1);
        effect when (isPhysicallyRestraining == 1) : uses(praCapacity,1);
        
        effect at end : payload_act_completed(id,desc,length,priority,dueDate,usesComms,isPhysicallyRestraining);
        duration == length;        
    }
    
    // RPCM R&R Actions
    action remove_sleep_station { 
        duration == 60; 
    }
    
    action reconfigure_thermal_loops(int loopCnt)
    {  
        duration == 60; 
    }
    
    action remove_power_source { 
        duration == 60; 
    }
    
    action replace_rpcm { 
        duration == 60; 
    }
    
    action place_power_source { 
        duration == 60; 
    }
    
    action assemble_sleep_station { 
        duration == 60; 
    }        
}

objtype CrewPlanner
{
    State state { range {in_progress(CrewMember),finished(CrewMember)} };
    
    action daily_routine(CrewMember c) {
        change : state -> {finished(c),in_progress(c),finished(c)};
        
        // I'll guess the syntax for decomposition
        decomposition {
            c.post_sleep post_s;
            c.dpc dpc;
            c.meal meal;
            c.exercise exercise;
            c. pre_sleep pre_s;
            c.sleep sleep;
            
            // Precedence relationships
            post_s.end == dpc.start;
            pre_s.end == sleep.start;
            
            // Start the day with post_sleep and finish with sleep
            start == post_s.start;
            end == sleep.end;    
        }
        
        // setup the next daily routine
        effect at end+1 : state == in_progress(c); 
        
        duration == 1440; // 24 hours
    }
}

objtype RPCM
{
    State state { range {in_progress,finished} };
    
    action perform() {
        // I want any CrewMember to perform any activity, is CrewMember.* the intended ANML syntax?
        change : state -> {finished,in_progress,finished};
        
        decomposition {
		    CrewMember.remove_sleep_station step1;
		    CrewMember.remove_power_source step2;
		    step1.end <= step2.start;
		    
		    // Reconfigure thermal loops as single loop
		    CrewMember.reconfigure_thermal_loops(1) step3;
		        
		    CrewMember.replace_rpcm step4;
		    step2.end <= step4.start;
		    step3.end <= step4.start;
		    
		    CrewMember.place_power_source step5;
		    CrewMember.assemble_sleep_station step6;
		    step4.end <= step5.start;
		    step5.end <= step6.start;
		    
		    // Reconfigure thermal loops as redundant loops
		    CrewMember.reconfigure_thermal_loops(2) step7;
		    step4.end <= step7.start;
        }
    }            
}
 