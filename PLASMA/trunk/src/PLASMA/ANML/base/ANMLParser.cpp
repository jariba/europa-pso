/** \file
 *  This C source file was generated by $ANTLR version 3.1.2
 *
 *     -  From the grammar source file : ANML/base/antlr/ANML.g
 *     -                            On : 2011-08-19 15:00:50
 *     -                for the parser : ANMLParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "ANMLParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pANMLParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pANMLParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pANMLParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   ANMLParserTokenNames[134+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "ANML",
        (pANTLR3_UINT8) "Types",
        (pANTLR3_UINT8) "Constants",
        (pANTLR3_UINT8) "Fluents",
        (pANTLR3_UINT8) "Actions",
        (pANTLR3_UINT8) "Parameters",
        (pANTLR3_UINT8) "Arguments",
        (pANTLR3_UINT8) "Stmts",
        (pANTLR3_UINT8) "ProblemStmts",
        (pANTLR3_UINT8) "Block",
        (pANTLR3_UINT8) "Decompositions",
        (pANTLR3_UINT8) "TypeRef",
        (pANTLR3_UINT8) "LabelRef",
        (pANTLR3_UINT8) "Ref",
        (pANTLR3_UINT8) "Bind",
        (pANTLR3_UINT8) "Access",
        (pANTLR3_UINT8) "Type",
        (pANTLR3_UINT8) "Fluent",
        (pANTLR3_UINT8) "FluentFunction",
        (pANTLR3_UINT8) "Constant",
        (pANTLR3_UINT8) "ConstantFunction",
        (pANTLR3_UINT8) "Parameter",
        (pANTLR3_UINT8) "Action",
        (pANTLR3_UINT8) "Label",
        (pANTLR3_UINT8) "DefiniteInterval",
        (pANTLR3_UINT8) "DefinitePoint",
        (pANTLR3_UINT8) "IndefiniteInterval",
        (pANTLR3_UINT8) "IndefinitePoint",
        (pANTLR3_UINT8) "Bra",
        (pANTLR3_UINT8) "Ket",
        (pANTLR3_UINT8) "Before",
        (pANTLR3_UINT8) "At",
        (pANTLR3_UINT8) "After",
        (pANTLR3_UINT8) "TBra",
        (pANTLR3_UINT8) "TKet",
        (pANTLR3_UINT8) "TStart",
        (pANTLR3_UINT8) "TEnd",
        (pANTLR3_UINT8) "TDuration",
        (pANTLR3_UINT8) "Chain",
        (pANTLR3_UINT8) "TimedStmt",
        (pANTLR3_UINT8) "TimedExpr",
        (pANTLR3_UINT8) "ContainsSomeStmt",
        (pANTLR3_UINT8) "ContainsAllStmt",
        (pANTLR3_UINT8) "ContainsSomeExpr",
        (pANTLR3_UINT8) "ContainsAllExpr",
        (pANTLR3_UINT8) "ForAllExpr",
        (pANTLR3_UINT8) "ForAllStmt",
        (pANTLR3_UINT8) "ExistsExpr",
        (pANTLR3_UINT8) "ExistsStmt",
        (pANTLR3_UINT8) "When",
        (pANTLR3_UINT8) "WhenElse",
        (pANTLR3_UINT8) "Enum",
        (pANTLR3_UINT8) "Range",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "This",
        (pANTLR3_UINT8) "Comma",
        (pANTLR3_UINT8) "Semi",
        (pANTLR3_UINT8) "LessThan",
        (pANTLR3_UINT8) "Assign",
        (pANTLR3_UINT8) "With",
        (pANTLR3_UINT8) "LeftC",
        (pANTLR3_UINT8) "RightC",
        (pANTLR3_UINT8) "LeftB",
        (pANTLR3_UINT8) "RightB",
        (pANTLR3_UINT8) "Vector",
        (pANTLR3_UINT8) "LeftP",
        (pANTLR3_UINT8) "RightP",
        (pANTLR3_UINT8) "Variable",
        (pANTLR3_UINT8) "Function",
        (pANTLR3_UINT8) "Predicate",
        (pANTLR3_UINT8) "Undefined",
        (pANTLR3_UINT8) "Undefine",
        (pANTLR3_UINT8) "Duration",
        (pANTLR3_UINT8) "Decomposition",
        (pANTLR3_UINT8) "Fact",
        (pANTLR3_UINT8) "NotLog",
        (pANTLR3_UINT8) "NotBit",
        (pANTLR3_UINT8) "EqualLog",
        (pANTLR3_UINT8) "Equal",
        (pANTLR3_UINT8) "Goal",
        (pANTLR3_UINT8) "Contains",
        (pANTLR3_UINT8) "Else",
        (pANTLR3_UINT8) "ForAll",
        (pANTLR3_UINT8) "Exists",
        (pANTLR3_UINT8) "Change",
        (pANTLR3_UINT8) "Produce",
        (pANTLR3_UINT8) "Consume",
        (pANTLR3_UINT8) "Lend",
        (pANTLR3_UINT8) "Use",
        (pANTLR3_UINT8) "Within",
        (pANTLR3_UINT8) "SetAssign",
        (pANTLR3_UINT8) "Skip",
        (pANTLR3_UINT8) "Delta",
        (pANTLR3_UINT8) "All",
        (pANTLR3_UINT8) "Dots",
        (pANTLR3_UINT8) "Colon",
        (pANTLR3_UINT8) "Implies",
        (pANTLR3_UINT8) "XorLog",
        (pANTLR3_UINT8) "OrLog",
        (pANTLR3_UINT8) "AndLog",
        (pANTLR3_UINT8) "XorBit",
        (pANTLR3_UINT8) "Plus",
        (pANTLR3_UINT8) "Minus",
        (pANTLR3_UINT8) "OrBit",
        (pANTLR3_UINT8) "Times",
        (pANTLR3_UINT8) "Divide",
        (pANTLR3_UINT8) "AndBit",
        (pANTLR3_UINT8) "Unordered",
        (pANTLR3_UINT8) "Ordered",
        (pANTLR3_UINT8) "Start",
        (pANTLR3_UINT8) "End",
        (pANTLR3_UINT8) "Boolean",
        (pANTLR3_UINT8) "Integer",
        (pANTLR3_UINT8) "Float",
        (pANTLR3_UINT8) "Symbol",
        (pANTLR3_UINT8) "String",
        (pANTLR3_UINT8) "Object",
        (pANTLR3_UINT8) "INT",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "True",
        (pANTLR3_UINT8) "False",
        (pANTLR3_UINT8) "Infinity",
        (pANTLR3_UINT8) "NotEqual",
        (pANTLR3_UINT8) "GreaterThan",
        (pANTLR3_UINT8) "LessThanE",
        (pANTLR3_UINT8) "GreaterThanE",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "Dot",
        (pANTLR3_UINT8) "ESC",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "SLC",
        (pANTLR3_UINT8) "MLC"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static ANMLParser_anml_return	anml    (pANMLParser ctx);
static ANMLParser_type_decl_return	type_decl    (pANMLParser ctx);
static ANMLParser_type_decl_helper_return	type_decl_helper    (pANMLParser ctx);
static ANMLParser_type_ref_return	type_ref    (pANMLParser ctx);
static ANMLParser_type_name_return	type_name    (pANMLParser ctx);
static ANMLParser_set_return	set    (pANMLParser ctx);
static ANMLParser_enumeration_return	enumeration    (pANMLParser ctx);
static ANMLParser_range_return	range    (pANMLParser ctx);
static ANMLParser_type_spec_return	type_spec    (pANMLParser ctx);
static ANMLParser_type_enumeration_return	type_enumeration    (pANMLParser ctx);
static ANMLParser_type_enumeration_element_return	type_enumeration_element    (pANMLParser ctx);
static ANMLParser_param_list_return	param_list    (pANMLParser ctx);
static ANMLParser_param_return	param    (pANMLParser ctx);
static ANMLParser_object_block_return	object_block    (pANMLParser ctx);
static ANMLParser_const_decl_return	const_decl    (pANMLParser ctx);
static ANMLParser_const_decl_helper_return	const_decl_helper    (pANMLParser ctx);
static ANMLParser_const_var_decl_helper_return	const_var_decl_helper    (pANMLParser ctx);
static ANMLParser_const_fun_decl_helper_return	const_fun_decl_helper    (pANMLParser ctx);
static ANMLParser_fluent_decl_return	fluent_decl    (pANMLParser ctx);
static ANMLParser_fluent_fluent_decl_return	fluent_fluent_decl    (pANMLParser ctx);
static ANMLParser_fluent_var_decl_return	fluent_var_decl    (pANMLParser ctx);
static ANMLParser_fluent_fun_decl_return	fluent_fun_decl    (pANMLParser ctx);
static ANMLParser_fluent_predicate_decl_return	fluent_predicate_decl    (pANMLParser ctx);
static ANMLParser_predicate_helper_return	predicate_helper    (pANMLParser ctx);
static ANMLParser_decl_helper_return	decl_helper    (pANMLParser ctx);
static ANMLParser_var_decl_helper_return	var_decl_helper    (pANMLParser ctx);
static ANMLParser_init_return	init    (pANMLParser ctx);
static ANMLParser_fun_decl_helper_return	fun_decl_helper    (pANMLParser ctx);
static ANMLParser_action_decl_return	action_decl    (pANMLParser ctx);
static ANMLParser_durative_action_block_return	durative_action_block    (pANMLParser ctx);
static ANMLParser_action_block_return	action_block    (pANMLParser ctx);
static ANMLParser_action_block_h_return	action_block_h    (pANMLParser ctx);
static ANMLParser_decomp_block_return	decomp_block    (pANMLParser ctx);
static ANMLParser_problem_stmt_return	problem_stmt    (pANMLParser ctx);
static ANMLParser_fact_decl_return	fact_decl    (pANMLParser ctx);
static ANMLParser_fact_decl_helper_return	fact_decl_helper    (pANMLParser ctx);
static ANMLParser_goal_decl_return	goal_decl    (pANMLParser ctx);
static ANMLParser_goal_decl_helper_return	goal_decl_helper    (pANMLParser ctx);
static ANMLParser_stmt_return	stmt    (pANMLParser ctx);
static ANMLParser_stmt_primitive_return	stmt_primitive    (pANMLParser ctx);
static ANMLParser_stmt_block_return	stmt_block    (pANMLParser ctx);
static ANMLParser_stmt_contains_return	stmt_contains    (pANMLParser ctx);
static ANMLParser_stmt_when_return	stmt_when    (pANMLParser ctx);
static ANMLParser_stmt_forall_return	stmt_forall    (pANMLParser ctx);
static ANMLParser_stmt_exists_return	stmt_exists    (pANMLParser ctx);
static ANMLParser_stmt_timed_return	stmt_timed    (pANMLParser ctx);
static ANMLParser_stmt_chain_return	stmt_chain    (pANMLParser ctx);
static ANMLParser_stmt_chain_1_return	stmt_chain_1    (pANMLParser ctx);
static ANMLParser_stmt_delta_chain_return	stmt_delta_chain    (pANMLParser ctx);
static ANMLParser_stmt_delta_chain_1_return	stmt_delta_chain_1    (pANMLParser ctx);
static ANMLParser_stmt_timeless_return	stmt_timeless    (pANMLParser ctx);
static ANMLParser_guard_return	guard    (pANMLParser ctx);
static ANMLParser_interval_return	interval    (pANMLParser ctx);
static ANMLParser_univ_time_return	univ_time    (pANMLParser ctx);
static ANMLParser_exist_time_return	exist_time    (pANMLParser ctx);
static ANMLParser_delta_time_return	delta_time    (pANMLParser ctx);
static ANMLParser_bra_return	bra    (pANMLParser ctx);
static ANMLParser_ket_return	ket    (pANMLParser ctx);
static ANMLParser_lLimit_return	lLimit    (pANMLParser ctx);
static ANMLParser_rLimit_return	rLimit    (pANMLParser ctx);
static ANMLParser_expr_return	expr    (pANMLParser ctx);
static ANMLParser_e_prefix_return	e_prefix    (pANMLParser ctx);
static ANMLParser_e_log_1_return	e_log_1    (pANMLParser ctx);
static ANMLParser_e_log_2_return	e_log_2    (pANMLParser ctx);
static ANMLParser_e_log_3_return	e_log_3    (pANMLParser ctx);
static ANMLParser_e_log_4_return	e_log_4    (pANMLParser ctx);
static ANMLParser_e_log_5_return	e_log_5    (pANMLParser ctx);
static ANMLParser_e_log_6_return	e_log_6    (pANMLParser ctx);
static ANMLParser_e_log_7_return	e_log_7    (pANMLParser ctx);
static ANMLParser_e_num_return	e_num    (pANMLParser ctx);
static ANMLParser_e_num_1_return	e_num_1    (pANMLParser ctx);
static ANMLParser_e_num_2_return	e_num_2    (pANMLParser ctx);
static ANMLParser_e_num_3_return	e_num_3    (pANMLParser ctx);
static ANMLParser_e_num_4_return	e_num_4    (pANMLParser ctx);
static ANMLParser_e_atomic_return	e_atomic    (pANMLParser ctx);
static ANMLParser_time_complex_return	time_complex    (pANMLParser ctx);
static ANMLParser_ref_return	ref    (pANMLParser ctx);
static ANMLParser_time_primitive_return	time_primitive    (pANMLParser ctx);
static ANMLParser_arg_list_return	arg_list    (pANMLParser ctx);
static ANMLParser_builtinType_return	builtinType    (pANMLParser ctx);
static ANMLParser_literal_return	literal    (pANMLParser ctx);
static ANMLParser_num_relop_return	num_relop    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred1_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred2_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred3_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred4_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred5_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred6_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred7_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred8_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred9_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred10_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred11_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred12_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred13_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred14_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred15_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred16_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred17_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred18_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred19_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred20_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred21_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred22_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred23_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred24_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred25_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred26_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred27_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred28_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred29_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred30_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred31_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred32_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred33_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred34_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred35_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred36_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred37_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred38_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred39_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred40_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred41_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred42_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred43_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred44_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred45_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred46_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred47_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred48_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred49_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred50_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred51_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred52_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred53_ANML    (pANMLParser ctx);
static ANTLR3_BOOLEAN	synpred54_ANML    (pANMLParser ctx);
static void	ANMLParserFree(pANMLParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "ANML/base/antlr/ANML.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new ANMLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pANMLParser
ANMLParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return ANMLParserNewSSD(instream, NULL);
}

/** \brief Create a new ANMLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pANMLParser
ANMLParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pANMLParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pANMLParser) ANTLR3_CALLOC(1, sizeof(ANMLParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in ANMLParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our ANMLParser interface
     */
    ctx->anml	= anml;
    ctx->type_decl	= type_decl;
    ctx->type_decl_helper	= type_decl_helper;
    ctx->type_ref	= type_ref;
    ctx->type_name	= type_name;
    ctx->set	= set;
    ctx->enumeration	= enumeration;
    ctx->range	= range;
    ctx->type_spec	= type_spec;
    ctx->type_enumeration	= type_enumeration;
    ctx->type_enumeration_element	= type_enumeration_element;
    ctx->param_list	= param_list;
    ctx->param	= param;
    ctx->object_block	= object_block;
    ctx->const_decl	= const_decl;
    ctx->const_decl_helper	= const_decl_helper;
    ctx->const_var_decl_helper	= const_var_decl_helper;
    ctx->const_fun_decl_helper	= const_fun_decl_helper;
    ctx->fluent_decl	= fluent_decl;
    ctx->fluent_fluent_decl	= fluent_fluent_decl;
    ctx->fluent_var_decl	= fluent_var_decl;
    ctx->fluent_fun_decl	= fluent_fun_decl;
    ctx->fluent_predicate_decl	= fluent_predicate_decl;
    ctx->predicate_helper	= predicate_helper;
    ctx->decl_helper	= decl_helper;
    ctx->var_decl_helper	= var_decl_helper;
    ctx->init	= init;
    ctx->fun_decl_helper	= fun_decl_helper;
    ctx->action_decl	= action_decl;
    ctx->durative_action_block	= durative_action_block;
    ctx->action_block	= action_block;
    ctx->action_block_h	= action_block_h;
    ctx->decomp_block	= decomp_block;
    ctx->problem_stmt	= problem_stmt;
    ctx->fact_decl	= fact_decl;
    ctx->fact_decl_helper	= fact_decl_helper;
    ctx->goal_decl	= goal_decl;
    ctx->goal_decl_helper	= goal_decl_helper;
    ctx->stmt	= stmt;
    ctx->stmt_primitive	= stmt_primitive;
    ctx->stmt_block	= stmt_block;
    ctx->stmt_contains	= stmt_contains;
    ctx->stmt_when	= stmt_when;
    ctx->stmt_forall	= stmt_forall;
    ctx->stmt_exists	= stmt_exists;
    ctx->stmt_timed	= stmt_timed;
    ctx->stmt_chain	= stmt_chain;
    ctx->stmt_chain_1	= stmt_chain_1;
    ctx->stmt_delta_chain	= stmt_delta_chain;
    ctx->stmt_delta_chain_1	= stmt_delta_chain_1;
    ctx->stmt_timeless	= stmt_timeless;
    ctx->guard	= guard;
    ctx->interval	= interval;
    ctx->univ_time	= univ_time;
    ctx->exist_time	= exist_time;
    ctx->delta_time	= delta_time;
    ctx->bra	= bra;
    ctx->ket	= ket;
    ctx->lLimit	= lLimit;
    ctx->rLimit	= rLimit;
    ctx->expr	= expr;
    ctx->e_prefix	= e_prefix;
    ctx->e_log_1	= e_log_1;
    ctx->e_log_2	= e_log_2;
    ctx->e_log_3	= e_log_3;
    ctx->e_log_4	= e_log_4;
    ctx->e_log_5	= e_log_5;
    ctx->e_log_6	= e_log_6;
    ctx->e_log_7	= e_log_7;
    ctx->e_num	= e_num;
    ctx->e_num_1	= e_num_1;
    ctx->e_num_2	= e_num_2;
    ctx->e_num_3	= e_num_3;
    ctx->e_num_4	= e_num_4;
    ctx->e_atomic	= e_atomic;
    ctx->time_complex	= time_complex;
    ctx->ref	= ref;
    ctx->time_primitive	= time_primitive;
    ctx->arg_list	= arg_list;
    ctx->builtinType	= builtinType;
    ctx->literal	= literal;
    ctx->num_relop	= num_relop;
    ctx->synpred1_ANML	= synpred1_ANML;
    ctx->synpred2_ANML	= synpred2_ANML;
    ctx->synpred3_ANML	= synpred3_ANML;
    ctx->synpred4_ANML	= synpred4_ANML;
    ctx->synpred5_ANML	= synpred5_ANML;
    ctx->synpred6_ANML	= synpred6_ANML;
    ctx->synpred7_ANML	= synpred7_ANML;
    ctx->synpred8_ANML	= synpred8_ANML;
    ctx->synpred9_ANML	= synpred9_ANML;
    ctx->synpred10_ANML	= synpred10_ANML;
    ctx->synpred11_ANML	= synpred11_ANML;
    ctx->synpred12_ANML	= synpred12_ANML;
    ctx->synpred13_ANML	= synpred13_ANML;
    ctx->synpred14_ANML	= synpred14_ANML;
    ctx->synpred15_ANML	= synpred15_ANML;
    ctx->synpred16_ANML	= synpred16_ANML;
    ctx->synpred17_ANML	= synpred17_ANML;
    ctx->synpred18_ANML	= synpred18_ANML;
    ctx->synpred19_ANML	= synpred19_ANML;
    ctx->synpred20_ANML	= synpred20_ANML;
    ctx->synpred21_ANML	= synpred21_ANML;
    ctx->synpred22_ANML	= synpred22_ANML;
    ctx->synpred23_ANML	= synpred23_ANML;
    ctx->synpred24_ANML	= synpred24_ANML;
    ctx->synpred25_ANML	= synpred25_ANML;
    ctx->synpred26_ANML	= synpred26_ANML;
    ctx->synpred27_ANML	= synpred27_ANML;
    ctx->synpred28_ANML	= synpred28_ANML;
    ctx->synpred29_ANML	= synpred29_ANML;
    ctx->synpred30_ANML	= synpred30_ANML;
    ctx->synpred31_ANML	= synpred31_ANML;
    ctx->synpred32_ANML	= synpred32_ANML;
    ctx->synpred33_ANML	= synpred33_ANML;
    ctx->synpred34_ANML	= synpred34_ANML;
    ctx->synpred35_ANML	= synpred35_ANML;
    ctx->synpred36_ANML	= synpred36_ANML;
    ctx->synpred37_ANML	= synpred37_ANML;
    ctx->synpred38_ANML	= synpred38_ANML;
    ctx->synpred39_ANML	= synpred39_ANML;
    ctx->synpred40_ANML	= synpred40_ANML;
    ctx->synpred41_ANML	= synpred41_ANML;
    ctx->synpred42_ANML	= synpred42_ANML;
    ctx->synpred43_ANML	= synpred43_ANML;
    ctx->synpred44_ANML	= synpred44_ANML;
    ctx->synpred45_ANML	= synpred45_ANML;
    ctx->synpred46_ANML	= synpred46_ANML;
    ctx->synpred47_ANML	= synpred47_ANML;
    ctx->synpred48_ANML	= synpred48_ANML;
    ctx->synpred49_ANML	= synpred49_ANML;
    ctx->synpred50_ANML	= synpred50_ANML;
    ctx->synpred51_ANML	= synpred51_ANML;
    ctx->synpred52_ANML	= synpred52_ANML;
    ctx->synpred53_ANML	= synpred53_ANML;
    ctx->synpred54_ANML	= synpred54_ANML;
    ctx->free			= ANMLParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = ANMLParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 ANMLParserFree(pANMLParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return ANMLParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_decl_in_anml332  */
static	ANTLR3_BITWORD FOLLOW_type_decl_in_anml332_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_type_decl_in_anml332	= { FOLLOW_type_decl_in_anml332_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_const_decl_in_anml340  */
static	ANTLR3_BITWORD FOLLOW_const_decl_in_anml340_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_const_decl_in_anml340	= { FOLLOW_const_decl_in_anml340_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fluent_decl_in_anml348  */
static	ANTLR3_BITWORD FOLLOW_fluent_decl_in_anml348_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_fluent_decl_in_anml348	= { FOLLOW_fluent_decl_in_anml348_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_action_decl_in_anml356  */
static	ANTLR3_BITWORD FOLLOW_action_decl_in_anml356_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_action_decl_in_anml356	= { FOLLOW_action_decl_in_anml356_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_anml363  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_anml363_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_anml363	= { FOLLOW_stmt_in_anml363_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_problem_stmt_in_anml370  */
static	ANTLR3_BITWORD FOLLOW_problem_stmt_in_anml370_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_problem_stmt_in_anml370	= { FOLLOW_problem_stmt_in_anml370_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Type_in_type_decl457  */
static	ANTLR3_BITWORD FOLLOW_Type_in_type_decl457_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Type_in_type_decl457	= { FOLLOW_Type_in_type_decl457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_decl_helper_in_type_decl461  */
static	ANTLR3_BITWORD FOLLOW_type_decl_helper_in_type_decl461_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_decl_helper_in_type_decl461	= { FOLLOW_type_decl_helper_in_type_decl461_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_type_decl464  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_type_decl464_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_type_decl464	= { FOLLOW_Comma_in_type_decl464_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_decl_helper_in_type_decl468  */
static	ANTLR3_BITWORD FOLLOW_type_decl_helper_in_type_decl468_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_decl_helper_in_type_decl468	= { FOLLOW_type_decl_helper_in_type_decl468_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_type_decl472  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_type_decl472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_type_decl472	= { FOLLOW_Semi_in_type_decl472_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_type_decl_helper490  */
static	ANTLR3_BITWORD FOLLOW_ID_in_type_decl_helper490_bits[]	= { ANTLR3_UINT64_LIT(0xE000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_type_decl_helper490	= { FOLLOW_ID_in_type_decl_helper490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LessThan_in_type_decl_helper497  */
static	ANTLR3_BITWORD FOLLOW_LessThan_in_type_decl_helper497_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x01F8000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LessThan_in_type_decl_helper497	= { FOLLOW_LessThan_in_type_decl_helper497_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_ref_in_type_decl_helper501  */
static	ANTLR3_BITWORD FOLLOW_type_ref_in_type_decl_helper501_bits[]	= { ANTLR3_UINT64_LIT(0xE000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_ref_in_type_decl_helper501	= { FOLLOW_type_ref_in_type_decl_helper501_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Assign_in_type_decl_helper508  */
static	ANTLR3_BITWORD FOLLOW_Assign_in_type_decl_helper508_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x01F8000000000011) };
static  ANTLR3_BITSET_LIST FOLLOW_Assign_in_type_decl_helper508	= { FOLLOW_Assign_in_type_decl_helper508_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_spec_in_type_decl_helper512  */
static	ANTLR3_BITWORD FOLLOW_type_spec_in_type_decl_helper512_bits[]	= { ANTLR3_UINT64_LIT(0xE000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_spec_in_type_decl_helper512	= { FOLLOW_type_spec_in_type_decl_helper512_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_With_in_type_decl_helper519  */
static	ANTLR3_BITWORD FOLLOW_With_in_type_decl_helper519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_With_in_type_decl_helper519	= { FOLLOW_With_in_type_decl_helper519_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_object_block_in_type_decl_helper523  */
static	ANTLR3_BITWORD FOLLOW_object_block_in_type_decl_helper523_bits[]	= { ANTLR3_UINT64_LIT(0xE000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_object_block_in_type_decl_helper523	= { FOLLOW_object_block_in_type_decl_helper523_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_name_in_type_ref577  */
static	ANTLR3_BITWORD FOLLOW_type_name_in_type_ref577_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000005) };
static  ANTLR3_BITSET_LIST FOLLOW_type_name_in_type_ref577	= { FOLLOW_type_name_in_type_ref577_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type_ref579  */
static	ANTLR3_BITWORD FOLLOW_set_in_type_ref579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type_ref579	= { FOLLOW_set_in_type_ref579_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_builtinType_in_type_name609  */
static	ANTLR3_BITWORD FOLLOW_builtinType_in_type_name609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_builtinType_in_type_name609	= { FOLLOW_builtinType_in_type_name609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_type_name614  */
static	ANTLR3_BITWORD FOLLOW_ID_in_type_name614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_type_name614	= { FOLLOW_ID_in_type_name614_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumeration_in_set623  */
static	ANTLR3_BITWORD FOLLOW_enumeration_in_set623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_enumeration_in_set623	= { FOLLOW_enumeration_in_set623_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_range_in_set627  */
static	ANTLR3_BITWORD FOLLOW_range_in_set627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_range_in_set627	= { FOLLOW_range_in_set627_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftC_in_enumeration636  */
static	ANTLR3_BITWORD FOLLOW_LeftC_in_enumeration636_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftC_in_enumeration636	= { FOLLOW_LeftC_in_enumeration636_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_enumeration638  */
static	ANTLR3_BITWORD FOLLOW_expr_in_enumeration638_bits[]	= { ANTLR3_UINT64_LIT(0x0A00000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19026) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_enumeration638	= { FOLLOW_expr_in_enumeration638_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_enumeration641  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_enumeration641_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_enumeration641	= { FOLLOW_Comma_in_enumeration641_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_enumeration644  */
static	ANTLR3_BITWORD FOLLOW_expr_in_enumeration644_bits[]	= { ANTLR3_UINT64_LIT(0x0A00000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19026) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_enumeration644	= { FOLLOW_expr_in_enumeration644_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightC_in_enumeration648  */
static	ANTLR3_BITWORD FOLLOW_RightC_in_enumeration648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightC_in_enumeration648	= { FOLLOW_RightC_in_enumeration648_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftB_in_range668  */
static	ANTLR3_BITWORD FOLLOW_LeftB_in_range668_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftB_in_range668	= { FOLLOW_LeftB_in_range668_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_range672  */
static	ANTLR3_BITWORD FOLLOW_expr_in_range672_bits[]	= { ANTLR3_UINT64_LIT(0x0A00000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_range672	= { FOLLOW_expr_in_range672_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_range674  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_range674_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_range674	= { FOLLOW_Comma_in_range674_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_range679  */
static	ANTLR3_BITWORD FOLLOW_expr_in_range679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_range679	= { FOLLOW_expr_in_range679_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightB_in_range681  */
static	ANTLR3_BITWORD FOLLOW_RightB_in_range681_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightB_in_range681	= { FOLLOW_RightB_in_range681_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_ref_in_type_spec705  */
static	ANTLR3_BITWORD FOLLOW_type_ref_in_type_spec705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_ref_in_type_spec705	= { FOLLOW_type_ref_in_type_spec705_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Vector_in_type_spec710  */
static	ANTLR3_BITWORD FOLLOW_Vector_in_type_spec710_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Vector_in_type_spec710	= { FOLLOW_Vector_in_type_spec710_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_param_list_in_type_spec712  */
static	ANTLR3_BITWORD FOLLOW_param_list_in_type_spec712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_param_list_in_type_spec712	= { FOLLOW_param_list_in_type_spec712_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_enumeration_in_type_spec727  */
static	ANTLR3_BITWORD FOLLOW_type_enumeration_in_type_spec727_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_enumeration_in_type_spec727	= { FOLLOW_type_enumeration_in_type_spec727_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftC_in_type_enumeration737  */
static	ANTLR3_BITWORD FOLLOW_LeftC_in_type_enumeration737_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftC_in_type_enumeration737	= { FOLLOW_LeftC_in_type_enumeration737_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_enumeration_element_in_type_enumeration739  */
static	ANTLR3_BITWORD FOLLOW_type_enumeration_element_in_type_enumeration739_bits[]	= { ANTLR3_UINT64_LIT(0x0A00000000000000), ANTLR3_UINT64_LIT(0x7E00000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_enumeration_element_in_type_enumeration739	= { FOLLOW_type_enumeration_element_in_type_enumeration739_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_type_enumeration742  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_type_enumeration742_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_type_enumeration742	= { FOLLOW_Comma_in_type_enumeration742_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_enumeration_element_in_type_enumeration745  */
static	ANTLR3_BITWORD FOLLOW_type_enumeration_element_in_type_enumeration745_bits[]	= { ANTLR3_UINT64_LIT(0x0A00000000000000), ANTLR3_UINT64_LIT(0x7E00000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_enumeration_element_in_type_enumeration745	= { FOLLOW_type_enumeration_element_in_type_enumeration745_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightC_in_type_enumeration749  */
static	ANTLR3_BITWORD FOLLOW_RightC_in_type_enumeration749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightC_in_type_enumeration749	= { FOLLOW_RightC_in_type_enumeration749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_type_enumeration_element773  */
static	ANTLR3_BITWORD FOLLOW_ID_in_type_enumeration_element773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_type_enumeration_element773	= { FOLLOW_ID_in_type_enumeration_element773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_type_enumeration_element777  */
static	ANTLR3_BITWORD FOLLOW_literal_in_type_enumeration_element777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_type_enumeration_element777	= { FOLLOW_literal_in_type_enumeration_element777_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_param_list789  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_param_list789_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x01F8000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_param_list789	= { FOLLOW_LeftP_in_param_list789_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_param_in_param_list793  */
static	ANTLR3_BITWORD FOLLOW_param_in_param_list793_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_param_in_param_list793	= { FOLLOW_param_in_param_list793_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_param_list796  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_param_list796_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x01F8000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_param_list796	= { FOLLOW_Comma_in_param_list796_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_param_in_param_list800  */
static	ANTLR3_BITWORD FOLLOW_param_in_param_list800_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_param_in_param_list800	= { FOLLOW_param_in_param_list800_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_param_list804  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_param_list804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_param_list804	= { FOLLOW_RightP_in_param_list804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_param_list822  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_param_list822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_param_list822	= { FOLLOW_LeftP_in_param_list822_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_param_list824  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_param_list824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_param_list824	= { FOLLOW_RightP_in_param_list824_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_ref_in_param845  */
static	ANTLR3_BITWORD FOLLOW_type_ref_in_param845_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_ref_in_param845	= { FOLLOW_type_ref_in_param845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_param847  */
static	ANTLR3_BITWORD FOLLOW_ID_in_param847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_param847	= { FOLLOW_ID_in_param847_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftC_in_object_block872  */
static	ANTLR3_BITWORD FOLLOW_LeftC_in_object_block872_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftC_in_object_block872	= { FOLLOW_LeftC_in_object_block872_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_decl_in_object_block880  */
static	ANTLR3_BITWORD FOLLOW_type_decl_in_object_block880_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_type_decl_in_object_block880	= { FOLLOW_type_decl_in_object_block880_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_const_decl_in_object_block889  */
static	ANTLR3_BITWORD FOLLOW_const_decl_in_object_block889_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_const_decl_in_object_block889	= { FOLLOW_const_decl_in_object_block889_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fluent_decl_in_object_block898  */
static	ANTLR3_BITWORD FOLLOW_fluent_decl_in_object_block898_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_fluent_decl_in_object_block898	= { FOLLOW_fluent_decl_in_object_block898_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_action_decl_in_object_block907  */
static	ANTLR3_BITWORD FOLLOW_action_decl_in_object_block907_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_action_decl_in_object_block907	= { FOLLOW_action_decl_in_object_block907_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_object_block915  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_object_block915_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_object_block915	= { FOLLOW_stmt_in_object_block915_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_problem_stmt_in_object_block923  */
static	ANTLR3_BITWORD FOLLOW_problem_stmt_in_object_block923_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_problem_stmt_in_object_block923	= { FOLLOW_problem_stmt_in_object_block923_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightC_in_object_block933  */
static	ANTLR3_BITWORD FOLLOW_RightC_in_object_block933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightC_in_object_block933	= { FOLLOW_RightC_in_object_block933_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Constant_in_const_decl1028  */
static	ANTLR3_BITWORD FOLLOW_Constant_in_const_decl1028_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x01F8000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Constant_in_const_decl1028	= { FOLLOW_Constant_in_const_decl1028_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_ref_in_const_decl1030  */
static	ANTLR3_BITWORD FOLLOW_type_ref_in_const_decl1030_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_ref_in_const_decl1030	= { FOLLOW_type_ref_in_const_decl1030_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_const_decl_helper_in_const_decl1037  */
static	ANTLR3_BITWORD FOLLOW_const_decl_helper_in_const_decl1037_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_const_decl_helper_in_const_decl1037	= { FOLLOW_const_decl_helper_in_const_decl1037_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_const_decl1040  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_const_decl1040_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_const_decl1040	= { FOLLOW_Comma_in_const_decl1040_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_const_decl_helper_in_const_decl1044  */
static	ANTLR3_BITWORD FOLLOW_const_decl_helper_in_const_decl1044_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_const_decl_helper_in_const_decl1044	= { FOLLOW_const_decl_helper_in_const_decl1044_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_const_decl1048  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_const_decl1048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_const_decl1048	= { FOLLOW_Semi_in_const_decl1048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_const_var_decl_helper_in_const_decl_helper1071  */
static	ANTLR3_BITWORD FOLLOW_const_var_decl_helper_in_const_decl_helper1071_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_const_var_decl_helper_in_const_decl_helper1071	= { FOLLOW_const_var_decl_helper_in_const_decl_helper1071_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_const_fun_decl_helper_in_const_decl_helper1076  */
static	ANTLR3_BITWORD FOLLOW_const_fun_decl_helper_in_const_decl_helper1076_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_const_fun_decl_helper_in_const_decl_helper1076	= { FOLLOW_const_fun_decl_helper_in_const_decl_helper1076_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_const_var_decl_helper1086  */
static	ANTLR3_BITWORD FOLLOW_ID_in_const_var_decl_helper1086_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000002), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_const_var_decl_helper1086	= { FOLLOW_ID_in_const_var_decl_helper1086_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_in_const_var_decl_helper1088  */
static	ANTLR3_BITWORD FOLLOW_init_in_const_var_decl_helper1088_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_init_in_const_var_decl_helper1088	= { FOLLOW_init_in_const_var_decl_helper1088_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_const_fun_decl_helper1113  */
static	ANTLR3_BITWORD FOLLOW_ID_in_const_fun_decl_helper1113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_const_fun_decl_helper1113	= { FOLLOW_ID_in_const_fun_decl_helper1113_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_param_list_in_const_fun_decl_helper1115  */
static	ANTLR3_BITWORD FOLLOW_param_list_in_const_fun_decl_helper1115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_param_list_in_const_fun_decl_helper1115	= { FOLLOW_param_list_in_const_fun_decl_helper1115_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fluent_fluent_decl_in_fluent_decl1139  */
static	ANTLR3_BITWORD FOLLOW_fluent_fluent_decl_in_fluent_decl1139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_fluent_fluent_decl_in_fluent_decl1139	= { FOLLOW_fluent_fluent_decl_in_fluent_decl1139_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fluent_var_decl_in_fluent_decl1144  */
static	ANTLR3_BITWORD FOLLOW_fluent_var_decl_in_fluent_decl1144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_fluent_var_decl_in_fluent_decl1144	= { FOLLOW_fluent_var_decl_in_fluent_decl1144_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fluent_fun_decl_in_fluent_decl1150  */
static	ANTLR3_BITWORD FOLLOW_fluent_fun_decl_in_fluent_decl1150_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_fluent_fun_decl_in_fluent_decl1150	= { FOLLOW_fluent_fun_decl_in_fluent_decl1150_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fluent_predicate_decl_in_fluent_decl1156  */
static	ANTLR3_BITWORD FOLLOW_fluent_predicate_decl_in_fluent_decl1156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_fluent_predicate_decl_in_fluent_decl1156	= { FOLLOW_fluent_predicate_decl_in_fluent_decl1156_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Fluent_in_fluent_fluent_decl1169  */
static	ANTLR3_BITWORD FOLLOW_Fluent_in_fluent_fluent_decl1169_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x01F8000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Fluent_in_fluent_fluent_decl1169	= { FOLLOW_Fluent_in_fluent_fluent_decl1169_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_ref_in_fluent_fluent_decl1171  */
static	ANTLR3_BITWORD FOLLOW_type_ref_in_fluent_fluent_decl1171_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_ref_in_fluent_fluent_decl1171	= { FOLLOW_type_ref_in_fluent_fluent_decl1171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_decl_helper_in_fluent_fluent_decl1177  */
static	ANTLR3_BITWORD FOLLOW_decl_helper_in_fluent_fluent_decl1177_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_decl_helper_in_fluent_fluent_decl1177	= { FOLLOW_decl_helper_in_fluent_fluent_decl1177_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_fluent_fluent_decl1180  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_fluent_fluent_decl1180_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_fluent_fluent_decl1180	= { FOLLOW_Comma_in_fluent_fluent_decl1180_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_decl_helper_in_fluent_fluent_decl1184  */
static	ANTLR3_BITWORD FOLLOW_decl_helper_in_fluent_fluent_decl1184_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_decl_helper_in_fluent_fluent_decl1184	= { FOLLOW_decl_helper_in_fluent_fluent_decl1184_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_fluent_fluent_decl1188  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_fluent_fluent_decl1188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_fluent_fluent_decl1188	= { FOLLOW_Semi_in_fluent_fluent_decl1188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Variable_in_fluent_var_decl1210  */
static	ANTLR3_BITWORD FOLLOW_Variable_in_fluent_var_decl1210_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x01F8000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Variable_in_fluent_var_decl1210	= { FOLLOW_Variable_in_fluent_var_decl1210_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_ref_in_fluent_var_decl1212  */
static	ANTLR3_BITWORD FOLLOW_type_ref_in_fluent_var_decl1212_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_ref_in_fluent_var_decl1212	= { FOLLOW_type_ref_in_fluent_var_decl1212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_var_decl_helper_in_fluent_var_decl1218  */
static	ANTLR3_BITWORD FOLLOW_var_decl_helper_in_fluent_var_decl1218_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_var_decl_helper_in_fluent_var_decl1218	= { FOLLOW_var_decl_helper_in_fluent_var_decl1218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_fluent_var_decl1221  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_fluent_var_decl1221_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_fluent_var_decl1221	= { FOLLOW_Comma_in_fluent_var_decl1221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_var_decl_helper_in_fluent_var_decl1225  */
static	ANTLR3_BITWORD FOLLOW_var_decl_helper_in_fluent_var_decl1225_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_var_decl_helper_in_fluent_var_decl1225	= { FOLLOW_var_decl_helper_in_fluent_var_decl1225_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_fluent_var_decl1229  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_fluent_var_decl1229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_fluent_var_decl1229	= { FOLLOW_Semi_in_fluent_var_decl1229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Function_in_fluent_fun_decl1251  */
static	ANTLR3_BITWORD FOLLOW_Function_in_fluent_fun_decl1251_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x01F8000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Function_in_fluent_fun_decl1251	= { FOLLOW_Function_in_fluent_fun_decl1251_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_ref_in_fluent_fun_decl1253  */
static	ANTLR3_BITWORD FOLLOW_type_ref_in_fluent_fun_decl1253_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_ref_in_fluent_fun_decl1253	= { FOLLOW_type_ref_in_fluent_fun_decl1253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fun_decl_helper_in_fluent_fun_decl1260  */
static	ANTLR3_BITWORD FOLLOW_fun_decl_helper_in_fluent_fun_decl1260_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_fun_decl_helper_in_fluent_fun_decl1260	= { FOLLOW_fun_decl_helper_in_fluent_fun_decl1260_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_fluent_fun_decl1263  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_fluent_fun_decl1263_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_fluent_fun_decl1263	= { FOLLOW_Comma_in_fluent_fun_decl1263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fun_decl_helper_in_fluent_fun_decl1267  */
static	ANTLR3_BITWORD FOLLOW_fun_decl_helper_in_fluent_fun_decl1267_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_fun_decl_helper_in_fluent_fun_decl1267	= { FOLLOW_fun_decl_helper_in_fluent_fun_decl1267_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_fluent_fun_decl1271  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_fluent_fun_decl1271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_fluent_fun_decl1271	= { FOLLOW_Semi_in_fluent_fun_decl1271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_predicate_helper_in_fluent_predicate_decl1293  */
static	ANTLR3_BITWORD FOLLOW_predicate_helper_in_fluent_predicate_decl1293_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_predicate_helper_in_fluent_predicate_decl1293	= { FOLLOW_predicate_helper_in_fluent_predicate_decl1293_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fun_decl_helper_in_fluent_predicate_decl1300  */
static	ANTLR3_BITWORD FOLLOW_fun_decl_helper_in_fluent_predicate_decl1300_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_fun_decl_helper_in_fluent_predicate_decl1300	= { FOLLOW_fun_decl_helper_in_fluent_predicate_decl1300_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_fluent_predicate_decl1303  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_fluent_predicate_decl1303_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_fluent_predicate_decl1303	= { FOLLOW_Comma_in_fluent_predicate_decl1303_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fun_decl_helper_in_fluent_predicate_decl1307  */
static	ANTLR3_BITWORD FOLLOW_fun_decl_helper_in_fluent_predicate_decl1307_bits[]	= { ANTLR3_UINT64_LIT(0x1800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_fun_decl_helper_in_fluent_predicate_decl1307	= { FOLLOW_fun_decl_helper_in_fluent_predicate_decl1307_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_fluent_predicate_decl1311  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_fluent_predicate_decl1311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_fluent_predicate_decl1311	= { FOLLOW_Semi_in_fluent_predicate_decl1311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Predicate_in_predicate_helper1332  */
static	ANTLR3_BITWORD FOLLOW_Predicate_in_predicate_helper1332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Predicate_in_predicate_helper1332	= { FOLLOW_Predicate_in_predicate_helper1332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_var_decl_helper_in_decl_helper1355  */
static	ANTLR3_BITWORD FOLLOW_var_decl_helper_in_decl_helper1355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_var_decl_helper_in_decl_helper1355	= { FOLLOW_var_decl_helper_in_decl_helper1355_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fun_decl_helper_in_decl_helper1360  */
static	ANTLR3_BITWORD FOLLOW_fun_decl_helper_in_decl_helper1360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_fun_decl_helper_in_decl_helper1360	= { FOLLOW_fun_decl_helper_in_decl_helper1360_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_var_decl_helper1371  */
static	ANTLR3_BITWORD FOLLOW_ID_in_var_decl_helper1371_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000002), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_var_decl_helper1371	= { FOLLOW_ID_in_var_decl_helper1371_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_init_in_var_decl_helper1373  */
static	ANTLR3_BITWORD FOLLOW_init_in_var_decl_helper1373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_init_in_var_decl_helper1373	= { FOLLOW_init_in_var_decl_helper1373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Assign_in_init1398  */
static	ANTLR3_BITWORD FOLLOW_Assign_in_init1398_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Assign_in_init1398	= { FOLLOW_Assign_in_init1398_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_init1401  */
static	ANTLR3_BITWORD FOLLOW_expr_in_init1401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_init1401	= { FOLLOW_expr_in_init1401_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Assign_in_init1406  */
static	ANTLR3_BITWORD FOLLOW_Assign_in_init1406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_Assign_in_init1406	= { FOLLOW_Assign_in_init1406_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Undefined_in_init1409  */
static	ANTLR3_BITWORD FOLLOW_Undefined_in_init1409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Undefined_in_init1409	= { FOLLOW_Undefined_in_init1409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Undefine_in_init1415  */
static	ANTLR3_BITWORD FOLLOW_Undefine_in_init1415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Undefine_in_init1415	= { FOLLOW_Undefine_in_init1415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_fun_decl_helper1426  */
static	ANTLR3_BITWORD FOLLOW_ID_in_fun_decl_helper1426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_fun_decl_helper1426	= { FOLLOW_ID_in_fun_decl_helper1426_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_param_list_in_fun_decl_helper1428  */
static	ANTLR3_BITWORD FOLLOW_param_list_in_fun_decl_helper1428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_param_list_in_fun_decl_helper1428	= { FOLLOW_param_list_in_fun_decl_helper1428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Action_in_action_decl1464  */
static	ANTLR3_BITWORD FOLLOW_Action_in_action_decl1464_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Action_in_action_decl1464	= { FOLLOW_Action_in_action_decl1464_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_action_decl1466  */
static	ANTLR3_BITWORD FOLLOW_ID_in_action_decl1466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_action_decl1466	= { FOLLOW_ID_in_action_decl1466_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_param_list_in_action_decl1468  */
static	ANTLR3_BITWORD FOLLOW_param_list_in_action_decl1468_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000005) };
static  ANTLR3_BITSET_LIST FOLLOW_param_list_in_action_decl1468	= { FOLLOW_param_list_in_action_decl1468_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftB_in_action_decl1471  */
static	ANTLR3_BITWORD FOLLOW_LeftB_in_action_decl1471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftB_in_action_decl1471	= { FOLLOW_LeftB_in_action_decl1471_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Duration_in_action_decl1473  */
static	ANTLR3_BITWORD FOLLOW_Duration_in_action_decl1473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Duration_in_action_decl1473	= { FOLLOW_Duration_in_action_decl1473_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightB_in_action_decl1475  */
static	ANTLR3_BITWORD FOLLOW_RightB_in_action_decl1475_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000005) };
static  ANTLR3_BITSET_LIST FOLLOW_RightB_in_action_decl1475	= { FOLLOW_RightB_in_action_decl1475_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_action_block_in_action_decl1479  */
static	ANTLR3_BITWORD FOLLOW_action_block_in_action_decl1479_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_action_block_in_action_decl1479	= { FOLLOW_action_block_in_action_decl1479_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftB_in_durative_action_block1520  */
static	ANTLR3_BITWORD FOLLOW_LeftB_in_durative_action_block1520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftB_in_durative_action_block1520	= { FOLLOW_LeftB_in_durative_action_block1520_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Duration_in_durative_action_block1523  */
static	ANTLR3_BITWORD FOLLOW_Duration_in_durative_action_block1523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Duration_in_durative_action_block1523	= { FOLLOW_Duration_in_durative_action_block1523_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightB_in_durative_action_block1525  */
static	ANTLR3_BITWORD FOLLOW_RightB_in_durative_action_block1525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000005) };
static  ANTLR3_BITSET_LIST FOLLOW_RightB_in_durative_action_block1525	= { FOLLOW_RightB_in_durative_action_block1525_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_action_block_h_in_durative_action_block1528  */
static	ANTLR3_BITWORD FOLLOW_action_block_h_in_durative_action_block1528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_action_block_h_in_durative_action_block1528	= { FOLLOW_action_block_h_in_durative_action_block1528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_action_block_h_in_action_block1537  */
static	ANTLR3_BITWORD FOLLOW_action_block_h_in_action_block1537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_action_block_h_in_action_block1537	= { FOLLOW_action_block_h_in_action_block1537_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftC_in_action_block_h1547  */
static	ANTLR3_BITWORD FOLLOW_LeftC_in_action_block_h1547_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9F3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftC_in_action_block_h1547	= { FOLLOW_LeftC_in_action_block_h1547_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_decl_in_action_block_h1555  */
static	ANTLR3_BITWORD FOLLOW_type_decl_in_action_block_h1555_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9F3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_type_decl_in_action_block_h1555	= { FOLLOW_type_decl_in_action_block_h1555_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_const_decl_in_action_block_h1564  */
static	ANTLR3_BITWORD FOLLOW_const_decl_in_action_block_h1564_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9F3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_const_decl_in_action_block_h1564	= { FOLLOW_const_decl_in_action_block_h1564_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fluent_decl_in_action_block_h1573  */
static	ANTLR3_BITWORD FOLLOW_fluent_decl_in_action_block_h1573_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9F3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_fluent_decl_in_action_block_h1573	= { FOLLOW_fluent_decl_in_action_block_h1573_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_action_decl_in_action_block_h1582  */
static	ANTLR3_BITWORD FOLLOW_action_decl_in_action_block_h1582_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9F3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_action_decl_in_action_block_h1582	= { FOLLOW_action_decl_in_action_block_h1582_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_action_block_h1590  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_action_block_h1590_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9F3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_action_block_h1590	= { FOLLOW_stmt_in_action_block_h1590_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_problem_stmt_in_action_block_h1598  */
static	ANTLR3_BITWORD FOLLOW_problem_stmt_in_action_block_h1598_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9F3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_problem_stmt_in_action_block_h1598	= { FOLLOW_problem_stmt_in_action_block_h1598_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_decomp_block_in_action_block_h1610  */
static	ANTLR3_BITWORD FOLLOW_decomp_block_in_action_block_h1610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002002) };
static  ANTLR3_BITSET_LIST FOLLOW_decomp_block_in_action_block_h1610	= { FOLLOW_decomp_block_in_action_block_h1610_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightC_in_action_block_h1616  */
static	ANTLR3_BITWORD FOLLOW_RightC_in_action_block_h1616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightC_in_action_block_h1616	= { FOLLOW_RightC_in_action_block_h1616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Decomposition_in_decomp_block1716  */
static	ANTLR3_BITWORD FOLLOW_Decomposition_in_decomp_block1716_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_Decomposition_in_decomp_block1716	= { FOLLOW_Decomposition_in_decomp_block1716_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_decl_in_decomp_block1726  */
static	ANTLR3_BITWORD FOLLOW_type_decl_in_decomp_block1726_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_type_decl_in_decomp_block1726	= { FOLLOW_type_decl_in_decomp_block1726_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_const_decl_in_decomp_block1735  */
static	ANTLR3_BITWORD FOLLOW_const_decl_in_decomp_block1735_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_const_decl_in_decomp_block1735	= { FOLLOW_const_decl_in_decomp_block1735_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fluent_decl_in_decomp_block1744  */
static	ANTLR3_BITWORD FOLLOW_fluent_decl_in_decomp_block1744_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_fluent_decl_in_decomp_block1744	= { FOLLOW_fluent_decl_in_decomp_block1744_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_action_decl_in_decomp_block1753  */
static	ANTLR3_BITWORD FOLLOW_action_decl_in_decomp_block1753_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_action_decl_in_decomp_block1753	= { FOLLOW_action_decl_in_decomp_block1753_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_decomp_block1761  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_decomp_block1761_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_decomp_block1761	= { FOLLOW_stmt_in_decomp_block1761_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_problem_stmt_in_decomp_block1769  */
static	ANTLR3_BITWORD FOLLOW_problem_stmt_in_decomp_block1769_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00002), ANTLR3_UINT64_LIT(0x7E07840500D9D3A5) };
static  ANTLR3_BITSET_LIST FOLLOW_problem_stmt_in_decomp_block1769	= { FOLLOW_problem_stmt_in_decomp_block1769_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fact_decl_in_problem_stmt1873  */
static	ANTLR3_BITWORD FOLLOW_fact_decl_in_problem_stmt1873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_fact_decl_in_problem_stmt1873	= { FOLLOW_fact_decl_in_problem_stmt1873_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_goal_decl_in_problem_stmt1878  */
static	ANTLR3_BITWORD FOLLOW_goal_decl_in_problem_stmt1878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_goal_decl_in_problem_stmt1878	= { FOLLOW_goal_decl_in_problem_stmt1878_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Fact_in_fact_decl1888  */
static	ANTLR3_BITWORD FOLLOW_Fact_in_fact_decl1888_bits[]	= { ANTLR3_UINT64_LIT(0x1200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19025) };
static  ANTLR3_BITSET_LIST FOLLOW_Fact_in_fact_decl1888	= { FOLLOW_Fact_in_fact_decl1888_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftC_in_fact_decl1897  */
static	ANTLR3_BITWORD FOLLOW_LeftC_in_fact_decl1897_bits[]	= { ANTLR3_UINT64_LIT(0x1200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19027) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftC_in_fact_decl1897	= { FOLLOW_LeftC_in_fact_decl1897_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fact_decl_helper_in_fact_decl1899  */
static	ANTLR3_BITWORD FOLLOW_fact_decl_helper_in_fact_decl1899_bits[]	= { ANTLR3_UINT64_LIT(0x1200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19027) };
static  ANTLR3_BITSET_LIST FOLLOW_fact_decl_helper_in_fact_decl1899	= { FOLLOW_fact_decl_helper_in_fact_decl1899_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightC_in_fact_decl1902  */
static	ANTLR3_BITWORD FOLLOW_RightC_in_fact_decl1902_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightC_in_fact_decl1902	= { FOLLOW_RightC_in_fact_decl1902_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fact_decl_helper_in_fact_decl1924  */
static	ANTLR3_BITWORD FOLLOW_fact_decl_helper_in_fact_decl1924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_fact_decl_helper_in_fact_decl1924	= { FOLLOW_fact_decl_helper_in_fact_decl1924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_fact_decl_helper1961  */
static	ANTLR3_BITWORD FOLLOW_ref_in_fact_decl_helper1961_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_fact_decl_helper1961	= { FOLLOW_ref_in_fact_decl_helper1961_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_fact_decl_helper1963  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_fact_decl_helper1963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_fact_decl_helper1963	= { FOLLOW_Semi_in_fact_decl_helper1963_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NotLog_in_fact_decl_helper2014  */
static	ANTLR3_BITWORD FOLLOW_NotLog_in_fact_decl_helper2014_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_NotLog_in_fact_decl_helper2014	= { FOLLOW_NotLog_in_fact_decl_helper2014_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NotBit_in_fact_decl_helper2018  */
static	ANTLR3_BITWORD FOLLOW_NotBit_in_fact_decl_helper2018_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_NotBit_in_fact_decl_helper2018	= { FOLLOW_NotBit_in_fact_decl_helper2018_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_fact_decl_helper2021  */
static	ANTLR3_BITWORD FOLLOW_ref_in_fact_decl_helper2021_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_fact_decl_helper2021	= { FOLLOW_ref_in_fact_decl_helper2021_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_fact_decl_helper2023  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_fact_decl_helper2023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_fact_decl_helper2023	= { FOLLOW_Semi_in_fact_decl_helper2023_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_fact_decl_helper2058  */
static	ANTLR3_BITWORD FOLLOW_ref_in_fact_decl_helper2058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000060000) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_fact_decl_helper2058	= { FOLLOW_ref_in_fact_decl_helper2058_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EqualLog_in_fact_decl_helper2063  */
static	ANTLR3_BITWORD FOLLOW_EqualLog_in_fact_decl_helper2063_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_EqualLog_in_fact_decl_helper2063	= { FOLLOW_EqualLog_in_fact_decl_helper2063_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Equal_in_fact_decl_helper2067  */
static	ANTLR3_BITWORD FOLLOW_Equal_in_fact_decl_helper2067_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Equal_in_fact_decl_helper2067	= { FOLLOW_Equal_in_fact_decl_helper2067_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_fact_decl_helper2070  */
static	ANTLR3_BITWORD FOLLOW_expr_in_fact_decl_helper2070_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_fact_decl_helper2070	= { FOLLOW_expr_in_fact_decl_helper2070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_fact_decl_helper2072  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_fact_decl_helper2072_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_fact_decl_helper2072	= { FOLLOW_Semi_in_fact_decl_helper2072_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_fact_decl_helper2107  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_fact_decl_helper2107_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_fact_decl_helper2107	= { FOLLOW_Semi_in_fact_decl_helper2107_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Goal_in_goal_decl2117  */
static	ANTLR3_BITWORD FOLLOW_Goal_in_goal_decl2117_bits[]	= { ANTLR3_UINT64_LIT(0x1200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19025) };
static  ANTLR3_BITSET_LIST FOLLOW_Goal_in_goal_decl2117	= { FOLLOW_Goal_in_goal_decl2117_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftC_in_goal_decl2123  */
static	ANTLR3_BITWORD FOLLOW_LeftC_in_goal_decl2123_bits[]	= { ANTLR3_UINT64_LIT(0x1200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19027) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftC_in_goal_decl2123	= { FOLLOW_LeftC_in_goal_decl2123_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_goal_decl_helper_in_goal_decl2125  */
static	ANTLR3_BITWORD FOLLOW_goal_decl_helper_in_goal_decl2125_bits[]	= { ANTLR3_UINT64_LIT(0x1200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19027) };
static  ANTLR3_BITSET_LIST FOLLOW_goal_decl_helper_in_goal_decl2125	= { FOLLOW_goal_decl_helper_in_goal_decl2125_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightC_in_goal_decl2128  */
static	ANTLR3_BITWORD FOLLOW_RightC_in_goal_decl2128_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightC_in_goal_decl2128	= { FOLLOW_RightC_in_goal_decl2128_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_goal_decl_helper_in_goal_decl2141  */
static	ANTLR3_BITWORD FOLLOW_goal_decl_helper_in_goal_decl2141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_goal_decl_helper_in_goal_decl2141	= { FOLLOW_goal_decl_helper_in_goal_decl2141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_goal_decl_helper2162  */
static	ANTLR3_BITWORD FOLLOW_expr_in_goal_decl_helper2162_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_goal_decl_helper2162	= { FOLLOW_expr_in_goal_decl_helper2162_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_goal_decl_helper2164  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_goal_decl_helper2164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_goal_decl_helper2164	= { FOLLOW_Semi_in_goal_decl_helper2164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_goal_decl_helper2192  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_goal_decl_helper2192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_goal_decl_helper2192	= { FOLLOW_Semi_in_goal_decl_helper2192_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_primitive_in_stmt2215  */
static	ANTLR3_BITWORD FOLLOW_stmt_primitive_in_stmt2215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_primitive_in_stmt2215	= { FOLLOW_stmt_primitive_in_stmt2215_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_block_in_stmt2225  */
static	ANTLR3_BITWORD FOLLOW_stmt_block_in_stmt2225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_block_in_stmt2225	= { FOLLOW_stmt_block_in_stmt2225_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_timed_in_stmt2235  */
static	ANTLR3_BITWORD FOLLOW_stmt_timed_in_stmt2235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_timed_in_stmt2235	= { FOLLOW_stmt_timed_in_stmt2235_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_contains_in_stmt2240  */
static	ANTLR3_BITWORD FOLLOW_stmt_contains_in_stmt2240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_contains_in_stmt2240	= { FOLLOW_stmt_contains_in_stmt2240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_when_in_stmt2245  */
static	ANTLR3_BITWORD FOLLOW_stmt_when_in_stmt2245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_when_in_stmt2245	= { FOLLOW_stmt_when_in_stmt2245_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_forall_in_stmt2250  */
static	ANTLR3_BITWORD FOLLOW_stmt_forall_in_stmt2250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_forall_in_stmt2250	= { FOLLOW_stmt_forall_in_stmt2250_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_exists_in_stmt2255  */
static	ANTLR3_BITWORD FOLLOW_stmt_exists_in_stmt2255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_exists_in_stmt2255	= { FOLLOW_stmt_exists_in_stmt2255_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_stmt_primitive2272  */
static	ANTLR3_BITWORD FOLLOW_expr_in_stmt_primitive2272_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_stmt_primitive2272	= { FOLLOW_expr_in_stmt_primitive2272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_stmt_primitive2274  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_stmt_primitive2274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_stmt_primitive2274	= { FOLLOW_Semi_in_stmt_primitive2274_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_chain_in_stmt_primitive2289  */
static	ANTLR3_BITWORD FOLLOW_stmt_chain_in_stmt_primitive2289_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_chain_in_stmt_primitive2289	= { FOLLOW_stmt_chain_in_stmt_primitive2289_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_stmt_primitive2291  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_stmt_primitive2291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_stmt_primitive2291	= { FOLLOW_Semi_in_stmt_primitive2291_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_delta_chain_in_stmt_primitive2304  */
static	ANTLR3_BITWORD FOLLOW_stmt_delta_chain_in_stmt_primitive2304_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_delta_chain_in_stmt_primitive2304	= { FOLLOW_stmt_delta_chain_in_stmt_primitive2304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_stmt_primitive2306  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_stmt_primitive2306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_stmt_primitive2306	= { FOLLOW_Semi_in_stmt_primitive2306_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_timeless_in_stmt_primitive2321  */
static	ANTLR3_BITWORD FOLLOW_stmt_timeless_in_stmt_primitive2321_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_timeless_in_stmt_primitive2321	= { FOLLOW_stmt_timeless_in_stmt_primitive2321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_stmt_primitive2323  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_stmt_primitive2323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_stmt_primitive2323	= { FOLLOW_Semi_in_stmt_primitive2323_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_stmt_primitive2331  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_stmt_primitive2331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_stmt_primitive2331	= { FOLLOW_Semi_in_stmt_primitive2331_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftC_in_stmt_block2346  */
static	ANTLR3_BITWORD FOLLOW_LeftC_in_stmt_block2346_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftC_in_stmt_block2346	= { FOLLOW_LeftC_in_stmt_block2346_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_decl_in_stmt_block2354  */
static	ANTLR3_BITWORD FOLLOW_type_decl_in_stmt_block2354_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_type_decl_in_stmt_block2354	= { FOLLOW_type_decl_in_stmt_block2354_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_const_decl_in_stmt_block2363  */
static	ANTLR3_BITWORD FOLLOW_const_decl_in_stmt_block2363_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_const_decl_in_stmt_block2363	= { FOLLOW_const_decl_in_stmt_block2363_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fluent_decl_in_stmt_block2372  */
static	ANTLR3_BITWORD FOLLOW_fluent_decl_in_stmt_block2372_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_fluent_decl_in_stmt_block2372	= { FOLLOW_fluent_decl_in_stmt_block2372_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_action_decl_in_stmt_block2381  */
static	ANTLR3_BITWORD FOLLOW_action_decl_in_stmt_block2381_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_action_decl_in_stmt_block2381	= { FOLLOW_action_decl_in_stmt_block2381_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_stmt_block2389  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_stmt_block2389_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_stmt_block2389	= { FOLLOW_stmt_in_stmt_block2389_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_problem_stmt_in_stmt_block2397  */
static	ANTLR3_BITWORD FOLLOW_problem_stmt_in_stmt_block2397_bits[]	= { ANTLR3_UINT64_LIT(0x1220000004B00000), ANTLR3_UINT64_LIT(0x7E07840500D9D3A7) };
static  ANTLR3_BITSET_LIST FOLLOW_problem_stmt_in_stmt_block2397	= { FOLLOW_problem_stmt_in_stmt_block2397_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightC_in_stmt_block2409  */
static	ANTLR3_BITWORD FOLLOW_RightC_in_stmt_block2409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightC_in_stmt_block2409	= { FOLLOW_RightC_in_stmt_block2409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Contains_in_stmt_contains2501  */
static	ANTLR3_BITWORD FOLLOW_Contains_in_stmt_contains2501_bits[]	= { ANTLR3_UINT64_LIT(0x1220000000000000), ANTLR3_UINT64_LIT(0x7E07840500D19025) };
static  ANTLR3_BITSET_LIST FOLLOW_Contains_in_stmt_contains2501	= { FOLLOW_Contains_in_stmt_contains2501_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exist_time_in_stmt_contains2514  */
static	ANTLR3_BITWORD FOLLOW_exist_time_in_stmt_contains2514_bits[]	= { ANTLR3_UINT64_LIT(0x1220000000000000), ANTLR3_UINT64_LIT(0x7E07840500D19025) };
static  ANTLR3_BITSET_LIST FOLLOW_exist_time_in_stmt_contains2514	= { FOLLOW_exist_time_in_stmt_contains2514_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_stmt_contains2516  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_stmt_contains2516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_stmt_contains2516	= { FOLLOW_stmt_in_stmt_contains2516_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_stmt_contains2536  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_stmt_contains2536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_stmt_contains2536	= { FOLLOW_stmt_in_stmt_contains2536_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_When_in_stmt_when2562  */
static	ANTLR3_BITWORD FOLLOW_When_in_stmt_when2562_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_When_in_stmt_when2562	= { FOLLOW_When_in_stmt_when2562_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_guard_in_stmt_when2564  */
static	ANTLR3_BITWORD FOLLOW_guard_in_stmt_when2564_bits[]	= { ANTLR3_UINT64_LIT(0x1220000000000000), ANTLR3_UINT64_LIT(0x7E07840500D19025) };
static  ANTLR3_BITSET_LIST FOLLOW_guard_in_stmt_when2564	= { FOLLOW_guard_in_stmt_when2564_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_stmt_when2566  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_stmt_when2566_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_stmt_when2566	= { FOLLOW_stmt_in_stmt_when2566_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Else_in_stmt_when2579  */
static	ANTLR3_BITWORD FOLLOW_Else_in_stmt_when2579_bits[]	= { ANTLR3_UINT64_LIT(0x1220000000000000), ANTLR3_UINT64_LIT(0x7E07840500D19025) };
static  ANTLR3_BITSET_LIST FOLLOW_Else_in_stmt_when2579	= { FOLLOW_Else_in_stmt_when2579_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_stmt_when2581  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_stmt_when2581_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_stmt_when2581	= { FOLLOW_stmt_in_stmt_when2581_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ForAll_in_stmt_forall2628  */
static	ANTLR3_BITWORD FOLLOW_ForAll_in_stmt_forall2628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_ForAll_in_stmt_forall2628	= { FOLLOW_ForAll_in_stmt_forall2628_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_param_list_in_stmt_forall2630  */
static	ANTLR3_BITWORD FOLLOW_param_list_in_stmt_forall2630_bits[]	= { ANTLR3_UINT64_LIT(0x1220000000000000), ANTLR3_UINT64_LIT(0x7E07840500D19025) };
static  ANTLR3_BITSET_LIST FOLLOW_param_list_in_stmt_forall2630	= { FOLLOW_param_list_in_stmt_forall2630_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_stmt_forall2632  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_stmt_forall2632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_stmt_forall2632	= { FOLLOW_stmt_in_stmt_forall2632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Exists_in_stmt_exists2654  */
static	ANTLR3_BITWORD FOLLOW_Exists_in_stmt_exists2654_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Exists_in_stmt_exists2654	= { FOLLOW_Exists_in_stmt_exists2654_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_param_list_in_stmt_exists2656  */
static	ANTLR3_BITWORD FOLLOW_param_list_in_stmt_exists2656_bits[]	= { ANTLR3_UINT64_LIT(0x1220000000000000), ANTLR3_UINT64_LIT(0x7E07840500D19025) };
static  ANTLR3_BITSET_LIST FOLLOW_param_list_in_stmt_exists2656	= { FOLLOW_param_list_in_stmt_exists2656_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_stmt_exists2658  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_stmt_exists2658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_stmt_exists2658	= { FOLLOW_stmt_in_stmt_exists2658_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_interval_in_stmt_timed2680  */
static	ANTLR3_BITWORD FOLLOW_interval_in_stmt_timed2680_bits[]	= { ANTLR3_UINT64_LIT(0x1220000000000000), ANTLR3_UINT64_LIT(0x7E07840500D19025) };
static  ANTLR3_BITSET_LIST FOLLOW_interval_in_stmt_timed2680	= { FOLLOW_interval_in_stmt_timed2680_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_stmt_timed2682  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_stmt_timed2682_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_stmt_timed2682	= { FOLLOW_stmt_in_stmt_timed2682_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_stmt_chain2704  */
static	ANTLR3_BITWORD FOLLOW_ref_in_stmt_chain2704_bits[]	= { ANTLR3_UINT64_LIT(0x6800000000000000), ANTLR3_UINT64_LIT(0x80000000FF040800), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_stmt_chain2704	= { FOLLOW_ref_in_stmt_chain2704_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_chain_1_in_stmt_chain2708  */
static	ANTLR3_BITWORD FOLLOW_stmt_chain_1_in_stmt_chain2708_bits[]	= { ANTLR3_UINT64_LIT(0x6800000000000002), ANTLR3_UINT64_LIT(0x80000000FF040800), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_chain_1_in_stmt_chain2708	= { FOLLOW_stmt_chain_1_in_stmt_chain2708_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_interval_in_stmt_chain2775  */
static	ANTLR3_BITWORD FOLLOW_interval_in_stmt_chain2775_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_interval_in_stmt_chain2775	= { FOLLOW_interval_in_stmt_chain2775_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_stmt_chain2777  */
static	ANTLR3_BITWORD FOLLOW_ref_in_stmt_chain2777_bits[]	= { ANTLR3_UINT64_LIT(0x6800000000000000), ANTLR3_UINT64_LIT(0x80000000FF040800), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_stmt_chain2777	= { FOLLOW_ref_in_stmt_chain2777_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_chain_1_in_stmt_chain2781  */
static	ANTLR3_BITWORD FOLLOW_stmt_chain_1_in_stmt_chain2781_bits[]	= { ANTLR3_UINT64_LIT(0x6800000000000002), ANTLR3_UINT64_LIT(0x80000000FF040800), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_chain_1_in_stmt_chain2781	= { FOLLOW_stmt_chain_1_in_stmt_chain2781_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_chain_12810  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_chain_12810_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_chain_12810	= { FOLLOW_Comma_in_stmt_chain_12810_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Assign_in_stmt_chain_12814  */
static	ANTLR3_BITWORD FOLLOW_Assign_in_stmt_chain_12814_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Assign_in_stmt_chain_12814	= { FOLLOW_Assign_in_stmt_chain_12814_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_in_stmt_chain_12817  */
static	ANTLR3_BITWORD FOLLOW_e_num_in_stmt_chain_12817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_in_stmt_chain_12817	= { FOLLOW_e_num_in_stmt_chain_12817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_chain_12825  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_chain_12825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_chain_12825	= { FOLLOW_Comma_in_stmt_chain_12825_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Change_in_stmt_chain_12830  */
static	ANTLR3_BITWORD FOLLOW_Change_in_stmt_chain_12830_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Change_in_stmt_chain_12830	= { FOLLOW_Change_in_stmt_chain_12830_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_in_stmt_chain_12834  */
static	ANTLR3_BITWORD FOLLOW_e_num_in_stmt_chain_12834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_in_stmt_chain_12834	= { FOLLOW_e_num_in_stmt_chain_12834_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_chain_12865  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_chain_12865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_chain_12865	= { FOLLOW_Comma_in_stmt_chain_12865_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Produce_in_stmt_chain_12871  */
static	ANTLR3_BITWORD FOLLOW_Produce_in_stmt_chain_12871_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Produce_in_stmt_chain_12871	= { FOLLOW_Produce_in_stmt_chain_12871_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_in_stmt_chain_12876  */
static	ANTLR3_BITWORD FOLLOW_e_num_in_stmt_chain_12876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_in_stmt_chain_12876	= { FOLLOW_e_num_in_stmt_chain_12876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_chain_12884  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_chain_12884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_chain_12884	= { FOLLOW_Comma_in_stmt_chain_12884_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Consume_in_stmt_chain_12890  */
static	ANTLR3_BITWORD FOLLOW_Consume_in_stmt_chain_12890_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Consume_in_stmt_chain_12890	= { FOLLOW_Consume_in_stmt_chain_12890_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_in_stmt_chain_12895  */
static	ANTLR3_BITWORD FOLLOW_e_num_in_stmt_chain_12895_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_in_stmt_chain_12895	= { FOLLOW_e_num_in_stmt_chain_12895_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_chain_12903  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_chain_12903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_chain_12903	= { FOLLOW_Comma_in_stmt_chain_12903_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Lend_in_stmt_chain_12908  */
static	ANTLR3_BITWORD FOLLOW_Lend_in_stmt_chain_12908_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Lend_in_stmt_chain_12908	= { FOLLOW_Lend_in_stmt_chain_12908_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_in_stmt_chain_12912  */
static	ANTLR3_BITWORD FOLLOW_e_num_in_stmt_chain_12912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_in_stmt_chain_12912	= { FOLLOW_e_num_in_stmt_chain_12912_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_chain_12955  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_chain_12955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_chain_12955	= { FOLLOW_Comma_in_stmt_chain_12955_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Use_in_stmt_chain_12960  */
static	ANTLR3_BITWORD FOLLOW_Use_in_stmt_chain_12960_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Use_in_stmt_chain_12960	= { FOLLOW_Use_in_stmt_chain_12960_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_in_stmt_chain_12964  */
static	ANTLR3_BITWORD FOLLOW_e_num_in_stmt_chain_12964_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_in_stmt_chain_12964	= { FOLLOW_e_num_in_stmt_chain_12964_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_chain_13008  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_chain_13008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000060000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_chain_13008	= { FOLLOW_Comma_in_stmt_chain_13008_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Within_in_stmt_chain_13015  */
static	ANTLR3_BITWORD FOLLOW_Within_in_stmt_chain_13015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000005) };
static  ANTLR3_BITSET_LIST FOLLOW_Within_in_stmt_chain_13015	= { FOLLOW_Within_in_stmt_chain_13015_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SetAssign_in_stmt_chain_13019  */
static	ANTLR3_BITWORD FOLLOW_SetAssign_in_stmt_chain_13019_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000005) };
static  ANTLR3_BITSET_LIST FOLLOW_SetAssign_in_stmt_chain_13019	= { FOLLOW_SetAssign_in_stmt_chain_13019_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_stmt_chain_13025  */
static	ANTLR3_BITWORD FOLLOW_set_in_stmt_chain_13025_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_stmt_chain_13025	= { FOLLOW_set_in_stmt_chain_13025_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_chain_13033  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_chain_13033_bits[]	= { ANTLR3_UINT64_LIT(0x2800000000000000), ANTLR3_UINT64_LIT(0x8000000000040000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_chain_13033	= { FOLLOW_Comma_in_stmt_chain_13033_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_num_relop_in_stmt_chain_13039  */
static	ANTLR3_BITWORD FOLLOW_num_relop_in_stmt_chain_13039_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_num_relop_in_stmt_chain_13039	= { FOLLOW_num_relop_in_stmt_chain_13039_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_in_stmt_chain_13044  */
static	ANTLR3_BITWORD FOLLOW_e_num_in_stmt_chain_13044_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_in_stmt_chain_13044	= { FOLLOW_e_num_in_stmt_chain_13044_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_chain_13050  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_chain_13050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080040000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_chain_13050	= { FOLLOW_Comma_in_stmt_chain_13050_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Equal_in_stmt_chain_13056  */
static	ANTLR3_BITWORD FOLLOW_Equal_in_stmt_chain_13056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Equal_in_stmt_chain_13056	= { FOLLOW_Equal_in_stmt_chain_13056_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_stmt_chain_13058  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_stmt_chain_13058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_stmt_chain_13058	= { FOLLOW_Skip_in_stmt_chain_13058_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_stmt_chain_13064  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_stmt_chain_13064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_stmt_chain_13064	= { FOLLOW_Skip_in_stmt_chain_13064_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_chain_13079  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_chain_13079_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_chain_13079	= { FOLLOW_Comma_in_stmt_chain_13079_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Assign_in_stmt_chain_13085  */
static	ANTLR3_BITWORD FOLLOW_Assign_in_stmt_chain_13085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_Assign_in_stmt_chain_13085	= { FOLLOW_Assign_in_stmt_chain_13085_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Undefined_in_stmt_chain_13087  */
static	ANTLR3_BITWORD FOLLOW_Undefined_in_stmt_chain_13087_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Undefined_in_stmt_chain_13087	= { FOLLOW_Undefined_in_stmt_chain_13087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Undefine_in_stmt_chain_13093  */
static	ANTLR3_BITWORD FOLLOW_Undefine_in_stmt_chain_13093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Undefine_in_stmt_chain_13093	= { FOLLOW_Undefine_in_stmt_chain_13093_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Delta_in_stmt_delta_chain3114  */
static	ANTLR3_BITWORD FOLLOW_Delta_in_stmt_delta_chain3114_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Delta_in_stmt_delta_chain3114	= { FOLLOW_Delta_in_stmt_delta_chain3114_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_stmt_delta_chain3116  */
static	ANTLR3_BITWORD FOLLOW_ref_in_stmt_delta_chain3116_bits[]	= { ANTLR3_UINT64_LIT(0x4800000000000000), ANTLR3_UINT64_LIT(0x00000000C1040800) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_stmt_delta_chain3116	= { FOLLOW_ref_in_stmt_delta_chain3116_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_delta_chain_1_in_stmt_delta_chain3120  */
static	ANTLR3_BITWORD FOLLOW_stmt_delta_chain_1_in_stmt_delta_chain3120_bits[]	= { ANTLR3_UINT64_LIT(0x4800000000000002), ANTLR3_UINT64_LIT(0x00000000C1040800) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_delta_chain_1_in_stmt_delta_chain3120	= { FOLLOW_stmt_delta_chain_1_in_stmt_delta_chain3120_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_interval_in_stmt_delta_chain3192  */
static	ANTLR3_BITWORD FOLLOW_interval_in_stmt_delta_chain3192_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_interval_in_stmt_delta_chain3192	= { FOLLOW_interval_in_stmt_delta_chain3192_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_stmt_delta_chain3194  */
static	ANTLR3_BITWORD FOLLOW_ref_in_stmt_delta_chain3194_bits[]	= { ANTLR3_UINT64_LIT(0x4800000000000000), ANTLR3_UINT64_LIT(0x00000000C1040800) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_stmt_delta_chain3194	= { FOLLOW_ref_in_stmt_delta_chain3194_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_delta_chain_1_in_stmt_delta_chain3198  */
static	ANTLR3_BITWORD FOLLOW_stmt_delta_chain_1_in_stmt_delta_chain3198_bits[]	= { ANTLR3_UINT64_LIT(0x4800000000000002), ANTLR3_UINT64_LIT(0x00000000C1040800) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_delta_chain_1_in_stmt_delta_chain3198	= { FOLLOW_stmt_delta_chain_1_in_stmt_delta_chain3198_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_delta_chain_13232  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_delta_chain_13232_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_delta_chain_13232	= { FOLLOW_Comma_in_stmt_delta_chain_13232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Assign_in_stmt_delta_chain_13235  */
static	ANTLR3_BITWORD FOLLOW_Assign_in_stmt_delta_chain_13235_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Assign_in_stmt_delta_chain_13235	= { FOLLOW_Assign_in_stmt_delta_chain_13235_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_in_stmt_delta_chain_13240  */
static	ANTLR3_BITWORD FOLLOW_e_num_in_stmt_delta_chain_13240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_in_stmt_delta_chain_13240	= { FOLLOW_e_num_in_stmt_delta_chain_13240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_delta_chain_13248  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_delta_chain_13248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_delta_chain_13248	= { FOLLOW_Comma_in_stmt_delta_chain_13248_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Change_in_stmt_delta_chain_13253  */
static	ANTLR3_BITWORD FOLLOW_Change_in_stmt_delta_chain_13253_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Change_in_stmt_delta_chain_13253	= { FOLLOW_Change_in_stmt_delta_chain_13253_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_in_stmt_delta_chain_13257  */
static	ANTLR3_BITWORD FOLLOW_e_num_in_stmt_delta_chain_13257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_in_stmt_delta_chain_13257	= { FOLLOW_e_num_in_stmt_delta_chain_13257_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_delta_chain_13287  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_delta_chain_13287_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_delta_chain_13287	= { FOLLOW_Comma_in_stmt_delta_chain_13287_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SetAssign_in_stmt_delta_chain_13290  */
static	ANTLR3_BITWORD FOLLOW_SetAssign_in_stmt_delta_chain_13290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000005) };
static  ANTLR3_BITSET_LIST FOLLOW_SetAssign_in_stmt_delta_chain_13290	= { FOLLOW_SetAssign_in_stmt_delta_chain_13290_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_stmt_delta_chain_13295  */
static	ANTLR3_BITWORD FOLLOW_set_in_stmt_delta_chain_13295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_stmt_delta_chain_13295	= { FOLLOW_set_in_stmt_delta_chain_13295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_delta_chain_13300  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_delta_chain_13300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080040000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_delta_chain_13300	= { FOLLOW_Comma_in_stmt_delta_chain_13300_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Equal_in_stmt_delta_chain_13306  */
static	ANTLR3_BITWORD FOLLOW_Equal_in_stmt_delta_chain_13306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Equal_in_stmt_delta_chain_13306	= { FOLLOW_Equal_in_stmt_delta_chain_13306_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_stmt_delta_chain_13308  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_stmt_delta_chain_13308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_stmt_delta_chain_13308	= { FOLLOW_Skip_in_stmt_delta_chain_13308_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_stmt_delta_chain_13314  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_stmt_delta_chain_13314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_stmt_delta_chain_13314	= { FOLLOW_Skip_in_stmt_delta_chain_13314_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_stmt_delta_chain_13329  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_stmt_delta_chain_13329_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_stmt_delta_chain_13329	= { FOLLOW_Comma_in_stmt_delta_chain_13329_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Assign_in_stmt_delta_chain_13335  */
static	ANTLR3_BITWORD FOLLOW_Assign_in_stmt_delta_chain_13335_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_Assign_in_stmt_delta_chain_13335	= { FOLLOW_Assign_in_stmt_delta_chain_13335_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Undefined_in_stmt_delta_chain_13337  */
static	ANTLR3_BITWORD FOLLOW_Undefined_in_stmt_delta_chain_13337_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Undefined_in_stmt_delta_chain_13337	= { FOLLOW_Undefined_in_stmt_delta_chain_13337_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Undefine_in_stmt_delta_chain_13343  */
static	ANTLR3_BITWORD FOLLOW_Undefine_in_stmt_delta_chain_13343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Undefine_in_stmt_delta_chain_13343	= { FOLLOW_Undefine_in_stmt_delta_chain_13343_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_time_primitive_in_stmt_timeless3363  */
static	ANTLR3_BITWORD FOLLOW_time_primitive_in_stmt_timeless3363_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_time_primitive_in_stmt_timeless3363	= { FOLLOW_time_primitive_in_stmt_timeless3363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Assign_in_stmt_timeless3365  */
static	ANTLR3_BITWORD FOLLOW_Assign_in_stmt_timeless3365_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Assign_in_stmt_timeless3365	= { FOLLOW_Assign_in_stmt_timeless3365_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_stmt_timeless3368  */
static	ANTLR3_BITWORD FOLLOW_expr_in_stmt_timeless3368_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_stmt_timeless3368	= { FOLLOW_expr_in_stmt_timeless3368_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_guard3379  */
static	ANTLR3_BITWORD FOLLOW_expr_in_guard3379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_guard3379	= { FOLLOW_expr_in_guard3379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_univ_time_in_interval3393  */
static	ANTLR3_BITWORD FOLLOW_univ_time_in_interval3393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_univ_time_in_interval3393	= { FOLLOW_univ_time_in_interval3393_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exist_time_in_interval3402  */
static	ANTLR3_BITWORD FOLLOW_exist_time_in_interval3402_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exist_time_in_interval3402	= { FOLLOW_exist_time_in_interval3402_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bra_in_univ_time3427  */
static	ANTLR3_BITWORD FOLLOW_bra_in_univ_time3427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bra_in_univ_time3427	= { FOLLOW_bra_in_univ_time3427_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_All_in_univ_time3429  */
static	ANTLR3_BITWORD FOLLOW_All_in_univ_time3429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_All_in_univ_time3429	= { FOLLOW_All_in_univ_time3429_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_univ_time3431  */
static	ANTLR3_BITWORD FOLLOW_ket_in_univ_time3431_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_univ_time3431	= { FOLLOW_ket_in_univ_time3431_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftB_in_univ_time3479  */
static	ANTLR3_BITWORD FOLLOW_LeftB_in_univ_time3479_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftB_in_univ_time3479	= { FOLLOW_LeftB_in_univ_time3479_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_univ_time3483  */
static	ANTLR3_BITWORD FOLLOW_expr_in_univ_time3483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_univ_time3483	= { FOLLOW_expr_in_univ_time3483_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightB_in_univ_time3485  */
static	ANTLR3_BITWORD FOLLOW_RightB_in_univ_time3485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightB_in_univ_time3485	= { FOLLOW_RightB_in_univ_time3485_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bra_in_univ_time3507  */
static	ANTLR3_BITWORD FOLLOW_bra_in_univ_time3507_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840500D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_bra_in_univ_time3507	= { FOLLOW_bra_in_univ_time3507_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_delta_time_in_univ_time3517  */
static	ANTLR3_BITWORD FOLLOW_delta_time_in_univ_time3517_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_delta_time_in_univ_time3517	= { FOLLOW_delta_time_in_univ_time3517_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_univ_time3519  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_univ_time3519_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_univ_time3519	= { FOLLOW_Comma_in_univ_time3519_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_univ_time3523  */
static	ANTLR3_BITWORD FOLLOW_expr_in_univ_time3523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_univ_time3523	= { FOLLOW_expr_in_univ_time3523_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_univ_time3525  */
static	ANTLR3_BITWORD FOLLOW_ket_in_univ_time3525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_univ_time3525	= { FOLLOW_ket_in_univ_time3525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_univ_time3560  */
static	ANTLR3_BITWORD FOLLOW_expr_in_univ_time3560_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_univ_time3560	= { FOLLOW_expr_in_univ_time3560_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_univ_time3562  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_univ_time3562_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840500D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_univ_time3562	= { FOLLOW_Comma_in_univ_time3562_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_delta_time_in_univ_time3571  */
static	ANTLR3_BITWORD FOLLOW_delta_time_in_univ_time3571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_delta_time_in_univ_time3571	= { FOLLOW_delta_time_in_univ_time3571_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_univ_time3573  */
static	ANTLR3_BITWORD FOLLOW_ket_in_univ_time3573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_univ_time3573	= { FOLLOW_ket_in_univ_time3573_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_univ_time3609  */
static	ANTLR3_BITWORD FOLLOW_expr_in_univ_time3609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_univ_time3609	= { FOLLOW_expr_in_univ_time3609_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_univ_time3611  */
static	ANTLR3_BITWORD FOLLOW_ket_in_univ_time3611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_univ_time3611	= { FOLLOW_ket_in_univ_time3611_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftB_in_exist_time3669  */
static	ANTLR3_BITWORD FOLLOW_LeftB_in_exist_time3669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftB_in_exist_time3669	= { FOLLOW_LeftB_in_exist_time3669_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_exist_time3671  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_exist_time3671_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_exist_time3671	= { FOLLOW_Skip_in_exist_time3671_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightB_in_exist_time3673  */
static	ANTLR3_BITWORD FOLLOW_RightB_in_exist_time3673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightB_in_exist_time3673	= { FOLLOW_RightB_in_exist_time3673_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bra_in_exist_time3693  */
static	ANTLR3_BITWORD FOLLOW_bra_in_exist_time3693_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_bra_in_exist_time3693	= { FOLLOW_bra_in_exist_time3693_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exist_time3697  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exist_time3697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exist_time3697	= { FOLLOW_expr_in_exist_time3697_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_rLimit_in_exist_time3699  */
static	ANTLR3_BITWORD FOLLOW_rLimit_in_exist_time3699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_rLimit_in_exist_time3699	= { FOLLOW_rLimit_in_exist_time3699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lLimit_in_exist_time3730  */
static	ANTLR3_BITWORD FOLLOW_lLimit_in_exist_time3730_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_lLimit_in_exist_time3730	= { FOLLOW_lLimit_in_exist_time3730_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exist_time3734  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exist_time3734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exist_time3734	= { FOLLOW_expr_in_exist_time3734_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_exist_time3736  */
static	ANTLR3_BITWORD FOLLOW_ket_in_exist_time3736_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_exist_time3736	= { FOLLOW_ket_in_exist_time3736_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bra_in_exist_time3758  */
static	ANTLR3_BITWORD FOLLOW_bra_in_exist_time3758_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840580D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_bra_in_exist_time3758	= { FOLLOW_bra_in_exist_time3758_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_delta_time_in_exist_time3773  */
static	ANTLR3_BITWORD FOLLOW_delta_time_in_exist_time3773_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_delta_time_in_exist_time3773	= { FOLLOW_delta_time_in_exist_time3773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_exist_time3775  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_exist_time3775_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000048) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_exist_time3775	= { FOLLOW_Comma_in_exist_time3775_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_exist_time3777  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_exist_time3777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_exist_time3777	= { FOLLOW_Skip_in_exist_time3777_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_exist_time3780  */
static	ANTLR3_BITWORD FOLLOW_ket_in_exist_time3780_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_exist_time3780	= { FOLLOW_ket_in_exist_time3780_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_exist_time3809  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_exist_time3809_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_exist_time3809	= { FOLLOW_Skip_in_exist_time3809_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_exist_time3811  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_exist_time3811_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840580D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_exist_time3811	= { FOLLOW_Comma_in_exist_time3811_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_delta_time_in_exist_time3827  */
static	ANTLR3_BITWORD FOLLOW_delta_time_in_exist_time3827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_delta_time_in_exist_time3827	= { FOLLOW_delta_time_in_exist_time3827_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_exist_time3829  */
static	ANTLR3_BITWORD FOLLOW_ket_in_exist_time3829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_exist_time3829	= { FOLLOW_ket_in_exist_time3829_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_exist_time3857  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_exist_time3857_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_exist_time3857	= { FOLLOW_Skip_in_exist_time3857_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_exist_time3859  */
static	ANTLR3_BITWORD FOLLOW_ket_in_exist_time3859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_exist_time3859	= { FOLLOW_ket_in_exist_time3859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exist_time3878  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exist_time3878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exist_time3878	= { FOLLOW_expr_in_exist_time3878_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_exist_time3880  */
static	ANTLR3_BITWORD FOLLOW_ket_in_exist_time3880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_exist_time3880	= { FOLLOW_ket_in_exist_time3880_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_exist_time3910  */
static	ANTLR3_BITWORD FOLLOW_expr_in_exist_time3910_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_exist_time3910	= { FOLLOW_expr_in_exist_time3910_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_exist_time3912  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_exist_time3912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_exist_time3912	= { FOLLOW_Comma_in_exist_time3912_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_exist_time3914  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_exist_time3914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_exist_time3914	= { FOLLOW_Skip_in_exist_time3914_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_exist_time3916  */
static	ANTLR3_BITWORD FOLLOW_ket_in_exist_time3916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_exist_time3916	= { FOLLOW_ket_in_exist_time3916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Delta_in_delta_time3948  */
static	ANTLR3_BITWORD FOLLOW_Delta_in_delta_time3948_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Delta_in_delta_time3948	= { FOLLOW_Delta_in_delta_time3948_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_1_in_delta_time3951  */
static	ANTLR3_BITWORD FOLLOW_e_num_1_in_delta_time3951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_1_in_delta_time3951	= { FOLLOW_e_num_1_in_delta_time3951_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftB_in_bra3961  */
static	ANTLR3_BITWORD FOLLOW_LeftB_in_bra3961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftB_in_bra3961	= { FOLLOW_LeftB_in_bra3961_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_bra3976  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_bra3976_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_bra3976	= { FOLLOW_LeftP_in_bra3976_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightB_in_ket3994  */
static	ANTLR3_BITWORD FOLLOW_RightB_in_ket3994_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightB_in_ket3994	= { FOLLOW_RightB_in_ket3994_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_ket4009  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_ket4009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_ket4009	= { FOLLOW_RightP_in_ket4009_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Dots_in_lLimit4028  */
static	ANTLR3_BITWORD FOLLOW_Dots_in_lLimit4028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Dots_in_lLimit4028	= { FOLLOW_Dots_in_lLimit4028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Dots_in_rLimit4044  */
static	ANTLR3_BITWORD FOLLOW_Dots_in_rLimit4044_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Dots_in_rLimit4044	= { FOLLOW_Dots_in_rLimit4044_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_expr4068  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_expr4068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_expr4068	= { FOLLOW_e_prefix_in_expr4068_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_1_in_expr4073  */
static	ANTLR3_BITWORD FOLLOW_e_log_1_in_expr4073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_1_in_expr4073	= { FOLLOW_e_log_1_in_expr4073_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_e_prefix4084  */
static	ANTLR3_BITWORD FOLLOW_ID_in_e_prefix4084_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_e_prefix4084	= { FOLLOW_ID_in_e_prefix4084_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Colon_in_e_prefix4086  */
static	ANTLR3_BITWORD FOLLOW_Colon_in_e_prefix4086_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Colon_in_e_prefix4086	= { FOLLOW_Colon_in_e_prefix4086_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_e_prefix4090  */
static	ANTLR3_BITWORD FOLLOW_expr_in_e_prefix4090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_e_prefix4090	= { FOLLOW_expr_in_e_prefix4090_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_interval_in_e_prefix4116  */
static	ANTLR3_BITWORD FOLLOW_interval_in_e_prefix4116_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_interval_in_e_prefix4116	= { FOLLOW_interval_in_e_prefix4116_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_e_prefix4120  */
static	ANTLR3_BITWORD FOLLOW_expr_in_e_prefix4120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_e_prefix4120	= { FOLLOW_expr_in_e_prefix4120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Contains_in_e_prefix4145  */
static	ANTLR3_BITWORD FOLLOW_Contains_in_e_prefix4145_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Contains_in_e_prefix4145	= { FOLLOW_Contains_in_e_prefix4145_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exist_time_in_e_prefix4158  */
static	ANTLR3_BITWORD FOLLOW_exist_time_in_e_prefix4158_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_exist_time_in_e_prefix4158	= { FOLLOW_exist_time_in_e_prefix4158_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_e_prefix4162  */
static	ANTLR3_BITWORD FOLLOW_expr_in_e_prefix4162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_e_prefix4162	= { FOLLOW_expr_in_e_prefix4162_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_e_prefix4186  */
static	ANTLR3_BITWORD FOLLOW_expr_in_e_prefix4186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_e_prefix4186	= { FOLLOW_expr_in_e_prefix4186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ForAll_in_e_prefix4210  */
static	ANTLR3_BITWORD FOLLOW_ForAll_in_e_prefix4210_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_ForAll_in_e_prefix4210	= { FOLLOW_ForAll_in_e_prefix4210_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_param_list_in_e_prefix4212  */
static	ANTLR3_BITWORD FOLLOW_param_list_in_e_prefix4212_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_param_list_in_e_prefix4212	= { FOLLOW_param_list_in_e_prefix4212_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_e_prefix4216  */
static	ANTLR3_BITWORD FOLLOW_expr_in_e_prefix4216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_e_prefix4216	= { FOLLOW_expr_in_e_prefix4216_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Exists_in_e_prefix4235  */
static	ANTLR3_BITWORD FOLLOW_Exists_in_e_prefix4235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Exists_in_e_prefix4235	= { FOLLOW_Exists_in_e_prefix4235_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_param_list_in_e_prefix4237  */
static	ANTLR3_BITWORD FOLLOW_param_list_in_e_prefix4237_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_param_list_in_e_prefix4237	= { FOLLOW_param_list_in_e_prefix4237_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_e_prefix4241  */
static	ANTLR3_BITWORD FOLLOW_expr_in_e_prefix4241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_e_prefix4241	= { FOLLOW_expr_in_e_prefix4241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_2_in_e_log_14276  */
static	ANTLR3_BITWORD FOLLOW_e_log_2_in_e_log_14276_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_2_in_e_log_14276	= { FOLLOW_e_log_2_in_e_log_14276_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Implies_in_e_log_14283  */
static	ANTLR3_BITWORD FOLLOW_Implies_in_e_log_14283_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Implies_in_e_log_14283	= { FOLLOW_Implies_in_e_log_14283_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_log_14291  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_log_14291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_log_14291	= { FOLLOW_e_prefix_in_e_log_14291_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_1_in_e_log_14295  */
static	ANTLR3_BITWORD FOLLOW_e_log_1_in_e_log_14295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_1_in_e_log_14295	= { FOLLOW_e_log_1_in_e_log_14295_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_3_in_e_log_24308  */
static	ANTLR3_BITWORD FOLLOW_e_log_3_in_e_log_24308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_3_in_e_log_24308	= { FOLLOW_e_log_3_in_e_log_24308_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EqualLog_in_e_log_24315  */
static	ANTLR3_BITWORD FOLLOW_EqualLog_in_e_log_24315_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_EqualLog_in_e_log_24315	= { FOLLOW_EqualLog_in_e_log_24315_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_log_24323  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_log_24323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_log_24323	= { FOLLOW_e_prefix_in_e_log_24323_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_3_in_e_log_24327  */
static	ANTLR3_BITWORD FOLLOW_e_log_3_in_e_log_24327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_3_in_e_log_24327	= { FOLLOW_e_log_3_in_e_log_24327_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_4_in_e_log_34340  */
static	ANTLR3_BITWORD FOLLOW_e_log_4_in_e_log_34340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_4_in_e_log_34340	= { FOLLOW_e_log_4_in_e_log_34340_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_XorLog_in_e_log_34347  */
static	ANTLR3_BITWORD FOLLOW_XorLog_in_e_log_34347_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_XorLog_in_e_log_34347	= { FOLLOW_XorLog_in_e_log_34347_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_log_34355  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_log_34355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_log_34355	= { FOLLOW_e_prefix_in_e_log_34355_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_4_in_e_log_34359  */
static	ANTLR3_BITWORD FOLLOW_e_log_4_in_e_log_34359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_4_in_e_log_34359	= { FOLLOW_e_log_4_in_e_log_34359_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_5_in_e_log_44385  */
static	ANTLR3_BITWORD FOLLOW_e_log_5_in_e_log_44385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_5_in_e_log_44385	= { FOLLOW_e_log_5_in_e_log_44385_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OrLog_in_e_log_44392  */
static	ANTLR3_BITWORD FOLLOW_OrLog_in_e_log_44392_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_OrLog_in_e_log_44392	= { FOLLOW_OrLog_in_e_log_44392_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_log_44400  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_log_44400_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_log_44400	= { FOLLOW_e_prefix_in_e_log_44400_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_5_in_e_log_44404  */
static	ANTLR3_BITWORD FOLLOW_e_log_5_in_e_log_44404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_5_in_e_log_44404	= { FOLLOW_e_log_5_in_e_log_44404_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_6_in_e_log_54417  */
static	ANTLR3_BITWORD FOLLOW_e_log_6_in_e_log_54417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_6_in_e_log_54417	= { FOLLOW_e_log_6_in_e_log_54417_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AndLog_in_e_log_54424  */
static	ANTLR3_BITWORD FOLLOW_AndLog_in_e_log_54424_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_AndLog_in_e_log_54424	= { FOLLOW_AndLog_in_e_log_54424_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_log_54432  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_log_54432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_log_54432	= { FOLLOW_e_prefix_in_e_log_54432_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_6_in_e_log_54436  */
static	ANTLR3_BITWORD FOLLOW_e_log_6_in_e_log_54436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_6_in_e_log_54436	= { FOLLOW_e_log_6_in_e_log_54436_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NotLog_in_e_log_64453  */
static	ANTLR3_BITWORD FOLLOW_NotLog_in_e_log_64453_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_NotLog_in_e_log_64453	= { FOLLOW_NotLog_in_e_log_64453_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_log_64461  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_log_64461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_log_64461	= { FOLLOW_e_prefix_in_e_log_64461_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_6_in_e_log_64465  */
static	ANTLR3_BITWORD FOLLOW_e_log_6_in_e_log_64465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_6_in_e_log_64465	= { FOLLOW_e_log_6_in_e_log_64465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_log_7_in_e_log_64471  */
static	ANTLR3_BITWORD FOLLOW_e_log_7_in_e_log_64471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_log_7_in_e_log_64471	= { FOLLOW_e_log_7_in_e_log_64471_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_1_in_e_log_74481  */
static	ANTLR3_BITWORD FOLLOW_e_num_1_in_e_log_74481_bits[]	= { ANTLR3_UINT64_LIT(0x2800000000000002), ANTLR3_UINT64_LIT(0x8000000000040000), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_1_in_e_log_74481	= { FOLLOW_e_num_1_in_e_log_74481_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_num_relop_in_e_log_74488  */
static	ANTLR3_BITWORD FOLLOW_num_relop_in_e_log_74488_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_num_relop_in_e_log_74488	= { FOLLOW_num_relop_in_e_log_74488_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_log_74496  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_log_74496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_log_74496	= { FOLLOW_e_prefix_in_e_log_74496_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_1_in_e_log_74500  */
static	ANTLR3_BITWORD FOLLOW_e_num_1_in_e_log_74500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_1_in_e_log_74500	= { FOLLOW_e_num_1_in_e_log_74500_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_num4517  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_num4517_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_num4517	= { FOLLOW_e_prefix_in_e_num4517_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_1_in_e_num4522  */
static	ANTLR3_BITWORD FOLLOW_e_num_1_in_e_num4522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_1_in_e_num4522	= { FOLLOW_e_num_1_in_e_num4522_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_2_in_e_num_14532  */
static	ANTLR3_BITWORD FOLLOW_e_num_2_in_e_num_14532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_2_in_e_num_14532	= { FOLLOW_e_num_2_in_e_num_14532_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_XorBit_in_e_num_14539  */
static	ANTLR3_BITWORD FOLLOW_XorBit_in_e_num_14539_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_XorBit_in_e_num_14539	= { FOLLOW_XorBit_in_e_num_14539_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_num_14547  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_num_14547_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_num_14547	= { FOLLOW_e_prefix_in_e_num_14547_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_2_in_e_num_14551  */
static	ANTLR3_BITWORD FOLLOW_e_num_2_in_e_num_14551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_2_in_e_num_14551	= { FOLLOW_e_num_2_in_e_num_14551_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_3_in_e_num_24564  */
static	ANTLR3_BITWORD FOLLOW_e_num_3_in_e_num_24564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00000E0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_3_in_e_num_24564	= { FOLLOW_e_num_3_in_e_num_24564_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Plus_in_e_num_24576  */
static	ANTLR3_BITWORD FOLLOW_Plus_in_e_num_24576_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Plus_in_e_num_24576	= { FOLLOW_Plus_in_e_num_24576_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Minus_in_e_num_24579  */
static	ANTLR3_BITWORD FOLLOW_Minus_in_e_num_24579_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Minus_in_e_num_24579	= { FOLLOW_Minus_in_e_num_24579_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OrBit_in_e_num_24582  */
static	ANTLR3_BITWORD FOLLOW_OrBit_in_e_num_24582_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_OrBit_in_e_num_24582	= { FOLLOW_OrBit_in_e_num_24582_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_num_24591  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_num_24591_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00000E0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_num_24591	= { FOLLOW_e_prefix_in_e_num_24591_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_3_in_e_num_24595  */
static	ANTLR3_BITWORD FOLLOW_e_num_3_in_e_num_24595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00000E0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_3_in_e_num_24595	= { FOLLOW_e_num_3_in_e_num_24595_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_4_in_e_num_34608  */
static	ANTLR3_BITWORD FOLLOW_e_num_4_in_e_num_34608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000700000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_4_in_e_num_34608	= { FOLLOW_e_num_4_in_e_num_34608_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Times_in_e_num_34623  */
static	ANTLR3_BITWORD FOLLOW_Times_in_e_num_34623_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Times_in_e_num_34623	= { FOLLOW_Times_in_e_num_34623_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Divide_in_e_num_34626  */
static	ANTLR3_BITWORD FOLLOW_Divide_in_e_num_34626_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Divide_in_e_num_34626	= { FOLLOW_Divide_in_e_num_34626_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AndBit_in_e_num_34629  */
static	ANTLR3_BITWORD FOLLOW_AndBit_in_e_num_34629_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_AndBit_in_e_num_34629	= { FOLLOW_AndBit_in_e_num_34629_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_num_34642  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_num_34642_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000700000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_num_34642	= { FOLLOW_e_prefix_in_e_num_34642_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_4_in_e_num_34650  */
static	ANTLR3_BITWORD FOLLOW_e_num_4_in_e_num_34650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000700000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_4_in_e_num_34650	= { FOLLOW_e_num_4_in_e_num_34650_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Minus_in_e_num_44677  */
static	ANTLR3_BITWORD FOLLOW_Minus_in_e_num_44677_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Minus_in_e_num_44677	= { FOLLOW_Minus_in_e_num_44677_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NotBit_in_e_num_44680  */
static	ANTLR3_BITWORD FOLLOW_NotBit_in_e_num_44680_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_NotBit_in_e_num_44680	= { FOLLOW_NotBit_in_e_num_44680_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_e_num_44692  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_e_num_44692_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_e_num_44692	= { FOLLOW_e_prefix_in_e_num_44692_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_num_4_in_e_num_44699  */
static	ANTLR3_BITWORD FOLLOW_e_num_4_in_e_num_44699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_num_4_in_e_num_44699	= { FOLLOW_e_num_4_in_e_num_44699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_atomic_in_e_num_44708  */
static	ANTLR3_BITWORD FOLLOW_e_atomic_in_e_num_44708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_atomic_in_e_num_44708	= { FOLLOW_e_atomic_in_e_num_44708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_e_atomic4718  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_e_atomic4718_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_e_atomic4718	= { FOLLOW_LeftP_in_e_atomic4718_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_e_atomic4721  */
static	ANTLR3_BITWORD FOLLOW_expr_in_e_atomic4721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_e_atomic4721	= { FOLLOW_expr_in_e_atomic4721_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_e_atomic4723  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_e_atomic4723_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_e_atomic4723	= { FOLLOW_RightP_in_e_atomic4723_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_time_primitive_in_e_atomic4729  */
static	ANTLR3_BITWORD FOLLOW_time_primitive_in_e_atomic4729_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_time_primitive_in_e_atomic4729	= { FOLLOW_time_primitive_in_e_atomic4729_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_time_complex_in_e_atomic4734  */
static	ANTLR3_BITWORD FOLLOW_time_complex_in_e_atomic4734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_time_complex_in_e_atomic4734	= { FOLLOW_time_complex_in_e_atomic4734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_e_atomic4739  */
static	ANTLR3_BITWORD FOLLOW_literal_in_e_atomic4739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_e_atomic4739	= { FOLLOW_literal_in_e_atomic4739_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_e_atomic4744  */
static	ANTLR3_BITWORD FOLLOW_ref_in_e_atomic4744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_e_atomic4744	= { FOLLOW_ref_in_e_atomic4744_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Unordered_in_time_complex4756  */
static	ANTLR3_BITWORD FOLLOW_Unordered_in_time_complex4756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Unordered_in_time_complex4756	= { FOLLOW_Unordered_in_time_complex4756_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Ordered_in_time_complex4759  */
static	ANTLR3_BITWORD FOLLOW_Ordered_in_time_complex4759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Ordered_in_time_complex4759	= { FOLLOW_Ordered_in_time_complex4759_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_time_complex4763  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_time_complex4763_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_time_complex4763	= { FOLLOW_LeftP_in_time_complex4763_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_time_complex4766  */
static	ANTLR3_BITWORD FOLLOW_expr_in_time_complex4766_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_time_complex4766	= { FOLLOW_expr_in_time_complex4766_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_time_complex4769  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_time_complex4769_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_time_complex4769	= { FOLLOW_Comma_in_time_complex4769_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_time_complex4772  */
static	ANTLR3_BITWORD FOLLOW_expr_in_time_complex4772_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_time_complex4772	= { FOLLOW_expr_in_time_complex4772_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_time_complex4776  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_time_complex4776_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_time_complex4776	= { FOLLOW_RightP_in_time_complex4776_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_ref4790  */
static	ANTLR3_BITWORD FOLLOW_ID_in_ref4790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_ref4790	= { FOLLOW_ID_in_ref4790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Start_in_time_primitive4834  */
static	ANTLR3_BITWORD FOLLOW_Start_in_time_primitive4834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Start_in_time_primitive4834	= { FOLLOW_Start_in_time_primitive4834_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_time_primitive4836  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_time_primitive4836_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_time_primitive4836	= { FOLLOW_LeftP_in_time_primitive4836_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_time_primitive4838  */
static	ANTLR3_BITWORD FOLLOW_ID_in_time_primitive4838_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_time_primitive4838	= { FOLLOW_ID_in_time_primitive4838_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_time_primitive4840  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_time_primitive4840_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_time_primitive4840	= { FOLLOW_RightP_in_time_primitive4840_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Start_in_time_primitive4861  */
static	ANTLR3_BITWORD FOLLOW_Start_in_time_primitive4861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Start_in_time_primitive4861	= { FOLLOW_Start_in_time_primitive4861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_End_in_time_primitive4892  */
static	ANTLR3_BITWORD FOLLOW_End_in_time_primitive4892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_End_in_time_primitive4892	= { FOLLOW_End_in_time_primitive4892_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_time_primitive4894  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_time_primitive4894_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_time_primitive4894	= { FOLLOW_LeftP_in_time_primitive4894_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_time_primitive4896  */
static	ANTLR3_BITWORD FOLLOW_ID_in_time_primitive4896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_time_primitive4896	= { FOLLOW_ID_in_time_primitive4896_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_time_primitive4898  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_time_primitive4898_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_time_primitive4898	= { FOLLOW_RightP_in_time_primitive4898_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_End_in_time_primitive4916  */
static	ANTLR3_BITWORD FOLLOW_End_in_time_primitive4916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_End_in_time_primitive4916	= { FOLLOW_End_in_time_primitive4916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Duration_in_time_primitive4947  */
static	ANTLR3_BITWORD FOLLOW_Duration_in_time_primitive4947_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Duration_in_time_primitive4947	= { FOLLOW_Duration_in_time_primitive4947_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_time_primitive4949  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_time_primitive4949_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_time_primitive4949	= { FOLLOW_LeftP_in_time_primitive4949_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_time_primitive4951  */
static	ANTLR3_BITWORD FOLLOW_ID_in_time_primitive4951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_time_primitive4951	= { FOLLOW_ID_in_time_primitive4951_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_time_primitive4953  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_time_primitive4953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_time_primitive4953	= { FOLLOW_RightP_in_time_primitive4953_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Duration_in_time_primitive4971  */
static	ANTLR3_BITWORD FOLLOW_Duration_in_time_primitive4971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Duration_in_time_primitive4971	= { FOLLOW_Duration_in_time_primitive4971_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_arg_list5007  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_arg_list5007_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19064) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_arg_list5007	= { FOLLOW_LeftP_in_arg_list5007_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_arg_list5010  */
static	ANTLR3_BITWORD FOLLOW_expr_in_arg_list5010_bits[]	= { ANTLR3_UINT64_LIT(0x0A00000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19064) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_arg_list5010	= { FOLLOW_expr_in_arg_list5010_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Comma_in_arg_list5013  */
static	ANTLR3_BITWORD FOLLOW_Comma_in_arg_list5013_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_Comma_in_arg_list5013	= { FOLLOW_Comma_in_arg_list5013_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_arg_list5016  */
static	ANTLR3_BITWORD FOLLOW_expr_in_arg_list5016_bits[]	= { ANTLR3_UINT64_LIT(0x0A00000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19064) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_arg_list5016	= { FOLLOW_expr_in_arg_list5016_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_arg_list5022  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_arg_list5022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_arg_list5022	= { FOLLOW_RightP_in_arg_list5022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_builtinType0  */
static	ANTLR3_BITWORD FOLLOW_set_in_builtinType0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_builtinType0	= { FOLLOW_set_in_builtinType0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_num_relop0  */
static	ANTLR3_BITWORD FOLLOW_set_in_num_relop0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_num_relop0	= { FOLLOW_set_in_num_relop0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_synpred1_ANML1955  */
static	ANTLR3_BITWORD FOLLOW_ref_in_synpred1_ANML1955_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_synpred1_ANML1955	= { FOLLOW_ref_in_synpred1_ANML1955_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_synpred1_ANML1957  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_synpred1_ANML1957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_synpred1_ANML1957	= { FOLLOW_Semi_in_synpred1_ANML1957_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred2_ANML1999  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred2_ANML1999_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred2_ANML1999	= { FOLLOW_set_in_synpred2_ANML1999_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_synpred2_ANML2005  */
static	ANTLR3_BITWORD FOLLOW_ref_in_synpred2_ANML2005_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_synpred2_ANML2005	= { FOLLOW_ref_in_synpred2_ANML2005_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_synpred2_ANML2007  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_synpred2_ANML2007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_synpred2_ANML2007	= { FOLLOW_Semi_in_synpred2_ANML2007_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_primitive_in_synpred3_ANML2211  */
static	ANTLR3_BITWORD FOLLOW_stmt_primitive_in_synpred3_ANML2211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_primitive_in_synpred3_ANML2211	= { FOLLOW_stmt_primitive_in_synpred3_ANML2211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_block_in_synpred4_ANML2221  */
static	ANTLR3_BITWORD FOLLOW_stmt_block_in_synpred4_ANML2221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_block_in_synpred4_ANML2221	= { FOLLOW_stmt_block_in_synpred4_ANML2221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_timed_in_synpred5_ANML2231  */
static	ANTLR3_BITWORD FOLLOW_stmt_timed_in_synpred5_ANML2231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_timed_in_synpred5_ANML2231	= { FOLLOW_stmt_timed_in_synpred5_ANML2231_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_synpred6_ANML2266  */
static	ANTLR3_BITWORD FOLLOW_expr_in_synpred6_ANML2266_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_synpred6_ANML2266	= { FOLLOW_expr_in_synpred6_ANML2266_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_synpred6_ANML2268  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_synpred6_ANML2268_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_synpred6_ANML2268	= { FOLLOW_Semi_in_synpred6_ANML2268_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_chain_in_synpred7_ANML2283  */
static	ANTLR3_BITWORD FOLLOW_stmt_chain_in_synpred7_ANML2283_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_chain_in_synpred7_ANML2283	= { FOLLOW_stmt_chain_in_synpred7_ANML2283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_synpred7_ANML2285  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_synpred7_ANML2285_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_synpred7_ANML2285	= { FOLLOW_Semi_in_synpred7_ANML2285_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_delta_chain_in_synpred8_ANML2298  */
static	ANTLR3_BITWORD FOLLOW_stmt_delta_chain_in_synpred8_ANML2298_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_delta_chain_in_synpred8_ANML2298	= { FOLLOW_stmt_delta_chain_in_synpred8_ANML2298_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_synpred8_ANML2300  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_synpred8_ANML2300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_synpred8_ANML2300	= { FOLLOW_Semi_in_synpred8_ANML2300_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_timeless_in_synpred9_ANML2315  */
static	ANTLR3_BITWORD FOLLOW_stmt_timeless_in_synpred9_ANML2315_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_timeless_in_synpred9_ANML2315	= { FOLLOW_stmt_timeless_in_synpred9_ANML2315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Semi_in_synpred9_ANML2317  */
static	ANTLR3_BITWORD FOLLOW_Semi_in_synpred9_ANML2317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Semi_in_synpred9_ANML2317	= { FOLLOW_Semi_in_synpred9_ANML2317_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exist_time_in_synpred10_ANML2508  */
static	ANTLR3_BITWORD FOLLOW_exist_time_in_synpred10_ANML2508_bits[]	= { ANTLR3_UINT64_LIT(0x1220000000000000), ANTLR3_UINT64_LIT(0x7E07840500D19025) };
static  ANTLR3_BITSET_LIST FOLLOW_exist_time_in_synpred10_ANML2508	= { FOLLOW_exist_time_in_synpred10_ANML2508_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_in_synpred10_ANML2510  */
static	ANTLR3_BITWORD FOLLOW_stmt_in_synpred10_ANML2510_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_in_synpred10_ANML2510	= { FOLLOW_stmt_in_synpred10_ANML2510_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Else_in_synpred11_ANML2575  */
static	ANTLR3_BITWORD FOLLOW_Else_in_synpred11_ANML2575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Else_in_synpred11_ANML2575	= { FOLLOW_Else_in_synpred11_ANML2575_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_interval_in_synpred12_ANML2766  */
static	ANTLR3_BITWORD FOLLOW_interval_in_synpred12_ANML2766_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_interval_in_synpred12_ANML2766	= { FOLLOW_interval_in_synpred12_ANML2766_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_synpred12_ANML2768  */
static	ANTLR3_BITWORD FOLLOW_ref_in_synpred12_ANML2768_bits[]	= { ANTLR3_UINT64_LIT(0x6800000000000000), ANTLR3_UINT64_LIT(0x80000000FF040800), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_synpred12_ANML2768	= { FOLLOW_ref_in_synpred12_ANML2768_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_chain_1_in_synpred12_ANML2770  */
static	ANTLR3_BITWORD FOLLOW_stmt_chain_1_in_synpred12_ANML2770_bits[]	= { ANTLR3_UINT64_LIT(0x6800000000000002), ANTLR3_UINT64_LIT(0x80000000FF040800), ANTLR3_UINT64_LIT(0x0000000000000007) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_chain_1_in_synpred12_ANML2770	= { FOLLOW_stmt_chain_1_in_synpred12_ANML2770_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_interval_in_synpred13_ANML3183  */
static	ANTLR3_BITWORD FOLLOW_interval_in_synpred13_ANML3183_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_interval_in_synpred13_ANML3183	= { FOLLOW_interval_in_synpred13_ANML3183_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ref_in_synpred13_ANML3185  */
static	ANTLR3_BITWORD FOLLOW_ref_in_synpred13_ANML3185_bits[]	= { ANTLR3_UINT64_LIT(0x4800000000000000), ANTLR3_UINT64_LIT(0x00000000C1040800) };
static  ANTLR3_BITSET_LIST FOLLOW_ref_in_synpred13_ANML3185	= { FOLLOW_ref_in_synpred13_ANML3185_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stmt_delta_chain_1_in_synpred13_ANML3187  */
static	ANTLR3_BITWORD FOLLOW_stmt_delta_chain_1_in_synpred13_ANML3187_bits[]	= { ANTLR3_UINT64_LIT(0x4800000000000002), ANTLR3_UINT64_LIT(0x00000000C1040800) };
static  ANTLR3_BITSET_LIST FOLLOW_stmt_delta_chain_1_in_synpred13_ANML3187	= { FOLLOW_stmt_delta_chain_1_in_synpred13_ANML3187_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_univ_time_in_synpred14_ANML3390  */
static	ANTLR3_BITWORD FOLLOW_univ_time_in_synpred14_ANML3390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_univ_time_in_synpred14_ANML3390	= { FOLLOW_univ_time_in_synpred14_ANML3390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exist_time_in_synpred15_ANML3399  */
static	ANTLR3_BITWORD FOLLOW_exist_time_in_synpred15_ANML3399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exist_time_in_synpred15_ANML3399	= { FOLLOW_exist_time_in_synpred15_ANML3399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bra_in_synpred16_ANML3419  */
static	ANTLR3_BITWORD FOLLOW_bra_in_synpred16_ANML3419_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bra_in_synpred16_ANML3419	= { FOLLOW_bra_in_synpred16_ANML3419_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_All_in_synpred16_ANML3421  */
static	ANTLR3_BITWORD FOLLOW_All_in_synpred16_ANML3421_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_All_in_synpred16_ANML3421	= { FOLLOW_All_in_synpred16_ANML3421_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_synpred16_ANML3423  */
static	ANTLR3_BITWORD FOLLOW_ket_in_synpred16_ANML3423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_synpred16_ANML3423	= { FOLLOW_ket_in_synpred16_ANML3423_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftB_in_synpred17_ANML3471  */
static	ANTLR3_BITWORD FOLLOW_LeftB_in_synpred17_ANML3471_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftB_in_synpred17_ANML3471	= { FOLLOW_LeftB_in_synpred17_ANML3471_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_synpred17_ANML3473  */
static	ANTLR3_BITWORD FOLLOW_expr_in_synpred17_ANML3473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_synpred17_ANML3473	= { FOLLOW_expr_in_synpred17_ANML3473_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightB_in_synpred17_ANML3475  */
static	ANTLR3_BITWORD FOLLOW_RightB_in_synpred17_ANML3475_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightB_in_synpred17_ANML3475	= { FOLLOW_RightB_in_synpred17_ANML3475_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftB_in_synpred18_ANML3661  */
static	ANTLR3_BITWORD FOLLOW_LeftB_in_synpred18_ANML3661_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftB_in_synpred18_ANML3661	= { FOLLOW_LeftB_in_synpred18_ANML3661_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_synpred18_ANML3663  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_synpred18_ANML3663_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_synpred18_ANML3663	= { FOLLOW_Skip_in_synpred18_ANML3663_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightB_in_synpred18_ANML3665  */
static	ANTLR3_BITWORD FOLLOW_RightB_in_synpred18_ANML3665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightB_in_synpred18_ANML3665	= { FOLLOW_RightB_in_synpred18_ANML3665_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bra_in_synpred19_ANML3685  */
static	ANTLR3_BITWORD FOLLOW_bra_in_synpred19_ANML3685_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_bra_in_synpred19_ANML3685	= { FOLLOW_bra_in_synpred19_ANML3685_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_synpred19_ANML3687  */
static	ANTLR3_BITWORD FOLLOW_expr_in_synpred19_ANML3687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_synpred19_ANML3687	= { FOLLOW_expr_in_synpred19_ANML3687_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_rLimit_in_synpred19_ANML3689  */
static	ANTLR3_BITWORD FOLLOW_rLimit_in_synpred19_ANML3689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_rLimit_in_synpred19_ANML3689	= { FOLLOW_rLimit_in_synpred19_ANML3689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lLimit_in_synpred20_ANML3722  */
static	ANTLR3_BITWORD FOLLOW_lLimit_in_synpred20_ANML3722_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_lLimit_in_synpred20_ANML3722	= { FOLLOW_lLimit_in_synpred20_ANML3722_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_synpred20_ANML3724  */
static	ANTLR3_BITWORD FOLLOW_expr_in_synpred20_ANML3724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000048) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_synpred20_ANML3724	= { FOLLOW_expr_in_synpred20_ANML3724_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ket_in_synpred20_ANML3726  */
static	ANTLR3_BITWORD FOLLOW_ket_in_synpred20_ANML3726_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ket_in_synpred20_ANML3726	= { FOLLOW_ket_in_synpred20_ANML3726_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Delta_in_synpred21_ANML3767  */
static	ANTLR3_BITWORD FOLLOW_Delta_in_synpred21_ANML3767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Delta_in_synpred21_ANML3767	= { FOLLOW_Delta_in_synpred21_ANML3767_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_synpred22_ANML3805  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_synpred22_ANML3805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_synpred22_ANML3805	= { FOLLOW_Skip_in_synpred22_ANML3805_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Delta_in_synpred23_ANML3821  */
static	ANTLR3_BITWORD FOLLOW_Delta_in_synpred23_ANML3821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Delta_in_synpred23_ANML3821	= { FOLLOW_Delta_in_synpred23_ANML3821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Skip_in_synpred24_ANML3853  */
static	ANTLR3_BITWORD FOLLOW_Skip_in_synpred24_ANML3853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Skip_in_synpred24_ANML3853	= { FOLLOW_Skip_in_synpred24_ANML3853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred25_ANML4065  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred25_ANML4065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred25_ANML4065	= { FOLLOW_e_prefix_in_synpred25_ANML4065_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_interval_in_synpred26_ANML4110  */
static	ANTLR3_BITWORD FOLLOW_interval_in_synpred26_ANML4110_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_interval_in_synpred26_ANML4110	= { FOLLOW_interval_in_synpred26_ANML4110_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_synpred26_ANML4112  */
static	ANTLR3_BITWORD FOLLOW_expr_in_synpred26_ANML4112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_synpred26_ANML4112	= { FOLLOW_expr_in_synpred26_ANML4112_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Contains_in_synpred27_ANML4141  */
static	ANTLR3_BITWORD FOLLOW_Contains_in_synpred27_ANML4141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Contains_in_synpred27_ANML4141	= { FOLLOW_Contains_in_synpred27_ANML4141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exist_time_in_synpred28_ANML4152  */
static	ANTLR3_BITWORD FOLLOW_exist_time_in_synpred28_ANML4152_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000), ANTLR3_UINT64_LIT(0x7E07840400D19024) };
static  ANTLR3_BITSET_LIST FOLLOW_exist_time_in_synpred28_ANML4152	= { FOLLOW_exist_time_in_synpred28_ANML4152_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_synpred28_ANML4154  */
static	ANTLR3_BITWORD FOLLOW_expr_in_synpred28_ANML4154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_synpred28_ANML4154	= { FOLLOW_expr_in_synpred28_ANML4154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Implies_in_synpred29_ANML4280  */
static	ANTLR3_BITWORD FOLLOW_Implies_in_synpred29_ANML4280_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Implies_in_synpred29_ANML4280	= { FOLLOW_Implies_in_synpred29_ANML4280_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred30_ANML4288  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred30_ANML4288_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred30_ANML4288	= { FOLLOW_e_prefix_in_synpred30_ANML4288_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EqualLog_in_synpred31_ANML4312  */
static	ANTLR3_BITWORD FOLLOW_EqualLog_in_synpred31_ANML4312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EqualLog_in_synpred31_ANML4312	= { FOLLOW_EqualLog_in_synpred31_ANML4312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred32_ANML4320  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred32_ANML4320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred32_ANML4320	= { FOLLOW_e_prefix_in_synpred32_ANML4320_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_XorLog_in_synpred33_ANML4344  */
static	ANTLR3_BITWORD FOLLOW_XorLog_in_synpred33_ANML4344_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_XorLog_in_synpred33_ANML4344	= { FOLLOW_XorLog_in_synpred33_ANML4344_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred34_ANML4352  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred34_ANML4352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred34_ANML4352	= { FOLLOW_e_prefix_in_synpred34_ANML4352_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OrLog_in_synpred35_ANML4389  */
static	ANTLR3_BITWORD FOLLOW_OrLog_in_synpred35_ANML4389_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OrLog_in_synpred35_ANML4389	= { FOLLOW_OrLog_in_synpred35_ANML4389_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred36_ANML4397  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred36_ANML4397_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred36_ANML4397	= { FOLLOW_e_prefix_in_synpred36_ANML4397_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AndLog_in_synpred37_ANML4421  */
static	ANTLR3_BITWORD FOLLOW_AndLog_in_synpred37_ANML4421_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_AndLog_in_synpred37_ANML4421	= { FOLLOW_AndLog_in_synpred37_ANML4421_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred38_ANML4429  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred38_ANML4429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred38_ANML4429	= { FOLLOW_e_prefix_in_synpred38_ANML4429_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NotLog_in_synpred39_ANML4450  */
static	ANTLR3_BITWORD FOLLOW_NotLog_in_synpred39_ANML4450_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NotLog_in_synpred39_ANML4450	= { FOLLOW_NotLog_in_synpred39_ANML4450_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred40_ANML4458  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred40_ANML4458_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred40_ANML4458	= { FOLLOW_e_prefix_in_synpred40_ANML4458_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_num_relop_in_synpred41_ANML4485  */
static	ANTLR3_BITWORD FOLLOW_num_relop_in_synpred41_ANML4485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_num_relop_in_synpred41_ANML4485	= { FOLLOW_num_relop_in_synpred41_ANML4485_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred42_ANML4493  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred42_ANML4493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred42_ANML4493	= { FOLLOW_e_prefix_in_synpred42_ANML4493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred43_ANML4514  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred43_ANML4514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred43_ANML4514	= { FOLLOW_e_prefix_in_synpred43_ANML4514_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_XorBit_in_synpred44_ANML4536  */
static	ANTLR3_BITWORD FOLLOW_XorBit_in_synpred44_ANML4536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_XorBit_in_synpred44_ANML4536	= { FOLLOW_XorBit_in_synpred44_ANML4536_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred45_ANML4544  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred45_ANML4544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred45_ANML4544	= { FOLLOW_e_prefix_in_synpred45_ANML4544_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred46_ANML4567  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred46_ANML4567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred46_ANML4567	= { FOLLOW_set_in_synpred46_ANML4567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred47_ANML4588  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred47_ANML4588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred47_ANML4588	= { FOLLOW_e_prefix_in_synpred47_ANML4588_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred48_ANML4614  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred48_ANML4614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred48_ANML4614	= { FOLLOW_set_in_synpred48_ANML4614_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred49_ANML4639  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred49_ANML4639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred49_ANML4639	= { FOLLOW_e_prefix_in_synpred49_ANML4639_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred50_ANML4670  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred50_ANML4670_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred50_ANML4670	= { FOLLOW_set_in_synpred50_ANML4670_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_e_prefix_in_synpred51_ANML4689  */
static	ANTLR3_BITWORD FOLLOW_e_prefix_in_synpred51_ANML4689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_e_prefix_in_synpred51_ANML4689	= { FOLLOW_e_prefix_in_synpred51_ANML4689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Start_in_synpred52_ANML4824  */
static	ANTLR3_BITWORD FOLLOW_Start_in_synpred52_ANML4824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Start_in_synpred52_ANML4824	= { FOLLOW_Start_in_synpred52_ANML4824_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_synpred52_ANML4826  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_synpred52_ANML4826_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_synpred52_ANML4826	= { FOLLOW_LeftP_in_synpred52_ANML4826_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_synpred52_ANML4828  */
static	ANTLR3_BITWORD FOLLOW_ID_in_synpred52_ANML4828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_synpred52_ANML4828	= { FOLLOW_ID_in_synpred52_ANML4828_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_synpred52_ANML4830  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_synpred52_ANML4830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_synpred52_ANML4830	= { FOLLOW_RightP_in_synpred52_ANML4830_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_End_in_synpred53_ANML4882  */
static	ANTLR3_BITWORD FOLLOW_End_in_synpred53_ANML4882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_End_in_synpred53_ANML4882	= { FOLLOW_End_in_synpred53_ANML4882_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_synpred53_ANML4884  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_synpred53_ANML4884_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_synpred53_ANML4884	= { FOLLOW_LeftP_in_synpred53_ANML4884_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_synpred53_ANML4886  */
static	ANTLR3_BITWORD FOLLOW_ID_in_synpred53_ANML4886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_synpred53_ANML4886	= { FOLLOW_ID_in_synpred53_ANML4886_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_synpred53_ANML4888  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_synpred53_ANML4888_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_synpred53_ANML4888	= { FOLLOW_RightP_in_synpred53_ANML4888_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Duration_in_synpred54_ANML4937  */
static	ANTLR3_BITWORD FOLLOW_Duration_in_synpred54_ANML4937_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Duration_in_synpred54_ANML4937	= { FOLLOW_Duration_in_synpred54_ANML4937_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LeftP_in_synpred54_ANML4939  */
static	ANTLR3_BITWORD FOLLOW_LeftP_in_synpred54_ANML4939_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LeftP_in_synpred54_ANML4939	= { FOLLOW_LeftP_in_synpred54_ANML4939_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_synpred54_ANML4941  */
static	ANTLR3_BITWORD FOLLOW_ID_in_synpred54_ANML4941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_synpred54_ANML4941	= { FOLLOW_ID_in_synpred54_ANML4941_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RightP_in_synpred54_ANML4943  */
static	ANTLR3_BITWORD FOLLOW_RightP_in_synpred54_ANML4943_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RightP_in_synpred54_ANML4943	= { FOLLOW_RightP_in_synpred54_ANML4943_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    431:1: stmt : ( ( stmt_primitive )=> stmt_primitive | ( stmt_block )=> stmt_block | ( stmt_timed )=> stmt_timed | stmt_contains | stmt_when | stmt_forall | stmt_exists );
 */
static const ANTLR3_INT32 dfa41_eot[25] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa41_eof[25] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa41_min[25] =
    {
	53, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa41_max[25] =
    {
	126, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa41_accept[25] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 3, 
	4, 6, 7
    };
static const ANTLR3_INT32 dfa41_special[25] =
    {	
	0, -1, 1, 2, 3, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa41_T_empty	    NULL

static const ANTLR3_INT32 dfa41_T0[] =
    {
	20, -1, -1, -1, 1, -1, -1, 18, -1, -1, -1, 19, -1, 2, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, 13, -1, -1, 8, 10, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, 
	-1, -1, -1, -1, -1, 17, -1, 4, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 
	-1, 14, 15, 11, 12, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16
    };static const ANTLR3_INT32 dfa41_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa41_transitions[] =
{
    dfa41_T0, dfa41_T_empty, dfa41_T1, dfa41_T1, dfa41_T1, dfa41_T1, dfa41_T1, 
    dfa41_T1, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, 
    dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, 
    dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, dfa41_T_empty, 
    dfa41_T_empty, dfa41_T_empty, dfa41_T_empty	
};

static ANTLR3_INT32 dfa41_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA41_0;

    	    ANTLR3_MARKER index41_0;


    		LA41_0 = LA(1);

    	 
    	    index41_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA41_0 == ID) && (synpred3_ANML(ctx)))
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA41_0 == LeftB) )
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA41_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA41_0 == Dots) )
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA41_0 == Contains) )
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA41_0 == ForAll) )
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA41_0 == Exists) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA41_0 == NotLog) && (synpred3_ANML(ctx)))
    	    {
    	        s = 8;
    	    }

    	    else if ( (LA41_0 == Minus) && (synpred3_ANML(ctx)))
    	    {
    	        s = 9;
    	    }

    	    else if ( (LA41_0 == NotBit) && (synpred3_ANML(ctx)))
    	    {
    	        s = 10;
    	    }

    	    else if ( (LA41_0 == Start) && (synpred3_ANML(ctx)))
    	    {
    	        s = 11;
    	    }

    	    else if ( (LA41_0 == End) && (synpred3_ANML(ctx)))
    	    {
    	        s = 12;
    	    }

    	    else if ( (LA41_0 == Duration) && (synpred3_ANML(ctx)))
    	    {
    	        s = 13;
    	    }

    	    else if ( (LA41_0 == Unordered) && (synpred3_ANML(ctx)))
    	    {
    	        s = 14;
    	    }

    	    else if ( (LA41_0 == Ordered) && (synpred3_ANML(ctx)))
    	    {
    	        s = 15;
    	    }

    	    else if ( (((LA41_0 >= INT) && (LA41_0 <= Infinity))) && (synpred3_ANML(ctx)))
    	    {
    	        s = 16;
    	    }

    	    else if ( (LA41_0 == Delta) && (synpred3_ANML(ctx)))
    	    {
    	        s = 17;
    	    }

    	    else if ( (LA41_0 == Semi) && (synpred3_ANML(ctx)))
    	    {
    	        s = 18;
    	    }

    	    else if ( (LA41_0 == LeftC) && (synpred4_ANML(ctx)))
    	    {
    	        s = 19;
    	    }

    	    else if ( (LA41_0 == When) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index41_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA41_2;

    	    ANTLR3_MARKER index41_2;


    		LA41_2 = LA(1);

    	 
    	    index41_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred3_ANML(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (synpred5_ANML(ctx)) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index41_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA41_3;

    	    ANTLR3_MARKER index41_3;


    		LA41_3 = LA(1);

    	 
    	    index41_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred3_ANML(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (synpred5_ANML(ctx)) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index41_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA41_4;

    	    ANTLR3_MARKER index41_4;


    		LA41_4 = LA(1);

    	 
    	    index41_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred3_ANML(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (synpred5_ANML(ctx)) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index41_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA41_5;

    	    ANTLR3_MARKER index41_5;


    		LA41_5 = LA(1);

    	 
    	    index41_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred3_ANML(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index41_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA41_6;

    	    ANTLR3_MARKER index41_6;


    		LA41_6 = LA(1);

    	 
    	    index41_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred3_ANML(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index41_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA41_7;

    	    ANTLR3_MARKER index41_7;


    		LA41_7 = LA(1);

    	 
    	    index41_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred3_ANML(ctx)) )
    	    {
    	        s = 18;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 24;
    	    }

    	 
    		SEEK(index41_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"431:1: stmt : ( ( stmt_primitive )=> stmt_primitive | ( stmt_block )=> stmt_block | ( stmt_timed )=> stmt_timed | stmt_contains | stmt_when | stmt_forall | stmt_exists );";
    EXCEPTION->decisionNum  = 41;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 41
 */
static
ANTLR3_CYCLIC_DFA cdfa41
    =	{
	    41,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"431:1: stmt : ( ( stmt_primitive )=> stmt_primitive | ( stmt_block )=> stmt_block | ( stmt_timed )=> stmt_timed | stmt_contains | stmt_when | stmt_forall | stmt_exists );",	
	    (CDFA_SPECIAL_FUNC) dfa41_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa41_eot,	    /* EOT table			    */
	    dfa41_eof,	    /* EOF table			    */
	    dfa41_min,	    /* Minimum tokens for each state    */
	    dfa41_max,	    /* Maximum tokens for each state    */
	    dfa41_accept,	/* Accept table			    */
	    dfa41_special,	/* Special transition states	    */
	    dfa41_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 41
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    441:1: stmt_primitive : ( ( expr Semi )=> expr Semi | ( stmt_chain Semi )=> stmt_chain Semi | ( stmt_delta_chain Semi )=> stmt_delta_chain Semi | ( stmt_timeless Semi )=> stmt_timeless Semi | Semi -> Skip );
 */
static const ANTLR3_INT32 dfa42_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa42_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa42_min[21] =
    {
	57, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa42_max[21] =
    {
	126, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa42_accept[21] =
    {
	-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 3, 5, 2, 4
    };
static const ANTLR3_INT32 dfa42_special[21] =
    {	
	0, 1, 2, 3, 4, -1, -1, -1, -1, -1, -1, 5, 6, 7, -1, -1, -1, -1, -1, -1, 
	-1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa42_T_empty	    NULL

static const ANTLR3_INT32 dfa42_T0[] =
    {
	1, -1, -1, 18, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	13, -1, -1, 8, 10, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, 17, -1, 4, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, 14, 15, 11, 
	12, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16
    };static const ANTLR3_INT32 dfa42_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa42_transitions[] =
{
    dfa42_T0, dfa42_T1, dfa42_T1, dfa42_T1, dfa42_T1, dfa42_T_empty, dfa42_T_empty, 
    dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, dfa42_T1, 
    dfa42_T1, dfa42_T1, dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, 
    dfa42_T_empty, dfa42_T_empty, dfa42_T_empty	
};

static ANTLR3_INT32 dfa42_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA42_0;

    	    ANTLR3_MARKER index42_0;


    		LA42_0 = LA(1);

    	 
    	    index42_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA42_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA42_0 == LeftB) )
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA42_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA42_0 == Dots) )
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA42_0 == Contains) && (synpred6_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA42_0 == ForAll) && (synpred6_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA42_0 == Exists) && (synpred6_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA42_0 == NotLog) && (synpred6_ANML(ctx)))
    	    {
    	        s = 8;
    	    }

    	    else if ( (LA42_0 == Minus) && (synpred6_ANML(ctx)))
    	    {
    	        s = 9;
    	    }

    	    else if ( (LA42_0 == NotBit) && (synpred6_ANML(ctx)))
    	    {
    	        s = 10;
    	    }

    	    else if ( (LA42_0 == Start) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (LA42_0 == End) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (LA42_0 == Duration) )
    	    {
    	        s = 13;
    	    }

    	    else if ( (LA42_0 == Unordered) && (synpred6_ANML(ctx)))
    	    {
    	        s = 14;
    	    }

    	    else if ( (LA42_0 == Ordered) && (synpred6_ANML(ctx)))
    	    {
    	        s = 15;
    	    }

    	    else if ( (((LA42_0 >= INT) && (LA42_0 <= Infinity))) && (synpred6_ANML(ctx)))
    	    {
    	        s = 16;
    	    }

    	    else if ( (LA42_0 == Delta) && (synpred8_ANML(ctx)))
    	    {
    	        s = 17;
    	    }

    	    else if ( (LA42_0 == Semi) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index42_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA42_1;

    	    ANTLR3_MARKER index42_1;


    		LA42_1 = LA(1);

    	 
    	    index42_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred6_ANML(ctx)) )
    	    {
    	        s = 16;
    	    }

    	    else if ( (synpred7_ANML(ctx)) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index42_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA42_2;

    	    ANTLR3_MARKER index42_2;


    		LA42_2 = LA(1);

    	 
    	    index42_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred6_ANML(ctx)) )
    	    {
    	        s = 16;
    	    }

    	    else if ( (synpred7_ANML(ctx)) )
    	    {
    	        s = 19;
    	    }

    	    else if ( (synpred8_ANML(ctx)) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index42_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA42_3;

    	    ANTLR3_MARKER index42_3;


    		LA42_3 = LA(1);

    	 
    	    index42_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred6_ANML(ctx)) )
    	    {
    	        s = 16;
    	    }

    	    else if ( (synpred7_ANML(ctx)) )
    	    {
    	        s = 19;
    	    }

    	    else if ( (synpred8_ANML(ctx)) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index42_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA42_4;

    	    ANTLR3_MARKER index42_4;


    		LA42_4 = LA(1);

    	 
    	    index42_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred6_ANML(ctx)) )
    	    {
    	        s = 16;
    	    }

    	    else if ( (synpred7_ANML(ctx)) )
    	    {
    	        s = 19;
    	    }

    	    else if ( (synpred8_ANML(ctx)) )
    	    {
    	        s = 17;
    	    }

    	 
    		SEEK(index42_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA42_11;

    	    ANTLR3_MARKER index42_11;


    		LA42_11 = LA(1);

    	 
    	    index42_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred6_ANML(ctx)) )
    	    {
    	        s = 16;
    	    }

    	    else if ( (synpred9_ANML(ctx)) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index42_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA42_12;

    	    ANTLR3_MARKER index42_12;


    		LA42_12 = LA(1);

    	 
    	    index42_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred6_ANML(ctx)) )
    	    {
    	        s = 16;
    	    }

    	    else if ( (synpred9_ANML(ctx)) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index42_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA42_13;

    	    ANTLR3_MARKER index42_13;


    		LA42_13 = LA(1);

    	 
    	    index42_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred6_ANML(ctx)) )
    	    {
    	        s = 16;
    	    }

    	    else if ( (synpred9_ANML(ctx)) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index42_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"441:1: stmt_primitive : ( ( expr Semi )=> expr Semi | ( stmt_chain Semi )=> stmt_chain Semi | ( stmt_delta_chain Semi )=> stmt_delta_chain Semi | ( stmt_timeless Semi )=> stmt_timeless Semi | Semi -> Skip );";
    EXCEPTION->decisionNum  = 42;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 42
 */
static
ANTLR3_CYCLIC_DFA cdfa42
    =	{
	    42,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"441:1: stmt_primitive : ( ( expr Semi )=> expr Semi | ( stmt_chain Semi )=> stmt_chain Semi | ( stmt_delta_chain Semi )=> stmt_delta_chain Semi | ( stmt_timeless Semi )=> stmt_timeless Semi | Semi -> Skip );",	
	    (CDFA_SPECIAL_FUNC) dfa42_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa42_eot,	    /* EOT table			    */
	    dfa42_eof,	    /* EOF table			    */
	    dfa42_min,	    /* Minimum tokens for each state    */
	    dfa42_max,	    /* Maximum tokens for each state    */
	    dfa42_accept,	/* Accept table			    */
	    dfa42_special,	/* Special transition states	    */
	    dfa42_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 42
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    473:3: ( ( exist_time stmt )=> exist_time stmt -> ^( ContainsSomeStmt[$Contains] exist_time stmt ) | stmt -> ^( ContainsAllStmt[$Contains] stmt ) )
 */
static const ANTLR3_INT32 dfa44_eot[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa44_eof[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa44_min[22] =
    {
	53, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa44_max[22] =
    {
	126, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa44_accept[22] =
    {
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa44_special[22] =
    {	
	-1, 0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa44_T_empty	    NULL

static const ANTLR3_INT32 dfa44_T0[] =
    {
	4, -1, -1, -1, 4, -1, -1, 4, -1, -1, -1, 4, -1, 1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, 4, -1, -1, 4, 4, -1, -1, -1, 4, -1, 4, 4, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, 3, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, 4, 
	4, 4, 4, -1, -1, -1, -1, -1, -1, 4, 4, 4, 4, 4, 4
    };static const ANTLR3_INT32 dfa44_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa44_transitions[] =
{
    dfa44_T0, dfa44_T1, dfa44_T1, dfa44_T1, dfa44_T_empty, dfa44_T_empty, 
    dfa44_T_empty, dfa44_T_empty, dfa44_T_empty, dfa44_T_empty, dfa44_T_empty, 
    dfa44_T_empty, dfa44_T_empty, dfa44_T_empty, dfa44_T_empty, dfa44_T_empty, 
    dfa44_T_empty, dfa44_T_empty, dfa44_T_empty, dfa44_T_empty, dfa44_T_empty, 
    dfa44_T_empty	
};

static ANTLR3_INT32 dfa44_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA44_1;

    	    ANTLR3_MARKER index44_1;


    		LA44_1 = LA(1);

    	 
    	    index44_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred10_ANML(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index44_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA44_2;

    	    ANTLR3_MARKER index44_2;


    		LA44_2 = LA(1);

    	 
    	    index44_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred10_ANML(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index44_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA44_3;

    	    ANTLR3_MARKER index44_3;


    		LA44_3 = LA(1);

    	 
    	    index44_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred10_ANML(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index44_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"473:3: ( ( exist_time stmt )=> exist_time stmt -> ^( ContainsSomeStmt[$Contains] exist_time stmt ) | stmt -> ^( ContainsAllStmt[$Contains] stmt ) )";
    EXCEPTION->decisionNum  = 44;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 44
 */
static
ANTLR3_CYCLIC_DFA cdfa44
    =	{
	    44,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"473:3: ( ( exist_time stmt )=> exist_time stmt -> ^( ContainsSomeStmt[$Contains] exist_time stmt ) | stmt -> ^( ContainsAllStmt[$Contains] stmt ) )",	
	    (CDFA_SPECIAL_FUNC) dfa44_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa44_eot,	    /* EOT table			    */
	    dfa44_eof,	    /* EOF table			    */
	    dfa44_min,	    /* Minimum tokens for each state    */
	    dfa44_max,	    /* Maximum tokens for each state    */
	    dfa44_accept,	/* Accept table			    */
	    dfa44_special,	/* Special transition states	    */
	    dfa44_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 44
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    511:1: stmt_chain_1 : ( ( Comma )? Assign e_num | ( Comma )? o= Change b= e_num -> Undefine ^( Assign $b) | ( Comma )? o= Produce b= e_num | ( Comma )? o= Consume b= e_num | ( Comma )? o= Lend b= e_num -> ^( Produce $b) Skip ^( Consume $b) | ( Comma )? o= Use b= e_num -> ^( Consume $b) Skip ^( Produce $b) | ( Comma )? (o= Within | o= SetAssign ) s= set | ( Comma )? i= num_relop b= e_num | ( Comma )? (o= Equal Skip | o= Skip ) -> Skip | ( Comma )? (o= Assign Undefined | o= Undefine ) -> Undefine );
 */
static const ANTLR3_INT32 dfa62_eot[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa62_eof[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa62_min[14] =
    {
	59, 61, 57, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa62_max[14] =
    {
	130, 130, 126, -1, -1, -1, -1, -1, -1, 126, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa62_accept[14] =
    {
	-1, -1, -1, 2, 3, 4, 5, 6, 7, -1, 8, 9, 10, 1
    };
static const ANTLR3_INT32 dfa62_special[14] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa62_T_empty	    NULL

static const ANTLR3_INT32 dfa62_T0[] =
    {
	10, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1, -1, 
	-1, 10, -1, -1, -1, 10, -1, -1, -1, 10, -1, 10, 10, -1, -1, -1, -1, -1, 
	-1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 
	10, 10, 10, 10, -1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10
    };static const ANTLR3_INT32 dfa62_T1[] =
    {
	13, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, 13, -1, -1, -1, -1, 12, 
	-1, 13, -1, -1, -1, 13, -1, -1, -1, 13, -1, 13, 13, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, 
	13, 13, 13, 13, -1, -1, -1, -1, -1, -1, 13, 13, 13, 13, 13, 13
    };static const ANTLR3_INT32 dfa62_T2[] =
    {
	1, -1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, 
	-1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 3, 4, 5, 6, 7, 8, 8, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 10, 10
    };static const ANTLR3_INT32 dfa62_T3[] =
    {
	10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 
	-1, -1, -1, 9, -1, -1, -1, -1, -1, 3, 4, 5, 6, 7, 8, 8, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 10, 10
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa62_transitions[] =
{
    dfa62_T2, dfa62_T3, dfa62_T1, dfa62_T_empty, dfa62_T_empty, dfa62_T_empty, 
    dfa62_T_empty, dfa62_T_empty, dfa62_T_empty, dfa62_T0, dfa62_T_empty, 
    dfa62_T_empty, dfa62_T_empty, dfa62_T_empty	
};


/* Declare tracking structure for Cyclic DFA 62
 */
static
ANTLR3_CYCLIC_DFA cdfa62
    =	{
	    62,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"511:1: stmt_chain_1 : ( ( Comma )? Assign e_num | ( Comma )? o= Change b= e_num -> Undefine ^( Assign $b) | ( Comma )? o= Produce b= e_num | ( Comma )? o= Consume b= e_num | ( Comma )? o= Lend b= e_num -> ^( Produce $b) Skip ^( Consume $b) | ( Comma )? o= Use b= e_num -> ^( Consume $b) Skip ^( Produce $b) | ( Comma )? (o= Within | o= SetAssign ) s= set | ( Comma )? i= num_relop b= e_num | ( Comma )? (o= Equal Skip | o= Skip ) -> Skip | ( Comma )? (o= Assign Undefined | o= Undefine ) -> Undefine );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa62_eot,	    /* EOT table			    */
	    dfa62_eof,	    /* EOF table			    */
	    dfa62_min,	    /* Minimum tokens for each state    */
	    dfa62_max,	    /* Maximum tokens for each state    */
	    dfa62_accept,	/* Accept table			    */
	    dfa62_special,	/* Special transition states	    */
	    dfa62_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 62
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    624:1: expr : ( ( e_prefix )=> e_prefix | e_log_1 );
 */
static const ANTLR3_INT32 dfa84_eot[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa84_eof[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa84_min[17] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa84_max[17] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa84_accept[17] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa84_special[17] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa84_T_empty	    NULL

static const ANTLR3_INT32 dfa84_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, 8, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 8, -1, 
	-1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa84_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa84_transitions[] =
{
    dfa84_T0, dfa84_T1, dfa84_T_empty, dfa84_T1, dfa84_T_empty, dfa84_T_empty, 
    dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, 
    dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, dfa84_T_empty, 
    dfa84_T_empty	
};

static ANTLR3_INT32 dfa84_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA84_0;

    	    ANTLR3_MARKER index84_0;


    		LA84_0 = LA(1);

    	 
    	    index84_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA84_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA84_0 == LeftB) && (synpred25_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA84_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA84_0 == Dots) && (synpred25_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA84_0 == Contains) && (synpred25_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA84_0 == ForAll) && (synpred25_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA84_0 == Exists) && (synpred25_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA84_0 == Duration || ((LA84_0 >= NotLog) && (LA84_0 <= NotBit)) || LA84_0 == Minus || ((LA84_0 >= Unordered) && (LA84_0 <= End)) || ((LA84_0 >= INT) && (LA84_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index84_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA84_1;

    	    ANTLR3_MARKER index84_1;


    		LA84_1 = LA(1);

    	 
    	    index84_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index84_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA84_3;

    	    ANTLR3_MARKER index84_3;


    		LA84_3 = LA(1);

    	 
    	    index84_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred25_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index84_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"624:1: expr : ( ( e_prefix )=> e_prefix | e_log_1 );";
    EXCEPTION->decisionNum  = 84;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 84
 */
static
ANTLR3_CYCLIC_DFA cdfa84
    =	{
	    84,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"624:1: expr : ( ( e_prefix )=> e_prefix | e_log_1 );",	
	    (CDFA_SPECIAL_FUNC) dfa84_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa84_eot,	    /* EOT table			    */
	    dfa84_eof,	    /* EOF table			    */
	    dfa84_min,	    /* Minimum tokens for each state    */
	    dfa84_max,	    /* Maximum tokens for each state    */
	    dfa84_accept,	/* Accept table			    */
	    dfa84_special,	/* Special transition states	    */
	    dfa84_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 84
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    638:3: ( ( exist_time expr )=> exist_time e= expr -> ^( ContainsSomeExpr[$Contains] exist_time $e) | e= expr -> ^( ContainsAllExpr[$Contains] $e) )
 */
static const ANTLR3_INT32 dfa85_eot[18] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa85_eof[18] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa85_min[18] =
    {
	57, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa85_max[18] =
    {
	126, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa85_accept[18] =
    {
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa85_special[18] =
    {	
	-1, 0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa85_T_empty	    NULL

static const ANTLR3_INT32 dfa85_T0[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, 4, 4, -1, -1, -1, 4, -1, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, 4, 4, 4, 4, -1, 
	-1, -1, -1, -1, -1, 4, 4, 4, 4, 4, 4
    };static const ANTLR3_INT32 dfa85_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa85_transitions[] =
{
    dfa85_T0, dfa85_T1, dfa85_T1, dfa85_T1, dfa85_T_empty, dfa85_T_empty, 
    dfa85_T_empty, dfa85_T_empty, dfa85_T_empty, dfa85_T_empty, dfa85_T_empty, 
    dfa85_T_empty, dfa85_T_empty, dfa85_T_empty, dfa85_T_empty, dfa85_T_empty, 
    dfa85_T_empty, dfa85_T_empty	
};

static ANTLR3_INT32 dfa85_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA85_1;

    	    ANTLR3_MARKER index85_1;


    		LA85_1 = LA(1);

    	 
    	    index85_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_ANML(ctx)) )
    	    {
    	        s = 17;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index85_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA85_2;

    	    ANTLR3_MARKER index85_2;


    		LA85_2 = LA(1);

    	 
    	    index85_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_ANML(ctx)) )
    	    {
    	        s = 17;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index85_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA85_3;

    	    ANTLR3_MARKER index85_3;


    		LA85_3 = LA(1);

    	 
    	    index85_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred28_ANML(ctx)) )
    	    {
    	        s = 17;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 4;
    	    }

    	 
    		SEEK(index85_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"638:3: ( ( exist_time expr )=> exist_time e= expr -> ^( ContainsSomeExpr[$Contains] exist_time $e) | e= expr -> ^( ContainsAllExpr[$Contains] $e) )";
    EXCEPTION->decisionNum  = 85;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 85
 */
static
ANTLR3_CYCLIC_DFA cdfa85
    =	{
	    85,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"638:3: ( ( exist_time expr )=> exist_time e= expr -> ^( ContainsSomeExpr[$Contains] exist_time $e) | e= expr -> ^( ContainsAllExpr[$Contains] $e) )",	
	    (CDFA_SPECIAL_FUNC) dfa85_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa85_eot,	    /* EOT table			    */
	    dfa85_eof,	    /* EOF table			    */
	    dfa85_min,	    /* Minimum tokens for each state    */
	    dfa85_max,	    /* Maximum tokens for each state    */
	    dfa85_accept,	/* Accept table			    */
	    dfa85_special,	/* Special transition states	    */
	    dfa85_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 85
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    656:31: ( ( e_prefix )=> e_prefix | e_log_1 )
 */
static const ANTLR3_INT32 dfa87_eot[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa87_eof[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa87_min[17] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa87_max[17] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa87_accept[17] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa87_special[17] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa87_T_empty	    NULL

static const ANTLR3_INT32 dfa87_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, 8, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 8, -1, 
	-1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa87_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa87_transitions[] =
{
    dfa87_T0, dfa87_T1, dfa87_T_empty, dfa87_T1, dfa87_T_empty, dfa87_T_empty, 
    dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, 
    dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, dfa87_T_empty, 
    dfa87_T_empty	
};

static ANTLR3_INT32 dfa87_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA87_0;

    	    ANTLR3_MARKER index87_0;


    		LA87_0 = LA(1);

    	 
    	    index87_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA87_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA87_0 == LeftB) && (synpred30_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA87_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA87_0 == Dots) && (synpred30_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA87_0 == Contains) && (synpred30_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA87_0 == ForAll) && (synpred30_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA87_0 == Exists) && (synpred30_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA87_0 == Duration || ((LA87_0 >= NotLog) && (LA87_0 <= NotBit)) || LA87_0 == Minus || ((LA87_0 >= Unordered) && (LA87_0 <= End)) || ((LA87_0 >= INT) && (LA87_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index87_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA87_1;

    	    ANTLR3_MARKER index87_1;


    		LA87_1 = LA(1);

    	 
    	    index87_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index87_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA87_3;

    	    ANTLR3_MARKER index87_3;


    		LA87_3 = LA(1);

    	 
    	    index87_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred30_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index87_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"656:31: ( ( e_prefix )=> e_prefix | e_log_1 )";
    EXCEPTION->decisionNum  = 87;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 87
 */
static
ANTLR3_CYCLIC_DFA cdfa87
    =	{
	    87,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"656:31: ( ( e_prefix )=> e_prefix | e_log_1 )",	
	    (CDFA_SPECIAL_FUNC) dfa87_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa87_eot,	    /* EOT table			    */
	    dfa87_eof,	    /* EOF table			    */
	    dfa87_min,	    /* Minimum tokens for each state    */
	    dfa87_max,	    /* Maximum tokens for each state    */
	    dfa87_accept,	/* Accept table			    */
	    dfa87_special,	/* Special transition states	    */
	    dfa87_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 87
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    660:33: ( ( e_prefix )=> e_prefix | e_log_3 )
 */
static const ANTLR3_INT32 dfa89_eot[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa89_eof[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa89_min[17] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa89_max[17] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa89_accept[17] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa89_special[17] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa89_T_empty	    NULL

static const ANTLR3_INT32 dfa89_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, 8, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 8, -1, 
	-1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa89_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa89_transitions[] =
{
    dfa89_T0, dfa89_T1, dfa89_T_empty, dfa89_T1, dfa89_T_empty, dfa89_T_empty, 
    dfa89_T_empty, dfa89_T_empty, dfa89_T_empty, dfa89_T_empty, dfa89_T_empty, 
    dfa89_T_empty, dfa89_T_empty, dfa89_T_empty, dfa89_T_empty, dfa89_T_empty, 
    dfa89_T_empty	
};

static ANTLR3_INT32 dfa89_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA89_0;

    	    ANTLR3_MARKER index89_0;


    		LA89_0 = LA(1);

    	 
    	    index89_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA89_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA89_0 == LeftB) && (synpred32_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA89_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA89_0 == Dots) && (synpred32_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA89_0 == Contains) && (synpred32_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA89_0 == ForAll) && (synpred32_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA89_0 == Exists) && (synpred32_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA89_0 == Duration || ((LA89_0 >= NotLog) && (LA89_0 <= NotBit)) || LA89_0 == Minus || ((LA89_0 >= Unordered) && (LA89_0 <= End)) || ((LA89_0 >= INT) && (LA89_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index89_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA89_1;

    	    ANTLR3_MARKER index89_1;


    		LA89_1 = LA(1);

    	 
    	    index89_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred32_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index89_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA89_3;

    	    ANTLR3_MARKER index89_3;


    		LA89_3 = LA(1);

    	 
    	    index89_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred32_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index89_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"660:33: ( ( e_prefix )=> e_prefix | e_log_3 )";
    EXCEPTION->decisionNum  = 89;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 89
 */
static
ANTLR3_CYCLIC_DFA cdfa89
    =	{
	    89,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"660:33: ( ( e_prefix )=> e_prefix | e_log_3 )",	
	    (CDFA_SPECIAL_FUNC) dfa89_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa89_eot,	    /* EOT table			    */
	    dfa89_eof,	    /* EOF table			    */
	    dfa89_min,	    /* Minimum tokens for each state    */
	    dfa89_max,	    /* Maximum tokens for each state    */
	    dfa89_accept,	/* Accept table			    */
	    dfa89_special,	/* Special transition states	    */
	    dfa89_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 89
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    664:29: ( ( e_prefix )=> e_prefix | e_log_4 )
 */
static const ANTLR3_INT32 dfa91_eot[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa91_eof[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa91_min[17] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa91_max[17] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa91_accept[17] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa91_special[17] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa91_T_empty	    NULL

static const ANTLR3_INT32 dfa91_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, 8, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 8, -1, 
	-1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa91_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa91_transitions[] =
{
    dfa91_T0, dfa91_T1, dfa91_T_empty, dfa91_T1, dfa91_T_empty, dfa91_T_empty, 
    dfa91_T_empty, dfa91_T_empty, dfa91_T_empty, dfa91_T_empty, dfa91_T_empty, 
    dfa91_T_empty, dfa91_T_empty, dfa91_T_empty, dfa91_T_empty, dfa91_T_empty, 
    dfa91_T_empty	
};

static ANTLR3_INT32 dfa91_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA91_0;

    	    ANTLR3_MARKER index91_0;


    		LA91_0 = LA(1);

    	 
    	    index91_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA91_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA91_0 == LeftB) && (synpred34_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA91_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA91_0 == Dots) && (synpred34_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA91_0 == Contains) && (synpred34_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA91_0 == ForAll) && (synpred34_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA91_0 == Exists) && (synpred34_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA91_0 == Duration || ((LA91_0 >= NotLog) && (LA91_0 <= NotBit)) || LA91_0 == Minus || ((LA91_0 >= Unordered) && (LA91_0 <= End)) || ((LA91_0 >= INT) && (LA91_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index91_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA91_1;

    	    ANTLR3_MARKER index91_1;


    		LA91_1 = LA(1);

    	 
    	    index91_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred34_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index91_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA91_3;

    	    ANTLR3_MARKER index91_3;


    		LA91_3 = LA(1);

    	 
    	    index91_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred34_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index91_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"664:29: ( ( e_prefix )=> e_prefix | e_log_4 )";
    EXCEPTION->decisionNum  = 91;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 91
 */
static
ANTLR3_CYCLIC_DFA cdfa91
    =	{
	    91,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"664:29: ( ( e_prefix )=> e_prefix | e_log_4 )",	
	    (CDFA_SPECIAL_FUNC) dfa91_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa91_eot,	    /* EOT table			    */
	    dfa91_eof,	    /* EOF table			    */
	    dfa91_min,	    /* Minimum tokens for each state    */
	    dfa91_max,	    /* Maximum tokens for each state    */
	    dfa91_accept,	/* Accept table			    */
	    dfa91_special,	/* Special transition states	    */
	    dfa91_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 91
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    680:27: ( ( e_prefix )=> e_prefix | e_log_5 )
 */
static const ANTLR3_INT32 dfa93_eot[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa93_eof[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa93_min[17] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa93_max[17] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa93_accept[17] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa93_special[17] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa93_T_empty	    NULL

static const ANTLR3_INT32 dfa93_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, 8, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 8, -1, 
	-1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa93_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa93_transitions[] =
{
    dfa93_T0, dfa93_T1, dfa93_T_empty, dfa93_T1, dfa93_T_empty, dfa93_T_empty, 
    dfa93_T_empty, dfa93_T_empty, dfa93_T_empty, dfa93_T_empty, dfa93_T_empty, 
    dfa93_T_empty, dfa93_T_empty, dfa93_T_empty, dfa93_T_empty, dfa93_T_empty, 
    dfa93_T_empty	
};

static ANTLR3_INT32 dfa93_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA93_0;

    	    ANTLR3_MARKER index93_0;


    		LA93_0 = LA(1);

    	 
    	    index93_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA93_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA93_0 == LeftB) && (synpred36_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA93_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA93_0 == Dots) && (synpred36_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA93_0 == Contains) && (synpred36_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA93_0 == ForAll) && (synpred36_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA93_0 == Exists) && (synpred36_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA93_0 == Duration || ((LA93_0 >= NotLog) && (LA93_0 <= NotBit)) || LA93_0 == Minus || ((LA93_0 >= Unordered) && (LA93_0 <= End)) || ((LA93_0 >= INT) && (LA93_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index93_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA93_1;

    	    ANTLR3_MARKER index93_1;


    		LA93_1 = LA(1);

    	 
    	    index93_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred36_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index93_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA93_3;

    	    ANTLR3_MARKER index93_3;


    		LA93_3 = LA(1);

    	 
    	    index93_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred36_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index93_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"680:27: ( ( e_prefix )=> e_prefix | e_log_5 )";
    EXCEPTION->decisionNum  = 93;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 93
 */
static
ANTLR3_CYCLIC_DFA cdfa93
    =	{
	    93,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"680:27: ( ( e_prefix )=> e_prefix | e_log_5 )",	
	    (CDFA_SPECIAL_FUNC) dfa93_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa93_eot,	    /* EOT table			    */
	    dfa93_eof,	    /* EOF table			    */
	    dfa93_min,	    /* Minimum tokens for each state    */
	    dfa93_max,	    /* Maximum tokens for each state    */
	    dfa93_accept,	/* Accept table			    */
	    dfa93_special,	/* Special transition states	    */
	    dfa93_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 93
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    684:29: ( ( e_prefix )=> e_prefix | e_log_6 )
 */
static const ANTLR3_INT32 dfa95_eot[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa95_eof[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa95_min[17] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa95_max[17] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa95_accept[17] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa95_special[17] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa95_T_empty	    NULL

static const ANTLR3_INT32 dfa95_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, 8, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 8, -1, 
	-1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa95_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa95_transitions[] =
{
    dfa95_T0, dfa95_T1, dfa95_T_empty, dfa95_T1, dfa95_T_empty, dfa95_T_empty, 
    dfa95_T_empty, dfa95_T_empty, dfa95_T_empty, dfa95_T_empty, dfa95_T_empty, 
    dfa95_T_empty, dfa95_T_empty, dfa95_T_empty, dfa95_T_empty, dfa95_T_empty, 
    dfa95_T_empty	
};

static ANTLR3_INT32 dfa95_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA95_0;

    	    ANTLR3_MARKER index95_0;


    		LA95_0 = LA(1);

    	 
    	    index95_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA95_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA95_0 == LeftB) && (synpred38_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA95_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA95_0 == Dots) && (synpred38_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA95_0 == Contains) && (synpred38_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA95_0 == ForAll) && (synpred38_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA95_0 == Exists) && (synpred38_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA95_0 == Duration || ((LA95_0 >= NotLog) && (LA95_0 <= NotBit)) || LA95_0 == Minus || ((LA95_0 >= Unordered) && (LA95_0 <= End)) || ((LA95_0 >= INT) && (LA95_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index95_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA95_1;

    	    ANTLR3_MARKER index95_1;


    		LA95_1 = LA(1);

    	 
    	    index95_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred38_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index95_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA95_3;

    	    ANTLR3_MARKER index95_3;


    		LA95_3 = LA(1);

    	 
    	    index95_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred38_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index95_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"684:29: ( ( e_prefix )=> e_prefix | e_log_6 )";
    EXCEPTION->decisionNum  = 95;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 95
 */
static
ANTLR3_CYCLIC_DFA cdfa95
    =	{
	    95,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"684:29: ( ( e_prefix )=> e_prefix | e_log_6 )",	
	    (CDFA_SPECIAL_FUNC) dfa95_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa95_eot,	    /* EOT table			    */
	    dfa95_eof,	    /* EOF table			    */
	    dfa95_min,	    /* Minimum tokens for each state    */
	    dfa95_max,	    /* Maximum tokens for each state    */
	    dfa95_accept,	/* Accept table			    */
	    dfa95_special,	/* Special transition states	    */
	    dfa95_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 95
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    688:20: ( ( e_prefix )=> e_prefix | e_log_6 )
 */
static const ANTLR3_INT32 dfa97_eot[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa97_eof[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa97_min[17] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa97_max[17] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa97_accept[17] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa97_special[17] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa97_T_empty	    NULL

static const ANTLR3_INT32 dfa97_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, 8, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 8, -1, 
	-1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa97_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa97_transitions[] =
{
    dfa97_T0, dfa97_T1, dfa97_T_empty, dfa97_T1, dfa97_T_empty, dfa97_T_empty, 
    dfa97_T_empty, dfa97_T_empty, dfa97_T_empty, dfa97_T_empty, dfa97_T_empty, 
    dfa97_T_empty, dfa97_T_empty, dfa97_T_empty, dfa97_T_empty, dfa97_T_empty, 
    dfa97_T_empty	
};

static ANTLR3_INT32 dfa97_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA97_0;

    	    ANTLR3_MARKER index97_0;


    		LA97_0 = LA(1);

    	 
    	    index97_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA97_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA97_0 == LeftB) && (synpred40_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA97_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA97_0 == Dots) && (synpred40_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA97_0 == Contains) && (synpred40_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA97_0 == ForAll) && (synpred40_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA97_0 == Exists) && (synpred40_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA97_0 == Duration || ((LA97_0 >= NotLog) && (LA97_0 <= NotBit)) || LA97_0 == Minus || ((LA97_0 >= Unordered) && (LA97_0 <= End)) || ((LA97_0 >= INT) && (LA97_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index97_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA97_1;

    	    ANTLR3_MARKER index97_1;


    		LA97_1 = LA(1);

    	 
    	    index97_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred40_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index97_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA97_3;

    	    ANTLR3_MARKER index97_3;


    		LA97_3 = LA(1);

    	 
    	    index97_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred40_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index97_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"688:20: ( ( e_prefix )=> e_prefix | e_log_6 )";
    EXCEPTION->decisionNum  = 97;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 97
 */
static
ANTLR3_CYCLIC_DFA cdfa97
    =	{
	    97,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"688:20: ( ( e_prefix )=> e_prefix | e_log_6 )",	
	    (CDFA_SPECIAL_FUNC) dfa97_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa97_eot,	    /* EOT table			    */
	    dfa97_eof,	    /* EOF table			    */
	    dfa97_min,	    /* Minimum tokens for each state    */
	    dfa97_max,	    /* Maximum tokens for each state    */
	    dfa97_accept,	/* Accept table			    */
	    dfa97_special,	/* Special transition states	    */
	    dfa97_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 97
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    693:35: ( ( e_prefix )=> e_prefix | e_num_1 )
 */
static const ANTLR3_INT32 dfa99_eot[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa99_eof[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa99_min[16] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa99_max[16] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa99_accept[16] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa99_special[16] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa99_T_empty	    NULL

static const ANTLR3_INT32 dfa99_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, -1, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 
	8, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa99_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa99_transitions[] =
{
    dfa99_T0, dfa99_T1, dfa99_T_empty, dfa99_T1, dfa99_T_empty, dfa99_T_empty, 
    dfa99_T_empty, dfa99_T_empty, dfa99_T_empty, dfa99_T_empty, dfa99_T_empty, 
    dfa99_T_empty, dfa99_T_empty, dfa99_T_empty, dfa99_T_empty, dfa99_T_empty	
};

static ANTLR3_INT32 dfa99_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA99_0;

    	    ANTLR3_MARKER index99_0;


    		LA99_0 = LA(1);

    	 
    	    index99_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA99_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA99_0 == LeftB) && (synpred42_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA99_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA99_0 == Dots) && (synpred42_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA99_0 == Contains) && (synpred42_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA99_0 == ForAll) && (synpred42_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA99_0 == Exists) && (synpred42_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA99_0 == Duration || LA99_0 == NotBit || LA99_0 == Minus || ((LA99_0 >= Unordered) && (LA99_0 <= End)) || ((LA99_0 >= INT) && (LA99_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index99_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA99_1;

    	    ANTLR3_MARKER index99_1;


    		LA99_1 = LA(1);

    	 
    	    index99_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred42_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index99_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA99_3;

    	    ANTLR3_MARKER index99_3;


    		LA99_3 = LA(1);

    	 
    	    index99_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred42_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index99_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"693:35: ( ( e_prefix )=> e_prefix | e_num_1 )";
    EXCEPTION->decisionNum  = 99;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 99
 */
static
ANTLR3_CYCLIC_DFA cdfa99
    =	{
	    99,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"693:35: ( ( e_prefix )=> e_prefix | e_num_1 )",	
	    (CDFA_SPECIAL_FUNC) dfa99_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa99_eot,	    /* EOT table			    */
	    dfa99_eof,	    /* EOF table			    */
	    dfa99_min,	    /* Minimum tokens for each state    */
	    dfa99_max,	    /* Maximum tokens for each state    */
	    dfa99_accept,	/* Accept table			    */
	    dfa99_special,	/* Special transition states	    */
	    dfa99_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 99
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    696:1: e_num : ( ( e_prefix )=> e_prefix | e_num_1 );
 */
static const ANTLR3_INT32 dfa101_eot[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa101_eof[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa101_min[16] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa101_max[16] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa101_accept[16] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa101_special[16] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa101_T_empty	    NULL

static const ANTLR3_INT32 dfa101_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, -1, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 
	8, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa101_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa101_transitions[] =
{
    dfa101_T0, dfa101_T1, dfa101_T_empty, dfa101_T1, dfa101_T_empty, dfa101_T_empty, 
    dfa101_T_empty, dfa101_T_empty, dfa101_T_empty, dfa101_T_empty, dfa101_T_empty, 
    dfa101_T_empty, dfa101_T_empty, dfa101_T_empty, dfa101_T_empty, dfa101_T_empty	
};

static ANTLR3_INT32 dfa101_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA101_0;

    	    ANTLR3_MARKER index101_0;


    		LA101_0 = LA(1);

    	 
    	    index101_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA101_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA101_0 == LeftB) && (synpred43_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA101_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA101_0 == Dots) && (synpred43_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA101_0 == Contains) && (synpred43_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA101_0 == ForAll) && (synpred43_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA101_0 == Exists) && (synpred43_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA101_0 == Duration || LA101_0 == NotBit || LA101_0 == Minus || ((LA101_0 >= Unordered) && (LA101_0 <= End)) || ((LA101_0 >= INT) && (LA101_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index101_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA101_1;

    	    ANTLR3_MARKER index101_1;


    		LA101_1 = LA(1);

    	 
    	    index101_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred43_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index101_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA101_3;

    	    ANTLR3_MARKER index101_3;


    		LA101_3 = LA(1);

    	 
    	    index101_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred43_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index101_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"696:1: e_num : ( ( e_prefix )=> e_prefix | e_num_1 );";
    EXCEPTION->decisionNum  = 101;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 101
 */
static
ANTLR3_CYCLIC_DFA cdfa101
    =	{
	    101,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"696:1: e_num : ( ( e_prefix )=> e_prefix | e_num_1 );",	
	    (CDFA_SPECIAL_FUNC) dfa101_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa101_eot,	    /* EOT table			    */
	    dfa101_eof,	    /* EOF table			    */
	    dfa101_min,	    /* Minimum tokens for each state    */
	    dfa101_max,	    /* Maximum tokens for each state    */
	    dfa101_accept,	/* Accept table			    */
	    dfa101_special,	/* Special transition states	    */
	    dfa101_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 101
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    702:29: ( ( e_prefix )=> e_prefix | e_num_2 )
 */
static const ANTLR3_INT32 dfa102_eot[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa102_eof[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa102_min[16] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa102_max[16] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa102_accept[16] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa102_special[16] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa102_T_empty	    NULL

static const ANTLR3_INT32 dfa102_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, -1, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 
	8, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa102_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa102_transitions[] =
{
    dfa102_T0, dfa102_T1, dfa102_T_empty, dfa102_T1, dfa102_T_empty, dfa102_T_empty, 
    dfa102_T_empty, dfa102_T_empty, dfa102_T_empty, dfa102_T_empty, dfa102_T_empty, 
    dfa102_T_empty, dfa102_T_empty, dfa102_T_empty, dfa102_T_empty, dfa102_T_empty	
};

static ANTLR3_INT32 dfa102_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA102_0;

    	    ANTLR3_MARKER index102_0;


    		LA102_0 = LA(1);

    	 
    	    index102_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA102_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA102_0 == LeftB) && (synpred45_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA102_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA102_0 == Dots) && (synpred45_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA102_0 == Contains) && (synpred45_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA102_0 == ForAll) && (synpred45_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA102_0 == Exists) && (synpred45_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA102_0 == Duration || LA102_0 == NotBit || LA102_0 == Minus || ((LA102_0 >= Unordered) && (LA102_0 <= End)) || ((LA102_0 >= INT) && (LA102_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index102_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA102_1;

    	    ANTLR3_MARKER index102_1;


    		LA102_1 = LA(1);

    	 
    	    index102_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred45_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index102_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA102_3;

    	    ANTLR3_MARKER index102_3;


    		LA102_3 = LA(1);

    	 
    	    index102_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred45_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index102_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"702:29: ( ( e_prefix )=> e_prefix | e_num_2 )";
    EXCEPTION->decisionNum  = 102;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 102
 */
static
ANTLR3_CYCLIC_DFA cdfa102
    =	{
	    102,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"702:29: ( ( e_prefix )=> e_prefix | e_num_2 )",	
	    (CDFA_SPECIAL_FUNC) dfa102_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa102_eot,	    /* EOT table			    */
	    dfa102_eof,	    /* EOF table			    */
	    dfa102_min,	    /* Minimum tokens for each state    */
	    dfa102_max,	    /* Maximum tokens for each state    */
	    dfa102_accept,	/* Accept table			    */
	    dfa102_special,	/* Special transition states	    */
	    dfa102_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 102
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    706:53: ( ( e_prefix )=> e_prefix | e_num_3 )
 */
static const ANTLR3_INT32 dfa105_eot[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa105_eof[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa105_min[16] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa105_max[16] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa105_accept[16] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa105_special[16] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa105_T_empty	    NULL

static const ANTLR3_INT32 dfa105_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, -1, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 
	8, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa105_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa105_transitions[] =
{
    dfa105_T0, dfa105_T1, dfa105_T_empty, dfa105_T1, dfa105_T_empty, dfa105_T_empty, 
    dfa105_T_empty, dfa105_T_empty, dfa105_T_empty, dfa105_T_empty, dfa105_T_empty, 
    dfa105_T_empty, dfa105_T_empty, dfa105_T_empty, dfa105_T_empty, dfa105_T_empty	
};

static ANTLR3_INT32 dfa105_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA105_0;

    	    ANTLR3_MARKER index105_0;


    		LA105_0 = LA(1);

    	 
    	    index105_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA105_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA105_0 == LeftB) && (synpred47_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA105_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA105_0 == Dots) && (synpred47_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA105_0 == Contains) && (synpred47_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA105_0 == ForAll) && (synpred47_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA105_0 == Exists) && (synpred47_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA105_0 == Duration || LA105_0 == NotBit || LA105_0 == Minus || ((LA105_0 >= Unordered) && (LA105_0 <= End)) || ((LA105_0 >= INT) && (LA105_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index105_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA105_1;

    	    ANTLR3_MARKER index105_1;


    		LA105_1 = LA(1);

    	 
    	    index105_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred47_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index105_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA105_3;

    	    ANTLR3_MARKER index105_3;


    		LA105_3 = LA(1);

    	 
    	    index105_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred47_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index105_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"706:53: ( ( e_prefix )=> e_prefix | e_num_3 )";
    EXCEPTION->decisionNum  = 105;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 105
 */
static
ANTLR3_CYCLIC_DFA cdfa105
    =	{
	    105,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"706:53: ( ( e_prefix )=> e_prefix | e_num_3 )",	
	    (CDFA_SPECIAL_FUNC) dfa105_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa105_eot,	    /* EOT table			    */
	    dfa105_eof,	    /* EOF table			    */
	    dfa105_min,	    /* Minimum tokens for each state    */
	    dfa105_max,	    /* Maximum tokens for each state    */
	    dfa105_accept,	/* Accept table			    */
	    dfa105_special,	/* Special transition states	    */
	    dfa105_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 105
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    712:4: ( ( e_prefix )=> e_prefix | e_num_4 )
 */
static const ANTLR3_INT32 dfa108_eot[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa108_eof[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa108_min[16] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa108_max[16] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa108_accept[16] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa108_special[16] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa108_T_empty	    NULL

static const ANTLR3_INT32 dfa108_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, -1, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 
	8, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa108_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa108_transitions[] =
{
    dfa108_T0, dfa108_T1, dfa108_T_empty, dfa108_T1, dfa108_T_empty, dfa108_T_empty, 
    dfa108_T_empty, dfa108_T_empty, dfa108_T_empty, dfa108_T_empty, dfa108_T_empty, 
    dfa108_T_empty, dfa108_T_empty, dfa108_T_empty, dfa108_T_empty, dfa108_T_empty	
};

static ANTLR3_INT32 dfa108_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA108_0;

    	    ANTLR3_MARKER index108_0;


    		LA108_0 = LA(1);

    	 
    	    index108_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA108_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA108_0 == LeftB) && (synpred49_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA108_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA108_0 == Dots) && (synpred49_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA108_0 == Contains) && (synpred49_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA108_0 == ForAll) && (synpred49_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA108_0 == Exists) && (synpred49_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA108_0 == Duration || LA108_0 == NotBit || LA108_0 == Minus || ((LA108_0 >= Unordered) && (LA108_0 <= End)) || ((LA108_0 >= INT) && (LA108_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index108_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA108_1;

    	    ANTLR3_MARKER index108_1;


    		LA108_1 = LA(1);

    	 
    	    index108_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred49_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index108_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA108_3;

    	    ANTLR3_MARKER index108_3;


    		LA108_3 = LA(1);

    	 
    	    index108_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred49_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index108_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"712:4: ( ( e_prefix )=> e_prefix | e_num_4 )";
    EXCEPTION->decisionNum  = 108;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 108
 */
static
ANTLR3_CYCLIC_DFA cdfa108
    =	{
	    108,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"712:4: ( ( e_prefix )=> e_prefix | e_num_4 )",	
	    (CDFA_SPECIAL_FUNC) dfa108_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa108_eot,	    /* EOT table			    */
	    dfa108_eof,	    /* EOF table			    */
	    dfa108_min,	    /* Minimum tokens for each state    */
	    dfa108_max,	    /* Maximum tokens for each state    */
	    dfa108_accept,	/* Accept table			    */
	    dfa108_special,	/* Special transition states	    */
	    dfa108_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 108
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    720:3: ( ( e_prefix )=> e_prefix | e_num_4 )
 */
static const ANTLR3_INT32 dfa111_eot[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa111_eof[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa111_min[16] =
    {
	57, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa111_max[16] =
    {
	126, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa111_accept[16] =
    {
	-1, -1, 1, -1, 1, 1, 1, 1, 2, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa111_special[16] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa111_T_empty	    NULL

static const ANTLR3_INT32 dfa111_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
	8, -1, -1, -1, 8, -1, -1, -1, 5, -1, 6, 7, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, 8, 8, 8, 
	8, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa111_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa111_transitions[] =
{
    dfa111_T0, dfa111_T1, dfa111_T_empty, dfa111_T1, dfa111_T_empty, dfa111_T_empty, 
    dfa111_T_empty, dfa111_T_empty, dfa111_T_empty, dfa111_T_empty, dfa111_T_empty, 
    dfa111_T_empty, dfa111_T_empty, dfa111_T_empty, dfa111_T_empty, dfa111_T_empty	
};

static ANTLR3_INT32 dfa111_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA111_0;

    	    ANTLR3_MARKER index111_0;


    		LA111_0 = LA(1);

    	 
    	    index111_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA111_0 == ID) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA111_0 == LeftB) && (synpred51_ANML(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA111_0 == LeftP) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA111_0 == Dots) && (synpred51_ANML(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA111_0 == Contains) && (synpred51_ANML(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA111_0 == ForAll) && (synpred51_ANML(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA111_0 == Exists) && (synpred51_ANML(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA111_0 == Duration || LA111_0 == NotBit || LA111_0 == Minus || ((LA111_0 >= Unordered) && (LA111_0 <= End)) || ((LA111_0 >= INT) && (LA111_0 <= Infinity))) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index111_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA111_1;

    	    ANTLR3_MARKER index111_1;


    		LA111_1 = LA(1);

    	 
    	    index111_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred51_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index111_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA111_3;

    	    ANTLR3_MARKER index111_3;


    		LA111_3 = LA(1);

    	 
    	    index111_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred51_ANML(ctx)) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index111_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"720:3: ( ( e_prefix )=> e_prefix | e_num_4 )";
    EXCEPTION->decisionNum  = 111;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 111
 */
static
ANTLR3_CYCLIC_DFA cdfa111
    =	{
	    111,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"720:3: ( ( e_prefix )=> e_prefix | e_num_4 )",	
	    (CDFA_SPECIAL_FUNC) dfa111_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa111_eot,	    /* EOT table			    */
	    dfa111_eof,	    /* EOF table			    */
	    dfa111_min,	    /* Minimum tokens for each state    */
	    dfa111_max,	    /* Maximum tokens for each state    */
	    dfa111_accept,	/* Accept table			    */
	    dfa111_special,	/* Special transition states	    */
	    dfa111_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 111
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    748:1: time_primitive : ( ( Start LeftP ID RightP )=> Start LeftP ID RightP -> ^( LabelRef ID Start ) | Start -> ^( LabelRef This Start ) | ( End LeftP ID RightP )=> End LeftP ID RightP -> ^( LabelRef ID End ) | End -> ^( LabelRef This End ) | ( Duration LeftP ID RightP )=> Duration LeftP ID RightP -> ^( LabelRef ID Duration ) | Duration -> ^( LabelRef This Duration ) );
 */
static const ANTLR3_INT32 dfa116_eot[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa116_eof[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa116_min[10] =
    {
	76, 0, 0, 0, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa116_max[10] =
    {
	114, 0, 0, 0, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa116_accept[10] =
    {
	-1, -1, -1, -1, 1, 2, 3, 4, 5, 6
    };
static const ANTLR3_INT32 dfa116_special[10] =
    {	
	-1, 0, 1, 2, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa116_T_empty	    NULL

static const ANTLR3_INT32 dfa116_T0[] =
    {
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, 2
    };static const ANTLR3_INT32 dfa116_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa116_transitions[] =
{
    dfa116_T0, dfa116_T1, dfa116_T1, dfa116_T1, dfa116_T_empty, dfa116_T_empty, 
    dfa116_T_empty, dfa116_T_empty, dfa116_T_empty, dfa116_T_empty	
};

static ANTLR3_INT32 dfa116_sst(pANMLParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA116_1;

    	    ANTLR3_MARKER index116_1;


    		LA116_1 = LA(1);

    	 
    	    index116_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred52_ANML(ctx)) )
    	    {
    	        s = 4;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 5;
    	    }

    	 
    		SEEK(index116_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA116_2;

    	    ANTLR3_MARKER index116_2;


    		LA116_2 = LA(1);

    	 
    	    index116_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred53_ANML(ctx)) )
    	    {
    	        s = 6;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 7;
    	    }

    	 
    		SEEK(index116_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA116_3;

    	    ANTLR3_MARKER index116_3;


    		LA116_3 = LA(1);

    	 
    	    index116_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred54_ANML(ctx)) )
    	    {
    	        s = 8;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 9;
    	    }

    	 
    		SEEK(index116_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"748:1: time_primitive : ( ( Start LeftP ID RightP )=> Start LeftP ID RightP -> ^( LabelRef ID Start ) | Start -> ^( LabelRef This Start ) | ( End LeftP ID RightP )=> End LeftP ID RightP -> ^( LabelRef ID End ) | End -> ^( LabelRef This End ) | ( Duration LeftP ID RightP )=> Duration LeftP ID RightP -> ^( LabelRef ID Duration ) | Duration -> ^( LabelRef This Duration ) );";
    EXCEPTION->decisionNum  = 116;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 116
 */
static
ANTLR3_CYCLIC_DFA cdfa116
    =	{
	    116,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"748:1: time_primitive : ( ( Start LeftP ID RightP )=> Start LeftP ID RightP -> ^( LabelRef ID Start ) | Start -> ^( LabelRef This Start ) | ( End LeftP ID RightP )=> End LeftP ID RightP -> ^( LabelRef ID End ) | End -> ^( LabelRef This End ) | ( Duration LeftP ID RightP )=> Duration LeftP ID RightP -> ^( LabelRef ID Duration ) | Duration -> ^( LabelRef This Duration ) );",	
	    (CDFA_SPECIAL_FUNC) dfa116_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa116_eot,	    /* EOT table			    */
	    dfa116_eof,	    /* EOF table			    */
	    dfa116_min,	    /* Minimum tokens for each state    */
	    dfa116_max,	    /* Maximum tokens for each state    */
	    dfa116_accept,	/* Accept table			    */
	    dfa116_special,	/* Special transition states	    */
	    dfa116_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 116
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start anml
 * ANML/base/antlr/ANML.g:125:1: anml : (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )* -> ^( Block ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) ) ;
 */
static ANMLParser_anml_return
anml(pANMLParser ctx)
{   
    ANMLParser_anml_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_VECTOR    list_t;
    pANTLR3_VECTOR    list_c;
    pANTLR3_VECTOR    list_f;
    pANTLR3_VECTOR    list_a;
    pANTLR3_VECTOR    list_s;
    pANTLR3_VECTOR    list_ps;
    ANMLParser_type_decl_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t ANMLParser_type_decl_return

    ANMLParser_const_decl_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c ANMLParser_const_decl_return

    ANMLParser_fluent_decl_return f;
    #undef	RETURN_TYPE_f
    #define	RETURN_TYPE_f ANMLParser_fluent_decl_return

    ANMLParser_action_decl_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a ANMLParser_action_decl_return

    ANMLParser_stmt_return s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s ANMLParser_stmt_return

    ANMLParser_problem_stmt_return ps;
    #undef	RETURN_TYPE_ps
    #define	RETURN_TYPE_ps ANMLParser_problem_stmt_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_problem_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fluent_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_const_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_action_decl;
    /* Initialize rule variables
     */


    root_0 = NULL;

    list_t     = NULL;
    list_c     = NULL;
    list_f     = NULL;
    list_a     = NULL;
    list_s     = NULL;
    list_ps     = NULL;
    t.tree = NULL;

    c.tree = NULL;

    f.tree = NULL;

    a.tree = NULL;

    s.tree = NULL;

    ps.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_type_decl   = NULL;
    #define CREATE_stream_type_decl  if (stream_type_decl == NULL) {stream_type_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_decl"); }
    stream_stmt   = NULL;
    #define CREATE_stream_stmt  if (stream_stmt == NULL) {stream_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt"); }
    stream_problem_stmt   = NULL;
    #define CREATE_stream_problem_stmt  if (stream_problem_stmt == NULL) {stream_problem_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule problem_stmt"); }
    stream_fluent_decl   = NULL;
    #define CREATE_stream_fluent_decl  if (stream_fluent_decl == NULL) {stream_fluent_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule fluent_decl"); }
    stream_const_decl   = NULL;
    #define CREATE_stream_const_decl  if (stream_const_decl == NULL) {stream_const_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule const_decl"); }
    stream_action_decl   = NULL;
    #define CREATE_stream_action_decl  if (stream_action_decl == NULL) {stream_action_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule action_decl"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:125:5: ( (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )* -> ^( Block ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) ) )
        // ANML/base/antlr/ANML.g:126:2: (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )*
        {

            // ANML/base/antlr/ANML.g:126:2: (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )*

            for (;;)
            {
                int alt1=7;
                switch ( LA(1) ) 
                {
                case Type:
                	{
                		alt1=1;
                	}
                    break;
                case Constant:
                	{
                		alt1=2;
                	}
                    break;
                case Fluent:
                case Variable:
                case Function:
                case Predicate:
                	{
                		alt1=3;
                	}
                    break;
                case Action:
                	{
                		alt1=4;
                	}
                    break;
                case When:
                case ID:
                case Semi:
                case LeftC:
                case LeftB:
                case LeftP:
                case Duration:
                case NotLog:
                case NotBit:
                case Contains:
                case ForAll:
                case Exists:
                case Delta:
                case Dots:
                case Minus:
                case Unordered:
                case Ordered:
                case Start:
                case End:
                case INT:
                case FLOAT:
                case STRING:
                case True:
                case False:
                case Infinity:
                	{
                		alt1=5;
                	}
                    break;
                case Fact:
                case Goal:
                	{
                		alt1=6;
                	}
                    break;

                }

                switch (alt1) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:126:4: t+= type_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_type_decl_in_anml332);
            	        t=type_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleanmlEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_type_decl; stream_type_decl->add(stream_type_decl, t.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_t == NULL)
            	        {
            	            list_t=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_t->add(list_t, t.tree, NULL);

            	    }
            	    break;
            	case 2:
            	    // ANML/base/antlr/ANML.g:127:4: c+= const_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_const_decl_in_anml340);
            	        c=const_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleanmlEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_const_decl; stream_const_decl->add(stream_const_decl, c.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_c == NULL)
            	        {
            	            list_c=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_c->add(list_c, c.tree, NULL);

            	    }
            	    break;
            	case 3:
            	    // ANML/base/antlr/ANML.g:128:4: f+= fluent_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_fluent_decl_in_anml348);
            	        f=fluent_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleanmlEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_fluent_decl; stream_fluent_decl->add(stream_fluent_decl, f.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_f == NULL)
            	        {
            	            list_f=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_f->add(list_f, f.tree, NULL);

            	    }
            	    break;
            	case 4:
            	    // ANML/base/antlr/ANML.g:129:4: a+= action_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_action_decl_in_anml356);
            	        a=action_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleanmlEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_action_decl; stream_action_decl->add(stream_action_decl, a.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_a == NULL)
            	        {
            	            list_a=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_a->add(list_a, a.tree, NULL);

            	    }
            	    break;
            	case 5:
            	    // ANML/base/antlr/ANML.g:130:4: s+= stmt
            	    {
            	        FOLLOWPUSH(FOLLOW_stmt_in_anml363);
            	        s=stmt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleanmlEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, s.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_s == NULL)
            	        {
            	            list_s=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_s->add(list_s, s.tree, NULL);

            	    }
            	    break;
            	case 6:
            	    // ANML/base/antlr/ANML.g:131:4: ps+= problem_stmt
            	    {
            	        FOLLOWPUSH(FOLLOW_problem_stmt_in_anml370);
            	        ps=problem_stmt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleanmlEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_problem_stmt; stream_problem_stmt->add(stream_problem_stmt, ps.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_ps == NULL)
            	        {
            	            list_ps=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_ps->add(list_ps, ps.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : a, f, ps, c, s, t
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : f, t, s, c, a, ps
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_f;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_t;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_c;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ps;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_f=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token f", list_f);
            	stream_t=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token t", list_t);
            	stream_s=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s", list_s);
            	stream_c=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", list_c);
            	stream_a=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", list_a);
            	stream_ps=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token ps", list_ps);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 133:2: -> ^( Block ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) )
            	{
            	    // ANML/base/antlr/ANML.g:134:2: ^( Block ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Block, (pANTLR3_UINT8)"Block"), root_1));

            	        // ANML/base/antlr/ANML.g:135:3: ^( Types ( $t)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Types, (pANTLR3_UINT8)"Types"), root_2));

            	            // ANML/base/antlr/ANML.g:135:11: ( $t)*
            	            {
            	            	while ( (stream_t != NULL && stream_t->hasNext(stream_t))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_t == NULL ? NULL : stream_t->nextTree(stream_t));

            	            	}
            	            	if ( stream_t != NULL) stream_t->reset(stream_t);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:136:3: ^( Constants ( $c)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Constants, (pANTLR3_UINT8)"Constants"), root_2));

            	            // ANML/base/antlr/ANML.g:136:15: ( $c)*
            	            {
            	            	while ( (stream_c != NULL && stream_c->hasNext(stream_c))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_c == NULL ? NULL : stream_c->nextTree(stream_c));

            	            	}
            	            	if ( stream_c != NULL) stream_c->reset(stream_c);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:137:3: ^( Fluents ( $f)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Fluents, (pANTLR3_UINT8)"Fluents"), root_2));

            	            // ANML/base/antlr/ANML.g:137:13: ( $f)*
            	            {
            	            	while ( (stream_f != NULL && stream_f->hasNext(stream_f))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_f == NULL ? NULL : stream_f->nextTree(stream_f));

            	            	}
            	            	if ( stream_f != NULL) stream_f->reset(stream_f);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:138:3: ^( Actions ( $a)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Actions, (pANTLR3_UINT8)"Actions"), root_2));

            	            // ANML/base/antlr/ANML.g:138:13: ( $a)*
            	            {
            	            	while ( (stream_a != NULL && stream_a->hasNext(stream_a))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	            	}
            	            	if ( stream_a != NULL) stream_a->reset(stream_a);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:139:3: ^( Stmts ( $s)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Stmts, (pANTLR3_UINT8)"Stmts"), root_2));

            	            // ANML/base/antlr/ANML.g:139:11: ( $s)*
            	            {
            	            	while ( (stream_s != NULL && stream_s->hasNext(stream_s))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_s == NULL ? NULL : stream_s->nextTree(stream_s));

            	            	}
            	            	if ( stream_s != NULL) stream_s->reset(stream_s);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:140:3: ^( ProblemStmts ( $ps)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ProblemStmts, (pANTLR3_UINT8)"ProblemStmts"), root_2));

            	            // ANML/base/antlr/ANML.g:140:18: ( $ps)*
            	            {
            	            	while ( (stream_ps != NULL && stream_ps->hasNext(stream_ps))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_ps == NULL ? NULL : stream_ps->nextTree(stream_ps));

            	            	}
            	            	if ( stream_ps != NULL) stream_ps->reset(stream_ps);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_f != NULL) stream_f->free(stream_f);
            	if (stream_t != NULL) stream_t->free(stream_t);
            	if (stream_s != NULL) stream_s->free(stream_s);
            	if (stream_c != NULL) stream_c->free(stream_c);
            	if (stream_a != NULL) stream_a->free(stream_a);
            	if (stream_ps != NULL) stream_ps->free(stream_ps);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleanmlEx; /* Prevent compiler warnings */
    ruleanmlEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_type_decl != NULL) stream_type_decl->free(stream_type_decl);
        if (stream_stmt != NULL) stream_stmt->free(stream_stmt);
        if (stream_problem_stmt != NULL) stream_problem_stmt->free(stream_problem_stmt);
        if (stream_fluent_decl != NULL) stream_fluent_decl->free(stream_fluent_decl);
        if (stream_const_decl != NULL) stream_const_decl->free(stream_const_decl);
        if (stream_action_decl != NULL) stream_action_decl->free(stream_action_decl);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end anml */

/** 
 * $ANTLR start type_decl
 * ANML/base/antlr/ANML.g:144:1: type_decl : Type l+= type_decl_helper ( Comma l+= type_decl_helper )* Semi -> ( $l)+ ;
 */
static ANMLParser_type_decl_return
type_decl(pANMLParser ctx)
{   
    ANMLParser_type_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Type1;
    pANTLR3_COMMON_TOKEN    Comma2;
    pANTLR3_COMMON_TOKEN    Semi3;
    pANTLR3_VECTOR    list_l;
    ANMLParser_type_decl_helper_return l;
    #undef	RETURN_TYPE_l
    #define	RETURN_TYPE_l ANMLParser_type_decl_helper_return

    pANTLR3_BASE_TREE Type1_tree;
    pANTLR3_BASE_TREE Comma2_tree;
    pANTLR3_BASE_TREE Semi3_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Semi;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Type;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_decl_helper;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Type1       = NULL;
    Comma2       = NULL;
    Semi3       = NULL;
    list_l     = NULL;
    l.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Type1_tree   = NULL;
    Comma2_tree   = NULL;
    Semi3_tree   = NULL;

    stream_Semi   = NULL;
    #define CREATE_stream_Semi  if (stream_Semi == NULL) {stream_Semi = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Semi"); } 
    stream_Type   = NULL;
    #define CREATE_stream_Type  if (stream_Type == NULL) {stream_Type = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Type"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_type_decl_helper   = NULL;
    #define CREATE_stream_type_decl_helper  if (stream_type_decl_helper == NULL) {stream_type_decl_helper = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_decl_helper"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:144:10: ( Type l+= type_decl_helper ( Comma l+= type_decl_helper )* Semi -> ( $l)+ )
        // ANML/base/antlr/ANML.g:145:2: Type l+= type_decl_helper ( Comma l+= type_decl_helper )* Semi
        {
            Type1 = (pANTLR3_COMMON_TOKEN) MATCHT(Type, &FOLLOW_Type_in_type_decl457); 
            if  (HASEXCEPTION())
            {
                goto ruletype_declEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Type; stream_Type->add(stream_Type, Type1, NULL); }

            FOLLOWPUSH(FOLLOW_type_decl_helper_in_type_decl461);
            l=type_decl_helper(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletype_declEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_type_decl_helper; stream_type_decl_helper->add(stream_type_decl_helper, l.tree, NULL); }
            /* listLabelTrack(label)
             */
            if (list_l == NULL)
            {
                list_l=ctx->vectors->newVector(ctx->vectors);
            }
            list_l->add(list_l, l.tree, NULL);

            // ANML/base/antlr/ANML.g:145:27: ( Comma l+= type_decl_helper )*

            for (;;)
            {
                int alt2=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA2_0 = LA(1);
                    if ( (LA2_0 == Comma) ) 
                    {
                        alt2=1;
                    }

                }
                switch (alt2) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:145:28: Comma l+= type_decl_helper
            	    {
            	        Comma2 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_type_decl464); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_declEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma2, NULL); }

            	        FOLLOWPUSH(FOLLOW_type_decl_helper_in_type_decl468);
            	        l=type_decl_helper(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_declEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_type_decl_helper; stream_type_decl_helper->add(stream_type_decl_helper, l.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_l == NULL)
            	        {
            	            list_l=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_l->add(list_l, l.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */

            Semi3 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_type_decl472); 
            if  (HASEXCEPTION())
            {
                goto ruletype_declEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Semi; stream_Semi->add(stream_Semi, Semi3, NULL); }


             
            /* AST REWRITE
             * elements          : l
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : l
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_l;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_l=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token l", list_l);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 146:3: -> ( $l)+
            	{
            	    if ((stream_l == NULL || !stream_l->hasNext(stream_l))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_l->hasNext(stream_l))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_l == NULL ? NULL : stream_l->nextTree(stream_l));

            	    	}
            	    	stream_l->reset(stream_l);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_l != NULL) stream_l->free(stream_l);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletype_declEx; /* Prevent compiler warnings */
    ruletype_declEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Semi != NULL) stream_Semi->free(stream_Semi);
        if (stream_Type != NULL) stream_Type->free(stream_Type);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_type_decl_helper != NULL) stream_type_decl_helper->free(stream_type_decl_helper);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end type_decl */

/** 
 * $ANTLR start type_decl_helper
 * ANML/base/antlr/ANML.g:149:1: type_decl_helper : ID ( LessThan s+= type_ref | Assign d+= type_spec | With p+= object_block )* -> ^( Type ID ^( Assign[\"Assign\"] ( $d)* ) ^( LessThan[\"LessThan\"] ( $s)* ) ^( With[\"With\"] ( $p)* ) ) ;
 */
static ANMLParser_type_decl_helper_return
type_decl_helper(pANMLParser ctx)
{   
    ANMLParser_type_decl_helper_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID4;
    pANTLR3_COMMON_TOKEN    LessThan5;
    pANTLR3_COMMON_TOKEN    Assign6;
    pANTLR3_COMMON_TOKEN    With7;
    pANTLR3_VECTOR    list_s;
    pANTLR3_VECTOR    list_d;
    pANTLR3_VECTOR    list_p;
    ANMLParser_type_ref_return s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s ANMLParser_type_ref_return

    ANMLParser_type_spec_return d;
    #undef	RETURN_TYPE_d
    #define	RETURN_TYPE_d ANMLParser_type_spec_return

    ANMLParser_object_block_return p;
    #undef	RETURN_TYPE_p
    #define	RETURN_TYPE_p ANMLParser_object_block_return

    pANTLR3_BASE_TREE ID4_tree;
    pANTLR3_BASE_TREE LessThan5_tree;
    pANTLR3_BASE_TREE Assign6_tree;
    pANTLR3_BASE_TREE With7_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Assign;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LessThan;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_With;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_spec;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_object_block;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_ref;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID4       = NULL;
    LessThan5       = NULL;
    Assign6       = NULL;
    With7       = NULL;
    list_s     = NULL;
    list_d     = NULL;
    list_p     = NULL;
    s.tree = NULL;

    d.tree = NULL;

    p.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID4_tree   = NULL;
    LessThan5_tree   = NULL;
    Assign6_tree   = NULL;
    With7_tree   = NULL;

    stream_Assign   = NULL;
    #define CREATE_stream_Assign  if (stream_Assign == NULL) {stream_Assign = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Assign"); } 
    stream_LessThan   = NULL;
    #define CREATE_stream_LessThan  if (stream_LessThan == NULL) {stream_LessThan = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LessThan"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_With   = NULL;
    #define CREATE_stream_With  if (stream_With == NULL) {stream_With = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token With"); } 
    stream_type_spec   = NULL;
    #define CREATE_stream_type_spec  if (stream_type_spec == NULL) {stream_type_spec = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_spec"); }
    stream_object_block   = NULL;
    #define CREATE_stream_object_block  if (stream_object_block == NULL) {stream_object_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule object_block"); }
    stream_type_ref   = NULL;
    #define CREATE_stream_type_ref  if (stream_type_ref == NULL) {stream_type_ref = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_ref"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:149:17: ( ID ( LessThan s+= type_ref | Assign d+= type_spec | With p+= object_block )* -> ^( Type ID ^( Assign[\"Assign\"] ( $d)* ) ^( LessThan[\"LessThan\"] ( $s)* ) ^( With[\"With\"] ( $p)* ) ) )
        // ANML/base/antlr/ANML.g:150:2: ID ( LessThan s+= type_ref | Assign d+= type_spec | With p+= object_block )*
        {
            ID4 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_type_decl_helper490); 
            if  (HASEXCEPTION())
            {
                goto ruletype_decl_helperEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID4, NULL); }


            // ANML/base/antlr/ANML.g:151:4: ( LessThan s+= type_ref | Assign d+= type_spec | With p+= object_block )*

            for (;;)
            {
                int alt3=4;
                switch ( LA(1) ) 
                {
                case LessThan:
                	{
                		alt3=1;
                	}
                    break;
                case Assign:
                	{
                		alt3=2;
                	}
                    break;
                case With:
                	{
                		alt3=3;
                	}
                    break;

                }

                switch (alt3) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:151:6: LessThan s+= type_ref
            	    {
            	        LessThan5 = (pANTLR3_COMMON_TOKEN) MATCHT(LessThan, &FOLLOW_LessThan_in_type_decl_helper497); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_decl_helperEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LessThan; stream_LessThan->add(stream_LessThan, LessThan5, NULL); }

            	        FOLLOWPUSH(FOLLOW_type_ref_in_type_decl_helper501);
            	        s=type_ref(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_decl_helperEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_type_ref; stream_type_ref->add(stream_type_ref, s.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_s == NULL)
            	        {
            	            list_s=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_s->add(list_s, s.tree, NULL);

            	    }
            	    break;
            	case 2:
            	    // ANML/base/antlr/ANML.g:152:6: Assign d+= type_spec
            	    {
            	        Assign6 = (pANTLR3_COMMON_TOKEN) MATCHT(Assign, &FOLLOW_Assign_in_type_decl_helper508); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_decl_helperEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Assign; stream_Assign->add(stream_Assign, Assign6, NULL); }

            	        FOLLOWPUSH(FOLLOW_type_spec_in_type_decl_helper512);
            	        d=type_spec(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_decl_helperEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_type_spec; stream_type_spec->add(stream_type_spec, d.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_d == NULL)
            	        {
            	            list_d=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_d->add(list_d, d.tree, NULL);

            	    }
            	    break;
            	case 3:
            	    // ANML/base/antlr/ANML.g:153:6: With p+= object_block
            	    {
            	        With7 = (pANTLR3_COMMON_TOKEN) MATCHT(With, &FOLLOW_With_in_type_decl_helper519); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_decl_helperEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_With; stream_With->add(stream_With, With7, NULL); }

            	        FOLLOWPUSH(FOLLOW_object_block_in_type_decl_helper523);
            	        p=object_block(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_decl_helperEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_object_block; stream_object_block->add(stream_object_block, p.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_p == NULL)
            	        {
            	            list_p=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_p->add(list_p, p.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : LessThan, d, With, Assign, ID, p, s
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : d, s, p
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_d;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_p;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_d=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token d", list_d);
            	stream_s=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s", list_s);
            	stream_p=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token p", list_p);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 155:3: -> ^( Type ID ^( Assign[\"Assign\"] ( $d)* ) ^( LessThan[\"LessThan\"] ( $s)* ) ^( With[\"With\"] ( $p)* ) )
            	{
            	    // ANML/base/antlr/ANML.g:155:6: ^( Type ID ^( Assign[\"Assign\"] ( $d)* ) ^( LessThan[\"LessThan\"] ( $s)* ) ^( With[\"With\"] ( $p)* ) )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Type, (pANTLR3_UINT8)"Type"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // ANML/base/antlr/ANML.g:155:16: ^( Assign[\"Assign\"] ( $d)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	            #if 1 == 2
            	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Assign, TOKTEXT("Assign"))
            	            #else
            	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Assign, (pANTLR3_UINT8)"Assign")
            	            #endif
            	            , root_2));

            	            // ANML/base/antlr/ANML.g:155:35: ( $d)*
            	            {
            	            	while ( (stream_d != NULL && stream_d->hasNext(stream_d))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_d == NULL ? NULL : stream_d->nextTree(stream_d));

            	            	}
            	            	if ( stream_d != NULL) stream_d->reset(stream_d);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:155:40: ^( LessThan[\"LessThan\"] ( $s)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	            #if 1 == 2
            	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, LessThan, TOKTEXT("LessThan"))
            	            #else
            	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LessThan, (pANTLR3_UINT8)"LessThan")
            	            #endif
            	            , root_2));

            	            // ANML/base/antlr/ANML.g:155:63: ( $s)*
            	            {
            	            	while ( (stream_s != NULL && stream_s->hasNext(stream_s))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_s == NULL ? NULL : stream_s->nextTree(stream_s));

            	            	}
            	            	if ( stream_s != NULL) stream_s->reset(stream_s);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:155:68: ^( With[\"With\"] ( $p)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	            #if 1 == 2
            	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, With, TOKTEXT("With"))
            	            #else
            	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, With, (pANTLR3_UINT8)"With")
            	            #endif
            	            , root_2));

            	            // ANML/base/antlr/ANML.g:155:83: ( $p)*
            	            {
            	            	while ( (stream_p != NULL && stream_p->hasNext(stream_p))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_p == NULL ? NULL : stream_p->nextTree(stream_p));

            	            	}
            	            	if ( stream_p != NULL) stream_p->reset(stream_p);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_d != NULL) stream_d->free(stream_d);
            	if (stream_s != NULL) stream_s->free(stream_s);
            	if (stream_p != NULL) stream_p->free(stream_p);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletype_decl_helperEx; /* Prevent compiler warnings */
    ruletype_decl_helperEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Assign != NULL) stream_Assign->free(stream_Assign);
        if (stream_LessThan != NULL) stream_LessThan->free(stream_LessThan);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_With != NULL) stream_With->free(stream_With);
        if (stream_type_spec != NULL) stream_type_spec->free(stream_type_spec);
        if (stream_object_block != NULL) stream_object_block->free(stream_object_block);
        if (stream_type_ref != NULL) stream_type_ref->free(stream_type_ref);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end type_decl_helper */

/** 
 * $ANTLR start type_ref
 * ANML/base/antlr/ANML.g:158:1: type_ref : ( type_name ( set )? ) -> ^( TypeRef type_name ( set )? ) ;
 */
static ANMLParser_type_ref_return
type_ref(pANMLParser ctx)
{   
    ANMLParser_type_ref_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_type_name_return type_name8;
    #undef	RETURN_TYPE_type_name8
    #define	RETURN_TYPE_type_name8 ANMLParser_type_name_return

    ANMLParser_set_return set9;
    #undef	RETURN_TYPE_set9
    #define	RETURN_TYPE_set9 ANMLParser_set_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_set;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_name;
    /* Initialize rule variables
     */


    root_0 = NULL;

    type_name8.tree = NULL;

    set9.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_set   = NULL;
    #define CREATE_stream_set  if (stream_set == NULL) {stream_set = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule set"); }
    stream_type_name   = NULL;
    #define CREATE_stream_type_name  if (stream_type_name == NULL) {stream_type_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_name"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:158:9: ( ( type_name ( set )? ) -> ^( TypeRef type_name ( set )? ) )
        // ANML/base/antlr/ANML.g:159:2: ( type_name ( set )? )
        {
            // ANML/base/antlr/ANML.g:159:2: ( type_name ( set )? )
            // ANML/base/antlr/ANML.g:159:3: type_name ( set )?
            {
                FOLLOWPUSH(FOLLOW_type_name_in_type_ref577);
                type_name8=type_name(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletype_refEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_type_name; stream_type_name->add(stream_type_name, type_name8.tree, NULL); }

                // ANML/base/antlr/ANML.g:159:13: ( set )?
                {
                    int alt4=2;
                    {
                        int LA4_0 = LA(1);
                        if ( (LA4_0 == LeftC || LA4_0 == LeftB) ) 
                        {
                            alt4=1;
                        }
                    }
                    switch (alt4) 
                    {
                	case 1:
                	    // ANML/base/antlr/ANML.g:159:13: set
                	    {
                	        FOLLOWPUSH(FOLLOW_set_in_type_ref579);
                	        set9=set(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruletype_refEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }
                	        if ( BACKTRACKING==0 ) { CREATE_stream_set; stream_set->add(stream_set, set9.tree, NULL); }

                	    }
                	    break;

                    }
                }

            }


             
            /* AST REWRITE
             * elements          : type_name, set
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 160:3: -> ^( TypeRef type_name ( set )? )
            	{
            	    // ANML/base/antlr/ANML.g:160:6: ^( TypeRef type_name ( set )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TypeRef, (pANTLR3_UINT8)"TypeRef"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type_name == NULL ? NULL : stream_type_name->nextTree(stream_type_name));
            	        // ANML/base/antlr/ANML.g:160:26: ( set )?
            	        {
            	        	if ( (stream_set != NULL && stream_set->hasNext(stream_set))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_set == NULL ? NULL : stream_set->nextTree(stream_set));

            	        	}
            	        	if ( stream_set != NULL) stream_set->reset(stream_set);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletype_refEx; /* Prevent compiler warnings */
    ruletype_refEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_set != NULL) stream_set->free(stream_set);
        if (stream_type_name != NULL) stream_type_name->free(stream_type_name);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end type_ref */

/** 
 * $ANTLR start type_name
 * ANML/base/antlr/ANML.g:163:1: type_name : ( builtinType | ID );
 */
static ANMLParser_type_name_return
type_name(pANMLParser ctx)
{   
    ANMLParser_type_name_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID11;
    ANMLParser_builtinType_return builtinType10;
    #undef	RETURN_TYPE_builtinType10
    #define	RETURN_TYPE_builtinType10 ANMLParser_builtinType_return

    pANTLR3_BASE_TREE ID11_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    ID11       = NULL;
    builtinType10.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID11_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:163:10: ( builtinType | ID )
            
            ANTLR3_UINT32 alt5;

            alt5=2;


            {
                int LA5_0 = LA(1);
                if ( (((LA5_0 >= Boolean) && (LA5_0 <= Object))) ) 
                {
                    alt5=1;
                }
                else if ( (LA5_0 == ID) ) 
                {
                    alt5=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 5;
                    EXCEPTION->state        = 0;


                    goto ruletype_nameEx;
                }
            }
            switch (alt5) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:164:2: builtinType
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_builtinType_in_type_name609);
        	        builtinType10=builtinType(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletype_nameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, builtinType10.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:165:4: ID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        ID11 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_type_name614); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletype_nameEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        ID11_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID11));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ID11_tree);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruletype_nameEx; /* Prevent compiler warnings */
    ruletype_nameEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end type_name */

/** 
 * $ANTLR start set
 * ANML/base/antlr/ANML.g:168:1: set : ( enumeration | range );
 */
static ANMLParser_set_return
set(pANMLParser ctx)
{   
    ANMLParser_set_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_enumeration_return enumeration12;
    #undef	RETURN_TYPE_enumeration12
    #define	RETURN_TYPE_enumeration12 ANMLParser_enumeration_return

    ANMLParser_range_return range13;
    #undef	RETURN_TYPE_range13
    #define	RETURN_TYPE_range13 ANMLParser_range_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    enumeration12.tree = NULL;

    range13.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:168:4: ( enumeration | range )
            
            ANTLR3_UINT32 alt6;

            alt6=2;


            {
                int LA6_0 = LA(1);
                if ( (LA6_0 == LeftC) ) 
                {
                    alt6=1;
                }
                else if ( (LA6_0 == LeftB) ) 
                {
                    alt6=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 6;
                    EXCEPTION->state        = 0;


                    goto rulesetEx;
                }
            }
            switch (alt6) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:168:6: enumeration
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_enumeration_in_set623);
        	        enumeration12=enumeration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesetEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enumeration12.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:168:20: range
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_range_in_set627);
        	        range13=range(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesetEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, range13.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesetEx; /* Prevent compiler warnings */
    rulesetEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end set */

/** 
 * $ANTLR start enumeration
 * ANML/base/antlr/ANML.g:170:1: enumeration : LeftC expr ( ( Comma )? expr )* RightC -> ^( Enum[$LeftC,\"Enumeration\"] ( expr )+ ) ;
 */
static ANMLParser_enumeration_return
enumeration(pANMLParser ctx)
{   
    ANMLParser_enumeration_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LeftC14;
    pANTLR3_COMMON_TOKEN    Comma16;
    pANTLR3_COMMON_TOKEN    RightC18;
    ANMLParser_expr_return expr15;
    #undef	RETURN_TYPE_expr15
    #define	RETURN_TYPE_expr15 ANMLParser_expr_return

    ANMLParser_expr_return expr17;
    #undef	RETURN_TYPE_expr17
    #define	RETURN_TYPE_expr17 ANMLParser_expr_return

    pANTLR3_BASE_TREE LeftC14_tree;
    pANTLR3_BASE_TREE Comma16_tree;
    pANTLR3_BASE_TREE RightC18_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftC;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightC;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LeftC14       = NULL;
    Comma16       = NULL;
    RightC18       = NULL;
    expr15.tree = NULL;

    expr17.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LeftC14_tree   = NULL;
    Comma16_tree   = NULL;
    RightC18_tree   = NULL;

    stream_LeftC   = NULL;
    #define CREATE_stream_LeftC  if (stream_LeftC == NULL) {stream_LeftC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftC"); } 
    stream_RightC   = NULL;
    #define CREATE_stream_RightC  if (stream_RightC == NULL) {stream_RightC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightC"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:170:12: ( LeftC expr ( ( Comma )? expr )* RightC -> ^( Enum[$LeftC,\"Enumeration\"] ( expr )+ ) )
        // ANML/base/antlr/ANML.g:171:2: LeftC expr ( ( Comma )? expr )* RightC
        {
            LeftC14 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftC, &FOLLOW_LeftC_in_enumeration636); 
            if  (HASEXCEPTION())
            {
                goto ruleenumerationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_LeftC; stream_LeftC->add(stream_LeftC, LeftC14, NULL); }

            FOLLOWPUSH(FOLLOW_expr_in_enumeration638);
            expr15=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleenumerationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr15.tree, NULL); }

            // ANML/base/antlr/ANML.g:171:13: ( ( Comma )? expr )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == ID || LA8_0 == Comma || LA8_0 == LeftB || LA8_0 == LeftP || LA8_0 == Duration || ((LA8_0 >= NotLog) && (LA8_0 <= NotBit)) || LA8_0 == Contains || ((LA8_0 >= ForAll) && (LA8_0 <= Exists)) || LA8_0 == Dots || LA8_0 == Minus || ((LA8_0 >= Unordered) && (LA8_0 <= End)) || ((LA8_0 >= INT) && (LA8_0 <= Infinity))) ) 
                    {
                        alt8=1;
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:171:14: ( Comma )? expr
            	    {

            	        // ANML/base/antlr/ANML.g:171:14: ( Comma )?
            	        {
            	            int alt7=2;
            	            {
            	                int LA7_0 = LA(1);
            	                if ( (LA7_0 == Comma) ) 
            	                {
            	                    alt7=1;
            	                }
            	            }
            	            switch (alt7) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:171:14: Comma
            	        	    {
            	        	        Comma16 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_enumeration641); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleenumerationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma16, NULL); }


            	        	    }
            	        	    break;

            	            }
            	        }
            	        FOLLOWPUSH(FOLLOW_expr_in_enumeration644);
            	        expr17=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenumerationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr17.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */

            RightC18 = (pANTLR3_COMMON_TOKEN) MATCHT(RightC, &FOLLOW_RightC_in_enumeration648); 
            if  (HASEXCEPTION())
            {
                goto ruleenumerationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_RightC; stream_RightC->add(stream_RightC, RightC18, NULL); }


             
            /* AST REWRITE
             * elements          : expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 171:35: -> ^( Enum[$LeftC,\"Enumeration\"] ( expr )+ )
            	{
            	    // ANML/base/antlr/ANML.g:171:38: ^( Enum[$LeftC,\"Enumeration\"] ( expr )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 2 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Enum, TOKTEXT(LeftC14, "Enumeration"))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Enum, (pANTLR3_UINT8)LeftC14, "Enumeration")
            	        #endif
            	        , root_1));

            	        if ((stream_expr == NULL || !stream_expr->hasNext(stream_expr))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_expr->hasNext(stream_expr))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	}
            	        	stream_expr->reset(stream_expr);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenumerationEx; /* Prevent compiler warnings */
    ruleenumerationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LeftC != NULL) stream_LeftC->free(stream_LeftC);
        if (stream_RightC != NULL) stream_RightC->free(stream_RightC);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enumeration */

/** 
 * $ANTLR start range
 * ANML/base/antlr/ANML.g:174:1: range : LeftB a= expr ( Comma )? b= expr RightB -> ^( Range[$LeftB,\"Range\"] $a $b) ;
 */
static ANMLParser_range_return
range(pANMLParser ctx)
{   
    ANMLParser_range_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LeftB19;
    pANTLR3_COMMON_TOKEN    Comma20;
    pANTLR3_COMMON_TOKEN    RightB21;
    ANMLParser_expr_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a ANMLParser_expr_return

    ANMLParser_expr_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b ANMLParser_expr_return

    pANTLR3_BASE_TREE LeftB19_tree;
    pANTLR3_BASE_TREE Comma20_tree;
    pANTLR3_BASE_TREE RightB21_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightB;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftB;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LeftB19       = NULL;
    Comma20       = NULL;
    RightB21       = NULL;
    a.tree = NULL;

    b.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LeftB19_tree   = NULL;
    Comma20_tree   = NULL;
    RightB21_tree   = NULL;

    stream_RightB   = NULL;
    #define CREATE_stream_RightB  if (stream_RightB == NULL) {stream_RightB = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightB"); } 
    stream_LeftB   = NULL;
    #define CREATE_stream_LeftB  if (stream_LeftB == NULL) {stream_LeftB = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftB"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:174:6: ( LeftB a= expr ( Comma )? b= expr RightB -> ^( Range[$LeftB,\"Range\"] $a $b) )
        // ANML/base/antlr/ANML.g:175:2: LeftB a= expr ( Comma )? b= expr RightB
        {
            LeftB19 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftB, &FOLLOW_LeftB_in_range668); 
            if  (HASEXCEPTION())
            {
                goto rulerangeEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_LeftB; stream_LeftB->add(stream_LeftB, LeftB19, NULL); }

            FOLLOWPUSH(FOLLOW_expr_in_range672);
            a=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerangeEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, a.tree, NULL); }

            // ANML/base/antlr/ANML.g:175:15: ( Comma )?
            {
                int alt9=2;
                {
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == Comma) ) 
                    {
                        alt9=1;
                    }
                }
                switch (alt9) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:175:15: Comma
            	    {
            	        Comma20 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_range674); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerangeEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma20, NULL); }


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_expr_in_range679);
            b=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerangeEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, b.tree, NULL); }
            RightB21 = (pANTLR3_COMMON_TOKEN) MATCHT(RightB, &FOLLOW_RightB_in_range681); 
            if  (HASEXCEPTION())
            {
                goto rulerangeEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_RightB; stream_RightB->add(stream_RightB, RightB21, NULL); }


             
            /* AST REWRITE
             * elements          : b, a
             * token labels      : 
             * rule labels       : retval, b, a
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);
            	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 175:36: -> ^( Range[$LeftB,\"Range\"] $a $b)
            	{
            	    // ANML/base/antlr/ANML.g:175:39: ^( Range[$LeftB,\"Range\"] $a $b)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 2 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Range, TOKTEXT(LeftB19, "Range"))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Range, (pANTLR3_UINT8)LeftB19, "Range")
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_b != NULL) stream_b->free(stream_b);
            	if (stream_a != NULL) stream_a->free(stream_a);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerangeEx; /* Prevent compiler warnings */
    rulerangeEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RightB != NULL) stream_RightB->free(stream_RightB);
        if (stream_LeftB != NULL) stream_LeftB->free(stream_LeftB);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end range */

/** 
 * $ANTLR start type_spec
 * ANML/base/antlr/ANML.g:178:1: type_spec : ( type_ref | Vector param_list -> ^( Vector param_list ) | type_enumeration );
 */
static ANMLParser_type_spec_return
type_spec(pANMLParser ctx)
{   
    ANMLParser_type_spec_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Vector23;
    ANMLParser_type_ref_return type_ref22;
    #undef	RETURN_TYPE_type_ref22
    #define	RETURN_TYPE_type_ref22 ANMLParser_type_ref_return

    ANMLParser_param_list_return param_list24;
    #undef	RETURN_TYPE_param_list24
    #define	RETURN_TYPE_param_list24 ANMLParser_param_list_return

    ANMLParser_type_enumeration_return type_enumeration25;
    #undef	RETURN_TYPE_type_enumeration25
    #define	RETURN_TYPE_type_enumeration25 ANMLParser_type_enumeration_return

    pANTLR3_BASE_TREE Vector23_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Vector;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_param_list;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Vector23       = NULL;
    type_ref22.tree = NULL;

    param_list24.tree = NULL;

    type_enumeration25.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Vector23_tree   = NULL;

    stream_Vector   = NULL;
    #define CREATE_stream_Vector  if (stream_Vector == NULL) {stream_Vector = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Vector"); } 
    stream_param_list   = NULL;
    #define CREATE_stream_param_list  if (stream_param_list == NULL) {stream_param_list = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule param_list"); }

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:178:10: ( type_ref | Vector param_list -> ^( Vector param_list ) | type_enumeration )
            
            ANTLR3_UINT32 alt10;

            alt10=3;

            switch ( LA(1) ) 
            {
            case ID:
            case Boolean:
            case Integer:
            case Float:
            case Symbol:
            case String:
            case Object:
            	{
            		alt10=1;
            	}
                break;
            case Vector:
            	{
            		alt10=2;
            	}
                break;
            case LeftC:
            	{
            		alt10=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 10;
                EXCEPTION->state        = 0;


                goto ruletype_specEx;
            }

            switch (alt10) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:179:2: type_ref
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_type_ref_in_type_spec705);
        	        type_ref22=type_ref(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletype_specEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_ref22.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:180:4: Vector param_list
        	    {
        	        Vector23 = (pANTLR3_COMMON_TOKEN) MATCHT(Vector, &FOLLOW_Vector_in_type_spec710); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletype_specEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Vector; stream_Vector->add(stream_Vector, Vector23, NULL); }

        	        FOLLOWPUSH(FOLLOW_param_list_in_type_spec712);
        	        param_list24=param_list(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletype_specEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_param_list; stream_param_list->add(stream_param_list, param_list24.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : param_list, Vector
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 181:3: -> ^( Vector param_list )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:181:6: ^( Vector param_list )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_Vector == NULL ? NULL : stream_Vector->nextNode(stream_Vector), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_param_list == NULL ? NULL : stream_param_list->nextTree(stream_param_list));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:182:4: type_enumeration
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_type_enumeration_in_type_spec727);
        	        type_enumeration25=type_enumeration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletype_specEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, type_enumeration25.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruletype_specEx; /* Prevent compiler warnings */
    ruletype_specEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Vector != NULL) stream_Vector->free(stream_Vector);
        if (stream_param_list != NULL) stream_param_list->free(stream_param_list);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end type_spec */

/** 
 * $ANTLR start type_enumeration
 * ANML/base/antlr/ANML.g:185:1: type_enumeration : LeftC type_enumeration_element ( ( Comma )? type_enumeration_element )* RightC -> ^( Enum[$LeftC,\"TypeElementEnumeration\"] ( type_enumeration_element )+ ) ;
 */
static ANMLParser_type_enumeration_return
type_enumeration(pANMLParser ctx)
{   
    ANMLParser_type_enumeration_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LeftC26;
    pANTLR3_COMMON_TOKEN    Comma28;
    pANTLR3_COMMON_TOKEN    RightC30;
    ANMLParser_type_enumeration_element_return type_enumeration_element27;
    #undef	RETURN_TYPE_type_enumeration_element27
    #define	RETURN_TYPE_type_enumeration_element27 ANMLParser_type_enumeration_element_return

    ANMLParser_type_enumeration_element_return type_enumeration_element29;
    #undef	RETURN_TYPE_type_enumeration_element29
    #define	RETURN_TYPE_type_enumeration_element29 ANMLParser_type_enumeration_element_return

    pANTLR3_BASE_TREE LeftC26_tree;
    pANTLR3_BASE_TREE Comma28_tree;
    pANTLR3_BASE_TREE RightC30_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftC;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightC;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_enumeration_element;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LeftC26       = NULL;
    Comma28       = NULL;
    RightC30       = NULL;
    type_enumeration_element27.tree = NULL;

    type_enumeration_element29.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LeftC26_tree   = NULL;
    Comma28_tree   = NULL;
    RightC30_tree   = NULL;

    stream_LeftC   = NULL;
    #define CREATE_stream_LeftC  if (stream_LeftC == NULL) {stream_LeftC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftC"); } 
    stream_RightC   = NULL;
    #define CREATE_stream_RightC  if (stream_RightC == NULL) {stream_RightC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightC"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_type_enumeration_element   = NULL;
    #define CREATE_stream_type_enumeration_element  if (stream_type_enumeration_element == NULL) {stream_type_enumeration_element = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_enumeration_element"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:185:17: ( LeftC type_enumeration_element ( ( Comma )? type_enumeration_element )* RightC -> ^( Enum[$LeftC,\"TypeElementEnumeration\"] ( type_enumeration_element )+ ) )
        // ANML/base/antlr/ANML.g:186:2: LeftC type_enumeration_element ( ( Comma )? type_enumeration_element )* RightC
        {
            LeftC26 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftC, &FOLLOW_LeftC_in_type_enumeration737); 
            if  (HASEXCEPTION())
            {
                goto ruletype_enumerationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_LeftC; stream_LeftC->add(stream_LeftC, LeftC26, NULL); }

            FOLLOWPUSH(FOLLOW_type_enumeration_element_in_type_enumeration739);
            type_enumeration_element27=type_enumeration_element(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletype_enumerationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_type_enumeration_element; stream_type_enumeration_element->add(stream_type_enumeration_element, type_enumeration_element27.tree, NULL); }

            // ANML/base/antlr/ANML.g:186:33: ( ( Comma )? type_enumeration_element )*

            for (;;)
            {
                int alt12=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == ID || LA12_0 == Comma || ((LA12_0 >= INT) && (LA12_0 <= Infinity))) ) 
                    {
                        alt12=1;
                    }

                }
                switch (alt12) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:186:34: ( Comma )? type_enumeration_element
            	    {

            	        // ANML/base/antlr/ANML.g:186:34: ( Comma )?
            	        {
            	            int alt11=2;
            	            {
            	                int LA11_0 = LA(1);
            	                if ( (LA11_0 == Comma) ) 
            	                {
            	                    alt11=1;
            	                }
            	            }
            	            switch (alt11) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:186:34: Comma
            	        	    {
            	        	        Comma28 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_type_enumeration742); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletype_enumerationEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma28, NULL); }


            	        	    }
            	        	    break;

            	            }
            	        }
            	        FOLLOWPUSH(FOLLOW_type_enumeration_element_in_type_enumeration745);
            	        type_enumeration_element29=type_enumeration_element(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletype_enumerationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_type_enumeration_element; stream_type_enumeration_element->add(stream_type_enumeration_element, type_enumeration_element29.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */

            RightC30 = (pANTLR3_COMMON_TOKEN) MATCHT(RightC, &FOLLOW_RightC_in_type_enumeration749); 
            if  (HASEXCEPTION())
            {
                goto ruletype_enumerationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_RightC; stream_RightC->add(stream_RightC, RightC30, NULL); }


             
            /* AST REWRITE
             * elements          : type_enumeration_element
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 187:2: -> ^( Enum[$LeftC,\"TypeElementEnumeration\"] ( type_enumeration_element )+ )
            	{
            	    // ANML/base/antlr/ANML.g:187:5: ^( Enum[$LeftC,\"TypeElementEnumeration\"] ( type_enumeration_element )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 2 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Enum, TOKTEXT(LeftC26, "TypeElementEnumeration"))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Enum, (pANTLR3_UINT8)LeftC26, "TypeElementEnumeration")
            	        #endif
            	        , root_1));

            	        if ((stream_type_enumeration_element == NULL || !stream_type_enumeration_element->hasNext(stream_type_enumeration_element))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_type_enumeration_element->hasNext(stream_type_enumeration_element))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_type_enumeration_element == NULL ? NULL : stream_type_enumeration_element->nextTree(stream_type_enumeration_element));

            	        	}
            	        	stream_type_enumeration_element->reset(stream_type_enumeration_element);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletype_enumerationEx; /* Prevent compiler warnings */
    ruletype_enumerationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LeftC != NULL) stream_LeftC->free(stream_LeftC);
        if (stream_RightC != NULL) stream_RightC->free(stream_RightC);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_type_enumeration_element != NULL) stream_type_enumeration_element->free(stream_type_enumeration_element);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end type_enumeration */

/** 
 * $ANTLR start type_enumeration_element
 * ANML/base/antlr/ANML.g:190:1: type_enumeration_element : ( ID | literal );
 */
static ANMLParser_type_enumeration_element_return
type_enumeration_element(pANMLParser ctx)
{   
    ANMLParser_type_enumeration_element_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID31;
    ANMLParser_literal_return literal32;
    #undef	RETURN_TYPE_literal32
    #define	RETURN_TYPE_literal32 ANMLParser_literal_return

    pANTLR3_BASE_TREE ID31_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    ID31       = NULL;
    literal32.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID31_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:190:25: ( ID | literal )
            
            ANTLR3_UINT32 alt13;

            alt13=2;


            {
                int LA13_0 = LA(1);
                if ( (LA13_0 == ID) ) 
                {
                    alt13=1;
                }
                else if ( (((LA13_0 >= INT) && (LA13_0 <= Infinity))) ) 
                {
                    alt13=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 13;
                    EXCEPTION->state        = 0;


                    goto ruletype_enumeration_elementEx;
                }
            }
            switch (alt13) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:191:2: ID
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        ID31 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_type_enumeration_element773); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletype_enumeration_elementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        ID31_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID31));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ID31_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:191:7: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literal_in_type_enumeration_element777);
        	        literal32=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletype_enumeration_elementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal32.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruletype_enumeration_elementEx; /* Prevent compiler warnings */
    ruletype_enumeration_elementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end type_enumeration_element */

/** 
 * $ANTLR start param_list
 * ANML/base/antlr/ANML.g:194:1: param_list : ( LeftP p+= param ( Comma p+= param )* RightP -> ^( Parameters ( $p)+ ) | LeftP RightP -> ^( Parameters ) ) ;
 */
static ANMLParser_param_list_return
param_list(pANMLParser ctx)
{   
    ANMLParser_param_list_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LeftP33;
    pANTLR3_COMMON_TOKEN    Comma34;
    pANTLR3_COMMON_TOKEN    RightP35;
    pANTLR3_COMMON_TOKEN    LeftP36;
    pANTLR3_COMMON_TOKEN    RightP37;
    pANTLR3_VECTOR    list_p;
    ANMLParser_param_return p;
    #undef	RETURN_TYPE_p
    #define	RETURN_TYPE_p ANMLParser_param_return

    pANTLR3_BASE_TREE LeftP33_tree;
    pANTLR3_BASE_TREE Comma34_tree;
    pANTLR3_BASE_TREE RightP35_tree;
    pANTLR3_BASE_TREE LeftP36_tree;
    pANTLR3_BASE_TREE RightP37_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_param;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LeftP33       = NULL;
    Comma34       = NULL;
    RightP35       = NULL;
    LeftP36       = NULL;
    RightP37       = NULL;
    list_p     = NULL;
    p.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LeftP33_tree   = NULL;
    Comma34_tree   = NULL;
    RightP35_tree   = NULL;
    LeftP36_tree   = NULL;
    RightP37_tree   = NULL;

    stream_RightP   = NULL;
    #define CREATE_stream_RightP  if (stream_RightP == NULL) {stream_RightP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightP"); } 
    stream_LeftP   = NULL;
    #define CREATE_stream_LeftP  if (stream_LeftP == NULL) {stream_LeftP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftP"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_param   = NULL;
    #define CREATE_stream_param  if (stream_param == NULL) {stream_param = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule param"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:194:11: ( ( LeftP p+= param ( Comma p+= param )* RightP -> ^( Parameters ( $p)+ ) | LeftP RightP -> ^( Parameters ) ) )
        // ANML/base/antlr/ANML.g:195:2: ( LeftP p+= param ( Comma p+= param )* RightP -> ^( Parameters ( $p)+ ) | LeftP RightP -> ^( Parameters ) )
        {

            // ANML/base/antlr/ANML.g:195:2: ( LeftP p+= param ( Comma p+= param )* RightP -> ^( Parameters ( $p)+ ) | LeftP RightP -> ^( Parameters ) )
            {
                int alt15=2;

                {
                    int LA15_0 = LA(1);
                    if ( (LA15_0 == LeftP) ) 
                    {

                        {
                            int LA15_1 = LA(2);
                            if ( (LA15_1 == RightP) ) 
                            {
                                alt15=2;
                            }
                            else if ( (LA15_1 == ID || ((LA15_1 >= Boolean) && (LA15_1 <= Object))) ) 
                            {
                                alt15=1;
                            }
                            else 
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE; 
                                    return retval;
                                }
                            
                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 15;
                                EXCEPTION->state        = 1;


                                goto ruleparam_listEx;
                            }
                        }
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 15;
                        EXCEPTION->state        = 0;


                        goto ruleparam_listEx;
                    }
                }
                switch (alt15) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:195:4: LeftP p+= param ( Comma p+= param )* RightP
            	    {
            	        LeftP33 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftP, &FOLLOW_LeftP_in_param_list789); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparam_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftP; stream_LeftP->add(stream_LeftP, LeftP33, NULL); }

            	        FOLLOWPUSH(FOLLOW_param_in_param_list793);
            	        p=param(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparam_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_param; stream_param->add(stream_param, p.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_p == NULL)
            	        {
            	            list_p=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_p->add(list_p, p.tree, NULL);

            	        // ANML/base/antlr/ANML.g:195:19: ( Comma p+= param )*

            	        for (;;)
            	        {
            	            int alt14=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA14_0 = LA(1);
            	                if ( (LA14_0 == Comma) ) 
            	                {
            	                    alt14=1;
            	                }

            	            }
            	            switch (alt14) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:195:20: Comma p+= param
            	        	    {
            	        	        Comma34 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_param_list796); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleparam_listEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma34, NULL); }

            	        	        FOLLOWPUSH(FOLLOW_param_in_param_list800);
            	        	        p=param(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleparam_listEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_param; stream_param->add(stream_param, p.tree, NULL); }
            	        	        /* listLabelTrack(label)
            	        	         */
            	        	        if (list_p == NULL)
            	        	        {
            	        	            list_p=ctx->vectors->newVector(ctx->vectors);
            	        	        }
            	        	        list_p->add(list_p, p.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop14;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop14: ; /* Jump out to here if this rule does not match */

            	        RightP35 = (pANTLR3_COMMON_TOKEN) MATCHT(RightP, &FOLLOW_RightP_in_param_list804); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparam_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_RightP; stream_RightP->add(stream_RightP, RightP35, NULL); }


            	         
            	        /* AST REWRITE
            	         * elements          : p
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : p
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_p;
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_p=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token p", list_p);
            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 196:3: -> ^( Parameters ( $p)+ )
            	        	{
            	        	    // ANML/base/antlr/ANML.g:196:6: ^( Parameters ( $p)+ )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Parameters, (pANTLR3_UINT8)"Parameters"), root_1));

            	        	        if ((stream_p == NULL || !stream_p->hasNext(stream_p))  )
            	        	        {
            	        	            CONSTRUCTEX();
            	        	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        	        }
            	        	        else
            	        	        {
            	        	        	while ( (stream_p->hasNext(stream_p))  ) {
            	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_p == NULL ? NULL : stream_p->nextTree(stream_p));

            	        	        	}
            	        	        	stream_p->reset(stream_p);

            	        	        }
            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_p != NULL) stream_p->free(stream_p);

            	        }
            	    }
            	    break;
            	case 2:
            	    // ANML/base/antlr/ANML.g:197:4: LeftP RightP
            	    {
            	        LeftP36 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftP, &FOLLOW_LeftP_in_param_list822); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparam_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftP; stream_LeftP->add(stream_LeftP, LeftP36, NULL); }

            	        RightP37 = (pANTLR3_COMMON_TOKEN) MATCHT(RightP, &FOLLOW_RightP_in_param_list824); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleparam_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_RightP; stream_RightP->add(stream_RightP, RightP37, NULL); }


            	         
            	        /* AST REWRITE
            	         * elements          : 
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 198:3: -> ^( Parameters )
            	        	{
            	        	    // ANML/base/antlr/ANML.g:198:6: ^( Parameters )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Parameters, (pANTLR3_UINT8)"Parameters"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparam_listEx; /* Prevent compiler warnings */
    ruleparam_listEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RightP != NULL) stream_RightP->free(stream_RightP);
        if (stream_LeftP != NULL) stream_LeftP->free(stream_LeftP);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_param != NULL) stream_param->free(stream_param);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end param_list */

/** 
 * $ANTLR start param
 * ANML/base/antlr/ANML.g:202:1: param : type_ref ID -> ^( Parameter type_ref ID ) ;
 */
static ANMLParser_param_return
param(pANMLParser ctx)
{   
    ANMLParser_param_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID39;
    ANMLParser_type_ref_return type_ref38;
    #undef	RETURN_TYPE_type_ref38
    #define	RETURN_TYPE_type_ref38 ANMLParser_type_ref_return

    pANTLR3_BASE_TREE ID39_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_ref;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID39       = NULL;
    type_ref38.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID39_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_type_ref   = NULL;
    #define CREATE_stream_type_ref  if (stream_type_ref == NULL) {stream_type_ref = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_ref"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:202:6: ( type_ref ID -> ^( Parameter type_ref ID ) )
        // ANML/base/antlr/ANML.g:203:2: type_ref ID
        {
            FOLLOWPUSH(FOLLOW_type_ref_in_param845);
            type_ref38=type_ref(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparamEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_type_ref; stream_type_ref->add(stream_type_ref, type_ref38.tree, NULL); }
            ID39 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_param847); 
            if  (HASEXCEPTION())
            {
                goto ruleparamEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID39, NULL); }


             
            /* AST REWRITE
             * elements          : ID, type_ref
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 204:2: -> ^( Parameter type_ref ID )
            	{
            	    // ANML/base/antlr/ANML.g:204:5: ^( Parameter type_ref ID )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Parameter, (pANTLR3_UINT8)"Parameter"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type_ref == NULL ? NULL : stream_type_ref->nextTree(stream_type_ref));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparamEx; /* Prevent compiler warnings */
    ruleparamEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_type_ref != NULL) stream_type_ref->free(stream_type_ref);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end param */

/** 
 * $ANTLR start object_block
 * ANML/base/antlr/ANML.g:209:1: object_block : LeftC (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )+ RightC -> ^( Block[$LeftC,\"ObjectBlock\"] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) ) ;
 */
static ANMLParser_object_block_return
object_block(pANMLParser ctx)
{   
    ANMLParser_object_block_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LeftC40;
    pANTLR3_COMMON_TOKEN    RightC41;
    pANTLR3_VECTOR    list_t;
    pANTLR3_VECTOR    list_c;
    pANTLR3_VECTOR    list_f;
    pANTLR3_VECTOR    list_a;
    pANTLR3_VECTOR    list_s;
    pANTLR3_VECTOR    list_ps;
    ANMLParser_type_decl_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t ANMLParser_type_decl_return

    ANMLParser_const_decl_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c ANMLParser_const_decl_return

    ANMLParser_fluent_decl_return f;
    #undef	RETURN_TYPE_f
    #define	RETURN_TYPE_f ANMLParser_fluent_decl_return

    ANMLParser_action_decl_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a ANMLParser_action_decl_return

    ANMLParser_stmt_return s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s ANMLParser_stmt_return

    ANMLParser_problem_stmt_return ps;
    #undef	RETURN_TYPE_ps
    #define	RETURN_TYPE_ps ANMLParser_problem_stmt_return

    pANTLR3_BASE_TREE LeftC40_tree;
    pANTLR3_BASE_TREE RightC41_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftC;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightC;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_problem_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fluent_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_const_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_action_decl;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LeftC40       = NULL;
    RightC41       = NULL;
    list_t     = NULL;
    list_c     = NULL;
    list_f     = NULL;
    list_a     = NULL;
    list_s     = NULL;
    list_ps     = NULL;
    t.tree = NULL;

    c.tree = NULL;

    f.tree = NULL;

    a.tree = NULL;

    s.tree = NULL;

    ps.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LeftC40_tree   = NULL;
    RightC41_tree   = NULL;

    stream_LeftC   = NULL;
    #define CREATE_stream_LeftC  if (stream_LeftC == NULL) {stream_LeftC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftC"); } 
    stream_RightC   = NULL;
    #define CREATE_stream_RightC  if (stream_RightC == NULL) {stream_RightC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightC"); } 
    stream_type_decl   = NULL;
    #define CREATE_stream_type_decl  if (stream_type_decl == NULL) {stream_type_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_decl"); }
    stream_stmt   = NULL;
    #define CREATE_stream_stmt  if (stream_stmt == NULL) {stream_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt"); }
    stream_problem_stmt   = NULL;
    #define CREATE_stream_problem_stmt  if (stream_problem_stmt == NULL) {stream_problem_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule problem_stmt"); }
    stream_fluent_decl   = NULL;
    #define CREATE_stream_fluent_decl  if (stream_fluent_decl == NULL) {stream_fluent_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule fluent_decl"); }
    stream_const_decl   = NULL;
    #define CREATE_stream_const_decl  if (stream_const_decl == NULL) {stream_const_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule const_decl"); }
    stream_action_decl   = NULL;
    #define CREATE_stream_action_decl  if (stream_action_decl == NULL) {stream_action_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule action_decl"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:209:13: ( LeftC (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )+ RightC -> ^( Block[$LeftC,\"ObjectBlock\"] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) ) )
        // ANML/base/antlr/ANML.g:210:2: LeftC (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )+ RightC
        {
            LeftC40 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftC, &FOLLOW_LeftC_in_object_block872); 
            if  (HASEXCEPTION())
            {
                goto ruleobject_blockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_LeftC; stream_LeftC->add(stream_LeftC, LeftC40, NULL); }

            // ANML/base/antlr/ANML.g:211:3: (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )+
            {
                int cnt16=0;

                for (;;)
                {
                    int alt16=7;
            	switch ( LA(1) ) 
            	{
            	case Type:
            		{
            			alt16=1;
            		}
            	    break;
            	case Constant:
            		{
            			alt16=2;
            		}
            	    break;
            	case Fluent:
            	case Variable:
            	case Function:
            	case Predicate:
            		{
            			alt16=3;
            		}
            	    break;
            	case Action:
            		{
            			alt16=4;
            		}
            	    break;
            	case When:
            	case ID:
            	case Semi:
            	case LeftC:
            	case LeftB:
            	case LeftP:
            	case Duration:
            	case NotLog:
            	case NotBit:
            	case Contains:
            	case ForAll:
            	case Exists:
            	case Delta:
            	case Dots:
            	case Minus:
            	case Unordered:
            	case Ordered:
            	case Start:
            	case End:
            	case INT:
            	case FLOAT:
            	case STRING:
            	case True:
            	case False:
            	case Infinity:
            		{
            			alt16=5;
            		}
            	    break;
            	case Fact:
            	case Goal:
            		{
            			alt16=6;
            		}
            	    break;

            	}

            	switch (alt16) 
            	{
            	    case 1:
            	        // ANML/base/antlr/ANML.g:211:5: t+= type_decl
            	        {
            	            FOLLOWPUSH(FOLLOW_type_decl_in_object_block880);
            	            t=type_decl(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleobject_blockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_type_decl; stream_type_decl->add(stream_type_decl, t.tree, NULL); }
            	            /* listLabelTrack(label)
            	             */
            	            if (list_t == NULL)
            	            {
            	                list_t=ctx->vectors->newVector(ctx->vectors);
            	            }
            	            list_t->add(list_t, t.tree, NULL);

            	        }
            	        break;
            	    case 2:
            	        // ANML/base/antlr/ANML.g:212:5: c+= const_decl
            	        {
            	            FOLLOWPUSH(FOLLOW_const_decl_in_object_block889);
            	            c=const_decl(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleobject_blockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_const_decl; stream_const_decl->add(stream_const_decl, c.tree, NULL); }
            	            /* listLabelTrack(label)
            	             */
            	            if (list_c == NULL)
            	            {
            	                list_c=ctx->vectors->newVector(ctx->vectors);
            	            }
            	            list_c->add(list_c, c.tree, NULL);

            	        }
            	        break;
            	    case 3:
            	        // ANML/base/antlr/ANML.g:213:5: f+= fluent_decl
            	        {
            	            FOLLOWPUSH(FOLLOW_fluent_decl_in_object_block898);
            	            f=fluent_decl(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleobject_blockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_fluent_decl; stream_fluent_decl->add(stream_fluent_decl, f.tree, NULL); }
            	            /* listLabelTrack(label)
            	             */
            	            if (list_f == NULL)
            	            {
            	                list_f=ctx->vectors->newVector(ctx->vectors);
            	            }
            	            list_f->add(list_f, f.tree, NULL);

            	        }
            	        break;
            	    case 4:
            	        // ANML/base/antlr/ANML.g:214:5: a+= action_decl
            	        {
            	            FOLLOWPUSH(FOLLOW_action_decl_in_object_block907);
            	            a=action_decl(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleobject_blockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_action_decl; stream_action_decl->add(stream_action_decl, a.tree, NULL); }
            	            /* listLabelTrack(label)
            	             */
            	            if (list_a == NULL)
            	            {
            	                list_a=ctx->vectors->newVector(ctx->vectors);
            	            }
            	            list_a->add(list_a, a.tree, NULL);

            	        }
            	        break;
            	    case 5:
            	        // ANML/base/antlr/ANML.g:215:5: s+= stmt
            	        {
            	            FOLLOWPUSH(FOLLOW_stmt_in_object_block915);
            	            s=stmt(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleobject_blockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, s.tree, NULL); }
            	            /* listLabelTrack(label)
            	             */
            	            if (list_s == NULL)
            	            {
            	                list_s=ctx->vectors->newVector(ctx->vectors);
            	            }
            	            list_s->add(list_s, s.tree, NULL);

            	        }
            	        break;
            	    case 6:
            	        // ANML/base/antlr/ANML.g:216:5: ps+= problem_stmt
            	        {
            	            FOLLOWPUSH(FOLLOW_problem_stmt_in_object_block923);
            	            ps=problem_stmt(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleobject_blockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_problem_stmt; stream_problem_stmt->add(stream_problem_stmt, ps.tree, NULL); }
            	            /* listLabelTrack(label)
            	             */
            	            if (list_ps == NULL)
            	            {
            	                list_ps=ctx->vectors->newVector(ctx->vectors);
            	            }
            	            list_ps->add(list_ps, ps.tree, NULL);

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt16 >= 1 )
            		{
            		    goto loop16;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleobject_blockEx;
            	}
            	cnt16++;
                }
                loop16: ;	/* Jump to here if this rule does not match */
            }
            RightC41 = (pANTLR3_COMMON_TOKEN) MATCHT(RightC, &FOLLOW_RightC_in_object_block933); 
            if  (HASEXCEPTION())
            {
                goto ruleobject_blockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_RightC; stream_RightC->add(stream_RightC, RightC41, NULL); }


             
            /* AST REWRITE
             * elements          : s, f, a, ps, t, c
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : f, t, s, c, a, ps
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_f;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_t;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_c;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ps;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_f=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token f", list_f);
            	stream_t=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token t", list_t);
            	stream_s=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s", list_s);
            	stream_c=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", list_c);
            	stream_a=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", list_a);
            	stream_ps=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token ps", list_ps);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 219:3: -> ^( Block[$LeftC,\"ObjectBlock\"] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) )
            	{
            	    // ANML/base/antlr/ANML.g:220:3: ^( Block[$LeftC,\"ObjectBlock\"] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 2 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Block, TOKTEXT(LeftC40, "ObjectBlock"))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Block, (pANTLR3_UINT8)LeftC40, "ObjectBlock")
            	        #endif
            	        , root_1));

            	        // ANML/base/antlr/ANML.g:221:4: ^( Types ( $t)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Types, (pANTLR3_UINT8)"Types"), root_2));

            	            // ANML/base/antlr/ANML.g:221:12: ( $t)*
            	            {
            	            	while ( (stream_t != NULL && stream_t->hasNext(stream_t))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_t == NULL ? NULL : stream_t->nextTree(stream_t));

            	            	}
            	            	if ( stream_t != NULL) stream_t->reset(stream_t);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:222:4: ^( Constants ( $c)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Constants, (pANTLR3_UINT8)"Constants"), root_2));

            	            // ANML/base/antlr/ANML.g:222:16: ( $c)*
            	            {
            	            	while ( (stream_c != NULL && stream_c->hasNext(stream_c))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_c == NULL ? NULL : stream_c->nextTree(stream_c));

            	            	}
            	            	if ( stream_c != NULL) stream_c->reset(stream_c);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:223:4: ^( Fluents ( $f)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Fluents, (pANTLR3_UINT8)"Fluents"), root_2));

            	            // ANML/base/antlr/ANML.g:223:14: ( $f)*
            	            {
            	            	while ( (stream_f != NULL && stream_f->hasNext(stream_f))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_f == NULL ? NULL : stream_f->nextTree(stream_f));

            	            	}
            	            	if ( stream_f != NULL) stream_f->reset(stream_f);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:224:4: ^( Actions ( $a)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Actions, (pANTLR3_UINT8)"Actions"), root_2));

            	            // ANML/base/antlr/ANML.g:224:14: ( $a)*
            	            {
            	            	while ( (stream_a != NULL && stream_a->hasNext(stream_a))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	            	}
            	            	if ( stream_a != NULL) stream_a->reset(stream_a);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:225:4: ^( Stmts ( $s)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Stmts, (pANTLR3_UINT8)"Stmts"), root_2));

            	            // ANML/base/antlr/ANML.g:225:12: ( $s)*
            	            {
            	            	while ( (stream_s != NULL && stream_s->hasNext(stream_s))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_s == NULL ? NULL : stream_s->nextTree(stream_s));

            	            	}
            	            	if ( stream_s != NULL) stream_s->reset(stream_s);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:226:4: ^( ProblemStmts ( $ps)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ProblemStmts, (pANTLR3_UINT8)"ProblemStmts"), root_2));

            	            // ANML/base/antlr/ANML.g:226:19: ( $ps)*
            	            {
            	            	while ( (stream_ps != NULL && stream_ps->hasNext(stream_ps))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_ps == NULL ? NULL : stream_ps->nextTree(stream_ps));

            	            	}
            	            	if ( stream_ps != NULL) stream_ps->reset(stream_ps);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_f != NULL) stream_f->free(stream_f);
            	if (stream_t != NULL) stream_t->free(stream_t);
            	if (stream_s != NULL) stream_s->free(stream_s);
            	if (stream_c != NULL) stream_c->free(stream_c);
            	if (stream_a != NULL) stream_a->free(stream_a);
            	if (stream_ps != NULL) stream_ps->free(stream_ps);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleobject_blockEx; /* Prevent compiler warnings */
    ruleobject_blockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LeftC != NULL) stream_LeftC->free(stream_LeftC);
        if (stream_RightC != NULL) stream_RightC->free(stream_RightC);
        if (stream_type_decl != NULL) stream_type_decl->free(stream_type_decl);
        if (stream_stmt != NULL) stream_stmt->free(stream_stmt);
        if (stream_problem_stmt != NULL) stream_problem_stmt->free(stream_problem_stmt);
        if (stream_fluent_decl != NULL) stream_fluent_decl->free(stream_fluent_decl);
        if (stream_const_decl != NULL) stream_const_decl->free(stream_const_decl);
        if (stream_action_decl != NULL) stream_action_decl->free(stream_action_decl);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end object_block */

/** 
 * $ANTLR start const_decl
 * ANML/base/antlr/ANML.g:231:1: const_decl : Constant type_ref (l+= const_decl_helper ( Comma l+= const_decl_helper )* Semi ) -> ( $l)+ ;
 */
static ANMLParser_const_decl_return
const_decl(pANMLParser ctx)
{   
    ANMLParser_const_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Constant42;
    pANTLR3_COMMON_TOKEN    Comma44;
    pANTLR3_COMMON_TOKEN    Semi45;
    pANTLR3_VECTOR    list_l;
    ANMLParser_type_ref_return type_ref43;
    #undef	RETURN_TYPE_type_ref43
    #define	RETURN_TYPE_type_ref43 ANMLParser_type_ref_return

    ANMLParser_const_decl_helper_return l;
    #undef	RETURN_TYPE_l
    #define	RETURN_TYPE_l ANMLParser_const_decl_helper_return

    pANTLR3_BASE_TREE Constant42_tree;
    pANTLR3_BASE_TREE Comma44_tree;
    pANTLR3_BASE_TREE Semi45_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Semi;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Constant;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_const_decl_helper;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_ref;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Constant42       = NULL;
    Comma44       = NULL;
    Semi45       = NULL;
    list_l     = NULL;
    type_ref43.tree = NULL;

    l.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Constant42_tree   = NULL;
    Comma44_tree   = NULL;
    Semi45_tree   = NULL;

    stream_Semi   = NULL;
    #define CREATE_stream_Semi  if (stream_Semi == NULL) {stream_Semi = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Semi"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_Constant   = NULL;
    #define CREATE_stream_Constant  if (stream_Constant == NULL) {stream_Constant = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Constant"); } 
    stream_const_decl_helper   = NULL;
    #define CREATE_stream_const_decl_helper  if (stream_const_decl_helper == NULL) {stream_const_decl_helper = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule const_decl_helper"); }
    stream_type_ref   = NULL;
    #define CREATE_stream_type_ref  if (stream_type_ref == NULL) {stream_type_ref = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_ref"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:231:11: ( Constant type_ref (l+= const_decl_helper ( Comma l+= const_decl_helper )* Semi ) -> ( $l)+ )
        // ANML/base/antlr/ANML.g:232:2: Constant type_ref (l+= const_decl_helper ( Comma l+= const_decl_helper )* Semi )
        {
            Constant42 = (pANTLR3_COMMON_TOKEN) MATCHT(Constant, &FOLLOW_Constant_in_const_decl1028); 
            if  (HASEXCEPTION())
            {
                goto ruleconst_declEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Constant; stream_Constant->add(stream_Constant, Constant42, NULL); }

            FOLLOWPUSH(FOLLOW_type_ref_in_const_decl1030);
            type_ref43=type_ref(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconst_declEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_type_ref; stream_type_ref->add(stream_type_ref, type_ref43.tree, NULL); }
            // ANML/base/antlr/ANML.g:233:3: (l+= const_decl_helper ( Comma l+= const_decl_helper )* Semi )
            // ANML/base/antlr/ANML.g:233:4: l+= const_decl_helper ( Comma l+= const_decl_helper )* Semi
            {
                FOLLOWPUSH(FOLLOW_const_decl_helper_in_const_decl1037);
                l=const_decl_helper(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconst_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_const_decl_helper; stream_const_decl_helper->add(stream_const_decl_helper, l.tree, NULL); }
                /* listLabelTrack(label)
                 */
                if (list_l == NULL)
                {
                    list_l=ctx->vectors->newVector(ctx->vectors);
                }
                list_l->add(list_l, l.tree, NULL);

                // ANML/base/antlr/ANML.g:233:25: ( Comma l+= const_decl_helper )*

                for (;;)
                {
                    int alt17=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA17_0 = LA(1);
                        if ( (LA17_0 == Comma) ) 
                        {
                            alt17=1;
                        }

                    }
                    switch (alt17) 
                    {
                	case 1:
                	    // ANML/base/antlr/ANML.g:233:26: Comma l+= const_decl_helper
                	    {
                	        Comma44 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_const_decl1040); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleconst_declEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma44, NULL); }

                	        FOLLOWPUSH(FOLLOW_const_decl_helper_in_const_decl1044);
                	        l=const_decl_helper(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleconst_declEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }
                	        if ( BACKTRACKING==0 ) { CREATE_stream_const_decl_helper; stream_const_decl_helper->add(stream_const_decl_helper, l.tree, NULL); }
                	        /* listLabelTrack(label)
                	         */
                	        if (list_l == NULL)
                	        {
                	            list_l=ctx->vectors->newVector(ctx->vectors);
                	        }
                	        list_l->add(list_l, l.tree, NULL);

                	    }
                	    break;

                	default:
                	    goto loop17;	/* break out of the loop */
                	    break;
                    }
                }
                loop17: ; /* Jump out to here if this rule does not match */

                Semi45 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_const_decl1048); 
                if  (HASEXCEPTION())
                {
                    goto ruleconst_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_Semi; stream_Semi->add(stream_Semi, Semi45, NULL); }


            }


             
            /* AST REWRITE
             * elements          : l
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : l
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_l;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_l=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token l", list_l);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 234:5: -> ( $l)+
            	{
            	    if ((stream_l == NULL || !stream_l->hasNext(stream_l))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_l->hasNext(stream_l))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_l == NULL ? NULL : stream_l->nextTree(stream_l));

            	    	}
            	    	stream_l->reset(stream_l);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_l != NULL) stream_l->free(stream_l);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconst_declEx; /* Prevent compiler warnings */
    ruleconst_declEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Semi != NULL) stream_Semi->free(stream_Semi);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_Constant != NULL) stream_Constant->free(stream_Constant);
        if (stream_const_decl_helper != NULL) stream_const_decl_helper->free(stream_const_decl_helper);
        if (stream_type_ref != NULL) stream_type_ref->free(stream_type_ref);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end const_decl */

/** 
 * $ANTLR start const_decl_helper
 * ANML/base/antlr/ANML.g:237:1: const_decl_helper : ( const_var_decl_helper | const_fun_decl_helper );
 */
static ANMLParser_const_decl_helper_return
const_decl_helper(pANMLParser ctx)
{   
    ANMLParser_const_decl_helper_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_const_var_decl_helper_return const_var_decl_helper46;
    #undef	RETURN_TYPE_const_var_decl_helper46
    #define	RETURN_TYPE_const_var_decl_helper46 ANMLParser_const_var_decl_helper_return

    ANMLParser_const_fun_decl_helper_return const_fun_decl_helper47;
    #undef	RETURN_TYPE_const_fun_decl_helper47
    #define	RETURN_TYPE_const_fun_decl_helper47 ANMLParser_const_fun_decl_helper_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    const_var_decl_helper46.tree = NULL;

    const_fun_decl_helper47.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:237:18: ( const_var_decl_helper | const_fun_decl_helper )
            
            ANTLR3_UINT32 alt18;

            alt18=2;


            {
                int LA18_0 = LA(1);
                if ( (LA18_0 == ID) ) 
                {

                    {
                        int LA18_1 = LA(2);
                        if ( (LA18_1 == LeftP) ) 
                        {
                            alt18=2;
                        }
                        else if ( (((LA18_1 >= Comma) && (LA18_1 <= Semi)) || LA18_1 == Assign || LA18_1 == Undefine) ) 
                        {
                            alt18=1;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 18;
                            EXCEPTION->state        = 1;


                            goto ruleconst_decl_helperEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 18;
                    EXCEPTION->state        = 0;


                    goto ruleconst_decl_helperEx;
                }
            }
            switch (alt18) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:238:2: const_var_decl_helper
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_const_var_decl_helper_in_const_decl_helper1071);
        	        const_var_decl_helper46=const_var_decl_helper(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconst_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, const_var_decl_helper46.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:239:4: const_fun_decl_helper
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_const_fun_decl_helper_in_const_decl_helper1076);
        	        const_fun_decl_helper47=const_fun_decl_helper(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconst_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, const_fun_decl_helper47.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconst_decl_helperEx; /* Prevent compiler warnings */
    ruleconst_decl_helperEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end const_decl_helper */

/** 
 * $ANTLR start const_var_decl_helper
 * ANML/base/antlr/ANML.g:242:1: const_var_decl_helper : ID ( init )? -> ^( Constant ID ( init )? ) ;
 */
static ANMLParser_const_var_decl_helper_return
const_var_decl_helper(pANMLParser ctx)
{   
    ANMLParser_const_var_decl_helper_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID48;
    ANMLParser_init_return init49;
    #undef	RETURN_TYPE_init49
    #define	RETURN_TYPE_init49 ANMLParser_init_return

    pANTLR3_BASE_TREE ID48_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_init;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID48       = NULL;
    init49.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID48_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_init   = NULL;
    #define CREATE_stream_init  if (stream_init == NULL) {stream_init = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule init"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:242:22: ( ID ( init )? -> ^( Constant ID ( init )? ) )
        // ANML/base/antlr/ANML.g:243:2: ID ( init )?
        {
            ID48 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_const_var_decl_helper1086); 
            if  (HASEXCEPTION())
            {
                goto ruleconst_var_decl_helperEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID48, NULL); }


            // ANML/base/antlr/ANML.g:243:5: ( init )?
            {
                int alt19=2;
                {
                    int LA19_0 = LA(1);
                    if ( (LA19_0 == Assign || LA19_0 == Undefine) ) 
                    {
                        alt19=1;
                    }
                }
                switch (alt19) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:243:5: init
            	    {
            	        FOLLOWPUSH(FOLLOW_init_in_const_var_decl_helper1088);
            	        init49=init(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconst_var_decl_helperEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_init; stream_init->add(stream_init, init49.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : init, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 244:3: -> ^( Constant ID ( init )? )
            	{
            	    // ANML/base/antlr/ANML.g:244:6: ^( Constant ID ( init )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Constant, (pANTLR3_UINT8)"Constant"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // ANML/base/antlr/ANML.g:244:20: ( init )?
            	        {
            	        	if ( (stream_init != NULL && stream_init->hasNext(stream_init))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_init == NULL ? NULL : stream_init->nextTree(stream_init));

            	        	}
            	        	if ( stream_init != NULL) stream_init->reset(stream_init);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconst_var_decl_helperEx; /* Prevent compiler warnings */
    ruleconst_var_decl_helperEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_init != NULL) stream_init->free(stream_init);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end const_var_decl_helper */

/** 
 * $ANTLR start const_fun_decl_helper
 * ANML/base/antlr/ANML.g:247:1: const_fun_decl_helper : ID param_list -> ^( ConstantFunction ID param_list ) ;
 */
static ANMLParser_const_fun_decl_helper_return
const_fun_decl_helper(pANMLParser ctx)
{   
    ANMLParser_const_fun_decl_helper_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID50;
    ANMLParser_param_list_return param_list51;
    #undef	RETURN_TYPE_param_list51
    #define	RETURN_TYPE_param_list51 ANMLParser_param_list_return

    pANTLR3_BASE_TREE ID50_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_param_list;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID50       = NULL;
    param_list51.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID50_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_param_list   = NULL;
    #define CREATE_stream_param_list  if (stream_param_list == NULL) {stream_param_list = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule param_list"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:247:22: ( ID param_list -> ^( ConstantFunction ID param_list ) )
        // ANML/base/antlr/ANML.g:248:2: ID param_list
        {
            ID50 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_const_fun_decl_helper1113); 
            if  (HASEXCEPTION())
            {
                goto ruleconst_fun_decl_helperEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID50, NULL); }

            FOLLOWPUSH(FOLLOW_param_list_in_const_fun_decl_helper1115);
            param_list51=param_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconst_fun_decl_helperEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_param_list; stream_param_list->add(stream_param_list, param_list51.tree, NULL); }

             
            /* AST REWRITE
             * elements          : ID, param_list
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 249:3: -> ^( ConstantFunction ID param_list )
            	{
            	    // ANML/base/antlr/ANML.g:249:6: ^( ConstantFunction ID param_list )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ConstantFunction, (pANTLR3_UINT8)"ConstantFunction"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_param_list == NULL ? NULL : stream_param_list->nextTree(stream_param_list));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconst_fun_decl_helperEx; /* Prevent compiler warnings */
    ruleconst_fun_decl_helperEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_param_list != NULL) stream_param_list->free(stream_param_list);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end const_fun_decl_helper */

/** 
 * $ANTLR start fluent_decl
 * ANML/base/antlr/ANML.g:252:1: fluent_decl : ( fluent_fluent_decl | fluent_var_decl | fluent_fun_decl | fluent_predicate_decl );
 */
static ANMLParser_fluent_decl_return
fluent_decl(pANMLParser ctx)
{   
    ANMLParser_fluent_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_fluent_fluent_decl_return fluent_fluent_decl52;
    #undef	RETURN_TYPE_fluent_fluent_decl52
    #define	RETURN_TYPE_fluent_fluent_decl52 ANMLParser_fluent_fluent_decl_return

    ANMLParser_fluent_var_decl_return fluent_var_decl53;
    #undef	RETURN_TYPE_fluent_var_decl53
    #define	RETURN_TYPE_fluent_var_decl53 ANMLParser_fluent_var_decl_return

    ANMLParser_fluent_fun_decl_return fluent_fun_decl54;
    #undef	RETURN_TYPE_fluent_fun_decl54
    #define	RETURN_TYPE_fluent_fun_decl54 ANMLParser_fluent_fun_decl_return

    ANMLParser_fluent_predicate_decl_return fluent_predicate_decl55;
    #undef	RETURN_TYPE_fluent_predicate_decl55
    #define	RETURN_TYPE_fluent_predicate_decl55 ANMLParser_fluent_predicate_decl_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    fluent_fluent_decl52.tree = NULL;

    fluent_var_decl53.tree = NULL;

    fluent_fun_decl54.tree = NULL;

    fluent_predicate_decl55.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:252:12: ( fluent_fluent_decl | fluent_var_decl | fluent_fun_decl | fluent_predicate_decl )
            
            ANTLR3_UINT32 alt20;

            alt20=4;

            switch ( LA(1) ) 
            {
            case Fluent:
            	{
            		alt20=1;
            	}
                break;
            case Variable:
            	{
            		alt20=2;
            	}
                break;
            case Function:
            	{
            		alt20=3;
            	}
                break;
            case Predicate:
            	{
            		alt20=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 20;
                EXCEPTION->state        = 0;


                goto rulefluent_declEx;
            }

            switch (alt20) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:253:2: fluent_fluent_decl
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_fluent_fluent_decl_in_fluent_decl1139);
        	        fluent_fluent_decl52=fluent_fluent_decl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefluent_declEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fluent_fluent_decl52.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:254:4: fluent_var_decl
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_fluent_var_decl_in_fluent_decl1144);
        	        fluent_var_decl53=fluent_var_decl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefluent_declEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fluent_var_decl53.tree);

        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:255:4: fluent_fun_decl
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_fluent_fun_decl_in_fluent_decl1150);
        	        fluent_fun_decl54=fluent_fun_decl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefluent_declEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fluent_fun_decl54.tree);

        	    }
        	    break;
        	case 4:
        	    // ANML/base/antlr/ANML.g:256:4: fluent_predicate_decl
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_fluent_predicate_decl_in_fluent_decl1156);
        	        fluent_predicate_decl55=fluent_predicate_decl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefluent_declEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fluent_predicate_decl55.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefluent_declEx; /* Prevent compiler warnings */
    rulefluent_declEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end fluent_decl */

/** 
 * $ANTLR start fluent_fluent_decl
 * ANML/base/antlr/ANML.g:259:1: fluent_fluent_decl : ( Fluent type_ref l+= decl_helper ( Comma l+= decl_helper )* Semi ) -> ( $l)+ ;
 */
static ANMLParser_fluent_fluent_decl_return
fluent_fluent_decl(pANMLParser ctx)
{   
    ANMLParser_fluent_fluent_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Fluent56;
    pANTLR3_COMMON_TOKEN    Comma58;
    pANTLR3_COMMON_TOKEN    Semi59;
    pANTLR3_VECTOR    list_l;
    ANMLParser_type_ref_return type_ref57;
    #undef	RETURN_TYPE_type_ref57
    #define	RETURN_TYPE_type_ref57 ANMLParser_type_ref_return

    ANMLParser_decl_helper_return l;
    #undef	RETURN_TYPE_l
    #define	RETURN_TYPE_l ANMLParser_decl_helper_return

    pANTLR3_BASE_TREE Fluent56_tree;
    pANTLR3_BASE_TREE Comma58_tree;
    pANTLR3_BASE_TREE Semi59_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Semi;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Fluent;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_decl_helper;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_ref;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Fluent56       = NULL;
    Comma58       = NULL;
    Semi59       = NULL;
    list_l     = NULL;
    type_ref57.tree = NULL;

    l.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Fluent56_tree   = NULL;
    Comma58_tree   = NULL;
    Semi59_tree   = NULL;

    stream_Semi   = NULL;
    #define CREATE_stream_Semi  if (stream_Semi == NULL) {stream_Semi = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Semi"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_Fluent   = NULL;
    #define CREATE_stream_Fluent  if (stream_Fluent == NULL) {stream_Fluent = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Fluent"); } 
    stream_decl_helper   = NULL;
    #define CREATE_stream_decl_helper  if (stream_decl_helper == NULL) {stream_decl_helper = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule decl_helper"); }
    stream_type_ref   = NULL;
    #define CREATE_stream_type_ref  if (stream_type_ref == NULL) {stream_type_ref = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_ref"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:259:19: ( ( Fluent type_ref l+= decl_helper ( Comma l+= decl_helper )* Semi ) -> ( $l)+ )
        // ANML/base/antlr/ANML.g:260:2: ( Fluent type_ref l+= decl_helper ( Comma l+= decl_helper )* Semi )
        {
            // ANML/base/antlr/ANML.g:260:2: ( Fluent type_ref l+= decl_helper ( Comma l+= decl_helper )* Semi )
            // ANML/base/antlr/ANML.g:260:3: Fluent type_ref l+= decl_helper ( Comma l+= decl_helper )* Semi
            {
                Fluent56 = (pANTLR3_COMMON_TOKEN) MATCHT(Fluent, &FOLLOW_Fluent_in_fluent_fluent_decl1169); 
                if  (HASEXCEPTION())
                {
                    goto rulefluent_fluent_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_Fluent; stream_Fluent->add(stream_Fluent, Fluent56, NULL); }

                FOLLOWPUSH(FOLLOW_type_ref_in_fluent_fluent_decl1171);
                type_ref57=type_ref(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefluent_fluent_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_type_ref; stream_type_ref->add(stream_type_ref, type_ref57.tree, NULL); }
                FOLLOWPUSH(FOLLOW_decl_helper_in_fluent_fluent_decl1177);
                l=decl_helper(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefluent_fluent_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_decl_helper; stream_decl_helper->add(stream_decl_helper, l.tree, NULL); }
                /* listLabelTrack(label)
                 */
                if (list_l == NULL)
                {
                    list_l=ctx->vectors->newVector(ctx->vectors);
                }
                list_l->add(list_l, l.tree, NULL);

                // ANML/base/antlr/ANML.g:261:18: ( Comma l+= decl_helper )*

                for (;;)
                {
                    int alt21=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA21_0 = LA(1);
                        if ( (LA21_0 == Comma) ) 
                        {
                            alt21=1;
                        }

                    }
                    switch (alt21) 
                    {
                	case 1:
                	    // ANML/base/antlr/ANML.g:261:19: Comma l+= decl_helper
                	    {
                	        Comma58 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_fluent_fluent_decl1180); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulefluent_fluent_declEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma58, NULL); }

                	        FOLLOWPUSH(FOLLOW_decl_helper_in_fluent_fluent_decl1184);
                	        l=decl_helper(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulefluent_fluent_declEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }
                	        if ( BACKTRACKING==0 ) { CREATE_stream_decl_helper; stream_decl_helper->add(stream_decl_helper, l.tree, NULL); }
                	        /* listLabelTrack(label)
                	         */
                	        if (list_l == NULL)
                	        {
                	            list_l=ctx->vectors->newVector(ctx->vectors);
                	        }
                	        list_l->add(list_l, l.tree, NULL);

                	    }
                	    break;

                	default:
                	    goto loop21;	/* break out of the loop */
                	    break;
                    }
                }
                loop21: ; /* Jump out to here if this rule does not match */

                Semi59 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_fluent_fluent_decl1188); 
                if  (HASEXCEPTION())
                {
                    goto rulefluent_fluent_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_Semi; stream_Semi->add(stream_Semi, Semi59, NULL); }


            }


             
            /* AST REWRITE
             * elements          : l
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : l
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_l;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_l=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token l", list_l);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 262:5: -> ( $l)+
            	{
            	    if ((stream_l == NULL || !stream_l->hasNext(stream_l))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_l->hasNext(stream_l))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_l == NULL ? NULL : stream_l->nextTree(stream_l));

            	    	}
            	    	stream_l->reset(stream_l);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_l != NULL) stream_l->free(stream_l);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefluent_fluent_declEx; /* Prevent compiler warnings */
    rulefluent_fluent_declEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Semi != NULL) stream_Semi->free(stream_Semi);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_Fluent != NULL) stream_Fluent->free(stream_Fluent);
        if (stream_decl_helper != NULL) stream_decl_helper->free(stream_decl_helper);
        if (stream_type_ref != NULL) stream_type_ref->free(stream_type_ref);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end fluent_fluent_decl */

/** 
 * $ANTLR start fluent_var_decl
 * ANML/base/antlr/ANML.g:265:1: fluent_var_decl : ( Variable type_ref l+= var_decl_helper ( Comma l+= var_decl_helper )* Semi ) -> ( $l)+ ;
 */
static ANMLParser_fluent_var_decl_return
fluent_var_decl(pANMLParser ctx)
{   
    ANMLParser_fluent_var_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Variable60;
    pANTLR3_COMMON_TOKEN    Comma62;
    pANTLR3_COMMON_TOKEN    Semi63;
    pANTLR3_VECTOR    list_l;
    ANMLParser_type_ref_return type_ref61;
    #undef	RETURN_TYPE_type_ref61
    #define	RETURN_TYPE_type_ref61 ANMLParser_type_ref_return

    ANMLParser_var_decl_helper_return l;
    #undef	RETURN_TYPE_l
    #define	RETURN_TYPE_l ANMLParser_var_decl_helper_return

    pANTLR3_BASE_TREE Variable60_tree;
    pANTLR3_BASE_TREE Comma62_tree;
    pANTLR3_BASE_TREE Semi63_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Variable;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Semi;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_ref;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_var_decl_helper;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Variable60       = NULL;
    Comma62       = NULL;
    Semi63       = NULL;
    list_l     = NULL;
    type_ref61.tree = NULL;

    l.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Variable60_tree   = NULL;
    Comma62_tree   = NULL;
    Semi63_tree   = NULL;

    stream_Variable   = NULL;
    #define CREATE_stream_Variable  if (stream_Variable == NULL) {stream_Variable = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Variable"); } 
    stream_Semi   = NULL;
    #define CREATE_stream_Semi  if (stream_Semi == NULL) {stream_Semi = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Semi"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_type_ref   = NULL;
    #define CREATE_stream_type_ref  if (stream_type_ref == NULL) {stream_type_ref = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_ref"); }
    stream_var_decl_helper   = NULL;
    #define CREATE_stream_var_decl_helper  if (stream_var_decl_helper == NULL) {stream_var_decl_helper = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule var_decl_helper"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:265:16: ( ( Variable type_ref l+= var_decl_helper ( Comma l+= var_decl_helper )* Semi ) -> ( $l)+ )
        // ANML/base/antlr/ANML.g:266:2: ( Variable type_ref l+= var_decl_helper ( Comma l+= var_decl_helper )* Semi )
        {
            // ANML/base/antlr/ANML.g:266:2: ( Variable type_ref l+= var_decl_helper ( Comma l+= var_decl_helper )* Semi )
            // ANML/base/antlr/ANML.g:266:3: Variable type_ref l+= var_decl_helper ( Comma l+= var_decl_helper )* Semi
            {
                Variable60 = (pANTLR3_COMMON_TOKEN) MATCHT(Variable, &FOLLOW_Variable_in_fluent_var_decl1210); 
                if  (HASEXCEPTION())
                {
                    goto rulefluent_var_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_Variable; stream_Variable->add(stream_Variable, Variable60, NULL); }

                FOLLOWPUSH(FOLLOW_type_ref_in_fluent_var_decl1212);
                type_ref61=type_ref(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefluent_var_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_type_ref; stream_type_ref->add(stream_type_ref, type_ref61.tree, NULL); }
                FOLLOWPUSH(FOLLOW_var_decl_helper_in_fluent_var_decl1218);
                l=var_decl_helper(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefluent_var_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_var_decl_helper; stream_var_decl_helper->add(stream_var_decl_helper, l.tree, NULL); }
                /* listLabelTrack(label)
                 */
                if (list_l == NULL)
                {
                    list_l=ctx->vectors->newVector(ctx->vectors);
                }
                list_l->add(list_l, l.tree, NULL);

                // ANML/base/antlr/ANML.g:267:22: ( Comma l+= var_decl_helper )*

                for (;;)
                {
                    int alt22=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA22_0 = LA(1);
                        if ( (LA22_0 == Comma) ) 
                        {
                            alt22=1;
                        }

                    }
                    switch (alt22) 
                    {
                	case 1:
                	    // ANML/base/antlr/ANML.g:267:23: Comma l+= var_decl_helper
                	    {
                	        Comma62 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_fluent_var_decl1221); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulefluent_var_declEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma62, NULL); }

                	        FOLLOWPUSH(FOLLOW_var_decl_helper_in_fluent_var_decl1225);
                	        l=var_decl_helper(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulefluent_var_declEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }
                	        if ( BACKTRACKING==0 ) { CREATE_stream_var_decl_helper; stream_var_decl_helper->add(stream_var_decl_helper, l.tree, NULL); }
                	        /* listLabelTrack(label)
                	         */
                	        if (list_l == NULL)
                	        {
                	            list_l=ctx->vectors->newVector(ctx->vectors);
                	        }
                	        list_l->add(list_l, l.tree, NULL);

                	    }
                	    break;

                	default:
                	    goto loop22;	/* break out of the loop */
                	    break;
                    }
                }
                loop22: ; /* Jump out to here if this rule does not match */

                Semi63 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_fluent_var_decl1229); 
                if  (HASEXCEPTION())
                {
                    goto rulefluent_var_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_Semi; stream_Semi->add(stream_Semi, Semi63, NULL); }


            }


             
            /* AST REWRITE
             * elements          : l
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : l
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_l;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_l=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token l", list_l);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 268:5: -> ( $l)+
            	{
            	    if ((stream_l == NULL || !stream_l->hasNext(stream_l))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_l->hasNext(stream_l))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_l == NULL ? NULL : stream_l->nextTree(stream_l));

            	    	}
            	    	stream_l->reset(stream_l);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_l != NULL) stream_l->free(stream_l);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefluent_var_declEx; /* Prevent compiler warnings */
    rulefluent_var_declEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Variable != NULL) stream_Variable->free(stream_Variable);
        if (stream_Semi != NULL) stream_Semi->free(stream_Semi);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_type_ref != NULL) stream_type_ref->free(stream_type_ref);
        if (stream_var_decl_helper != NULL) stream_var_decl_helper->free(stream_var_decl_helper);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end fluent_var_decl */

/** 
 * $ANTLR start fluent_fun_decl
 * ANML/base/antlr/ANML.g:271:1: fluent_fun_decl : ( Function type_ref l+= fun_decl_helper ( Comma l+= fun_decl_helper )* Semi ) -> ( $l)+ ;
 */
static ANMLParser_fluent_fun_decl_return
fluent_fun_decl(pANMLParser ctx)
{   
    ANMLParser_fluent_fun_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Function64;
    pANTLR3_COMMON_TOKEN    Comma66;
    pANTLR3_COMMON_TOKEN    Semi67;
    pANTLR3_VECTOR    list_l;
    ANMLParser_type_ref_return type_ref65;
    #undef	RETURN_TYPE_type_ref65
    #define	RETURN_TYPE_type_ref65 ANMLParser_type_ref_return

    ANMLParser_fun_decl_helper_return l;
    #undef	RETURN_TYPE_l
    #define	RETURN_TYPE_l ANMLParser_fun_decl_helper_return

    pANTLR3_BASE_TREE Function64_tree;
    pANTLR3_BASE_TREE Comma66_tree;
    pANTLR3_BASE_TREE Semi67_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Semi;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Function;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fun_decl_helper;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_ref;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Function64       = NULL;
    Comma66       = NULL;
    Semi67       = NULL;
    list_l     = NULL;
    type_ref65.tree = NULL;

    l.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Function64_tree   = NULL;
    Comma66_tree   = NULL;
    Semi67_tree   = NULL;

    stream_Semi   = NULL;
    #define CREATE_stream_Semi  if (stream_Semi == NULL) {stream_Semi = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Semi"); } 
    stream_Function   = NULL;
    #define CREATE_stream_Function  if (stream_Function == NULL) {stream_Function = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Function"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_fun_decl_helper   = NULL;
    #define CREATE_stream_fun_decl_helper  if (stream_fun_decl_helper == NULL) {stream_fun_decl_helper = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule fun_decl_helper"); }
    stream_type_ref   = NULL;
    #define CREATE_stream_type_ref  if (stream_type_ref == NULL) {stream_type_ref = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_ref"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:271:16: ( ( Function type_ref l+= fun_decl_helper ( Comma l+= fun_decl_helper )* Semi ) -> ( $l)+ )
        // ANML/base/antlr/ANML.g:272:2: ( Function type_ref l+= fun_decl_helper ( Comma l+= fun_decl_helper )* Semi )
        {
            // ANML/base/antlr/ANML.g:272:2: ( Function type_ref l+= fun_decl_helper ( Comma l+= fun_decl_helper )* Semi )
            // ANML/base/antlr/ANML.g:272:3: Function type_ref l+= fun_decl_helper ( Comma l+= fun_decl_helper )* Semi
            {
                Function64 = (pANTLR3_COMMON_TOKEN) MATCHT(Function, &FOLLOW_Function_in_fluent_fun_decl1251); 
                if  (HASEXCEPTION())
                {
                    goto rulefluent_fun_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_Function; stream_Function->add(stream_Function, Function64, NULL); }

                FOLLOWPUSH(FOLLOW_type_ref_in_fluent_fun_decl1253);
                type_ref65=type_ref(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefluent_fun_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_type_ref; stream_type_ref->add(stream_type_ref, type_ref65.tree, NULL); }
                FOLLOWPUSH(FOLLOW_fun_decl_helper_in_fluent_fun_decl1260);
                l=fun_decl_helper(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefluent_fun_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_fun_decl_helper; stream_fun_decl_helper->add(stream_fun_decl_helper, l.tree, NULL); }
                /* listLabelTrack(label)
                 */
                if (list_l == NULL)
                {
                    list_l=ctx->vectors->newVector(ctx->vectors);
                }
                list_l->add(list_l, l.tree, NULL);

                // ANML/base/antlr/ANML.g:273:22: ( Comma l+= fun_decl_helper )*

                for (;;)
                {
                    int alt23=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA23_0 = LA(1);
                        if ( (LA23_0 == Comma) ) 
                        {
                            alt23=1;
                        }

                    }
                    switch (alt23) 
                    {
                	case 1:
                	    // ANML/base/antlr/ANML.g:273:23: Comma l+= fun_decl_helper
                	    {
                	        Comma66 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_fluent_fun_decl1263); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulefluent_fun_declEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma66, NULL); }

                	        FOLLOWPUSH(FOLLOW_fun_decl_helper_in_fluent_fun_decl1267);
                	        l=fun_decl_helper(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulefluent_fun_declEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }
                	        if ( BACKTRACKING==0 ) { CREATE_stream_fun_decl_helper; stream_fun_decl_helper->add(stream_fun_decl_helper, l.tree, NULL); }
                	        /* listLabelTrack(label)
                	         */
                	        if (list_l == NULL)
                	        {
                	            list_l=ctx->vectors->newVector(ctx->vectors);
                	        }
                	        list_l->add(list_l, l.tree, NULL);

                	    }
                	    break;

                	default:
                	    goto loop23;	/* break out of the loop */
                	    break;
                    }
                }
                loop23: ; /* Jump out to here if this rule does not match */

                Semi67 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_fluent_fun_decl1271); 
                if  (HASEXCEPTION())
                {
                    goto rulefluent_fun_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_Semi; stream_Semi->add(stream_Semi, Semi67, NULL); }


            }


             
            /* AST REWRITE
             * elements          : l
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : l
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_l;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_l=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token l", list_l);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 274:5: -> ( $l)+
            	{
            	    if ((stream_l == NULL || !stream_l->hasNext(stream_l))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_l->hasNext(stream_l))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_l == NULL ? NULL : stream_l->nextTree(stream_l));

            	    	}
            	    	stream_l->reset(stream_l);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_l != NULL) stream_l->free(stream_l);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefluent_fun_declEx; /* Prevent compiler warnings */
    rulefluent_fun_declEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Semi != NULL) stream_Semi->free(stream_Semi);
        if (stream_Function != NULL) stream_Function->free(stream_Function);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_fun_decl_helper != NULL) stream_fun_decl_helper->free(stream_fun_decl_helper);
        if (stream_type_ref != NULL) stream_type_ref->free(stream_type_ref);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end fluent_fun_decl */

/** 
 * $ANTLR start fluent_predicate_decl
 * ANML/base/antlr/ANML.g:277:1: fluent_predicate_decl : ( predicate_helper l+= fun_decl_helper ( Comma l+= fun_decl_helper )* Semi ) -> ( $l)+ ;
 */
static ANMLParser_fluent_predicate_decl_return
fluent_predicate_decl(pANMLParser ctx)
{   
    ANMLParser_fluent_predicate_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Comma69;
    pANTLR3_COMMON_TOKEN    Semi70;
    pANTLR3_VECTOR    list_l;
    ANMLParser_predicate_helper_return predicate_helper68;
    #undef	RETURN_TYPE_predicate_helper68
    #define	RETURN_TYPE_predicate_helper68 ANMLParser_predicate_helper_return

    ANMLParser_fun_decl_helper_return l;
    #undef	RETURN_TYPE_l
    #define	RETURN_TYPE_l ANMLParser_fun_decl_helper_return

    pANTLR3_BASE_TREE Comma69_tree;
    pANTLR3_BASE_TREE Semi70_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Semi;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_predicate_helper;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fun_decl_helper;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Comma69       = NULL;
    Semi70       = NULL;
    list_l     = NULL;
    predicate_helper68.tree = NULL;

    l.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Comma69_tree   = NULL;
    Semi70_tree   = NULL;

    stream_Semi   = NULL;
    #define CREATE_stream_Semi  if (stream_Semi == NULL) {stream_Semi = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Semi"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_predicate_helper   = NULL;
    #define CREATE_stream_predicate_helper  if (stream_predicate_helper == NULL) {stream_predicate_helper = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule predicate_helper"); }
    stream_fun_decl_helper   = NULL;
    #define CREATE_stream_fun_decl_helper  if (stream_fun_decl_helper == NULL) {stream_fun_decl_helper = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule fun_decl_helper"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:277:22: ( ( predicate_helper l+= fun_decl_helper ( Comma l+= fun_decl_helper )* Semi ) -> ( $l)+ )
        // ANML/base/antlr/ANML.g:278:2: ( predicate_helper l+= fun_decl_helper ( Comma l+= fun_decl_helper )* Semi )
        {
            // ANML/base/antlr/ANML.g:278:2: ( predicate_helper l+= fun_decl_helper ( Comma l+= fun_decl_helper )* Semi )
            // ANML/base/antlr/ANML.g:278:3: predicate_helper l+= fun_decl_helper ( Comma l+= fun_decl_helper )* Semi
            {
                FOLLOWPUSH(FOLLOW_predicate_helper_in_fluent_predicate_decl1293);
                predicate_helper68=predicate_helper(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefluent_predicate_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_predicate_helper; stream_predicate_helper->add(stream_predicate_helper, predicate_helper68.tree, NULL); }
                FOLLOWPUSH(FOLLOW_fun_decl_helper_in_fluent_predicate_decl1300);
                l=fun_decl_helper(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefluent_predicate_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_fun_decl_helper; stream_fun_decl_helper->add(stream_fun_decl_helper, l.tree, NULL); }
                /* listLabelTrack(label)
                 */
                if (list_l == NULL)
                {
                    list_l=ctx->vectors->newVector(ctx->vectors);
                }
                list_l->add(list_l, l.tree, NULL);

                // ANML/base/antlr/ANML.g:279:22: ( Comma l+= fun_decl_helper )*

                for (;;)
                {
                    int alt24=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA24_0 = LA(1);
                        if ( (LA24_0 == Comma) ) 
                        {
                            alt24=1;
                        }

                    }
                    switch (alt24) 
                    {
                	case 1:
                	    // ANML/base/antlr/ANML.g:279:23: Comma l+= fun_decl_helper
                	    {
                	        Comma69 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_fluent_predicate_decl1303); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulefluent_predicate_declEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma69, NULL); }

                	        FOLLOWPUSH(FOLLOW_fun_decl_helper_in_fluent_predicate_decl1307);
                	        l=fun_decl_helper(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulefluent_predicate_declEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }
                	        if ( BACKTRACKING==0 ) { CREATE_stream_fun_decl_helper; stream_fun_decl_helper->add(stream_fun_decl_helper, l.tree, NULL); }
                	        /* listLabelTrack(label)
                	         */
                	        if (list_l == NULL)
                	        {
                	            list_l=ctx->vectors->newVector(ctx->vectors);
                	        }
                	        list_l->add(list_l, l.tree, NULL);

                	    }
                	    break;

                	default:
                	    goto loop24;	/* break out of the loop */
                	    break;
                    }
                }
                loop24: ; /* Jump out to here if this rule does not match */

                Semi70 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_fluent_predicate_decl1311); 
                if  (HASEXCEPTION())
                {
                    goto rulefluent_predicate_declEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_Semi; stream_Semi->add(stream_Semi, Semi70, NULL); }


            }


             
            /* AST REWRITE
             * elements          : l
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : l
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_l;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_l=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token l", list_l);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 280:5: -> ( $l)+
            	{
            	    if ((stream_l == NULL || !stream_l->hasNext(stream_l))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_l->hasNext(stream_l))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_l == NULL ? NULL : stream_l->nextTree(stream_l));

            	    	}
            	    	stream_l->reset(stream_l);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_l != NULL) stream_l->free(stream_l);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefluent_predicate_declEx; /* Prevent compiler warnings */
    rulefluent_predicate_declEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Semi != NULL) stream_Semi->free(stream_Semi);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_predicate_helper != NULL) stream_predicate_helper->free(stream_predicate_helper);
        if (stream_fun_decl_helper != NULL) stream_fun_decl_helper->free(stream_fun_decl_helper);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end fluent_predicate_decl */

/** 
 * $ANTLR start predicate_helper
 * ANML/base/antlr/ANML.g:283:1: predicate_helper : Predicate -> ^( TypeRef[$Predicate] Boolean[$Predicate] ) ;
 */
static ANMLParser_predicate_helper_return
predicate_helper(pANMLParser ctx)
{   
    ANMLParser_predicate_helper_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Predicate71;

    pANTLR3_BASE_TREE Predicate71_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Predicate;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Predicate71       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    Predicate71_tree   = NULL;

    stream_Predicate   = NULL;
    #define CREATE_stream_Predicate  if (stream_Predicate == NULL) {stream_Predicate = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Predicate"); } 

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:283:17: ( Predicate -> ^( TypeRef[$Predicate] Boolean[$Predicate] ) )
        // ANML/base/antlr/ANML.g:284:2: Predicate
        {
            Predicate71 = (pANTLR3_COMMON_TOKEN) MATCHT(Predicate, &FOLLOW_Predicate_in_predicate_helper1332); 
            if  (HASEXCEPTION())
            {
                goto rulepredicate_helperEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Predicate; stream_Predicate->add(stream_Predicate, Predicate71, NULL); }


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 285:3: -> ^( TypeRef[$Predicate] Boolean[$Predicate] )
            	{
            	    // ANML/base/antlr/ANML.g:285:6: ^( TypeRef[$Predicate] Boolean[$Predicate] )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, TypeRef, TOKTEXT(Predicate71))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TypeRef, (pANTLR3_UINT8)Predicate71)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Boolean, TOKTEXT(Predicate71))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Boolean, (pANTLR3_UINT8)Predicate71)
            	        #endif
            	        );

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepredicate_helperEx; /* Prevent compiler warnings */
    rulepredicate_helperEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Predicate != NULL) stream_Predicate->free(stream_Predicate);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end predicate_helper */

/** 
 * $ANTLR start decl_helper
 * ANML/base/antlr/ANML.g:288:1: decl_helper : ( var_decl_helper | fun_decl_helper );
 */
static ANMLParser_decl_helper_return
decl_helper(pANMLParser ctx)
{   
    ANMLParser_decl_helper_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_var_decl_helper_return var_decl_helper72;
    #undef	RETURN_TYPE_var_decl_helper72
    #define	RETURN_TYPE_var_decl_helper72 ANMLParser_var_decl_helper_return

    ANMLParser_fun_decl_helper_return fun_decl_helper73;
    #undef	RETURN_TYPE_fun_decl_helper73
    #define	RETURN_TYPE_fun_decl_helper73 ANMLParser_fun_decl_helper_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    var_decl_helper72.tree = NULL;

    fun_decl_helper73.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:288:12: ( var_decl_helper | fun_decl_helper )
            
            ANTLR3_UINT32 alt25;

            alt25=2;


            {
                int LA25_0 = LA(1);
                if ( (LA25_0 == ID) ) 
                {

                    {
                        int LA25_1 = LA(2);
                        if ( (LA25_1 == LeftP) ) 
                        {
                            alt25=2;
                        }
                        else if ( (((LA25_1 >= Comma) && (LA25_1 <= Semi)) || LA25_1 == Assign || LA25_1 == Undefine) ) 
                        {
                            alt25=1;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 25;
                            EXCEPTION->state        = 1;


                            goto ruledecl_helperEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 25;
                    EXCEPTION->state        = 0;


                    goto ruledecl_helperEx;
                }
            }
            switch (alt25) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:289:2: var_decl_helper
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_var_decl_helper_in_decl_helper1355);
        	        var_decl_helper72=var_decl_helper(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledecl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, var_decl_helper72.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:290:4: fun_decl_helper
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_fun_decl_helper_in_decl_helper1360);
        	        fun_decl_helper73=fun_decl_helper(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledecl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fun_decl_helper73.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruledecl_helperEx; /* Prevent compiler warnings */
    ruledecl_helperEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end decl_helper */

/** 
 * $ANTLR start var_decl_helper
 * ANML/base/antlr/ANML.g:293:1: var_decl_helper : ID ( init )? -> ^( Fluent ID ( init )? ) ;
 */
static ANMLParser_var_decl_helper_return
var_decl_helper(pANMLParser ctx)
{   
    ANMLParser_var_decl_helper_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID74;
    ANMLParser_init_return init75;
    #undef	RETURN_TYPE_init75
    #define	RETURN_TYPE_init75 ANMLParser_init_return

    pANTLR3_BASE_TREE ID74_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_init;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID74       = NULL;
    init75.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID74_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_init   = NULL;
    #define CREATE_stream_init  if (stream_init == NULL) {stream_init = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule init"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:293:16: ( ID ( init )? -> ^( Fluent ID ( init )? ) )
        // ANML/base/antlr/ANML.g:294:2: ID ( init )?
        {
            ID74 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_var_decl_helper1371); 
            if  (HASEXCEPTION())
            {
                goto rulevar_decl_helperEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID74, NULL); }


            // ANML/base/antlr/ANML.g:294:5: ( init )?
            {
                int alt26=2;
                {
                    int LA26_0 = LA(1);
                    if ( (LA26_0 == Assign || LA26_0 == Undefine) ) 
                    {
                        alt26=1;
                    }
                }
                switch (alt26) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:294:5: init
            	    {
            	        FOLLOWPUSH(FOLLOW_init_in_var_decl_helper1373);
            	        init75=init(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevar_decl_helperEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_init; stream_init->add(stream_init, init75.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : init, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 295:3: -> ^( Fluent ID ( init )? )
            	{
            	    // ANML/base/antlr/ANML.g:295:6: ^( Fluent ID ( init )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Fluent, (pANTLR3_UINT8)"Fluent"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        // ANML/base/antlr/ANML.g:295:18: ( init )?
            	        {
            	        	if ( (stream_init != NULL && stream_init->hasNext(stream_init))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_init == NULL ? NULL : stream_init->nextTree(stream_init));

            	        	}
            	        	if ( stream_init != NULL) stream_init->reset(stream_init);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevar_decl_helperEx; /* Prevent compiler warnings */
    rulevar_decl_helperEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_init != NULL) stream_init->free(stream_init);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end var_decl_helper */

/** 
 * $ANTLR start init
 * ANML/base/antlr/ANML.g:298:1: init : ( Assign expr | Assign Undefined | Undefine );
 */
static ANMLParser_init_return
init(pANMLParser ctx)
{   
    ANMLParser_init_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Assign76;
    pANTLR3_COMMON_TOKEN    Assign78;
    pANTLR3_COMMON_TOKEN    Undefined79;
    pANTLR3_COMMON_TOKEN    Undefine80;
    ANMLParser_expr_return expr77;
    #undef	RETURN_TYPE_expr77
    #define	RETURN_TYPE_expr77 ANMLParser_expr_return

    pANTLR3_BASE_TREE Assign76_tree;
    pANTLR3_BASE_TREE Assign78_tree;
    pANTLR3_BASE_TREE Undefined79_tree;
    pANTLR3_BASE_TREE Undefine80_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Assign76       = NULL;
    Assign78       = NULL;
    Undefined79       = NULL;
    Undefine80       = NULL;
    expr77.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Assign76_tree   = NULL;
    Assign78_tree   = NULL;
    Undefined79_tree   = NULL;
    Undefine80_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:298:5: ( Assign expr | Assign Undefined | Undefine )
            
            ANTLR3_UINT32 alt27;

            alt27=3;


            {
                int LA27_0 = LA(1);
                if ( (LA27_0 == Assign) ) 
                {

                    {
                        int LA27_1 = LA(2);
                        if ( (LA27_1 == Undefined) ) 
                        {
                            alt27=2;
                        }
                        else if ( (LA27_1 == ID || LA27_1 == LeftB || LA27_1 == LeftP || LA27_1 == Duration || ((LA27_1 >= NotLog) && (LA27_1 <= NotBit)) || LA27_1 == Contains || ((LA27_1 >= ForAll) && (LA27_1 <= Exists)) || LA27_1 == Dots || LA27_1 == Minus || ((LA27_1 >= Unordered) && (LA27_1 <= End)) || ((LA27_1 >= INT) && (LA27_1 <= Infinity))) ) 
                        {
                            alt27=1;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 27;
                            EXCEPTION->state        = 1;


                            goto ruleinitEx;
                        }
                    }
                }
                else if ( (LA27_0 == Undefine) ) 
                {
                    alt27=3;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 27;
                    EXCEPTION->state        = 0;


                    goto ruleinitEx;
                }
            }
            switch (alt27) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:299:2: Assign expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Assign76 = (pANTLR3_COMMON_TOKEN) MATCHT(Assign, &FOLLOW_Assign_in_init1398); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        FOLLOWPUSH(FOLLOW_expr_in_init1401);
        	        expr77=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr77.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:300:4: Assign Undefined
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Assign78 = (pANTLR3_COMMON_TOKEN) MATCHT(Assign, &FOLLOW_Assign_in_init1406); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        Undefined79 = (pANTLR3_COMMON_TOKEN) MATCHT(Undefined, &FOLLOW_Undefined_in_init1409); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:301:4: Undefine
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Undefine80 = (pANTLR3_COMMON_TOKEN) MATCHT(Undefine, &FOLLOW_Undefine_in_init1415); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitEx; /* Prevent compiler warnings */
    ruleinitEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end init */

/** 
 * $ANTLR start fun_decl_helper
 * ANML/base/antlr/ANML.g:304:1: fun_decl_helper : ID param_list -> ^( FluentFunction ID param_list ) ;
 */
static ANMLParser_fun_decl_helper_return
fun_decl_helper(pANMLParser ctx)
{   
    ANMLParser_fun_decl_helper_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID81;
    ANMLParser_param_list_return param_list82;
    #undef	RETURN_TYPE_param_list82
    #define	RETURN_TYPE_param_list82 ANMLParser_param_list_return

    pANTLR3_BASE_TREE ID81_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_param_list;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID81       = NULL;
    param_list82.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID81_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_param_list   = NULL;
    #define CREATE_stream_param_list  if (stream_param_list == NULL) {stream_param_list = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule param_list"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:304:16: ( ID param_list -> ^( FluentFunction ID param_list ) )
        // ANML/base/antlr/ANML.g:305:2: ID param_list
        {
            ID81 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_fun_decl_helper1426); 
            if  (HASEXCEPTION())
            {
                goto rulefun_decl_helperEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID81, NULL); }

            FOLLOWPUSH(FOLLOW_param_list_in_fun_decl_helper1428);
            param_list82=param_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefun_decl_helperEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_param_list; stream_param_list->add(stream_param_list, param_list82.tree, NULL); }

             
            /* AST REWRITE
             * elements          : ID, param_list
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 306:2: -> ^( FluentFunction ID param_list )
            	{
            	    // ANML/base/antlr/ANML.g:306:5: ^( FluentFunction ID param_list )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FluentFunction, (pANTLR3_UINT8)"FluentFunction"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_param_list == NULL ? NULL : stream_param_list->nextTree(stream_param_list));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefun_decl_helperEx; /* Prevent compiler warnings */
    rulefun_decl_helperEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_param_list != NULL) stream_param_list->free(stream_param_list);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end fun_decl_helper */

/** 
 * $ANTLR start action_decl
 * ANML/base/antlr/ANML.g:321:1: action_decl : Action ID param_list ( LeftB Duration RightB )? action_block -> ^( Action ID param_list ( Duration )? action_block ) ;
 */
static ANMLParser_action_decl_return
action_decl(pANMLParser ctx)
{   
    ANMLParser_action_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Action83;
    pANTLR3_COMMON_TOKEN    ID84;
    pANTLR3_COMMON_TOKEN    LeftB86;
    pANTLR3_COMMON_TOKEN    Duration87;
    pANTLR3_COMMON_TOKEN    RightB88;
    ANMLParser_param_list_return param_list85;
    #undef	RETURN_TYPE_param_list85
    #define	RETURN_TYPE_param_list85 ANMLParser_param_list_return

    ANMLParser_action_block_return action_block89;
    #undef	RETURN_TYPE_action_block89
    #define	RETURN_TYPE_action_block89 ANMLParser_action_block_return

    pANTLR3_BASE_TREE Action83_tree;
    pANTLR3_BASE_TREE ID84_tree;
    pANTLR3_BASE_TREE LeftB86_tree;
    pANTLR3_BASE_TREE Duration87_tree;
    pANTLR3_BASE_TREE RightB88_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightB;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Action;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftB;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Duration;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_action_block;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_param_list;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Action83       = NULL;
    ID84       = NULL;
    LeftB86       = NULL;
    Duration87       = NULL;
    RightB88       = NULL;
    param_list85.tree = NULL;

    action_block89.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Action83_tree   = NULL;
    ID84_tree   = NULL;
    LeftB86_tree   = NULL;
    Duration87_tree   = NULL;
    RightB88_tree   = NULL;

    stream_RightB   = NULL;
    #define CREATE_stream_RightB  if (stream_RightB == NULL) {stream_RightB = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightB"); } 
    stream_Action   = NULL;
    #define CREATE_stream_Action  if (stream_Action == NULL) {stream_Action = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Action"); } 
    stream_LeftB   = NULL;
    #define CREATE_stream_LeftB  if (stream_LeftB == NULL) {stream_LeftB = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftB"); } 
    stream_Duration   = NULL;
    #define CREATE_stream_Duration  if (stream_Duration == NULL) {stream_Duration = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Duration"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_action_block   = NULL;
    #define CREATE_stream_action_block  if (stream_action_block == NULL) {stream_action_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule action_block"); }
    stream_param_list   = NULL;
    #define CREATE_stream_param_list  if (stream_param_list == NULL) {stream_param_list = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule param_list"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:321:12: ( Action ID param_list ( LeftB Duration RightB )? action_block -> ^( Action ID param_list ( Duration )? action_block ) )
        // ANML/base/antlr/ANML.g:322:2: Action ID param_list ( LeftB Duration RightB )? action_block
        {
            Action83 = (pANTLR3_COMMON_TOKEN) MATCHT(Action, &FOLLOW_Action_in_action_decl1464); 
            if  (HASEXCEPTION())
            {
                goto ruleaction_declEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Action; stream_Action->add(stream_Action, Action83, NULL); }

            ID84 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_action_decl1466); 
            if  (HASEXCEPTION())
            {
                goto ruleaction_declEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID84, NULL); }

            FOLLOWPUSH(FOLLOW_param_list_in_action_decl1468);
            param_list85=param_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleaction_declEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_param_list; stream_param_list->add(stream_param_list, param_list85.tree, NULL); }

            // ANML/base/antlr/ANML.g:322:23: ( LeftB Duration RightB )?
            {
                int alt28=2;
                {
                    int LA28_0 = LA(1);
                    if ( (LA28_0 == LeftB) ) 
                    {
                        alt28=1;
                    }
                }
                switch (alt28) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:322:24: LeftB Duration RightB
            	    {
            	        LeftB86 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftB, &FOLLOW_LeftB_in_action_decl1471); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaction_declEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftB; stream_LeftB->add(stream_LeftB, LeftB86, NULL); }

            	        Duration87 = (pANTLR3_COMMON_TOKEN) MATCHT(Duration, &FOLLOW_Duration_in_action_decl1473); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaction_declEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Duration; stream_Duration->add(stream_Duration, Duration87, NULL); }

            	        RightB88 = (pANTLR3_COMMON_TOKEN) MATCHT(RightB, &FOLLOW_RightB_in_action_decl1475); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaction_declEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_RightB; stream_RightB->add(stream_RightB, RightB88, NULL); }


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_action_block_in_action_decl1479);
            action_block89=action_block(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleaction_declEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_action_block; stream_action_block->add(stream_action_block, action_block89.tree, NULL); }

             
            /* AST REWRITE
             * elements          : ID, param_list, Duration, action_block, Action
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 323:3: -> ^( Action ID param_list ( Duration )? action_block )
            	{
            	    // ANML/base/antlr/ANML.g:323:6: ^( Action ID param_list ( Duration )? action_block )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_Action == NULL ? NULL : stream_Action->nextNode(stream_Action), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_param_list == NULL ? NULL : stream_param_list->nextTree(stream_param_list));
            	        // ANML/base/antlr/ANML.g:323:29: ( Duration )?
            	        {
            	        	if ( (stream_Duration != NULL && stream_Duration->hasNext(stream_Duration))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Duration == NULL ? NULL : stream_Duration->nextNode(stream_Duration));

            	        	}
            	        	if ( stream_Duration != NULL) stream_Duration->reset(stream_Duration);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_action_block == NULL ? NULL : stream_action_block->nextTree(stream_action_block));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleaction_declEx; /* Prevent compiler warnings */
    ruleaction_declEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RightB != NULL) stream_RightB->free(stream_RightB);
        if (stream_Action != NULL) stream_Action->free(stream_Action);
        if (stream_LeftB != NULL) stream_LeftB->free(stream_LeftB);
        if (stream_Duration != NULL) stream_Duration->free(stream_Duration);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_action_block != NULL) stream_action_block->free(stream_action_block);
        if (stream_param_list != NULL) stream_param_list->free(stream_param_list);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end action_decl */

/** 
 * $ANTLR start durative_action_block
 * ANML/base/antlr/ANML.g:338:1: durative_action_block : LeftB Duration RightB action_block_h ;
 */
static ANMLParser_durative_action_block_return
durative_action_block(pANMLParser ctx)
{   
    ANMLParser_durative_action_block_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LeftB90;
    pANTLR3_COMMON_TOKEN    Duration91;
    pANTLR3_COMMON_TOKEN    RightB92;
    ANMLParser_action_block_h_return action_block_h93;
    #undef	RETURN_TYPE_action_block_h93
    #define	RETURN_TYPE_action_block_h93 ANMLParser_action_block_h_return

    pANTLR3_BASE_TREE LeftB90_tree;
    pANTLR3_BASE_TREE Duration91_tree;
    pANTLR3_BASE_TREE RightB92_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    LeftB90       = NULL;
    Duration91       = NULL;
    RightB92       = NULL;
    action_block_h93.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LeftB90_tree   = NULL;
    Duration91_tree   = NULL;
    RightB92_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:338:22: ( LeftB Duration RightB action_block_h )
        // ANML/base/antlr/ANML.g:339:2: LeftB Duration RightB action_block_h
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            LeftB90 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftB, &FOLLOW_LeftB_in_durative_action_block1520); 
            if  (HASEXCEPTION())
            {
                goto ruledurative_action_blockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            Duration91 = (pANTLR3_COMMON_TOKEN) MATCHT(Duration, &FOLLOW_Duration_in_durative_action_block1523); 
            if  (HASEXCEPTION())
            {
                goto ruledurative_action_blockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            Duration91_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Duration91));
            ADAPTOR->addChild(ADAPTOR, root_0, Duration91_tree);
            }
            RightB92 = (pANTLR3_COMMON_TOKEN) MATCHT(RightB, &FOLLOW_RightB_in_durative_action_block1525); 
            if  (HASEXCEPTION())
            {
                goto ruledurative_action_blockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_action_block_h_in_durative_action_block1528);
            action_block_h93=action_block_h(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledurative_action_blockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, action_block_h93.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledurative_action_blockEx; /* Prevent compiler warnings */
    ruledurative_action_blockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end durative_action_block */

/** 
 * $ANTLR start action_block
 * ANML/base/antlr/ANML.g:342:1: action_block : action_block_h ;
 */
static ANMLParser_action_block_return
action_block(pANMLParser ctx)
{   
    ANMLParser_action_block_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_action_block_h_return action_block_h94;
    #undef	RETURN_TYPE_action_block_h94
    #define	RETURN_TYPE_action_block_h94 ANMLParser_action_block_h_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    action_block_h94.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:342:13: ( action_block_h )
        // ANML/base/antlr/ANML.g:343:2: action_block_h
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_action_block_h_in_action_block1537);
            action_block_h94=action_block_h(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleaction_blockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, action_block_h94.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleaction_blockEx; /* Prevent compiler warnings */
    ruleaction_blockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end action_block */

/** 
 * $ANTLR start action_block_h
 * ANML/base/antlr/ANML.g:346:1: action_block_h : LeftC (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )* (d+= decomp_block )* RightC -> ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) ^( Decompositions ( $d)* ) ;
 */
static ANMLParser_action_block_h_return
action_block_h(pANMLParser ctx)
{   
    ANMLParser_action_block_h_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LeftC95;
    pANTLR3_COMMON_TOKEN    RightC96;
    pANTLR3_VECTOR    list_t;
    pANTLR3_VECTOR    list_c;
    pANTLR3_VECTOR    list_f;
    pANTLR3_VECTOR    list_a;
    pANTLR3_VECTOR    list_s;
    pANTLR3_VECTOR    list_ps;
    pANTLR3_VECTOR    list_d;
    ANMLParser_type_decl_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t ANMLParser_type_decl_return

    ANMLParser_const_decl_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c ANMLParser_const_decl_return

    ANMLParser_fluent_decl_return f;
    #undef	RETURN_TYPE_f
    #define	RETURN_TYPE_f ANMLParser_fluent_decl_return

    ANMLParser_action_decl_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a ANMLParser_action_decl_return

    ANMLParser_stmt_return s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s ANMLParser_stmt_return

    ANMLParser_problem_stmt_return ps;
    #undef	RETURN_TYPE_ps
    #define	RETURN_TYPE_ps ANMLParser_problem_stmt_return

    ANMLParser_decomp_block_return d;
    #undef	RETURN_TYPE_d
    #define	RETURN_TYPE_d ANMLParser_decomp_block_return

    pANTLR3_BASE_TREE LeftC95_tree;
    pANTLR3_BASE_TREE RightC96_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftC;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightC;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_decomp_block;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_problem_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fluent_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_const_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_action_decl;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LeftC95       = NULL;
    RightC96       = NULL;
    list_t     = NULL;
    list_c     = NULL;
    list_f     = NULL;
    list_a     = NULL;
    list_s     = NULL;
    list_ps     = NULL;
    list_d     = NULL;
    t.tree = NULL;

    c.tree = NULL;

    f.tree = NULL;

    a.tree = NULL;

    s.tree = NULL;

    ps.tree = NULL;

    d.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LeftC95_tree   = NULL;
    RightC96_tree   = NULL;

    stream_LeftC   = NULL;
    #define CREATE_stream_LeftC  if (stream_LeftC == NULL) {stream_LeftC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftC"); } 
    stream_RightC   = NULL;
    #define CREATE_stream_RightC  if (stream_RightC == NULL) {stream_RightC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightC"); } 
    stream_decomp_block   = NULL;
    #define CREATE_stream_decomp_block  if (stream_decomp_block == NULL) {stream_decomp_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule decomp_block"); }
    stream_type_decl   = NULL;
    #define CREATE_stream_type_decl  if (stream_type_decl == NULL) {stream_type_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_decl"); }
    stream_stmt   = NULL;
    #define CREATE_stream_stmt  if (stream_stmt == NULL) {stream_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt"); }
    stream_problem_stmt   = NULL;
    #define CREATE_stream_problem_stmt  if (stream_problem_stmt == NULL) {stream_problem_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule problem_stmt"); }
    stream_fluent_decl   = NULL;
    #define CREATE_stream_fluent_decl  if (stream_fluent_decl == NULL) {stream_fluent_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule fluent_decl"); }
    stream_const_decl   = NULL;
    #define CREATE_stream_const_decl  if (stream_const_decl == NULL) {stream_const_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule const_decl"); }
    stream_action_decl   = NULL;
    #define CREATE_stream_action_decl  if (stream_action_decl == NULL) {stream_action_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule action_decl"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:346:15: ( LeftC (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )* (d+= decomp_block )* RightC -> ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) ^( Decompositions ( $d)* ) )
        // ANML/base/antlr/ANML.g:347:2: LeftC (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )* (d+= decomp_block )* RightC
        {
            LeftC95 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftC, &FOLLOW_LeftC_in_action_block_h1547); 
            if  (HASEXCEPTION())
            {
                goto ruleaction_block_hEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_LeftC; stream_LeftC->add(stream_LeftC, LeftC95, NULL); }


            // ANML/base/antlr/ANML.g:348:3: (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )*

            for (;;)
            {
                int alt29=7;
                switch ( LA(1) ) 
                {
                case Type:
                	{
                		alt29=1;
                	}
                    break;
                case Constant:
                	{
                		alt29=2;
                	}
                    break;
                case Fluent:
                case Variable:
                case Function:
                case Predicate:
                	{
                		alt29=3;
                	}
                    break;
                case Action:
                	{
                		alt29=4;
                	}
                    break;
                case When:
                case ID:
                case Semi:
                case LeftC:
                case LeftB:
                case LeftP:
                case Duration:
                case NotLog:
                case NotBit:
                case Contains:
                case ForAll:
                case Exists:
                case Delta:
                case Dots:
                case Minus:
                case Unordered:
                case Ordered:
                case Start:
                case End:
                case INT:
                case FLOAT:
                case STRING:
                case True:
                case False:
                case Infinity:
                	{
                		alt29=5;
                	}
                    break;
                case Fact:
                case Goal:
                	{
                		alt29=6;
                	}
                    break;

                }

                switch (alt29) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:348:5: t+= type_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_type_decl_in_action_block_h1555);
            	        t=type_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaction_block_hEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_type_decl; stream_type_decl->add(stream_type_decl, t.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_t == NULL)
            	        {
            	            list_t=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_t->add(list_t, t.tree, NULL);

            	    }
            	    break;
            	case 2:
            	    // ANML/base/antlr/ANML.g:349:5: c+= const_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_const_decl_in_action_block_h1564);
            	        c=const_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaction_block_hEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_const_decl; stream_const_decl->add(stream_const_decl, c.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_c == NULL)
            	        {
            	            list_c=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_c->add(list_c, c.tree, NULL);

            	    }
            	    break;
            	case 3:
            	    // ANML/base/antlr/ANML.g:350:5: f+= fluent_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_fluent_decl_in_action_block_h1573);
            	        f=fluent_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaction_block_hEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_fluent_decl; stream_fluent_decl->add(stream_fluent_decl, f.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_f == NULL)
            	        {
            	            list_f=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_f->add(list_f, f.tree, NULL);

            	    }
            	    break;
            	case 4:
            	    // ANML/base/antlr/ANML.g:351:5: a+= action_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_action_decl_in_action_block_h1582);
            	        a=action_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaction_block_hEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_action_decl; stream_action_decl->add(stream_action_decl, a.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_a == NULL)
            	        {
            	            list_a=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_a->add(list_a, a.tree, NULL);

            	    }
            	    break;
            	case 5:
            	    // ANML/base/antlr/ANML.g:352:5: s+= stmt
            	    {
            	        FOLLOWPUSH(FOLLOW_stmt_in_action_block_h1590);
            	        s=stmt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaction_block_hEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, s.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_s == NULL)
            	        {
            	            list_s=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_s->add(list_s, s.tree, NULL);

            	    }
            	    break;
            	case 6:
            	    // ANML/base/antlr/ANML.g:353:5: ps+= problem_stmt
            	    {
            	        FOLLOWPUSH(FOLLOW_problem_stmt_in_action_block_h1598);
            	        ps=problem_stmt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaction_block_hEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_problem_stmt; stream_problem_stmt->add(stream_problem_stmt, ps.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_ps == NULL)
            	        {
            	            list_ps=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_ps->add(list_ps, ps.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


            // ANML/base/antlr/ANML.g:355:3: (d+= decomp_block )*

            for (;;)
            {
                int alt30=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA30_0 = LA(1);
                    if ( (LA30_0 == Decomposition) ) 
                    {
                        alt30=1;
                    }

                }
                switch (alt30) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:355:4: d+= decomp_block
            	    {
            	        FOLLOWPUSH(FOLLOW_decomp_block_in_action_block_h1610);
            	        d=decomp_block(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaction_block_hEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_decomp_block; stream_decomp_block->add(stream_decomp_block, d.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_d == NULL)
            	        {
            	            list_d=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_d->add(list_d, d.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop30;	/* break out of the loop */
            	    break;
                }
            }
            loop30: ; /* Jump out to here if this rule does not match */

            RightC96 = (pANTLR3_COMMON_TOKEN) MATCHT(RightC, &FOLLOW_RightC_in_action_block_h1616); 
            if  (HASEXCEPTION())
            {
                goto ruleaction_block_hEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_RightC; stream_RightC->add(stream_RightC, RightC96, NULL); }


             
            /* AST REWRITE
             * elements          : ps, d, s, a, t, c, f
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : f, d, t, s, c, a, ps
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_f;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_d;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_t;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_c;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ps;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_f=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token f", list_f);
            	stream_d=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token d", list_d);
            	stream_t=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token t", list_t);
            	stream_s=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s", list_s);
            	stream_c=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", list_c);
            	stream_a=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", list_a);
            	stream_ps=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token ps", list_ps);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 357:3: -> ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) ^( Decompositions ( $d)* )
            	{
            	    // ANML/base/antlr/ANML.g:358:4: ^( Types ( $t)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Types, (pANTLR3_UINT8)"Types"), root_1));

            	        // ANML/base/antlr/ANML.g:358:12: ( $t)*
            	        {
            	        	while ( (stream_t != NULL && stream_t->hasNext(stream_t))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_t == NULL ? NULL : stream_t->nextTree(stream_t));

            	        	}
            	        	if ( stream_t != NULL) stream_t->reset(stream_t);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // ANML/base/antlr/ANML.g:359:4: ^( Constants ( $c)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Constants, (pANTLR3_UINT8)"Constants"), root_1));

            	        // ANML/base/antlr/ANML.g:359:16: ( $c)*
            	        {
            	        	while ( (stream_c != NULL && stream_c->hasNext(stream_c))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_c == NULL ? NULL : stream_c->nextTree(stream_c));

            	        	}
            	        	if ( stream_c != NULL) stream_c->reset(stream_c);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // ANML/base/antlr/ANML.g:360:4: ^( Fluents ( $f)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Fluents, (pANTLR3_UINT8)"Fluents"), root_1));

            	        // ANML/base/antlr/ANML.g:360:14: ( $f)*
            	        {
            	        	while ( (stream_f != NULL && stream_f->hasNext(stream_f))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_f == NULL ? NULL : stream_f->nextTree(stream_f));

            	        	}
            	        	if ( stream_f != NULL) stream_f->reset(stream_f);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // ANML/base/antlr/ANML.g:361:4: ^( Actions ( $a)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Actions, (pANTLR3_UINT8)"Actions"), root_1));

            	        // ANML/base/antlr/ANML.g:361:14: ( $a)*
            	        {
            	        	while ( (stream_a != NULL && stream_a->hasNext(stream_a))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	        	}
            	        	if ( stream_a != NULL) stream_a->reset(stream_a);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // ANML/base/antlr/ANML.g:362:4: ^( Stmts ( $s)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Stmts, (pANTLR3_UINT8)"Stmts"), root_1));

            	        // ANML/base/antlr/ANML.g:362:12: ( $s)*
            	        {
            	        	while ( (stream_s != NULL && stream_s->hasNext(stream_s))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s == NULL ? NULL : stream_s->nextTree(stream_s));

            	        	}
            	        	if ( stream_s != NULL) stream_s->reset(stream_s);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // ANML/base/antlr/ANML.g:363:4: ^( ProblemStmts ( $ps)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ProblemStmts, (pANTLR3_UINT8)"ProblemStmts"), root_1));

            	        // ANML/base/antlr/ANML.g:363:19: ( $ps)*
            	        {
            	        	while ( (stream_ps != NULL && stream_ps->hasNext(stream_ps))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_ps == NULL ? NULL : stream_ps->nextTree(stream_ps));

            	        	}
            	        	if ( stream_ps != NULL) stream_ps->reset(stream_ps);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // ANML/base/antlr/ANML.g:364:4: ^( Decompositions ( $d)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Decompositions, (pANTLR3_UINT8)"Decompositions"), root_1));

            	        // ANML/base/antlr/ANML.g:364:21: ( $d)*
            	        {
            	        	while ( (stream_d != NULL && stream_d->hasNext(stream_d))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_d == NULL ? NULL : stream_d->nextTree(stream_d));

            	        	}
            	        	if ( stream_d != NULL) stream_d->reset(stream_d);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_f != NULL) stream_f->free(stream_f);
            	if (stream_d != NULL) stream_d->free(stream_d);
            	if (stream_t != NULL) stream_t->free(stream_t);
            	if (stream_s != NULL) stream_s->free(stream_s);
            	if (stream_c != NULL) stream_c->free(stream_c);
            	if (stream_a != NULL) stream_a->free(stream_a);
            	if (stream_ps != NULL) stream_ps->free(stream_ps);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleaction_block_hEx; /* Prevent compiler warnings */
    ruleaction_block_hEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LeftC != NULL) stream_LeftC->free(stream_LeftC);
        if (stream_RightC != NULL) stream_RightC->free(stream_RightC);
        if (stream_decomp_block != NULL) stream_decomp_block->free(stream_decomp_block);
        if (stream_type_decl != NULL) stream_type_decl->free(stream_type_decl);
        if (stream_stmt != NULL) stream_stmt->free(stream_stmt);
        if (stream_problem_stmt != NULL) stream_problem_stmt->free(stream_problem_stmt);
        if (stream_fluent_decl != NULL) stream_fluent_decl->free(stream_fluent_decl);
        if (stream_const_decl != NULL) stream_const_decl->free(stream_const_decl);
        if (stream_action_decl != NULL) stream_action_decl->free(stream_action_decl);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end action_block_h */

/** 
 * $ANTLR start decomp_block
 * ANML/base/antlr/ANML.g:367:1: decomp_block : Decomposition (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )* -> ^( Block[$Decomposition,\"DecompositionBlock\"] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) ) ;
 */
static ANMLParser_decomp_block_return
decomp_block(pANMLParser ctx)
{   
    ANMLParser_decomp_block_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Decomposition97;
    pANTLR3_VECTOR    list_t;
    pANTLR3_VECTOR    list_c;
    pANTLR3_VECTOR    list_f;
    pANTLR3_VECTOR    list_a;
    pANTLR3_VECTOR    list_s;
    pANTLR3_VECTOR    list_ps;
    ANMLParser_type_decl_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t ANMLParser_type_decl_return

    ANMLParser_const_decl_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c ANMLParser_const_decl_return

    ANMLParser_fluent_decl_return f;
    #undef	RETURN_TYPE_f
    #define	RETURN_TYPE_f ANMLParser_fluent_decl_return

    ANMLParser_action_decl_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a ANMLParser_action_decl_return

    ANMLParser_stmt_return s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s ANMLParser_stmt_return

    ANMLParser_problem_stmt_return ps;
    #undef	RETURN_TYPE_ps
    #define	RETURN_TYPE_ps ANMLParser_problem_stmt_return

    pANTLR3_BASE_TREE Decomposition97_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Decomposition;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_problem_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fluent_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_const_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_action_decl;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Decomposition97       = NULL;
    list_t     = NULL;
    list_c     = NULL;
    list_f     = NULL;
    list_a     = NULL;
    list_s     = NULL;
    list_ps     = NULL;
    t.tree = NULL;

    c.tree = NULL;

    f.tree = NULL;

    a.tree = NULL;

    s.tree = NULL;

    ps.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Decomposition97_tree   = NULL;

    stream_Decomposition   = NULL;
    #define CREATE_stream_Decomposition  if (stream_Decomposition == NULL) {stream_Decomposition = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Decomposition"); } 
    stream_type_decl   = NULL;
    #define CREATE_stream_type_decl  if (stream_type_decl == NULL) {stream_type_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_decl"); }
    stream_stmt   = NULL;
    #define CREATE_stream_stmt  if (stream_stmt == NULL) {stream_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt"); }
    stream_problem_stmt   = NULL;
    #define CREATE_stream_problem_stmt  if (stream_problem_stmt == NULL) {stream_problem_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule problem_stmt"); }
    stream_fluent_decl   = NULL;
    #define CREATE_stream_fluent_decl  if (stream_fluent_decl == NULL) {stream_fluent_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule fluent_decl"); }
    stream_const_decl   = NULL;
    #define CREATE_stream_const_decl  if (stream_const_decl == NULL) {stream_const_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule const_decl"); }
    stream_action_decl   = NULL;
    #define CREATE_stream_action_decl  if (stream_action_decl == NULL) {stream_action_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule action_decl"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:367:13: ( Decomposition (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )* -> ^( Block[$Decomposition,\"DecompositionBlock\"] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) ) )
        // ANML/base/antlr/ANML.g:368:2: Decomposition (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )*
        {
            Decomposition97 = (pANTLR3_COMMON_TOKEN) MATCHT(Decomposition, &FOLLOW_Decomposition_in_decomp_block1716); 
            if  (HASEXCEPTION())
            {
                goto ruledecomp_blockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Decomposition; stream_Decomposition->add(stream_Decomposition, Decomposition97, NULL); }


            // ANML/base/antlr/ANML.g:370:3: (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )*

            for (;;)
            {
                int alt31=7;
                switch ( LA(1) ) 
                {
                case Type:
                	{
                		alt31=1;
                	}
                    break;
                case Constant:
                	{
                		alt31=2;
                	}
                    break;
                case Fluent:
                case Variable:
                case Function:
                case Predicate:
                	{
                		alt31=3;
                	}
                    break;
                case Action:
                	{
                		alt31=4;
                	}
                    break;
                case When:
                case ID:
                case Semi:
                case LeftC:
                case LeftB:
                case LeftP:
                case Duration:
                case NotLog:
                case NotBit:
                case Contains:
                case ForAll:
                case Exists:
                case Delta:
                case Dots:
                case Minus:
                case Unordered:
                case Ordered:
                case Start:
                case End:
                case INT:
                case FLOAT:
                case STRING:
                case True:
                case False:
                case Infinity:
                	{
                		alt31=5;
                	}
                    break;
                case Fact:
                case Goal:
                	{
                		alt31=6;
                	}
                    break;

                }

                switch (alt31) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:370:5: t+= type_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_type_decl_in_decomp_block1726);
            	        t=type_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledecomp_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_type_decl; stream_type_decl->add(stream_type_decl, t.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_t == NULL)
            	        {
            	            list_t=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_t->add(list_t, t.tree, NULL);

            	    }
            	    break;
            	case 2:
            	    // ANML/base/antlr/ANML.g:371:5: c+= const_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_const_decl_in_decomp_block1735);
            	        c=const_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledecomp_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_const_decl; stream_const_decl->add(stream_const_decl, c.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_c == NULL)
            	        {
            	            list_c=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_c->add(list_c, c.tree, NULL);

            	    }
            	    break;
            	case 3:
            	    // ANML/base/antlr/ANML.g:372:5: f+= fluent_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_fluent_decl_in_decomp_block1744);
            	        f=fluent_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledecomp_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_fluent_decl; stream_fluent_decl->add(stream_fluent_decl, f.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_f == NULL)
            	        {
            	            list_f=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_f->add(list_f, f.tree, NULL);

            	    }
            	    break;
            	case 4:
            	    // ANML/base/antlr/ANML.g:373:5: a+= action_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_action_decl_in_decomp_block1753);
            	        a=action_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledecomp_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_action_decl; stream_action_decl->add(stream_action_decl, a.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_a == NULL)
            	        {
            	            list_a=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_a->add(list_a, a.tree, NULL);

            	    }
            	    break;
            	case 5:
            	    // ANML/base/antlr/ANML.g:374:5: s+= stmt
            	    {
            	        FOLLOWPUSH(FOLLOW_stmt_in_decomp_block1761);
            	        s=stmt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledecomp_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, s.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_s == NULL)
            	        {
            	            list_s=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_s->add(list_s, s.tree, NULL);

            	    }
            	    break;
            	case 6:
            	    // ANML/base/antlr/ANML.g:375:5: ps+= problem_stmt
            	    {
            	        FOLLOWPUSH(FOLLOW_problem_stmt_in_decomp_block1769);
            	        ps=problem_stmt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledecomp_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_problem_stmt; stream_problem_stmt->add(stream_problem_stmt, ps.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_ps == NULL)
            	        {
            	            list_ps=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_ps->add(list_ps, ps.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : ps, a, s, t, c, f
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : f, t, s, c, a, ps
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_f;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_t;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_c;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ps;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_f=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token f", list_f);
            	stream_t=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token t", list_t);
            	stream_s=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s", list_s);
            	stream_c=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", list_c);
            	stream_a=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", list_a);
            	stream_ps=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token ps", list_ps);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 377:4: -> ^( Block[$Decomposition,\"DecompositionBlock\"] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) )
            	{
            	    // ANML/base/antlr/ANML.g:378:3: ^( Block[$Decomposition,\"DecompositionBlock\"] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 2 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Block, TOKTEXT(Decomposition97, "DecompositionBlock"))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Block, (pANTLR3_UINT8)Decomposition97, "DecompositionBlock")
            	        #endif
            	        , root_1));

            	        // ANML/base/antlr/ANML.g:380:4: ^( Types ( $t)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Types, (pANTLR3_UINT8)"Types"), root_2));

            	            // ANML/base/antlr/ANML.g:380:12: ( $t)*
            	            {
            	            	while ( (stream_t != NULL && stream_t->hasNext(stream_t))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_t == NULL ? NULL : stream_t->nextTree(stream_t));

            	            	}
            	            	if ( stream_t != NULL) stream_t->reset(stream_t);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:381:4: ^( Constants ( $c)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Constants, (pANTLR3_UINT8)"Constants"), root_2));

            	            // ANML/base/antlr/ANML.g:381:16: ( $c)*
            	            {
            	            	while ( (stream_c != NULL && stream_c->hasNext(stream_c))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_c == NULL ? NULL : stream_c->nextTree(stream_c));

            	            	}
            	            	if ( stream_c != NULL) stream_c->reset(stream_c);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:382:4: ^( Fluents ( $f)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Fluents, (pANTLR3_UINT8)"Fluents"), root_2));

            	            // ANML/base/antlr/ANML.g:382:14: ( $f)*
            	            {
            	            	while ( (stream_f != NULL && stream_f->hasNext(stream_f))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_f == NULL ? NULL : stream_f->nextTree(stream_f));

            	            	}
            	            	if ( stream_f != NULL) stream_f->reset(stream_f);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:383:4: ^( Actions ( $a)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Actions, (pANTLR3_UINT8)"Actions"), root_2));

            	            // ANML/base/antlr/ANML.g:383:14: ( $a)*
            	            {
            	            	while ( (stream_a != NULL && stream_a->hasNext(stream_a))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	            	}
            	            	if ( stream_a != NULL) stream_a->reset(stream_a);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:384:4: ^( Stmts ( $s)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Stmts, (pANTLR3_UINT8)"Stmts"), root_2));

            	            // ANML/base/antlr/ANML.g:384:12: ( $s)*
            	            {
            	            	while ( (stream_s != NULL && stream_s->hasNext(stream_s))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_s == NULL ? NULL : stream_s->nextTree(stream_s));

            	            	}
            	            	if ( stream_s != NULL) stream_s->reset(stream_s);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:385:4: ^( ProblemStmts ( $ps)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ProblemStmts, (pANTLR3_UINT8)"ProblemStmts"), root_2));

            	            // ANML/base/antlr/ANML.g:385:19: ( $ps)*
            	            {
            	            	while ( (stream_ps != NULL && stream_ps->hasNext(stream_ps))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_ps == NULL ? NULL : stream_ps->nextTree(stream_ps));

            	            	}
            	            	if ( stream_ps != NULL) stream_ps->reset(stream_ps);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_f != NULL) stream_f->free(stream_f);
            	if (stream_t != NULL) stream_t->free(stream_t);
            	if (stream_s != NULL) stream_s->free(stream_s);
            	if (stream_c != NULL) stream_c->free(stream_c);
            	if (stream_a != NULL) stream_a->free(stream_a);
            	if (stream_ps != NULL) stream_ps->free(stream_ps);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledecomp_blockEx; /* Prevent compiler warnings */
    ruledecomp_blockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Decomposition != NULL) stream_Decomposition->free(stream_Decomposition);
        if (stream_type_decl != NULL) stream_type_decl->free(stream_type_decl);
        if (stream_stmt != NULL) stream_stmt->free(stream_stmt);
        if (stream_problem_stmt != NULL) stream_problem_stmt->free(stream_problem_stmt);
        if (stream_fluent_decl != NULL) stream_fluent_decl->free(stream_fluent_decl);
        if (stream_const_decl != NULL) stream_const_decl->free(stream_const_decl);
        if (stream_action_decl != NULL) stream_action_decl->free(stream_action_decl);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end decomp_block */

/** 
 * $ANTLR start problem_stmt
 * ANML/base/antlr/ANML.g:391:1: problem_stmt : ( fact_decl | goal_decl );
 */
static ANMLParser_problem_stmt_return
problem_stmt(pANMLParser ctx)
{   
    ANMLParser_problem_stmt_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_fact_decl_return fact_decl98;
    #undef	RETURN_TYPE_fact_decl98
    #define	RETURN_TYPE_fact_decl98 ANMLParser_fact_decl_return

    ANMLParser_goal_decl_return goal_decl99;
    #undef	RETURN_TYPE_goal_decl99
    #define	RETURN_TYPE_goal_decl99 ANMLParser_goal_decl_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    fact_decl98.tree = NULL;

    goal_decl99.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:391:13: ( fact_decl | goal_decl )
            
            ANTLR3_UINT32 alt32;

            alt32=2;


            {
                int LA32_0 = LA(1);
                if ( (LA32_0 == Fact) ) 
                {
                    alt32=1;
                }
                else if ( (LA32_0 == Goal) ) 
                {
                    alt32=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 32;
                    EXCEPTION->state        = 0;


                    goto ruleproblem_stmtEx;
                }
            }
            switch (alt32) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:392:2: fact_decl
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_fact_decl_in_problem_stmt1873);
        	        fact_decl98=fact_decl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleproblem_stmtEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, fact_decl98.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:393:4: goal_decl
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_goal_decl_in_problem_stmt1878);
        	        goal_decl99=goal_decl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleproblem_stmtEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, goal_decl99.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleproblem_stmtEx; /* Prevent compiler warnings */
    ruleproblem_stmtEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end problem_stmt */

/** 
 * $ANTLR start fact_decl
 * ANML/base/antlr/ANML.g:396:1: fact_decl : Fact ( LeftC ( fact_decl_helper )* RightC -> ( fact_decl_helper )* | fact_decl_helper -> fact_decl_helper ) ;
 */
static ANMLParser_fact_decl_return
fact_decl(pANMLParser ctx)
{   
    ANMLParser_fact_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Fact100;
    pANTLR3_COMMON_TOKEN    LeftC101;
    pANTLR3_COMMON_TOKEN    RightC103;
    ANMLParser_fact_decl_helper_return fact_decl_helper102;
    #undef	RETURN_TYPE_fact_decl_helper102
    #define	RETURN_TYPE_fact_decl_helper102 ANMLParser_fact_decl_helper_return

    ANMLParser_fact_decl_helper_return fact_decl_helper104;
    #undef	RETURN_TYPE_fact_decl_helper104
    #define	RETURN_TYPE_fact_decl_helper104 ANMLParser_fact_decl_helper_return

    pANTLR3_BASE_TREE Fact100_tree;
    pANTLR3_BASE_TREE LeftC101_tree;
    pANTLR3_BASE_TREE RightC103_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftC;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Fact;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightC;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fact_decl_helper;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Fact100       = NULL;
    LeftC101       = NULL;
    RightC103       = NULL;
    fact_decl_helper102.tree = NULL;

    fact_decl_helper104.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Fact100_tree   = NULL;
    LeftC101_tree   = NULL;
    RightC103_tree   = NULL;

    stream_LeftC   = NULL;
    #define CREATE_stream_LeftC  if (stream_LeftC == NULL) {stream_LeftC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftC"); } 
    stream_Fact   = NULL;
    #define CREATE_stream_Fact  if (stream_Fact == NULL) {stream_Fact = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Fact"); } 
    stream_RightC   = NULL;
    #define CREATE_stream_RightC  if (stream_RightC == NULL) {stream_RightC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightC"); } 
    stream_fact_decl_helper   = NULL;
    #define CREATE_stream_fact_decl_helper  if (stream_fact_decl_helper == NULL) {stream_fact_decl_helper = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule fact_decl_helper"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:396:10: ( Fact ( LeftC ( fact_decl_helper )* RightC -> ( fact_decl_helper )* | fact_decl_helper -> fact_decl_helper ) )
        // ANML/base/antlr/ANML.g:397:2: Fact ( LeftC ( fact_decl_helper )* RightC -> ( fact_decl_helper )* | fact_decl_helper -> fact_decl_helper )
        {
            Fact100 = (pANTLR3_COMMON_TOKEN) MATCHT(Fact, &FOLLOW_Fact_in_fact_decl1888); 
            if  (HASEXCEPTION())
            {
                goto rulefact_declEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Fact; stream_Fact->add(stream_Fact, Fact100, NULL); }


            // ANML/base/antlr/ANML.g:398:6: ( LeftC ( fact_decl_helper )* RightC -> ( fact_decl_helper )* | fact_decl_helper -> fact_decl_helper )
            {
                int alt34=2;

                {
                    int LA34_0 = LA(1);
                    if ( (LA34_0 == LeftC) ) 
                    {
                        alt34=1;
                    }
                    else if ( (LA34_0 == ID || LA34_0 == Semi || ((LA34_0 >= NotLog) && (LA34_0 <= NotBit))) ) 
                    {
                        alt34=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 34;
                        EXCEPTION->state        = 0;


                        goto rulefact_declEx;
                    }
                }
                switch (alt34) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:398:8: LeftC ( fact_decl_helper )* RightC
            	    {
            	        LeftC101 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftC, &FOLLOW_LeftC_in_fact_decl1897); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefact_declEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftC; stream_LeftC->add(stream_LeftC, LeftC101, NULL); }


            	        // ANML/base/antlr/ANML.g:398:14: ( fact_decl_helper )*

            	        for (;;)
            	        {
            	            int alt33=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA33_0 = LA(1);
            	                if ( (LA33_0 == ID || LA33_0 == Semi || ((LA33_0 >= NotLog) && (LA33_0 <= NotBit))) ) 
            	                {
            	                    alt33=1;
            	                }

            	            }
            	            switch (alt33) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:398:14: fact_decl_helper
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_fact_decl_helper_in_fact_decl1899);
            	        	        fact_decl_helper102=fact_decl_helper(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulefact_declEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_fact_decl_helper; stream_fact_decl_helper->add(stream_fact_decl_helper, fact_decl_helper102.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop33;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop33: ; /* Jump out to here if this rule does not match */

            	        RightC103 = (pANTLR3_COMMON_TOKEN) MATCHT(RightC, &FOLLOW_RightC_in_fact_decl1902); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefact_declEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_RightC; stream_RightC->add(stream_RightC, RightC103, NULL); }


            	         
            	        /* AST REWRITE
            	         * elements          : fact_decl_helper
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 399:9: -> ( fact_decl_helper )*
            	        	{
            	        	    // ANML/base/antlr/ANML.g:399:12: ( fact_decl_helper )*
            	        	    {
            	        	    	while ( (stream_fact_decl_helper != NULL && stream_fact_decl_helper->hasNext(stream_fact_decl_helper))  )
            	        	    	{
            	        	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_fact_decl_helper == NULL ? NULL : stream_fact_decl_helper->nextTree(stream_fact_decl_helper));

            	        	    	}
            	        	    	if ( stream_fact_decl_helper != NULL) stream_fact_decl_helper->reset(stream_fact_decl_helper);

            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // ANML/base/antlr/ANML.g:400:8: fact_decl_helper
            	    {
            	        FOLLOWPUSH(FOLLOW_fact_decl_helper_in_fact_decl1924);
            	        fact_decl_helper104=fact_decl_helper(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefact_declEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_fact_decl_helper; stream_fact_decl_helper->add(stream_fact_decl_helper, fact_decl_helper104.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : fact_decl_helper
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 401:9: -> fact_decl_helper
            	        	{
            	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_fact_decl_helper == NULL ? NULL : stream_fact_decl_helper->nextTree(stream_fact_decl_helper));

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefact_declEx; /* Prevent compiler warnings */
    rulefact_declEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LeftC != NULL) stream_LeftC->free(stream_LeftC);
        if (stream_Fact != NULL) stream_Fact->free(stream_Fact);
        if (stream_RightC != NULL) stream_RightC->free(stream_RightC);
        if (stream_fact_decl_helper != NULL) stream_fact_decl_helper->free(stream_fact_decl_helper);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end fact_decl */

/** 
 * $ANTLR start fact_decl_helper
 * ANML/base/antlr/ANML.g:405:1: fact_decl_helper : ( ( ref Semi )=> ref Semi -> ^( TimedStmt[$ref.tree] ^( DefinitePoint[$ref.tree] ^( TStart Start ) ) ^( Assign[$Semi] ref True ) ) | ( ( NotLog | NotBit ) ref Semi )=> (n= NotLog | n= NotBit ) ref Semi -> ^( TimedStmt[$n] ^( DefinitePoint[$n] ^( TStart Start ) ) ^( Assign[$Semi] ref False ) ) | ref (o= EqualLog | o= Equal ) expr Semi -> ^( TimedStmt[$ref.tree] ^( DefinitePoint[$ref.tree] ^( TStart Start ) ) ^( Assign[$o] ref expr ) ) | Semi );
 */
static ANMLParser_fact_decl_helper_return
fact_decl_helper(pANMLParser ctx)
{   
    ANMLParser_fact_decl_helper_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    n;
    pANTLR3_COMMON_TOKEN    o;
    pANTLR3_COMMON_TOKEN    Semi106;
    pANTLR3_COMMON_TOKEN    Semi108;
    pANTLR3_COMMON_TOKEN    Semi111;
    pANTLR3_COMMON_TOKEN    Semi112;
    ANMLParser_ref_return ref105;
    #undef	RETURN_TYPE_ref105
    #define	RETURN_TYPE_ref105 ANMLParser_ref_return

    ANMLParser_ref_return ref107;
    #undef	RETURN_TYPE_ref107
    #define	RETURN_TYPE_ref107 ANMLParser_ref_return

    ANMLParser_ref_return ref109;
    #undef	RETURN_TYPE_ref109
    #define	RETURN_TYPE_ref109 ANMLParser_ref_return

    ANMLParser_expr_return expr110;
    #undef	RETURN_TYPE_expr110
    #define	RETURN_TYPE_expr110 ANMLParser_expr_return

    pANTLR3_BASE_TREE n_tree;
    pANTLR3_BASE_TREE o_tree;
    pANTLR3_BASE_TREE Semi106_tree;
    pANTLR3_BASE_TREE Semi108_tree;
    pANTLR3_BASE_TREE Semi111_tree;
    pANTLR3_BASE_TREE Semi112_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EqualLog;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Semi;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NotBit;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Equal;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NotLog;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ref;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    n       = NULL;
    o       = NULL;
    Semi106       = NULL;
    Semi108       = NULL;
    Semi111       = NULL;
    Semi112       = NULL;
    ref105.tree = NULL;

    ref107.tree = NULL;

    ref109.tree = NULL;

    expr110.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    n_tree   = NULL;
    o_tree   = NULL;
    Semi106_tree   = NULL;
    Semi108_tree   = NULL;
    Semi111_tree   = NULL;
    Semi112_tree   = NULL;

    stream_EqualLog   = NULL;
    #define CREATE_stream_EqualLog  if (stream_EqualLog == NULL) {stream_EqualLog = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EqualLog"); } 
    stream_Semi   = NULL;
    #define CREATE_stream_Semi  if (stream_Semi == NULL) {stream_Semi = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Semi"); } 
    stream_NotBit   = NULL;
    #define CREATE_stream_NotBit  if (stream_NotBit == NULL) {stream_NotBit = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NotBit"); } 
    stream_Equal   = NULL;
    #define CREATE_stream_Equal  if (stream_Equal == NULL) {stream_Equal = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Equal"); } 
    stream_NotLog   = NULL;
    #define CREATE_stream_NotLog  if (stream_NotLog == NULL) {stream_NotLog = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NotLog"); } 
    stream_ref   = NULL;
    #define CREATE_stream_ref  if (stream_ref == NULL) {stream_ref = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ref"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:405:17: ( ( ref Semi )=> ref Semi -> ^( TimedStmt[$ref.tree] ^( DefinitePoint[$ref.tree] ^( TStart Start ) ) ^( Assign[$Semi] ref True ) ) | ( ( NotLog | NotBit ) ref Semi )=> (n= NotLog | n= NotBit ) ref Semi -> ^( TimedStmt[$n] ^( DefinitePoint[$n] ^( TStart Start ) ) ^( Assign[$Semi] ref False ) ) | ref (o= EqualLog | o= Equal ) expr Semi -> ^( TimedStmt[$ref.tree] ^( DefinitePoint[$ref.tree] ^( TStart Start ) ) ^( Assign[$o] ref expr ) ) | Semi )
            
            ANTLR3_UINT32 alt37;

            alt37=4;


            {
                int LA37_0 = LA(1);
                if ( (LA37_0 == ID) ) 
                {

                    {
                        int LA37_1 = LA(2);
                        if ( (((LA37_1 >= EqualLog) && (LA37_1 <= Equal))) ) 
                        {
                            alt37=3;
                        }
                        else if ( (LA37_1 == Semi) && (synpred1_ANML(ctx))) 
                        {
                            alt37=1;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 37;
                            EXCEPTION->state        = 1;


                            goto rulefact_decl_helperEx;
                        }
                    }
                }
                else if ( (LA37_0 == NotLog) && (synpred2_ANML(ctx))) 
                {
                    alt37=2;
                }
                else if ( (LA37_0 == NotBit) && (synpred2_ANML(ctx))) 
                {
                    alt37=2;
                }
                else if ( (LA37_0 == Semi) ) 
                {
                    alt37=4;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 37;
                    EXCEPTION->state        = 0;


                    goto rulefact_decl_helperEx;
                }
            }
            switch (alt37) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:406:2: ( ref Semi )=> ref Semi
        	    {
        	        FOLLOWPUSH(FOLLOW_ref_in_fact_decl_helper1961);
        	        ref105=ref(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefact_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ref; stream_ref->add(stream_ref, ref105.tree, NULL); }
        	        Semi106 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_fact_decl_helper1963); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefact_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Semi; stream_Semi->add(stream_Semi, Semi106, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : ref
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 407:4: -> ^( TimedStmt[$ref.tree] ^( DefinitePoint[$ref.tree] ^( TStart Start ) ) ^( Assign[$Semi] ref True ) )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:407:7: ^( TimedStmt[$ref.tree] ^( DefinitePoint[$ref.tree] ^( TStart Start ) ) ^( Assign[$Semi] ref True ) )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, TimedStmt, TOKTEXT((ref105.tree)))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TimedStmt, (pANTLR3_UINT8)(ref105.tree))
        	        	        #endif
        	        	        , root_1));

        	        	        // ANML/base/antlr/ANML.g:407:30: ^( DefinitePoint[$ref.tree] ^( TStart Start ) )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, DefinitePoint, TOKTEXT((ref105.tree)))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DefinitePoint, (pANTLR3_UINT8)(ref105.tree))
        	        	            #endif
        	        	            , root_2));

        	        	            // ANML/base/antlr/ANML.g:407:57: ^( TStart Start )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Start, (pANTLR3_UINT8)"Start"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        // ANML/base/antlr/ANML.g:407:74: ^( Assign[$Semi] ref True )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Assign, TOKTEXT(Semi106))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Assign, (pANTLR3_UINT8)Semi106)
        	        	            #endif
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_ref == NULL ? NULL : stream_ref->nextTree(stream_ref));
        	        	            ADAPTOR->addChild(ADAPTOR, root_2, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, True, (pANTLR3_UINT8)"True"));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:408:4: ( ( NotLog | NotBit ) ref Semi )=> (n= NotLog | n= NotBit ) ref Semi
        	    {

        	        // ANML/base/antlr/ANML.g:408:33: (n= NotLog | n= NotBit )
        	        {
        	            int alt35=2;

        	            {
        	                int LA35_0 = LA(1);
        	                if ( (LA35_0 == NotLog) ) 
        	                {
        	                    alt35=1;
        	                }
        	                else if ( (LA35_0 == NotBit) ) 
        	                {
        	                    alt35=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 35;
        	                    EXCEPTION->state        = 0;


        	                    goto rulefact_decl_helperEx;
        	                }
        	            }
        	            switch (alt35) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:408:34: n= NotLog
        	        	    {
        	        	        n = (pANTLR3_COMMON_TOKEN) MATCHT(NotLog, &FOLLOW_NotLog_in_fact_decl_helper2014); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefact_decl_helperEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_NotLog; stream_NotLog->add(stream_NotLog, n, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:408:43: n= NotBit
        	        	    {
        	        	        n = (pANTLR3_COMMON_TOKEN) MATCHT(NotBit, &FOLLOW_NotBit_in_fact_decl_helper2018); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefact_decl_helperEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_NotBit; stream_NotBit->add(stream_NotBit, n, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        FOLLOWPUSH(FOLLOW_ref_in_fact_decl_helper2021);
        	        ref107=ref(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefact_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ref; stream_ref->add(stream_ref, ref107.tree, NULL); }
        	        Semi108 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_fact_decl_helper2023); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefact_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Semi; stream_Semi->add(stream_Semi, Semi108, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : ref
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 409:4: -> ^( TimedStmt[$n] ^( DefinitePoint[$n] ^( TStart Start ) ) ^( Assign[$Semi] ref False ) )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:409:7: ^( TimedStmt[$n] ^( DefinitePoint[$n] ^( TStart Start ) ) ^( Assign[$Semi] ref False ) )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, TimedStmt, TOKTEXT(n))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TimedStmt, (pANTLR3_UINT8)n)
        	        	        #endif
        	        	        , root_1));

        	        	        // ANML/base/antlr/ANML.g:409:23: ^( DefinitePoint[$n] ^( TStart Start ) )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, DefinitePoint, TOKTEXT(n))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DefinitePoint, (pANTLR3_UINT8)n)
        	        	            #endif
        	        	            , root_2));

        	        	            // ANML/base/antlr/ANML.g:409:43: ^( TStart Start )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Start, (pANTLR3_UINT8)"Start"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        // ANML/base/antlr/ANML.g:409:60: ^( Assign[$Semi] ref False )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Assign, TOKTEXT(Semi108))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Assign, (pANTLR3_UINT8)Semi108)
        	        	            #endif
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_ref == NULL ? NULL : stream_ref->nextTree(stream_ref));
        	        	            ADAPTOR->addChild(ADAPTOR, root_2, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, False, (pANTLR3_UINT8)"False"));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:410:4: ref (o= EqualLog | o= Equal ) expr Semi
        	    {
        	        FOLLOWPUSH(FOLLOW_ref_in_fact_decl_helper2058);
        	        ref109=ref(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefact_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ref; stream_ref->add(stream_ref, ref109.tree, NULL); }

        	        // ANML/base/antlr/ANML.g:410:8: (o= EqualLog | o= Equal )
        	        {
        	            int alt36=2;

        	            {
        	                int LA36_0 = LA(1);
        	                if ( (LA36_0 == EqualLog) ) 
        	                {
        	                    alt36=1;
        	                }
        	                else if ( (LA36_0 == Equal) ) 
        	                {
        	                    alt36=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 36;
        	                    EXCEPTION->state        = 0;


        	                    goto rulefact_decl_helperEx;
        	                }
        	            }
        	            switch (alt36) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:410:9: o= EqualLog
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(EqualLog, &FOLLOW_EqualLog_in_fact_decl_helper2063); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefact_decl_helperEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_EqualLog; stream_EqualLog->add(stream_EqualLog, o, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:410:20: o= Equal
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Equal, &FOLLOW_Equal_in_fact_decl_helper2067); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefact_decl_helperEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Equal; stream_Equal->add(stream_Equal, o, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        FOLLOWPUSH(FOLLOW_expr_in_fact_decl_helper2070);
        	        expr110=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefact_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr110.tree, NULL); }
        	        Semi111 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_fact_decl_helper2072); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefact_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Semi; stream_Semi->add(stream_Semi, Semi111, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : ref, expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 411:4: -> ^( TimedStmt[$ref.tree] ^( DefinitePoint[$ref.tree] ^( TStart Start ) ) ^( Assign[$o] ref expr ) )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:411:7: ^( TimedStmt[$ref.tree] ^( DefinitePoint[$ref.tree] ^( TStart Start ) ) ^( Assign[$o] ref expr ) )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, TimedStmt, TOKTEXT((ref109.tree)))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TimedStmt, (pANTLR3_UINT8)(ref109.tree))
        	        	        #endif
        	        	        , root_1));

        	        	        // ANML/base/antlr/ANML.g:411:30: ^( DefinitePoint[$ref.tree] ^( TStart Start ) )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, DefinitePoint, TOKTEXT((ref109.tree)))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DefinitePoint, (pANTLR3_UINT8)(ref109.tree))
        	        	            #endif
        	        	            , root_2));

        	        	            // ANML/base/antlr/ANML.g:411:57: ^( TStart Start )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Start, (pANTLR3_UINT8)"Start"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        // ANML/base/antlr/ANML.g:411:74: ^( Assign[$o] ref expr )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Assign, TOKTEXT(o))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Assign, (pANTLR3_UINT8)o)
        	        	            #endif
        	        	            , root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_ref == NULL ? NULL : stream_ref->nextTree(stream_ref));
        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // ANML/base/antlr/ANML.g:412:4: Semi
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Semi112 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_fact_decl_helper2107); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefact_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefact_decl_helperEx; /* Prevent compiler warnings */
    rulefact_decl_helperEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_EqualLog != NULL) stream_EqualLog->free(stream_EqualLog);
        if (stream_Semi != NULL) stream_Semi->free(stream_Semi);
        if (stream_NotBit != NULL) stream_NotBit->free(stream_NotBit);
        if (stream_Equal != NULL) stream_Equal->free(stream_Equal);
        if (stream_NotLog != NULL) stream_NotLog->free(stream_NotLog);
        if (stream_ref != NULL) stream_ref->free(stream_ref);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end fact_decl_helper */

/** 
 * $ANTLR start goal_decl
 * ANML/base/antlr/ANML.g:415:1: goal_decl : Goal ( LeftC ( goal_decl_helper )* RightC -> ( goal_decl_helper )* | goal_decl_helper -> goal_decl_helper ) ;
 */
static ANMLParser_goal_decl_return
goal_decl(pANMLParser ctx)
{   
    ANMLParser_goal_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Goal113;
    pANTLR3_COMMON_TOKEN    LeftC114;
    pANTLR3_COMMON_TOKEN    RightC116;
    ANMLParser_goal_decl_helper_return goal_decl_helper115;
    #undef	RETURN_TYPE_goal_decl_helper115
    #define	RETURN_TYPE_goal_decl_helper115 ANMLParser_goal_decl_helper_return

    ANMLParser_goal_decl_helper_return goal_decl_helper117;
    #undef	RETURN_TYPE_goal_decl_helper117
    #define	RETURN_TYPE_goal_decl_helper117 ANMLParser_goal_decl_helper_return

    pANTLR3_BASE_TREE Goal113_tree;
    pANTLR3_BASE_TREE LeftC114_tree;
    pANTLR3_BASE_TREE RightC116_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftC;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightC;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Goal;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_goal_decl_helper;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Goal113       = NULL;
    LeftC114       = NULL;
    RightC116       = NULL;
    goal_decl_helper115.tree = NULL;

    goal_decl_helper117.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Goal113_tree   = NULL;
    LeftC114_tree   = NULL;
    RightC116_tree   = NULL;

    stream_LeftC   = NULL;
    #define CREATE_stream_LeftC  if (stream_LeftC == NULL) {stream_LeftC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftC"); } 
    stream_RightC   = NULL;
    #define CREATE_stream_RightC  if (stream_RightC == NULL) {stream_RightC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightC"); } 
    stream_Goal   = NULL;
    #define CREATE_stream_Goal  if (stream_Goal == NULL) {stream_Goal = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Goal"); } 
    stream_goal_decl_helper   = NULL;
    #define CREATE_stream_goal_decl_helper  if (stream_goal_decl_helper == NULL) {stream_goal_decl_helper = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule goal_decl_helper"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:415:11: ( Goal ( LeftC ( goal_decl_helper )* RightC -> ( goal_decl_helper )* | goal_decl_helper -> goal_decl_helper ) )
        // ANML/base/antlr/ANML.g:415:13: Goal ( LeftC ( goal_decl_helper )* RightC -> ( goal_decl_helper )* | goal_decl_helper -> goal_decl_helper )
        {
            Goal113 = (pANTLR3_COMMON_TOKEN) MATCHT(Goal, &FOLLOW_Goal_in_goal_decl2117); 
            if  (HASEXCEPTION())
            {
                goto rulegoal_declEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Goal; stream_Goal->add(stream_Goal, Goal113, NULL); }


            // ANML/base/antlr/ANML.g:416:2: ( LeftC ( goal_decl_helper )* RightC -> ( goal_decl_helper )* | goal_decl_helper -> goal_decl_helper )
            {
                int alt39=2;

                {
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == LeftC) ) 
                    {
                        alt39=1;
                    }
                    else if ( (LA39_0 == ID || LA39_0 == Semi || LA39_0 == LeftB || LA39_0 == LeftP || LA39_0 == Duration || ((LA39_0 >= NotLog) && (LA39_0 <= NotBit)) || LA39_0 == Contains || ((LA39_0 >= ForAll) && (LA39_0 <= Exists)) || LA39_0 == Dots || LA39_0 == Minus || ((LA39_0 >= Unordered) && (LA39_0 <= End)) || ((LA39_0 >= INT) && (LA39_0 <= Infinity))) ) 
                    {
                        alt39=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 39;
                        EXCEPTION->state        = 0;


                        goto rulegoal_declEx;
                    }
                }
                switch (alt39) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:416:4: LeftC ( goal_decl_helper )* RightC
            	    {
            	        LeftC114 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftC, &FOLLOW_LeftC_in_goal_decl2123); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulegoal_declEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftC; stream_LeftC->add(stream_LeftC, LeftC114, NULL); }


            	        // ANML/base/antlr/ANML.g:416:10: ( goal_decl_helper )*

            	        for (;;)
            	        {
            	            int alt38=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA38_0 = LA(1);
            	                if ( (LA38_0 == ID || LA38_0 == Semi || LA38_0 == LeftB || LA38_0 == LeftP || LA38_0 == Duration || ((LA38_0 >= NotLog) && (LA38_0 <= NotBit)) || LA38_0 == Contains || ((LA38_0 >= ForAll) && (LA38_0 <= Exists)) || LA38_0 == Dots || LA38_0 == Minus || ((LA38_0 >= Unordered) && (LA38_0 <= End)) || ((LA38_0 >= INT) && (LA38_0 <= Infinity))) ) 
            	                {
            	                    alt38=1;
            	                }

            	            }
            	            switch (alt38) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:416:10: goal_decl_helper
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_goal_decl_helper_in_goal_decl2125);
            	        	        goal_decl_helper115=goal_decl_helper(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulegoal_declEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_goal_decl_helper; stream_goal_decl_helper->add(stream_goal_decl_helper, goal_decl_helper115.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop38;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop38: ; /* Jump out to here if this rule does not match */

            	        RightC116 = (pANTLR3_COMMON_TOKEN) MATCHT(RightC, &FOLLOW_RightC_in_goal_decl2128); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulegoal_declEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_RightC; stream_RightC->add(stream_RightC, RightC116, NULL); }


            	         
            	        /* AST REWRITE
            	         * elements          : goal_decl_helper
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 417:4: -> ( goal_decl_helper )*
            	        	{
            	        	    // ANML/base/antlr/ANML.g:417:7: ( goal_decl_helper )*
            	        	    {
            	        	    	while ( (stream_goal_decl_helper != NULL && stream_goal_decl_helper->hasNext(stream_goal_decl_helper))  )
            	        	    	{
            	        	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_goal_decl_helper == NULL ? NULL : stream_goal_decl_helper->nextTree(stream_goal_decl_helper));

            	        	    	}
            	        	    	if ( stream_goal_decl_helper != NULL) stream_goal_decl_helper->reset(stream_goal_decl_helper);

            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // ANML/base/antlr/ANML.g:418:4: goal_decl_helper
            	    {
            	        FOLLOWPUSH(FOLLOW_goal_decl_helper_in_goal_decl2141);
            	        goal_decl_helper117=goal_decl_helper(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulegoal_declEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_goal_decl_helper; stream_goal_decl_helper->add(stream_goal_decl_helper, goal_decl_helper117.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : goal_decl_helper
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 419:4: -> goal_decl_helper
            	        	{
            	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_goal_decl_helper == NULL ? NULL : stream_goal_decl_helper->nextTree(stream_goal_decl_helper));

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulegoal_declEx; /* Prevent compiler warnings */
    rulegoal_declEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LeftC != NULL) stream_LeftC->free(stream_LeftC);
        if (stream_RightC != NULL) stream_RightC->free(stream_RightC);
        if (stream_Goal != NULL) stream_Goal->free(stream_Goal);
        if (stream_goal_decl_helper != NULL) stream_goal_decl_helper->free(stream_goal_decl_helper);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end goal_decl */

/** 
 * $ANTLR start goal_decl_helper
 * ANML/base/antlr/ANML.g:423:1: goal_decl_helper : ( expr Semi -> ^( TimedStmt[$expr.tree] ^( DefinitePoint[$expr.tree] ^( TStart End ) ) expr ) | Semi );
 */
static ANMLParser_goal_decl_helper_return
goal_decl_helper(pANMLParser ctx)
{   
    ANMLParser_goal_decl_helper_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Semi119;
    pANTLR3_COMMON_TOKEN    Semi120;
    ANMLParser_expr_return expr118;
    #undef	RETURN_TYPE_expr118
    #define	RETURN_TYPE_expr118 ANMLParser_expr_return

    pANTLR3_BASE_TREE Semi119_tree;
    pANTLR3_BASE_TREE Semi120_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Semi;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Semi119       = NULL;
    Semi120       = NULL;
    expr118.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Semi119_tree   = NULL;
    Semi120_tree   = NULL;

    stream_Semi   = NULL;
    #define CREATE_stream_Semi  if (stream_Semi == NULL) {stream_Semi = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Semi"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:423:17: ( expr Semi -> ^( TimedStmt[$expr.tree] ^( DefinitePoint[$expr.tree] ^( TStart End ) ) expr ) | Semi )
            
            ANTLR3_UINT32 alt40;

            alt40=2;


            {
                int LA40_0 = LA(1);
                if ( (LA40_0 == ID || LA40_0 == LeftB || LA40_0 == LeftP || LA40_0 == Duration || ((LA40_0 >= NotLog) && (LA40_0 <= NotBit)) || LA40_0 == Contains || ((LA40_0 >= ForAll) && (LA40_0 <= Exists)) || LA40_0 == Dots || LA40_0 == Minus || ((LA40_0 >= Unordered) && (LA40_0 <= End)) || ((LA40_0 >= INT) && (LA40_0 <= Infinity))) ) 
                {
                    alt40=1;
                }
                else if ( (LA40_0 == Semi) ) 
                {
                    alt40=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 40;
                    EXCEPTION->state        = 0;


                    goto rulegoal_decl_helperEx;
                }
            }
            switch (alt40) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:424:2: expr Semi
        	    {
        	        FOLLOWPUSH(FOLLOW_expr_in_goal_decl_helper2162);
        	        expr118=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulegoal_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr118.tree, NULL); }
        	        Semi119 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_goal_decl_helper2164); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulegoal_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Semi; stream_Semi->add(stream_Semi, Semi119, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 425:4: -> ^( TimedStmt[$expr.tree] ^( DefinitePoint[$expr.tree] ^( TStart End ) ) expr )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:425:7: ^( TimedStmt[$expr.tree] ^( DefinitePoint[$expr.tree] ^( TStart End ) ) expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, TimedStmt, TOKTEXT((expr118.tree)))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TimedStmt, (pANTLR3_UINT8)(expr118.tree))
        	        	        #endif
        	        	        , root_1));

        	        	        // ANML/base/antlr/ANML.g:425:31: ^( DefinitePoint[$expr.tree] ^( TStart End ) )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	            #if 1 == 2
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, DefinitePoint, TOKTEXT((expr118.tree)))
        	        	            #else
        	        	            	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DefinitePoint, (pANTLR3_UINT8)(expr118.tree))
        	        	            #endif
        	        	            , root_2));

        	        	            // ANML/base/antlr/ANML.g:425:59: ^( TStart End )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, End, (pANTLR3_UINT8)"End"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:426:4: Semi
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Semi120 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_goal_decl_helper2192); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulegoal_decl_helperEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulegoal_decl_helperEx; /* Prevent compiler warnings */
    rulegoal_decl_helperEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Semi != NULL) stream_Semi->free(stream_Semi);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end goal_decl_helper */

/** 
 * $ANTLR start stmt
 * ANML/base/antlr/ANML.g:431:1: stmt : ( ( stmt_primitive )=> stmt_primitive | ( stmt_block )=> stmt_block | ( stmt_timed )=> stmt_timed | stmt_contains | stmt_when | stmt_forall | stmt_exists );
 */
static ANMLParser_stmt_return
stmt(pANMLParser ctx)
{   
    ANMLParser_stmt_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_stmt_primitive_return stmt_primitive121;
    #undef	RETURN_TYPE_stmt_primitive121
    #define	RETURN_TYPE_stmt_primitive121 ANMLParser_stmt_primitive_return

    ANMLParser_stmt_block_return stmt_block122;
    #undef	RETURN_TYPE_stmt_block122
    #define	RETURN_TYPE_stmt_block122 ANMLParser_stmt_block_return

    ANMLParser_stmt_timed_return stmt_timed123;
    #undef	RETURN_TYPE_stmt_timed123
    #define	RETURN_TYPE_stmt_timed123 ANMLParser_stmt_timed_return

    ANMLParser_stmt_contains_return stmt_contains124;
    #undef	RETURN_TYPE_stmt_contains124
    #define	RETURN_TYPE_stmt_contains124 ANMLParser_stmt_contains_return

    ANMLParser_stmt_when_return stmt_when125;
    #undef	RETURN_TYPE_stmt_when125
    #define	RETURN_TYPE_stmt_when125 ANMLParser_stmt_when_return

    ANMLParser_stmt_forall_return stmt_forall126;
    #undef	RETURN_TYPE_stmt_forall126
    #define	RETURN_TYPE_stmt_forall126 ANMLParser_stmt_forall_return

    ANMLParser_stmt_exists_return stmt_exists127;
    #undef	RETURN_TYPE_stmt_exists127
    #define	RETURN_TYPE_stmt_exists127 ANMLParser_stmt_exists_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    stmt_primitive121.tree = NULL;

    stmt_block122.tree = NULL;

    stmt_timed123.tree = NULL;

    stmt_contains124.tree = NULL;

    stmt_when125.tree = NULL;

    stmt_forall126.tree = NULL;

    stmt_exists127.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:431:5: ( ( stmt_primitive )=> stmt_primitive | ( stmt_block )=> stmt_block | ( stmt_timed )=> stmt_timed | stmt_contains | stmt_when | stmt_forall | stmt_exists )
            
            ANTLR3_UINT32 alt41;

            alt41=7;

            alt41 = cdfa41.predict(ctx, RECOGNIZER, ISTREAM, &cdfa41);
            if  (HASEXCEPTION())
            {
                goto rulestmtEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt41) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:432:2: ( stmt_primitive )=> stmt_primitive
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_stmt_primitive_in_stmt2215);
        	        stmt_primitive121=stmt_primitive(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmtEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stmt_primitive121.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:433:4: ( stmt_block )=> stmt_block
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_stmt_block_in_stmt2225);
        	        stmt_block122=stmt_block(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmtEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stmt_block122.tree);

        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:434:4: ( stmt_timed )=> stmt_timed
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_stmt_timed_in_stmt2235);
        	        stmt_timed123=stmt_timed(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmtEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stmt_timed123.tree);

        	    }
        	    break;
        	case 4:
        	    // ANML/base/antlr/ANML.g:435:4: stmt_contains
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_stmt_contains_in_stmt2240);
        	        stmt_contains124=stmt_contains(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmtEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stmt_contains124.tree);

        	    }
        	    break;
        	case 5:
        	    // ANML/base/antlr/ANML.g:436:4: stmt_when
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_stmt_when_in_stmt2245);
        	        stmt_when125=stmt_when(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmtEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stmt_when125.tree);

        	    }
        	    break;
        	case 6:
        	    // ANML/base/antlr/ANML.g:437:4: stmt_forall
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_stmt_forall_in_stmt2250);
        	        stmt_forall126=stmt_forall(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmtEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stmt_forall126.tree);

        	    }
        	    break;
        	case 7:
        	    // ANML/base/antlr/ANML.g:438:4: stmt_exists
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_stmt_exists_in_stmt2255);
        	        stmt_exists127=stmt_exists(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmtEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stmt_exists127.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestmtEx; /* Prevent compiler warnings */
    rulestmtEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt */

/** 
 * $ANTLR start stmt_primitive
 * ANML/base/antlr/ANML.g:441:1: stmt_primitive : ( ( expr Semi )=> expr Semi | ( stmt_chain Semi )=> stmt_chain Semi | ( stmt_delta_chain Semi )=> stmt_delta_chain Semi | ( stmt_timeless Semi )=> stmt_timeless Semi | Semi -> Skip );
 */
static ANMLParser_stmt_primitive_return
stmt_primitive(pANMLParser ctx)
{   
    ANMLParser_stmt_primitive_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Semi129;
    pANTLR3_COMMON_TOKEN    Semi131;
    pANTLR3_COMMON_TOKEN    Semi133;
    pANTLR3_COMMON_TOKEN    Semi135;
    pANTLR3_COMMON_TOKEN    Semi136;
    ANMLParser_expr_return expr128;
    #undef	RETURN_TYPE_expr128
    #define	RETURN_TYPE_expr128 ANMLParser_expr_return

    ANMLParser_stmt_chain_return stmt_chain130;
    #undef	RETURN_TYPE_stmt_chain130
    #define	RETURN_TYPE_stmt_chain130 ANMLParser_stmt_chain_return

    ANMLParser_stmt_delta_chain_return stmt_delta_chain132;
    #undef	RETURN_TYPE_stmt_delta_chain132
    #define	RETURN_TYPE_stmt_delta_chain132 ANMLParser_stmt_delta_chain_return

    ANMLParser_stmt_timeless_return stmt_timeless134;
    #undef	RETURN_TYPE_stmt_timeless134
    #define	RETURN_TYPE_stmt_timeless134 ANMLParser_stmt_timeless_return

    pANTLR3_BASE_TREE Semi129_tree;
    pANTLR3_BASE_TREE Semi131_tree;
    pANTLR3_BASE_TREE Semi133_tree;
    pANTLR3_BASE_TREE Semi135_tree;
    pANTLR3_BASE_TREE Semi136_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Semi;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Semi129       = NULL;
    Semi131       = NULL;
    Semi133       = NULL;
    Semi135       = NULL;
    Semi136       = NULL;
    expr128.tree = NULL;

    stmt_chain130.tree = NULL;

    stmt_delta_chain132.tree = NULL;

    stmt_timeless134.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Semi129_tree   = NULL;
    Semi131_tree   = NULL;
    Semi133_tree   = NULL;
    Semi135_tree   = NULL;
    Semi136_tree   = NULL;

    stream_Semi   = NULL;
    #define CREATE_stream_Semi  if (stream_Semi == NULL) {stream_Semi = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Semi"); } 

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:441:15: ( ( expr Semi )=> expr Semi | ( stmt_chain Semi )=> stmt_chain Semi | ( stmt_delta_chain Semi )=> stmt_delta_chain Semi | ( stmt_timeless Semi )=> stmt_timeless Semi | Semi -> Skip )
            
            ANTLR3_UINT32 alt42;

            alt42=5;

            alt42 = cdfa42.predict(ctx, RECOGNIZER, ISTREAM, &cdfa42);
            if  (HASEXCEPTION())
            {
                goto rulestmt_primitiveEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt42) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:442:2: ( expr Semi )=> expr Semi
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expr_in_stmt_primitive2272);
        	        expr128=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr128.tree);
        	        Semi129 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_stmt_primitive2274); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:443:6: ( stmt_chain Semi )=> stmt_chain Semi
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_stmt_chain_in_stmt_primitive2289);
        	        stmt_chain130=stmt_chain(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stmt_chain130.tree);
        	        Semi131 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_stmt_primitive2291); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:444:4: ( stmt_delta_chain Semi )=> stmt_delta_chain Semi
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_stmt_delta_chain_in_stmt_primitive2304);
        	        stmt_delta_chain132=stmt_delta_chain(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stmt_delta_chain132.tree);
        	        Semi133 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_stmt_primitive2306); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 4:
        	    // ANML/base/antlr/ANML.g:445:6: ( stmt_timeless Semi )=> stmt_timeless Semi
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_stmt_timeless_in_stmt_primitive2321);
        	        stmt_timeless134=stmt_timeless(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stmt_timeless134.tree);
        	        Semi135 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_stmt_primitive2323); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 5:
        	    // ANML/base/antlr/ANML.g:446:6: Semi
        	    {
        	        Semi136 = (pANTLR3_COMMON_TOKEN) MATCHT(Semi, &FOLLOW_Semi_in_stmt_primitive2331); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Semi; stream_Semi->add(stream_Semi, Semi136, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 446:11: -> Skip
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Skip, (pANTLR3_UINT8)"Skip"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_primitiveEx; /* Prevent compiler warnings */
    rulestmt_primitiveEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Semi != NULL) stream_Semi->free(stream_Semi);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_primitive */

/** 
 * $ANTLR start stmt_block
 * ANML/base/antlr/ANML.g:450:1: stmt_block : LeftC (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )* RightC -> ^( Block[$LeftC] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) ) ;
 */
static ANMLParser_stmt_block_return
stmt_block(pANMLParser ctx)
{   
    ANMLParser_stmt_block_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LeftC137;
    pANTLR3_COMMON_TOKEN    RightC138;
    pANTLR3_VECTOR    list_t;
    pANTLR3_VECTOR    list_c;
    pANTLR3_VECTOR    list_f;
    pANTLR3_VECTOR    list_a;
    pANTLR3_VECTOR    list_s;
    pANTLR3_VECTOR    list_ps;
    ANMLParser_type_decl_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t ANMLParser_type_decl_return

    ANMLParser_const_decl_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c ANMLParser_const_decl_return

    ANMLParser_fluent_decl_return f;
    #undef	RETURN_TYPE_f
    #define	RETURN_TYPE_f ANMLParser_fluent_decl_return

    ANMLParser_action_decl_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a ANMLParser_action_decl_return

    ANMLParser_stmt_return s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s ANMLParser_stmt_return

    ANMLParser_problem_stmt_return ps;
    #undef	RETURN_TYPE_ps
    #define	RETURN_TYPE_ps ANMLParser_problem_stmt_return

    pANTLR3_BASE_TREE LeftC137_tree;
    pANTLR3_BASE_TREE RightC138_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftC;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightC;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_problem_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fluent_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_const_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_action_decl;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LeftC137       = NULL;
    RightC138       = NULL;
    list_t     = NULL;
    list_c     = NULL;
    list_f     = NULL;
    list_a     = NULL;
    list_s     = NULL;
    list_ps     = NULL;
    t.tree = NULL;

    c.tree = NULL;

    f.tree = NULL;

    a.tree = NULL;

    s.tree = NULL;

    ps.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LeftC137_tree   = NULL;
    RightC138_tree   = NULL;

    stream_LeftC   = NULL;
    #define CREATE_stream_LeftC  if (stream_LeftC == NULL) {stream_LeftC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftC"); } 
    stream_RightC   = NULL;
    #define CREATE_stream_RightC  if (stream_RightC == NULL) {stream_RightC = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightC"); } 
    stream_type_decl   = NULL;
    #define CREATE_stream_type_decl  if (stream_type_decl == NULL) {stream_type_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_decl"); }
    stream_stmt   = NULL;
    #define CREATE_stream_stmt  if (stream_stmt == NULL) {stream_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt"); }
    stream_problem_stmt   = NULL;
    #define CREATE_stream_problem_stmt  if (stream_problem_stmt == NULL) {stream_problem_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule problem_stmt"); }
    stream_fluent_decl   = NULL;
    #define CREATE_stream_fluent_decl  if (stream_fluent_decl == NULL) {stream_fluent_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule fluent_decl"); }
    stream_const_decl   = NULL;
    #define CREATE_stream_const_decl  if (stream_const_decl == NULL) {stream_const_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule const_decl"); }
    stream_action_decl   = NULL;
    #define CREATE_stream_action_decl  if (stream_action_decl == NULL) {stream_action_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule action_decl"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:450:11: ( LeftC (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )* RightC -> ^( Block[$LeftC] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) ) )
        // ANML/base/antlr/ANML.g:451:2: LeftC (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )* RightC
        {
            LeftC137 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftC, &FOLLOW_LeftC_in_stmt_block2346); 
            if  (HASEXCEPTION())
            {
                goto rulestmt_blockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_LeftC; stream_LeftC->add(stream_LeftC, LeftC137, NULL); }


            // ANML/base/antlr/ANML.g:452:3: (t+= type_decl | c+= const_decl | f+= fluent_decl | a+= action_decl | s+= stmt | ps+= problem_stmt )*

            for (;;)
            {
                int alt43=7;
                switch ( LA(1) ) 
                {
                case Type:
                	{
                		alt43=1;
                	}
                    break;
                case Constant:
                	{
                		alt43=2;
                	}
                    break;
                case Fluent:
                case Variable:
                case Function:
                case Predicate:
                	{
                		alt43=3;
                	}
                    break;
                case Action:
                	{
                		alt43=4;
                	}
                    break;
                case When:
                case ID:
                case Semi:
                case LeftC:
                case LeftB:
                case LeftP:
                case Duration:
                case NotLog:
                case NotBit:
                case Contains:
                case ForAll:
                case Exists:
                case Delta:
                case Dots:
                case Minus:
                case Unordered:
                case Ordered:
                case Start:
                case End:
                case INT:
                case FLOAT:
                case STRING:
                case True:
                case False:
                case Infinity:
                	{
                		alt43=5;
                	}
                    break;
                case Fact:
                case Goal:
                	{
                		alt43=6;
                	}
                    break;

                }

                switch (alt43) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:452:5: t+= type_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_type_decl_in_stmt_block2354);
            	        t=type_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestmt_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_type_decl; stream_type_decl->add(stream_type_decl, t.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_t == NULL)
            	        {
            	            list_t=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_t->add(list_t, t.tree, NULL);

            	    }
            	    break;
            	case 2:
            	    // ANML/base/antlr/ANML.g:453:5: c+= const_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_const_decl_in_stmt_block2363);
            	        c=const_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestmt_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_const_decl; stream_const_decl->add(stream_const_decl, c.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_c == NULL)
            	        {
            	            list_c=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_c->add(list_c, c.tree, NULL);

            	    }
            	    break;
            	case 3:
            	    // ANML/base/antlr/ANML.g:454:5: f+= fluent_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_fluent_decl_in_stmt_block2372);
            	        f=fluent_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestmt_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_fluent_decl; stream_fluent_decl->add(stream_fluent_decl, f.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_f == NULL)
            	        {
            	            list_f=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_f->add(list_f, f.tree, NULL);

            	    }
            	    break;
            	case 4:
            	    // ANML/base/antlr/ANML.g:455:5: a+= action_decl
            	    {
            	        FOLLOWPUSH(FOLLOW_action_decl_in_stmt_block2381);
            	        a=action_decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestmt_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_action_decl; stream_action_decl->add(stream_action_decl, a.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_a == NULL)
            	        {
            	            list_a=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_a->add(list_a, a.tree, NULL);

            	    }
            	    break;
            	case 5:
            	    // ANML/base/antlr/ANML.g:456:5: s+= stmt
            	    {
            	        FOLLOWPUSH(FOLLOW_stmt_in_stmt_block2389);
            	        s=stmt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestmt_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, s.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_s == NULL)
            	        {
            	            list_s=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_s->add(list_s, s.tree, NULL);

            	    }
            	    break;
            	case 6:
            	    // ANML/base/antlr/ANML.g:457:5: ps+= problem_stmt
            	    {
            	        FOLLOWPUSH(FOLLOW_problem_stmt_in_stmt_block2397);
            	        ps=problem_stmt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestmt_blockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_problem_stmt; stream_problem_stmt->add(stream_problem_stmt, ps.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_ps == NULL)
            	        {
            	            list_ps=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_ps->add(list_ps, ps.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */

            RightC138 = (pANTLR3_COMMON_TOKEN) MATCHT(RightC, &FOLLOW_RightC_in_stmt_block2409); 
            if  (HASEXCEPTION())
            {
                goto rulestmt_blockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_RightC; stream_RightC->add(stream_RightC, RightC138, NULL); }


             
            /* AST REWRITE
             * elements          : c, t, s, ps, f, a
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : f, t, s, c, a, ps
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_f;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_t;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_c;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ps;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_f=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token f", list_f);
            	stream_t=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token t", list_t);
            	stream_s=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s", list_s);
            	stream_c=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", list_c);
            	stream_a=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", list_a);
            	stream_ps=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token ps", list_ps);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 460:4: -> ^( Block[$LeftC] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) )
            	{
            	    // ANML/base/antlr/ANML.g:461:3: ^( Block[$LeftC] ^( Types ( $t)* ) ^( Constants ( $c)* ) ^( Fluents ( $f)* ) ^( Actions ( $a)* ) ^( Stmts ( $s)* ) ^( ProblemStmts ( $ps)* ) )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Block, TOKTEXT(LeftC137))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Block, (pANTLR3_UINT8)LeftC137)
            	        #endif
            	        , root_1));

            	        // ANML/base/antlr/ANML.g:462:4: ^( Types ( $t)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Types, (pANTLR3_UINT8)"Types"), root_2));

            	            // ANML/base/antlr/ANML.g:462:12: ( $t)*
            	            {
            	            	while ( (stream_t != NULL && stream_t->hasNext(stream_t))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_t == NULL ? NULL : stream_t->nextTree(stream_t));

            	            	}
            	            	if ( stream_t != NULL) stream_t->reset(stream_t);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:463:4: ^( Constants ( $c)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Constants, (pANTLR3_UINT8)"Constants"), root_2));

            	            // ANML/base/antlr/ANML.g:463:16: ( $c)*
            	            {
            	            	while ( (stream_c != NULL && stream_c->hasNext(stream_c))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_c == NULL ? NULL : stream_c->nextTree(stream_c));

            	            	}
            	            	if ( stream_c != NULL) stream_c->reset(stream_c);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:464:4: ^( Fluents ( $f)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Fluents, (pANTLR3_UINT8)"Fluents"), root_2));

            	            // ANML/base/antlr/ANML.g:464:14: ( $f)*
            	            {
            	            	while ( (stream_f != NULL && stream_f->hasNext(stream_f))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_f == NULL ? NULL : stream_f->nextTree(stream_f));

            	            	}
            	            	if ( stream_f != NULL) stream_f->reset(stream_f);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:465:4: ^( Actions ( $a)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Actions, (pANTLR3_UINT8)"Actions"), root_2));

            	            // ANML/base/antlr/ANML.g:465:14: ( $a)*
            	            {
            	            	while ( (stream_a != NULL && stream_a->hasNext(stream_a))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	            	}
            	            	if ( stream_a != NULL) stream_a->reset(stream_a);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:466:4: ^( Stmts ( $s)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Stmts, (pANTLR3_UINT8)"Stmts"), root_2));

            	            // ANML/base/antlr/ANML.g:466:12: ( $s)*
            	            {
            	            	while ( (stream_s != NULL && stream_s->hasNext(stream_s))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_s == NULL ? NULL : stream_s->nextTree(stream_s));

            	            	}
            	            	if ( stream_s != NULL) stream_s->reset(stream_s);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // ANML/base/antlr/ANML.g:467:4: ^( ProblemStmts ( $ps)* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ProblemStmts, (pANTLR3_UINT8)"ProblemStmts"), root_2));

            	            // ANML/base/antlr/ANML.g:467:19: ( $ps)*
            	            {
            	            	while ( (stream_ps != NULL && stream_ps->hasNext(stream_ps))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_ps == NULL ? NULL : stream_ps->nextTree(stream_ps));

            	            	}
            	            	if ( stream_ps != NULL) stream_ps->reset(stream_ps);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_f != NULL) stream_f->free(stream_f);
            	if (stream_t != NULL) stream_t->free(stream_t);
            	if (stream_s != NULL) stream_s->free(stream_s);
            	if (stream_c != NULL) stream_c->free(stream_c);
            	if (stream_a != NULL) stream_a->free(stream_a);
            	if (stream_ps != NULL) stream_ps->free(stream_ps);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_blockEx; /* Prevent compiler warnings */
    rulestmt_blockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LeftC != NULL) stream_LeftC->free(stream_LeftC);
        if (stream_RightC != NULL) stream_RightC->free(stream_RightC);
        if (stream_type_decl != NULL) stream_type_decl->free(stream_type_decl);
        if (stream_stmt != NULL) stream_stmt->free(stream_stmt);
        if (stream_problem_stmt != NULL) stream_problem_stmt->free(stream_problem_stmt);
        if (stream_fluent_decl != NULL) stream_fluent_decl->free(stream_fluent_decl);
        if (stream_const_decl != NULL) stream_const_decl->free(stream_const_decl);
        if (stream_action_decl != NULL) stream_action_decl->free(stream_action_decl);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_block */

/** 
 * $ANTLR start stmt_contains
 * ANML/base/antlr/ANML.g:471:1: stmt_contains : Contains ( ( exist_time stmt )=> exist_time stmt -> ^( ContainsSomeStmt[$Contains] exist_time stmt ) | stmt -> ^( ContainsAllStmt[$Contains] stmt ) ) ;
 */
static ANMLParser_stmt_contains_return
stmt_contains(pANMLParser ctx)
{   
    ANMLParser_stmt_contains_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Contains139;
    ANMLParser_exist_time_return exist_time140;
    #undef	RETURN_TYPE_exist_time140
    #define	RETURN_TYPE_exist_time140 ANMLParser_exist_time_return

    ANMLParser_stmt_return stmt141;
    #undef	RETURN_TYPE_stmt141
    #define	RETURN_TYPE_stmt141 ANMLParser_stmt_return

    ANMLParser_stmt_return stmt142;
    #undef	RETURN_TYPE_stmt142
    #define	RETURN_TYPE_stmt142 ANMLParser_stmt_return

    pANTLR3_BASE_TREE Contains139_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Contains;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exist_time;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Contains139       = NULL;
    exist_time140.tree = NULL;

    stmt141.tree = NULL;

    stmt142.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Contains139_tree   = NULL;

    stream_Contains   = NULL;
    #define CREATE_stream_Contains  if (stream_Contains == NULL) {stream_Contains = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Contains"); } 
    stream_stmt   = NULL;
    #define CREATE_stream_stmt  if (stream_stmt == NULL) {stream_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt"); }
    stream_exist_time   = NULL;
    #define CREATE_stream_exist_time  if (stream_exist_time == NULL) {stream_exist_time = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exist_time"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:471:14: ( Contains ( ( exist_time stmt )=> exist_time stmt -> ^( ContainsSomeStmt[$Contains] exist_time stmt ) | stmt -> ^( ContainsAllStmt[$Contains] stmt ) ) )
        // ANML/base/antlr/ANML.g:472:2: Contains ( ( exist_time stmt )=> exist_time stmt -> ^( ContainsSomeStmt[$Contains] exist_time stmt ) | stmt -> ^( ContainsAllStmt[$Contains] stmt ) )
        {
            Contains139 = (pANTLR3_COMMON_TOKEN) MATCHT(Contains, &FOLLOW_Contains_in_stmt_contains2501); 
            if  (HASEXCEPTION())
            {
                goto rulestmt_containsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Contains; stream_Contains->add(stream_Contains, Contains139, NULL); }


            // ANML/base/antlr/ANML.g:473:3: ( ( exist_time stmt )=> exist_time stmt -> ^( ContainsSomeStmt[$Contains] exist_time stmt ) | stmt -> ^( ContainsAllStmt[$Contains] stmt ) )
            {
                int alt44=2;
                alt44 = cdfa44.predict(ctx, RECOGNIZER, ISTREAM, &cdfa44);
                if  (HASEXCEPTION())
                {
                    goto rulestmt_containsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt44) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:473:4: ( exist_time stmt )=> exist_time stmt
            	    {
            	        FOLLOWPUSH(FOLLOW_exist_time_in_stmt_contains2514);
            	        exist_time140=exist_time(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestmt_containsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_exist_time; stream_exist_time->add(stream_exist_time, exist_time140.tree, NULL); }
            	        FOLLOWPUSH(FOLLOW_stmt_in_stmt_contains2516);
            	        stmt141=stmt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestmt_containsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, stmt141.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : stmt, exist_time
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 474:4: -> ^( ContainsSomeStmt[$Contains] exist_time stmt )
            	        	{
            	        	    // ANML/base/antlr/ANML.g:474:7: ^( ContainsSomeStmt[$Contains] exist_time stmt )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 1 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ContainsSomeStmt, TOKTEXT(Contains139))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ContainsSomeStmt, (pANTLR3_UINT8)Contains139)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exist_time == NULL ? NULL : stream_exist_time->nextTree(stream_exist_time));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_stmt == NULL ? NULL : stream_stmt->nextTree(stream_stmt));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // ANML/base/antlr/ANML.g:475:5: stmt
            	    {
            	        FOLLOWPUSH(FOLLOW_stmt_in_stmt_contains2536);
            	        stmt142=stmt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestmt_containsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, stmt142.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : stmt
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 476:4: -> ^( ContainsAllStmt[$Contains] stmt )
            	        	{
            	        	    // ANML/base/antlr/ANML.g:476:7: ^( ContainsAllStmt[$Contains] stmt )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 1 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ContainsAllStmt, TOKTEXT(Contains139))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ContainsAllStmt, (pANTLR3_UINT8)Contains139)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_stmt == NULL ? NULL : stream_stmt->nextTree(stream_stmt));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_containsEx; /* Prevent compiler warnings */
    rulestmt_containsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Contains != NULL) stream_Contains->free(stream_Contains);
        if (stream_stmt != NULL) stream_stmt->free(stream_stmt);
        if (stream_exist_time != NULL) stream_exist_time->free(stream_exist_time);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_contains */

/** 
 * $ANTLR start stmt_when
 * ANML/base/antlr/ANML.g:480:1: stmt_when : When guard stmt ( ( Else )=> Else stmt -> ^( WhenElse[$When] guard stmt stmt ) | -> ^( When guard stmt ) ) ;
 */
static ANMLParser_stmt_when_return
stmt_when(pANMLParser ctx)
{   
    ANMLParser_stmt_when_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    When143;
    pANTLR3_COMMON_TOKEN    Else146;
    ANMLParser_guard_return guard144;
    #undef	RETURN_TYPE_guard144
    #define	RETURN_TYPE_guard144 ANMLParser_guard_return

    ANMLParser_stmt_return stmt145;
    #undef	RETURN_TYPE_stmt145
    #define	RETURN_TYPE_stmt145 ANMLParser_stmt_return

    ANMLParser_stmt_return stmt147;
    #undef	RETURN_TYPE_stmt147
    #define	RETURN_TYPE_stmt147 ANMLParser_stmt_return

    pANTLR3_BASE_TREE When143_tree;
    pANTLR3_BASE_TREE Else146_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Else;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_When;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_guard;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt;
    /* Initialize rule variables
     */


    root_0 = NULL;

    When143       = NULL;
    Else146       = NULL;
    guard144.tree = NULL;

    stmt145.tree = NULL;

    stmt147.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    When143_tree   = NULL;
    Else146_tree   = NULL;

    stream_Else   = NULL;
    #define CREATE_stream_Else  if (stream_Else == NULL) {stream_Else = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Else"); } 
    stream_When   = NULL;
    #define CREATE_stream_When  if (stream_When == NULL) {stream_When = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token When"); } 
    stream_guard   = NULL;
    #define CREATE_stream_guard  if (stream_guard == NULL) {stream_guard = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule guard"); }
    stream_stmt   = NULL;
    #define CREATE_stream_stmt  if (stream_stmt == NULL) {stream_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:480:10: ( When guard stmt ( ( Else )=> Else stmt -> ^( WhenElse[$When] guard stmt stmt ) | -> ^( When guard stmt ) ) )
        // ANML/base/antlr/ANML.g:481:2: When guard stmt ( ( Else )=> Else stmt -> ^( WhenElse[$When] guard stmt stmt ) | -> ^( When guard stmt ) )
        {
            When143 = (pANTLR3_COMMON_TOKEN) MATCHT(When, &FOLLOW_When_in_stmt_when2562); 
            if  (HASEXCEPTION())
            {
                goto rulestmt_whenEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_When; stream_When->add(stream_When, When143, NULL); }

            FOLLOWPUSH(FOLLOW_guard_in_stmt_when2564);
            guard144=guard(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestmt_whenEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_guard; stream_guard->add(stream_guard, guard144.tree, NULL); }
            FOLLOWPUSH(FOLLOW_stmt_in_stmt_when2566);
            stmt145=stmt(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestmt_whenEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, stmt145.tree, NULL); }

            // ANML/base/antlr/ANML.g:482:3: ( ( Else )=> Else stmt -> ^( WhenElse[$When] guard stmt stmt ) | -> ^( When guard stmt ) )
            {
                int alt45=2;

                {
                    int LA45_0 = LA(1);
                    if ( (LA45_0 == Else) ) 
                    {

                        {
                            int LA45_1 = LA(2);
                            if ( (synpred11_ANML(ctx)) ) 
                            {
                                alt45=1;
                            }
                            else if ( (ANTLR3_TRUE) ) 
                            {
                                alt45=2;
                            }
                            else 
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE; 
                                    return retval;
                                }
                            
                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 45;
                                EXCEPTION->state        = 1;


                                goto rulestmt_whenEx;
                            }
                        }
                    }
                    else if ( (LA45_0 == EOF || ((LA45_0 >= Type) && (LA45_0 <= Fluent)) || LA45_0 == Constant || LA45_0 == Action || LA45_0 == When || LA45_0 == ID || LA45_0 == Semi || ((LA45_0 >= LeftC) && (LA45_0 <= LeftB)) || LA45_0 == LeftP || ((LA45_0 >= Variable) && (LA45_0 <= Predicate)) || ((LA45_0 >= Duration) && (LA45_0 <= NotBit)) || ((LA45_0 >= Goal) && (LA45_0 <= Contains)) || ((LA45_0 >= ForAll) && (LA45_0 <= Exists)) || LA45_0 == Delta || LA45_0 == Dots || LA45_0 == Minus || ((LA45_0 >= Unordered) && (LA45_0 <= End)) || ((LA45_0 >= INT) && (LA45_0 <= Infinity))) ) 
                    {
                        alt45=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 45;
                        EXCEPTION->state        = 0;


                        goto rulestmt_whenEx;
                    }
                }
                switch (alt45) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:482:5: ( Else )=> Else stmt
            	    {
            	        Else146 = (pANTLR3_COMMON_TOKEN) MATCHT(Else, &FOLLOW_Else_in_stmt_when2579); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestmt_whenEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Else; stream_Else->add(stream_Else, Else146, NULL); }

            	        FOLLOWPUSH(FOLLOW_stmt_in_stmt_when2581);
            	        stmt147=stmt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestmt_whenEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, stmt147.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : guard, stmt, stmt
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 483:4: -> ^( WhenElse[$When] guard stmt stmt )
            	        	{
            	        	    // ANML/base/antlr/ANML.g:483:7: ^( WhenElse[$When] guard stmt stmt )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 1 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WhenElse, TOKTEXT(When143))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WhenElse, (pANTLR3_UINT8)When143)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_guard == NULL ? NULL : stream_guard->nextTree(stream_guard));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_stmt == NULL ? NULL : stream_stmt->nextTree(stream_stmt));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_stmt == NULL ? NULL : stream_stmt->nextTree(stream_stmt));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // ANML/base/antlr/ANML.g:485:4: 
            	    {
            	         
            	        /* AST REWRITE
            	         * elements          : When, guard, stmt
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 485:4: -> ^( When guard stmt )
            	        	{
            	        	    // ANML/base/antlr/ANML.g:485:7: ^( When guard stmt )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_When == NULL ? NULL : stream_When->nextNode(stream_When), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_guard == NULL ? NULL : stream_guard->nextTree(stream_guard));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_stmt == NULL ? NULL : stream_stmt->nextTree(stream_stmt));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_whenEx; /* Prevent compiler warnings */
    rulestmt_whenEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Else != NULL) stream_Else->free(stream_Else);
        if (stream_When != NULL) stream_When->free(stream_When);
        if (stream_guard != NULL) stream_guard->free(stream_guard);
        if (stream_stmt != NULL) stream_stmt->free(stream_stmt);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_when */

/** 
 * $ANTLR start stmt_forall
 * ANML/base/antlr/ANML.g:489:1: stmt_forall : ForAll param_list stmt -> ^( ForAllStmt[$ForAll] param_list stmt ) ;
 */
static ANMLParser_stmt_forall_return
stmt_forall(pANMLParser ctx)
{   
    ANMLParser_stmt_forall_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ForAll148;
    ANMLParser_param_list_return param_list149;
    #undef	RETURN_TYPE_param_list149
    #define	RETURN_TYPE_param_list149 ANMLParser_param_list_return

    ANMLParser_stmt_return stmt150;
    #undef	RETURN_TYPE_stmt150
    #define	RETURN_TYPE_stmt150 ANMLParser_stmt_return

    pANTLR3_BASE_TREE ForAll148_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ForAll;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_param_list;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ForAll148       = NULL;
    param_list149.tree = NULL;

    stmt150.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ForAll148_tree   = NULL;

    stream_ForAll   = NULL;
    #define CREATE_stream_ForAll  if (stream_ForAll == NULL) {stream_ForAll = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ForAll"); } 
    stream_stmt   = NULL;
    #define CREATE_stream_stmt  if (stream_stmt == NULL) {stream_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt"); }
    stream_param_list   = NULL;
    #define CREATE_stream_param_list  if (stream_param_list == NULL) {stream_param_list = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule param_list"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:489:12: ( ForAll param_list stmt -> ^( ForAllStmt[$ForAll] param_list stmt ) )
        // ANML/base/antlr/ANML.g:490:2: ForAll param_list stmt
        {
            ForAll148 = (pANTLR3_COMMON_TOKEN) MATCHT(ForAll, &FOLLOW_ForAll_in_stmt_forall2628); 
            if  (HASEXCEPTION())
            {
                goto rulestmt_forallEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_ForAll; stream_ForAll->add(stream_ForAll, ForAll148, NULL); }

            FOLLOWPUSH(FOLLOW_param_list_in_stmt_forall2630);
            param_list149=param_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestmt_forallEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_param_list; stream_param_list->add(stream_param_list, param_list149.tree, NULL); }
            FOLLOWPUSH(FOLLOW_stmt_in_stmt_forall2632);
            stmt150=stmt(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestmt_forallEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, stmt150.tree, NULL); }

             
            /* AST REWRITE
             * elements          : param_list, stmt
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 491:3: -> ^( ForAllStmt[$ForAll] param_list stmt )
            	{
            	    // ANML/base/antlr/ANML.g:491:6: ^( ForAllStmt[$ForAll] param_list stmt )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ForAllStmt, TOKTEXT(ForAll148))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ForAllStmt, (pANTLR3_UINT8)ForAll148)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_param_list == NULL ? NULL : stream_param_list->nextTree(stream_param_list));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_stmt == NULL ? NULL : stream_stmt->nextTree(stream_stmt));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_forallEx; /* Prevent compiler warnings */
    rulestmt_forallEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ForAll != NULL) stream_ForAll->free(stream_ForAll);
        if (stream_stmt != NULL) stream_stmt->free(stream_stmt);
        if (stream_param_list != NULL) stream_param_list->free(stream_param_list);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_forall */

/** 
 * $ANTLR start stmt_exists
 * ANML/base/antlr/ANML.g:494:1: stmt_exists : Exists param_list stmt -> ^( ExistsStmt[$Exists] param_list stmt ) ;
 */
static ANMLParser_stmt_exists_return
stmt_exists(pANMLParser ctx)
{   
    ANMLParser_stmt_exists_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Exists151;
    ANMLParser_param_list_return param_list152;
    #undef	RETURN_TYPE_param_list152
    #define	RETURN_TYPE_param_list152 ANMLParser_param_list_return

    ANMLParser_stmt_return stmt153;
    #undef	RETURN_TYPE_stmt153
    #define	RETURN_TYPE_stmt153 ANMLParser_stmt_return

    pANTLR3_BASE_TREE Exists151_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Exists;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_param_list;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Exists151       = NULL;
    param_list152.tree = NULL;

    stmt153.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Exists151_tree   = NULL;

    stream_Exists   = NULL;
    #define CREATE_stream_Exists  if (stream_Exists == NULL) {stream_Exists = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Exists"); } 
    stream_stmt   = NULL;
    #define CREATE_stream_stmt  if (stream_stmt == NULL) {stream_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt"); }
    stream_param_list   = NULL;
    #define CREATE_stream_param_list  if (stream_param_list == NULL) {stream_param_list = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule param_list"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:494:12: ( Exists param_list stmt -> ^( ExistsStmt[$Exists] param_list stmt ) )
        // ANML/base/antlr/ANML.g:495:2: Exists param_list stmt
        {
            Exists151 = (pANTLR3_COMMON_TOKEN) MATCHT(Exists, &FOLLOW_Exists_in_stmt_exists2654); 
            if  (HASEXCEPTION())
            {
                goto rulestmt_existsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Exists; stream_Exists->add(stream_Exists, Exists151, NULL); }

            FOLLOWPUSH(FOLLOW_param_list_in_stmt_exists2656);
            param_list152=param_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestmt_existsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_param_list; stream_param_list->add(stream_param_list, param_list152.tree, NULL); }
            FOLLOWPUSH(FOLLOW_stmt_in_stmt_exists2658);
            stmt153=stmt(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestmt_existsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, stmt153.tree, NULL); }

             
            /* AST REWRITE
             * elements          : stmt, param_list
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 496:3: -> ^( ExistsStmt[$Exists] param_list stmt )
            	{
            	    // ANML/base/antlr/ANML.g:496:6: ^( ExistsStmt[$Exists] param_list stmt )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ExistsStmt, TOKTEXT(Exists151))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ExistsStmt, (pANTLR3_UINT8)Exists151)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_param_list == NULL ? NULL : stream_param_list->nextTree(stream_param_list));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_stmt == NULL ? NULL : stream_stmt->nextTree(stream_stmt));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_existsEx; /* Prevent compiler warnings */
    rulestmt_existsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Exists != NULL) stream_Exists->free(stream_Exists);
        if (stream_stmt != NULL) stream_stmt->free(stream_stmt);
        if (stream_param_list != NULL) stream_param_list->free(stream_param_list);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_exists */

/** 
 * $ANTLR start stmt_timed
 * ANML/base/antlr/ANML.g:499:1: stmt_timed : interval stmt -> ^( TimedStmt interval stmt ) ;
 */
static ANMLParser_stmt_timed_return
stmt_timed(pANMLParser ctx)
{   
    ANMLParser_stmt_timed_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_interval_return interval154;
    #undef	RETURN_TYPE_interval154
    #define	RETURN_TYPE_interval154 ANMLParser_interval_return

    ANMLParser_stmt_return stmt155;
    #undef	RETURN_TYPE_stmt155
    #define	RETURN_TYPE_stmt155 ANMLParser_stmt_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_interval;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt;
    /* Initialize rule variables
     */


    root_0 = NULL;

    interval154.tree = NULL;

    stmt155.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_interval   = NULL;
    #define CREATE_stream_interval  if (stream_interval == NULL) {stream_interval = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule interval"); }
    stream_stmt   = NULL;
    #define CREATE_stream_stmt  if (stream_stmt == NULL) {stream_stmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:499:11: ( interval stmt -> ^( TimedStmt interval stmt ) )
        // ANML/base/antlr/ANML.g:500:2: interval stmt
        {
            FOLLOWPUSH(FOLLOW_interval_in_stmt_timed2680);
            interval154=interval(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestmt_timedEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_interval; stream_interval->add(stream_interval, interval154.tree, NULL); }
            FOLLOWPUSH(FOLLOW_stmt_in_stmt_timed2682);
            stmt155=stmt(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestmt_timedEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_stmt; stream_stmt->add(stream_stmt, stmt155.tree, NULL); }

             
            /* AST REWRITE
             * elements          : interval, stmt
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 501:3: -> ^( TimedStmt interval stmt )
            	{
            	    // ANML/base/antlr/ANML.g:501:6: ^( TimedStmt interval stmt )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TimedStmt, (pANTLR3_UINT8)"TimedStmt"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_interval == NULL ? NULL : stream_interval->nextTree(stream_interval));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_stmt == NULL ? NULL : stream_stmt->nextTree(stream_stmt));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_timedEx; /* Prevent compiler warnings */
    rulestmt_timedEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_interval != NULL) stream_interval->free(stream_interval);
        if (stream_stmt != NULL) stream_stmt->free(stream_stmt);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_timed */

/** 
 * $ANTLR start stmt_chain
 * ANML/base/antlr/ANML.g:504:1: stmt_chain : ( ref (e+= stmt_chain_1 )+ -> ^( Chain ^( DefiniteInterval ^( TBra Bra ) ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ^( TKet Ket ) ) ref ( $e)+ ) | ( interval ref ( stmt_chain_1 )+ )=> interval ref (e+= stmt_chain_1 )+ -> ^( Chain interval ref ( $e)+ ) );
 */
static ANMLParser_stmt_chain_return
stmt_chain(pANMLParser ctx)
{   
    ANMLParser_stmt_chain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_VECTOR    list_e;
    ANMLParser_ref_return ref156;
    #undef	RETURN_TYPE_ref156
    #define	RETURN_TYPE_ref156 ANMLParser_ref_return

    ANMLParser_interval_return interval157;
    #undef	RETURN_TYPE_interval157
    #define	RETURN_TYPE_interval157 ANMLParser_interval_return

    ANMLParser_ref_return ref158;
    #undef	RETURN_TYPE_ref158
    #define	RETURN_TYPE_ref158 ANMLParser_ref_return

    ANMLParser_stmt_chain_1_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e ANMLParser_stmt_chain_1_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ref;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_interval;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt_chain_1;
    /* Initialize rule variables
     */


    root_0 = NULL;

    list_e     = NULL;
    ref156.tree = NULL;

    interval157.tree = NULL;

    ref158.tree = NULL;

    e.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_ref   = NULL;
    #define CREATE_stream_ref  if (stream_ref == NULL) {stream_ref = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ref"); }
    stream_interval   = NULL;
    #define CREATE_stream_interval  if (stream_interval == NULL) {stream_interval = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule interval"); }
    stream_stmt_chain_1   = NULL;
    #define CREATE_stream_stmt_chain_1  if (stream_stmt_chain_1 == NULL) {stream_stmt_chain_1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt_chain_1"); }

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:504:11: ( ref (e+= stmt_chain_1 )+ -> ^( Chain ^( DefiniteInterval ^( TBra Bra ) ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ^( TKet Ket ) ) ref ( $e)+ ) | ( interval ref ( stmt_chain_1 )+ )=> interval ref (e+= stmt_chain_1 )+ -> ^( Chain interval ref ( $e)+ ) )
            
            ANTLR3_UINT32 alt48;

            alt48=2;


            {
                int LA48_0 = LA(1);
                if ( (LA48_0 == ID) ) 
                {
                    alt48=1;
                }
                else if ( (LA48_0 == LeftB) && (synpred12_ANML(ctx))) 
                {
                    alt48=2;
                }
                else if ( (LA48_0 == LeftP) && (synpred12_ANML(ctx))) 
                {
                    alt48=2;
                }
                else if ( (LA48_0 == Dots) && (synpred12_ANML(ctx))) 
                {
                    alt48=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 48;
                    EXCEPTION->state        = 0;


                    goto rulestmt_chainEx;
                }
            }
            switch (alt48) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:505:2: ref (e+= stmt_chain_1 )+
        	    {
        	        FOLLOWPUSH(FOLLOW_ref_in_stmt_chain2704);
        	        ref156=ref(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chainEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ref; stream_ref->add(stream_ref, ref156.tree, NULL); }
        	        // ANML/base/antlr/ANML.g:505:7: (e+= stmt_chain_1 )+
        	        {
        	            int cnt46=0;

        	            for (;;)
        	            {
        	                int alt46=2;
        	        	{
        	        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	    */
        	        	    int LA46_0 = LA(1);
        	        	    if ( (LA46_0 == Comma || ((LA46_0 >= LessThan) && (LA46_0 <= Assign)) || LA46_0 == Undefine || LA46_0 == Equal || ((LA46_0 >= Change) && (LA46_0 <= Skip)) || ((LA46_0 >= NotEqual) && (LA46_0 <= GreaterThanE))) ) 
        	        	    {
        	        	        alt46=1;
        	        	    }

        	        	}
        	        	switch (alt46) 
        	        	{
        	        	    case 1:
        	        	        // ANML/base/antlr/ANML.g:505:7: e+= stmt_chain_1
        	        	        {
        	        	            FOLLOWPUSH(FOLLOW_stmt_chain_1_in_stmt_chain2708);
        	        	            e=stmt_chain_1(ctx);

        	        	            FOLLOWPOP();
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto rulestmt_chainEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                return retval;
        	        	            }
        	        	            if ( BACKTRACKING==0 ) { CREATE_stream_stmt_chain_1; stream_stmt_chain_1->add(stream_stmt_chain_1, e.tree, NULL); }
        	        	            /* listLabelTrack(label)
        	        	             */
        	        	            if (list_e == NULL)
        	        	            {
        	        	                list_e=ctx->vectors->newVector(ctx->vectors);
        	        	            }
        	        	            list_e->add(list_e, e.tree, NULL);

        	        	        }
        	        	        break;

        	        	    default:
        	        	    
        	        		if ( cnt46 >= 1 )
        	        		{
        	        		    goto loop46;
        	        		}
        	        		if (BACKTRACKING>0)
        	        		{
        	        		    FAILEDFLAG = ANTLR3_TRUE; 
        	        		    return retval;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto rulestmt_chainEx;
        	        	}
        	        	cnt46++;
        	            }
        	            loop46: ;	/* Jump to here if this rule does not match */
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e, ref
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : e
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", list_e);
        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 506:5: -> ^( Chain ^( DefiniteInterval ^( TBra Bra ) ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ^( TKet Ket ) ) ref ( $e)+ )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:506:8: ^( Chain ^( DefiniteInterval ^( TBra Bra ) ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ^( TKet Ket ) ) ref ( $e)+ )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Chain, (pANTLR3_UINT8)"Chain"), root_1));

        	        	        // ANML/base/antlr/ANML.g:506:16: ^( DefiniteInterval ^( TBra Bra ) ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ^( TKet Ket ) )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DefiniteInterval, (pANTLR3_UINT8)"DefiniteInterval"), root_2));

        	        	            // ANML/base/antlr/ANML.g:506:35: ^( TBra Bra )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TBra, (pANTLR3_UINT8)"TBra"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Bra, (pANTLR3_UINT8)"Bra"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }
        	        	            // ANML/base/antlr/ANML.g:506:47: ^( TStart Start )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Start, (pANTLR3_UINT8)"Start"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }
        	        	            // ANML/base/antlr/ANML.g:506:63: ^( TDuration Duration )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TDuration, (pANTLR3_UINT8)"TDuration"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Duration, (pANTLR3_UINT8)"Duration"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }
        	        	            // ANML/base/antlr/ANML.g:506:85: ^( TEnd End )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TEnd, (pANTLR3_UINT8)"TEnd"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, End, (pANTLR3_UINT8)"End"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }
        	        	            // ANML/base/antlr/ANML.g:506:97: ^( TKet Ket )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TKet, (pANTLR3_UINT8)"TKet"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Ket, (pANTLR3_UINT8)"Ket"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ref == NULL ? NULL : stream_ref->nextTree(stream_ref));
        	        	        if ((stream_e == NULL || !stream_e->hasNext(stream_e))  )
        	        	        {
        	        	            CONSTRUCTEX();
        	        	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
        	        	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
        	        	        }
        	        	        else
        	        	        {
        	        	        	while ( (stream_e->hasNext(stream_e))  ) {
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        	}
        	        	        	stream_e->reset(stream_e);

        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);

        	        }
        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:507:4: ( interval ref ( stmt_chain_1 )+ )=> interval ref (e+= stmt_chain_1 )+
        	    {
        	        FOLLOWPUSH(FOLLOW_interval_in_stmt_chain2775);
        	        interval157=interval(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chainEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_interval; stream_interval->add(stream_interval, interval157.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_ref_in_stmt_chain2777);
        	        ref158=ref(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chainEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ref; stream_ref->add(stream_ref, ref158.tree, NULL); }
        	        // ANML/base/antlr/ANML.g:507:49: (e+= stmt_chain_1 )+
        	        {
        	            int cnt47=0;

        	            for (;;)
        	            {
        	                int alt47=2;
        	        	{
        	        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	    */
        	        	    int LA47_0 = LA(1);
        	        	    if ( (LA47_0 == Comma || ((LA47_0 >= LessThan) && (LA47_0 <= Assign)) || LA47_0 == Undefine || LA47_0 == Equal || ((LA47_0 >= Change) && (LA47_0 <= Skip)) || ((LA47_0 >= NotEqual) && (LA47_0 <= GreaterThanE))) ) 
        	        	    {
        	        	        alt47=1;
        	        	    }

        	        	}
        	        	switch (alt47) 
        	        	{
        	        	    case 1:
        	        	        // ANML/base/antlr/ANML.g:507:49: e+= stmt_chain_1
        	        	        {
        	        	            FOLLOWPUSH(FOLLOW_stmt_chain_1_in_stmt_chain2781);
        	        	            e=stmt_chain_1(ctx);

        	        	            FOLLOWPOP();
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto rulestmt_chainEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                return retval;
        	        	            }
        	        	            if ( BACKTRACKING==0 ) { CREATE_stream_stmt_chain_1; stream_stmt_chain_1->add(stream_stmt_chain_1, e.tree, NULL); }
        	        	            /* listLabelTrack(label)
        	        	             */
        	        	            if (list_e == NULL)
        	        	            {
        	        	                list_e=ctx->vectors->newVector(ctx->vectors);
        	        	            }
        	        	            list_e->add(list_e, e.tree, NULL);

        	        	        }
        	        	        break;

        	        	    default:
        	        	    
        	        		if ( cnt47 >= 1 )
        	        		{
        	        		    goto loop47;
        	        		}
        	        		if (BACKTRACKING>0)
        	        		{
        	        		    FAILEDFLAG = ANTLR3_TRUE; 
        	        		    return retval;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto rulestmt_chainEx;
        	        	}
        	        	cnt47++;
        	            }
        	            loop47: ;	/* Jump to here if this rule does not match */
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : ref, e, interval
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : e
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", list_e);
        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 508:3: -> ^( Chain interval ref ( $e)+ )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:508:6: ^( Chain interval ref ( $e)+ )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Chain, (pANTLR3_UINT8)"Chain"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_interval == NULL ? NULL : stream_interval->nextTree(stream_interval));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ref == NULL ? NULL : stream_ref->nextTree(stream_ref));
        	        	        if ((stream_e == NULL || !stream_e->hasNext(stream_e))  )
        	        	        {
        	        	            CONSTRUCTEX();
        	        	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
        	        	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
        	        	        }
        	        	        else
        	        	        {
        	        	        	while ( (stream_e->hasNext(stream_e))  ) {
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        	}
        	        	        	stream_e->reset(stream_e);

        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);

        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_chainEx; /* Prevent compiler warnings */
    rulestmt_chainEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ref != NULL) stream_ref->free(stream_ref);
        if (stream_interval != NULL) stream_interval->free(stream_interval);
        if (stream_stmt_chain_1 != NULL) stream_stmt_chain_1->free(stream_stmt_chain_1);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_chain */

/** 
 * $ANTLR start stmt_chain_1
 * ANML/base/antlr/ANML.g:511:1: stmt_chain_1 : ( ( Comma )? Assign e_num | ( Comma )? o= Change b= e_num -> Undefine ^( Assign $b) | ( Comma )? o= Produce b= e_num | ( Comma )? o= Consume b= e_num | ( Comma )? o= Lend b= e_num -> ^( Produce $b) Skip ^( Consume $b) | ( Comma )? o= Use b= e_num -> ^( Consume $b) Skip ^( Produce $b) | ( Comma )? (o= Within | o= SetAssign ) s= set | ( Comma )? i= num_relop b= e_num | ( Comma )? (o= Equal Skip | o= Skip ) -> Skip | ( Comma )? (o= Assign Undefined | o= Undefine ) -> Undefine );
 */
static ANMLParser_stmt_chain_1_return
stmt_chain_1(pANMLParser ctx)
{   
    ANMLParser_stmt_chain_1_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    pANTLR3_COMMON_TOKEN    Comma159;
    pANTLR3_COMMON_TOKEN    Assign160;
    pANTLR3_COMMON_TOKEN    Comma162;
    pANTLR3_COMMON_TOKEN    Comma163;
    pANTLR3_COMMON_TOKEN    Comma164;
    pANTLR3_COMMON_TOKEN    Comma165;
    pANTLR3_COMMON_TOKEN    Comma166;
    pANTLR3_COMMON_TOKEN    Comma167;
    pANTLR3_COMMON_TOKEN    Comma168;
    pANTLR3_COMMON_TOKEN    Comma169;
    pANTLR3_COMMON_TOKEN    Skip170;
    pANTLR3_COMMON_TOKEN    Comma171;
    pANTLR3_COMMON_TOKEN    Undefined172;
    ANMLParser_e_num_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b ANMLParser_e_num_return

    ANMLParser_set_return s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s ANMLParser_set_return

    ANMLParser_num_relop_return i;
    #undef	RETURN_TYPE_i
    #define	RETURN_TYPE_i ANMLParser_num_relop_return

    ANMLParser_e_num_return e_num161;
    #undef	RETURN_TYPE_e_num161
    #define	RETURN_TYPE_e_num161 ANMLParser_e_num_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_BASE_TREE Comma159_tree;
    pANTLR3_BASE_TREE Assign160_tree;
    pANTLR3_BASE_TREE Comma162_tree;
    pANTLR3_BASE_TREE Comma163_tree;
    pANTLR3_BASE_TREE Comma164_tree;
    pANTLR3_BASE_TREE Comma165_tree;
    pANTLR3_BASE_TREE Comma166_tree;
    pANTLR3_BASE_TREE Comma167_tree;
    pANTLR3_BASE_TREE Comma168_tree;
    pANTLR3_BASE_TREE Comma169_tree;
    pANTLR3_BASE_TREE Skip170_tree;
    pANTLR3_BASE_TREE Comma171_tree;
    pANTLR3_BASE_TREE Undefined172_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Skip;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Assign;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Undefine;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Change;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Lend;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Equal;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Undefined;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Use;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e_num;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    Comma159       = NULL;
    Assign160       = NULL;
    Comma162       = NULL;
    Comma163       = NULL;
    Comma164       = NULL;
    Comma165       = NULL;
    Comma166       = NULL;
    Comma167       = NULL;
    Comma168       = NULL;
    Comma169       = NULL;
    Skip170       = NULL;
    Comma171       = NULL;
    Undefined172       = NULL;
    b.tree = NULL;

    s.tree = NULL;

    i.tree = NULL;

    e_num161.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;
    Comma159_tree   = NULL;
    Assign160_tree   = NULL;
    Comma162_tree   = NULL;
    Comma163_tree   = NULL;
    Comma164_tree   = NULL;
    Comma165_tree   = NULL;
    Comma166_tree   = NULL;
    Comma167_tree   = NULL;
    Comma168_tree   = NULL;
    Comma169_tree   = NULL;
    Skip170_tree   = NULL;
    Comma171_tree   = NULL;
    Undefined172_tree   = NULL;

    stream_Skip   = NULL;
    #define CREATE_stream_Skip  if (stream_Skip == NULL) {stream_Skip = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Skip"); } 
    stream_Assign   = NULL;
    #define CREATE_stream_Assign  if (stream_Assign == NULL) {stream_Assign = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Assign"); } 
    stream_Undefine   = NULL;
    #define CREATE_stream_Undefine  if (stream_Undefine == NULL) {stream_Undefine = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Undefine"); } 
    stream_Change   = NULL;
    #define CREATE_stream_Change  if (stream_Change == NULL) {stream_Change = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Change"); } 
    stream_Lend   = NULL;
    #define CREATE_stream_Lend  if (stream_Lend == NULL) {stream_Lend = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Lend"); } 
    stream_Equal   = NULL;
    #define CREATE_stream_Equal  if (stream_Equal == NULL) {stream_Equal = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Equal"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_Undefined   = NULL;
    #define CREATE_stream_Undefined  if (stream_Undefined == NULL) {stream_Undefined = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Undefined"); } 
    stream_Use   = NULL;
    #define CREATE_stream_Use  if (stream_Use == NULL) {stream_Use = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Use"); } 
    stream_e_num   = NULL;
    #define CREATE_stream_e_num  if (stream_e_num == NULL) {stream_e_num = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule e_num"); }

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:511:13: ( ( Comma )? Assign e_num | ( Comma )? o= Change b= e_num -> Undefine ^( Assign $b) | ( Comma )? o= Produce b= e_num | ( Comma )? o= Consume b= e_num | ( Comma )? o= Lend b= e_num -> ^( Produce $b) Skip ^( Consume $b) | ( Comma )? o= Use b= e_num -> ^( Consume $b) Skip ^( Produce $b) | ( Comma )? (o= Within | o= SetAssign ) s= set | ( Comma )? i= num_relop b= e_num | ( Comma )? (o= Equal Skip | o= Skip ) -> Skip | ( Comma )? (o= Assign Undefined | o= Undefine ) -> Undefine )
            
            ANTLR3_UINT32 alt62;

            alt62=10;

            alt62 = cdfa62.predict(ctx, RECOGNIZER, ISTREAM, &cdfa62);
            if  (HASEXCEPTION())
            {
                goto rulestmt_chain_1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt62) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:512:5: ( Comma )? Assign e_num
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // ANML/base/antlr/ANML.g:512:10: ( Comma )?
        	        {
        	            int alt49=2;
        	            {
        	                int LA49_0 = LA(1);
        	                if ( (LA49_0 == Comma) ) 
        	                {
        	                    alt49=1;
        	                }
        	            }
        	            switch (alt49) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:512:10: Comma
        	        	    {
        	        	        Comma159 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_chain_12810); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        Assign160 = (pANTLR3_COMMON_TOKEN) MATCHT(Assign, &FOLLOW_Assign_in_stmt_chain_12814); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        Assign160_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Assign160));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, Assign160_tree, root_0));
        	        }
        	        FOLLOWPUSH(FOLLOW_e_num_in_stmt_chain_12817);
        	        e_num161=e_num(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num161.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:513:7: ( Comma )? o= Change b= e_num
        	    {

        	        // ANML/base/antlr/ANML.g:513:7: ( Comma )?
        	        {
        	            int alt50=2;
        	            {
        	                int LA50_0 = LA(1);
        	                if ( (LA50_0 == Comma) ) 
        	                {
        	                    alt50=1;
        	                }
        	            }
        	            switch (alt50) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:513:7: Comma
        	        	    {
        	        	        Comma162 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_chain_12825); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma162, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Change, &FOLLOW_Change_in_stmt_chain_12830); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Change; stream_Change->add(stream_Change, o, NULL); }

        	        FOLLOWPUSH(FOLLOW_e_num_in_stmt_chain_12834);
        	        b=e_num(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_e_num; stream_e_num->add(stream_e_num, b.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : b
        	         * token labels      : 
        	         * rule labels       : retval, b
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 514:6: -> Undefine ^( Assign $b)
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Undefine, (pANTLR3_UINT8)"Undefine"));
        	        	    // ANML/base/antlr/ANML.g:515:7: ^( Assign $b)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Assign, (pANTLR3_UINT8)"Assign"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_b != NULL) stream_b->free(stream_b);


        	        }
        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:516:7: ( Comma )? o= Produce b= e_num
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // ANML/base/antlr/ANML.g:516:12: ( Comma )?
        	        {
        	            int alt51=2;
        	            {
        	                int LA51_0 = LA(1);
        	                if ( (LA51_0 == Comma) ) 
        	                {
        	                    alt51=1;
        	                }
        	            }
        	            switch (alt51) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:516:12: Comma
        	        	    {
        	        	        Comma163 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_chain_12865); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Produce, &FOLLOW_Produce_in_stmt_chain_12871); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        o_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, o));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, o_tree, root_0));
        	        }
        	        FOLLOWPUSH(FOLLOW_e_num_in_stmt_chain_12876);
        	        b=e_num(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, b.tree);

        	    }
        	    break;
        	case 4:
        	    // ANML/base/antlr/ANML.g:517:7: ( Comma )? o= Consume b= e_num
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // ANML/base/antlr/ANML.g:517:12: ( Comma )?
        	        {
        	            int alt52=2;
        	            {
        	                int LA52_0 = LA(1);
        	                if ( (LA52_0 == Comma) ) 
        	                {
        	                    alt52=1;
        	                }
        	            }
        	            switch (alt52) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:517:12: Comma
        	        	    {
        	        	        Comma164 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_chain_12884); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Consume, &FOLLOW_Consume_in_stmt_chain_12890); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        o_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, o));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, o_tree, root_0));
        	        }
        	        FOLLOWPUSH(FOLLOW_e_num_in_stmt_chain_12895);
        	        b=e_num(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, b.tree);

        	    }
        	    break;
        	case 5:
        	    // ANML/base/antlr/ANML.g:518:7: ( Comma )? o= Lend b= e_num
        	    {

        	        // ANML/base/antlr/ANML.g:518:7: ( Comma )?
        	        {
        	            int alt53=2;
        	            {
        	                int LA53_0 = LA(1);
        	                if ( (LA53_0 == Comma) ) 
        	                {
        	                    alt53=1;
        	                }
        	            }
        	            switch (alt53) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:518:7: Comma
        	        	    {
        	        	        Comma165 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_chain_12903); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma165, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Lend, &FOLLOW_Lend_in_stmt_chain_12908); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Lend; stream_Lend->add(stream_Lend, o, NULL); }

        	        FOLLOWPUSH(FOLLOW_e_num_in_stmt_chain_12912);
        	        b=e_num(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_e_num; stream_e_num->add(stream_e_num, b.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : b, b
        	         * token labels      : 
        	         * rule labels       : retval, b
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 519:6: -> ^( Produce $b) Skip ^( Consume $b)
        	        	{
        	        	    // ANML/base/antlr/ANML.g:519:9: ^( Produce $b)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Produce, (pANTLR3_UINT8)"Produce"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Skip, (pANTLR3_UINT8)"Skip"));
        	        	    // ANML/base/antlr/ANML.g:521:7: ^( Consume $b)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Consume, (pANTLR3_UINT8)"Consume"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_b != NULL) stream_b->free(stream_b);


        	        }
        	    }
        	    break;
        	case 6:
        	    // ANML/base/antlr/ANML.g:522:7: ( Comma )? o= Use b= e_num
        	    {

        	        // ANML/base/antlr/ANML.g:522:7: ( Comma )?
        	        {
        	            int alt54=2;
        	            {
        	                int LA54_0 = LA(1);
        	                if ( (LA54_0 == Comma) ) 
        	                {
        	                    alt54=1;
        	                }
        	            }
        	            switch (alt54) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:522:7: Comma
        	        	    {
        	        	        Comma166 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_chain_12955); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma166, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Use, &FOLLOW_Use_in_stmt_chain_12960); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Use; stream_Use->add(stream_Use, o, NULL); }

        	        FOLLOWPUSH(FOLLOW_e_num_in_stmt_chain_12964);
        	        b=e_num(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_e_num; stream_e_num->add(stream_e_num, b.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : b, b
        	         * token labels      : 
        	         * rule labels       : retval, b
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 523:6: -> ^( Consume $b) Skip ^( Produce $b)
        	        	{
        	        	    // ANML/base/antlr/ANML.g:523:9: ^( Consume $b)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Consume, (pANTLR3_UINT8)"Consume"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Skip, (pANTLR3_UINT8)"Skip"));
        	        	    // ANML/base/antlr/ANML.g:525:7: ^( Produce $b)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Produce, (pANTLR3_UINT8)"Produce"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_b != NULL) stream_b->free(stream_b);


        	        }
        	    }
        	    break;
        	case 7:
        	    // ANML/base/antlr/ANML.g:526:7: ( Comma )? (o= Within | o= SetAssign ) s= set
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // ANML/base/antlr/ANML.g:526:12: ( Comma )?
        	        {
        	            int alt55=2;
        	            {
        	                int LA55_0 = LA(1);
        	                if ( (LA55_0 == Comma) ) 
        	                {
        	                    alt55=1;
        	                }
        	            }
        	            switch (alt55) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:526:12: Comma
        	        	    {
        	        	        Comma167 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_chain_13008); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // ANML/base/antlr/ANML.g:526:15: (o= Within | o= SetAssign )
        	        {
        	            int alt56=2;

        	            {
        	                int LA56_0 = LA(1);
        	                if ( (LA56_0 == Within) ) 
        	                {
        	                    alt56=1;
        	                }
        	                else if ( (LA56_0 == SetAssign) ) 
        	                {
        	                    alt56=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 56;
        	                    EXCEPTION->state        = 0;


        	                    goto rulestmt_chain_1Ex;
        	                }
        	            }
        	            switch (alt56) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:526:16: o= Within
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Within, &FOLLOW_Within_in_stmt_chain_13015); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        o_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, o));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, o_tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:526:25: o= SetAssign
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(SetAssign, &FOLLOW_SetAssign_in_stmt_chain_13019); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        o_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, o));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, o_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        FOLLOWPUSH(FOLLOW_set_in_stmt_chain_13025);
        	        s=set(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, s.tree);

        	    }
        	    break;
        	case 8:
        	    // ANML/base/antlr/ANML.g:527:7: ( Comma )? i= num_relop b= e_num
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // ANML/base/antlr/ANML.g:527:12: ( Comma )?
        	        {
        	            int alt57=2;
        	            {
        	                int LA57_0 = LA(1);
        	                if ( (LA57_0 == Comma) ) 
        	                {
        	                    alt57=1;
        	                }
        	            }
        	            switch (alt57) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:527:12: Comma
        	        	    {
        	        	        Comma168 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_chain_13033); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        FOLLOWPUSH(FOLLOW_num_relop_in_stmt_chain_13039);
        	        i=num_relop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, i.tree, root_0));
        	        FOLLOWPUSH(FOLLOW_e_num_in_stmt_chain_13044);
        	        b=e_num(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, b.tree);

        	    }
        	    break;
        	case 9:
        	    // ANML/base/antlr/ANML.g:528:4: ( Comma )? (o= Equal Skip | o= Skip )
        	    {

        	        // ANML/base/antlr/ANML.g:528:4: ( Comma )?
        	        {
        	            int alt58=2;
        	            {
        	                int LA58_0 = LA(1);
        	                if ( (LA58_0 == Comma) ) 
        	                {
        	                    alt58=1;
        	                }
        	            }
        	            switch (alt58) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:528:4: Comma
        	        	    {
        	        	        Comma169 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_chain_13050); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma169, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // ANML/base/antlr/ANML.g:528:11: (o= Equal Skip | o= Skip )
        	        {
        	            int alt59=2;

        	            {
        	                int LA59_0 = LA(1);
        	                if ( (LA59_0 == Equal) ) 
        	                {
        	                    alt59=1;
        	                }
        	                else if ( (LA59_0 == Skip) ) 
        	                {
        	                    alt59=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 59;
        	                    EXCEPTION->state        = 0;


        	                    goto rulestmt_chain_1Ex;
        	                }
        	            }
        	            switch (alt59) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:528:12: o= Equal Skip
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Equal, &FOLLOW_Equal_in_stmt_chain_13056); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Equal; stream_Equal->add(stream_Equal, o, NULL); }

        	        	        Skip170 = (pANTLR3_COMMON_TOKEN) MATCHT(Skip, &FOLLOW_Skip_in_stmt_chain_13058); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Skip; stream_Skip->add(stream_Skip, Skip170, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:528:27: o= Skip
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Skip, &FOLLOW_Skip_in_stmt_chain_13064); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Skip; stream_Skip->add(stream_Skip, o, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : Skip
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 529:3: -> Skip
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Skip == NULL ? NULL : stream_Skip->nextNode(stream_Skip));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 10:
        	    // ANML/base/antlr/ANML.g:530:7: ( Comma )? (o= Assign Undefined | o= Undefine )
        	    {

        	        // ANML/base/antlr/ANML.g:530:7: ( Comma )?
        	        {
        	            int alt60=2;
        	            {
        	                int LA60_0 = LA(1);
        	                if ( (LA60_0 == Comma) ) 
        	                {
        	                    alt60=1;
        	                }
        	            }
        	            switch (alt60) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:530:7: Comma
        	        	    {
        	        	        Comma171 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_chain_13079); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma171, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // ANML/base/antlr/ANML.g:530:14: (o= Assign Undefined | o= Undefine )
        	        {
        	            int alt61=2;

        	            {
        	                int LA61_0 = LA(1);
        	                if ( (LA61_0 == Assign) ) 
        	                {
        	                    alt61=1;
        	                }
        	                else if ( (LA61_0 == Undefine) ) 
        	                {
        	                    alt61=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 61;
        	                    EXCEPTION->state        = 0;


        	                    goto rulestmt_chain_1Ex;
        	                }
        	            }
        	            switch (alt61) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:530:15: o= Assign Undefined
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Assign, &FOLLOW_Assign_in_stmt_chain_13085); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Assign; stream_Assign->add(stream_Assign, o, NULL); }

        	        	        Undefined172 = (pANTLR3_COMMON_TOKEN) MATCHT(Undefined, &FOLLOW_Undefined_in_stmt_chain_13087); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Undefined; stream_Undefined->add(stream_Undefined, Undefined172, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:530:36: o= Undefine
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Undefine, &FOLLOW_Undefine_in_stmt_chain_13093); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Undefine; stream_Undefine->add(stream_Undefine, o, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : Undefine
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 531:6: -> Undefine
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Undefine == NULL ? NULL : stream_Undefine->nextNode(stream_Undefine));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_chain_1Ex; /* Prevent compiler warnings */
    rulestmt_chain_1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Skip != NULL) stream_Skip->free(stream_Skip);
        if (stream_Assign != NULL) stream_Assign->free(stream_Assign);
        if (stream_Undefine != NULL) stream_Undefine->free(stream_Undefine);
        if (stream_Change != NULL) stream_Change->free(stream_Change);
        if (stream_Lend != NULL) stream_Lend->free(stream_Lend);
        if (stream_Equal != NULL) stream_Equal->free(stream_Equal);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_Undefined != NULL) stream_Undefined->free(stream_Undefined);
        if (stream_Use != NULL) stream_Use->free(stream_Use);
        if (stream_e_num != NULL) stream_e_num->free(stream_e_num);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_chain_1 */

/** 
 * $ANTLR start stmt_delta_chain
 * ANML/base/antlr/ANML.g:534:1: stmt_delta_chain : ( Delta ref (e+= stmt_delta_chain_1 )+ -> ^( Chain ^( DefiniteInterval ^( TBra Bra ) ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ^( TKet Ket ) ) ^( Delta ref ) ( $e)+ ) | ( interval ref ( stmt_delta_chain_1 )+ )=> interval ref (e+= stmt_delta_chain_1 )+ -> ^( Chain interval ^( Delta ref ) ( $e)+ ) );
 */
static ANMLParser_stmt_delta_chain_return
stmt_delta_chain(pANMLParser ctx)
{   
    ANMLParser_stmt_delta_chain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Delta173;
    pANTLR3_VECTOR    list_e;
    ANMLParser_ref_return ref174;
    #undef	RETURN_TYPE_ref174
    #define	RETURN_TYPE_ref174 ANMLParser_ref_return

    ANMLParser_interval_return interval175;
    #undef	RETURN_TYPE_interval175
    #define	RETURN_TYPE_interval175 ANMLParser_interval_return

    ANMLParser_ref_return ref176;
    #undef	RETURN_TYPE_ref176
    #define	RETURN_TYPE_ref176 ANMLParser_ref_return

    ANMLParser_stmt_delta_chain_1_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e ANMLParser_stmt_delta_chain_1_return

    pANTLR3_BASE_TREE Delta173_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Delta;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ref;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_interval;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stmt_delta_chain_1;
    /* Initialize rule variables
     */


    root_0 = NULL;

    Delta173       = NULL;
    list_e     = NULL;
    ref174.tree = NULL;

    interval175.tree = NULL;

    ref176.tree = NULL;

    e.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Delta173_tree   = NULL;

    stream_Delta   = NULL;
    #define CREATE_stream_Delta  if (stream_Delta == NULL) {stream_Delta = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Delta"); } 
    stream_ref   = NULL;
    #define CREATE_stream_ref  if (stream_ref == NULL) {stream_ref = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ref"); }
    stream_interval   = NULL;
    #define CREATE_stream_interval  if (stream_interval == NULL) {stream_interval = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule interval"); }
    stream_stmt_delta_chain_1   = NULL;
    #define CREATE_stream_stmt_delta_chain_1  if (stream_stmt_delta_chain_1 == NULL) {stream_stmt_delta_chain_1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stmt_delta_chain_1"); }

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:534:17: ( Delta ref (e+= stmt_delta_chain_1 )+ -> ^( Chain ^( DefiniteInterval ^( TBra Bra ) ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ^( TKet Ket ) ) ^( Delta ref ) ( $e)+ ) | ( interval ref ( stmt_delta_chain_1 )+ )=> interval ref (e+= stmt_delta_chain_1 )+ -> ^( Chain interval ^( Delta ref ) ( $e)+ ) )
            
            ANTLR3_UINT32 alt65;

            alt65=2;


            {
                int LA65_0 = LA(1);
                if ( (LA65_0 == Delta) ) 
                {
                    alt65=1;
                }
                else if ( (LA65_0 == LeftB) && (synpred13_ANML(ctx))) 
                {
                    alt65=2;
                }
                else if ( (LA65_0 == LeftP) && (synpred13_ANML(ctx))) 
                {
                    alt65=2;
                }
                else if ( (LA65_0 == Dots) && (synpred13_ANML(ctx))) 
                {
                    alt65=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 65;
                    EXCEPTION->state        = 0;


                    goto rulestmt_delta_chainEx;
                }
            }
            switch (alt65) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:535:2: Delta ref (e+= stmt_delta_chain_1 )+
        	    {
        	        Delta173 = (pANTLR3_COMMON_TOKEN) MATCHT(Delta, &FOLLOW_Delta_in_stmt_delta_chain3114); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_delta_chainEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Delta; stream_Delta->add(stream_Delta, Delta173, NULL); }

        	        FOLLOWPUSH(FOLLOW_ref_in_stmt_delta_chain3116);
        	        ref174=ref(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_delta_chainEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ref; stream_ref->add(stream_ref, ref174.tree, NULL); }
        	        // ANML/base/antlr/ANML.g:535:13: (e+= stmt_delta_chain_1 )+
        	        {
        	            int cnt63=0;

        	            for (;;)
        	            {
        	                int alt63=2;
        	        	{
        	        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	    */
        	        	    int LA63_0 = LA(1);
        	        	    if ( (LA63_0 == Comma || LA63_0 == Assign || LA63_0 == Undefine || LA63_0 == Equal || LA63_0 == Change || ((LA63_0 >= SetAssign) && (LA63_0 <= Skip))) ) 
        	        	    {
        	        	        alt63=1;
        	        	    }

        	        	}
        	        	switch (alt63) 
        	        	{
        	        	    case 1:
        	        	        // ANML/base/antlr/ANML.g:535:13: e+= stmt_delta_chain_1
        	        	        {
        	        	            FOLLOWPUSH(FOLLOW_stmt_delta_chain_1_in_stmt_delta_chain3120);
        	        	            e=stmt_delta_chain_1(ctx);

        	        	            FOLLOWPOP();
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto rulestmt_delta_chainEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                return retval;
        	        	            }
        	        	            if ( BACKTRACKING==0 ) { CREATE_stream_stmt_delta_chain_1; stream_stmt_delta_chain_1->add(stream_stmt_delta_chain_1, e.tree, NULL); }
        	        	            /* listLabelTrack(label)
        	        	             */
        	        	            if (list_e == NULL)
        	        	            {
        	        	                list_e=ctx->vectors->newVector(ctx->vectors);
        	        	            }
        	        	            list_e->add(list_e, e.tree, NULL);

        	        	        }
        	        	        break;

        	        	    default:
        	        	    
        	        		if ( cnt63 >= 1 )
        	        		{
        	        		    goto loop63;
        	        		}
        	        		if (BACKTRACKING>0)
        	        		{
        	        		    FAILEDFLAG = ANTLR3_TRUE; 
        	        		    return retval;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto rulestmt_delta_chainEx;
        	        	}
        	        	cnt63++;
        	            }
        	            loop63: ;	/* Jump to here if this rule does not match */
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : Delta, e, ref
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : e
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", list_e);
        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 536:5: -> ^( Chain ^( DefiniteInterval ^( TBra Bra ) ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ^( TKet Ket ) ) ^( Delta ref ) ( $e)+ )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:536:8: ^( Chain ^( DefiniteInterval ^( TBra Bra ) ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ^( TKet Ket ) ) ^( Delta ref ) ( $e)+ )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Chain, (pANTLR3_UINT8)"Chain"), root_1));

        	        	        // ANML/base/antlr/ANML.g:536:16: ^( DefiniteInterval ^( TBra Bra ) ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ^( TKet Ket ) )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DefiniteInterval, (pANTLR3_UINT8)"DefiniteInterval"), root_2));

        	        	            // ANML/base/antlr/ANML.g:536:35: ^( TBra Bra )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TBra, (pANTLR3_UINT8)"TBra"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Bra, (pANTLR3_UINT8)"Bra"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }
        	        	            // ANML/base/antlr/ANML.g:536:47: ^( TStart Start )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Start, (pANTLR3_UINT8)"Start"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }
        	        	            // ANML/base/antlr/ANML.g:536:63: ^( TDuration Duration )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TDuration, (pANTLR3_UINT8)"TDuration"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Duration, (pANTLR3_UINT8)"Duration"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }
        	        	            // ANML/base/antlr/ANML.g:536:85: ^( TEnd End )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TEnd, (pANTLR3_UINT8)"TEnd"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, End, (pANTLR3_UINT8)"End"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }
        	        	            // ANML/base/antlr/ANML.g:536:97: ^( TKet Ket )
        	        	            {
        	        	                pANTLR3_BASE_TREE root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	                root_3 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TKet, (pANTLR3_UINT8)"TKet"), root_3));

        	        	                ADAPTOR->addChild(ADAPTOR, root_3, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Ket, (pANTLR3_UINT8)"Ket"));

        	        	                ADAPTOR->addChild(ADAPTOR, root_2, root_3);
        	        	            }

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        // ANML/base/antlr/ANML.g:536:110: ^( Delta ref )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_Delta == NULL ? NULL : stream_Delta->nextNode(stream_Delta), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_ref == NULL ? NULL : stream_ref->nextTree(stream_ref));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        if ((stream_e == NULL || !stream_e->hasNext(stream_e))  )
        	        	        {
        	        	            CONSTRUCTEX();
        	        	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
        	        	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
        	        	        }
        	        	        else
        	        	        {
        	        	        	while ( (stream_e->hasNext(stream_e))  ) {
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        	}
        	        	        	stream_e->reset(stream_e);

        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);

        	        }
        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:537:4: ( interval ref ( stmt_delta_chain_1 )+ )=> interval ref (e+= stmt_delta_chain_1 )+
        	    {
        	        FOLLOWPUSH(FOLLOW_interval_in_stmt_delta_chain3192);
        	        interval175=interval(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_delta_chainEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_interval; stream_interval->add(stream_interval, interval175.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_ref_in_stmt_delta_chain3194);
        	        ref176=ref(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_delta_chainEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ref; stream_ref->add(stream_ref, ref176.tree, NULL); }
        	        // ANML/base/antlr/ANML.g:537:55: (e+= stmt_delta_chain_1 )+
        	        {
        	            int cnt64=0;

        	            for (;;)
        	            {
        	                int alt64=2;
        	        	{
        	        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	    */
        	        	    int LA64_0 = LA(1);
        	        	    if ( (LA64_0 == Comma || LA64_0 == Assign || LA64_0 == Undefine || LA64_0 == Equal || LA64_0 == Change || ((LA64_0 >= SetAssign) && (LA64_0 <= Skip))) ) 
        	        	    {
        	        	        alt64=1;
        	        	    }

        	        	}
        	        	switch (alt64) 
        	        	{
        	        	    case 1:
        	        	        // ANML/base/antlr/ANML.g:537:55: e+= stmt_delta_chain_1
        	        	        {
        	        	            FOLLOWPUSH(FOLLOW_stmt_delta_chain_1_in_stmt_delta_chain3198);
        	        	            e=stmt_delta_chain_1(ctx);

        	        	            FOLLOWPOP();
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto rulestmt_delta_chainEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                return retval;
        	        	            }
        	        	            if ( BACKTRACKING==0 ) { CREATE_stream_stmt_delta_chain_1; stream_stmt_delta_chain_1->add(stream_stmt_delta_chain_1, e.tree, NULL); }
        	        	            /* listLabelTrack(label)
        	        	             */
        	        	            if (list_e == NULL)
        	        	            {
        	        	                list_e=ctx->vectors->newVector(ctx->vectors);
        	        	            }
        	        	            list_e->add(list_e, e.tree, NULL);

        	        	        }
        	        	        break;

        	        	    default:
        	        	    
        	        		if ( cnt64 >= 1 )
        	        		{
        	        		    goto loop64;
        	        		}
        	        		if (BACKTRACKING>0)
        	        		{
        	        		    FAILEDFLAG = ANTLR3_TRUE; 
        	        		    return retval;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto rulestmt_delta_chainEx;
        	        	}
        	        	cnt64++;
        	            }
        	            loop64: ;	/* Jump to here if this rule does not match */
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : interval, e, ref
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : e
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", list_e);
        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 538:3: -> ^( Chain interval ^( Delta ref ) ( $e)+ )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:538:6: ^( Chain interval ^( Delta ref ) ( $e)+ )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Chain, (pANTLR3_UINT8)"Chain"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_interval == NULL ? NULL : stream_interval->nextTree(stream_interval));
        	        	        // ANML/base/antlr/ANML.g:538:23: ^( Delta ref )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Delta, (pANTLR3_UINT8)"Delta"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_ref == NULL ? NULL : stream_ref->nextTree(stream_ref));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        if ((stream_e == NULL || !stream_e->hasNext(stream_e))  )
        	        	        {
        	        	            CONSTRUCTEX();
        	        	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
        	        	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
        	        	        }
        	        	        else
        	        	        {
        	        	        	while ( (stream_e->hasNext(stream_e))  ) {
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        	}
        	        	        	stream_e->reset(stream_e);

        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);

        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_delta_chainEx; /* Prevent compiler warnings */
    rulestmt_delta_chainEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Delta != NULL) stream_Delta->free(stream_Delta);
        if (stream_ref != NULL) stream_ref->free(stream_ref);
        if (stream_interval != NULL) stream_interval->free(stream_interval);
        if (stream_stmt_delta_chain_1 != NULL) stream_stmt_delta_chain_1->free(stream_stmt_delta_chain_1);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_delta_chain */

/** 
 * $ANTLR start stmt_delta_chain_1
 * ANML/base/antlr/ANML.g:542:1: stmt_delta_chain_1 : ( ( Comma )? Assign b= e_num | ( Comma )? o= Change b= e_num -> Undefine ^( Assign $b) | ( Comma )? SetAssign s= set | ( Comma )? (o= Equal Skip | o= Skip ) -> Skip | ( Comma )? (o= Assign Undefined | o= Undefine ) -> Undefine );
 */
static ANMLParser_stmt_delta_chain_1_return
stmt_delta_chain_1(pANMLParser ctx)
{   
    ANMLParser_stmt_delta_chain_1_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    pANTLR3_COMMON_TOKEN    Comma177;
    pANTLR3_COMMON_TOKEN    Assign178;
    pANTLR3_COMMON_TOKEN    Comma179;
    pANTLR3_COMMON_TOKEN    Comma180;
    pANTLR3_COMMON_TOKEN    SetAssign181;
    pANTLR3_COMMON_TOKEN    Comma182;
    pANTLR3_COMMON_TOKEN    Skip183;
    pANTLR3_COMMON_TOKEN    Comma184;
    pANTLR3_COMMON_TOKEN    Undefined185;
    ANMLParser_e_num_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b ANMLParser_e_num_return

    ANMLParser_set_return s;
    #undef	RETURN_TYPE_s
    #define	RETURN_TYPE_s ANMLParser_set_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_BASE_TREE Comma177_tree;
    pANTLR3_BASE_TREE Assign178_tree;
    pANTLR3_BASE_TREE Comma179_tree;
    pANTLR3_BASE_TREE Comma180_tree;
    pANTLR3_BASE_TREE SetAssign181_tree;
    pANTLR3_BASE_TREE Comma182_tree;
    pANTLR3_BASE_TREE Skip183_tree;
    pANTLR3_BASE_TREE Comma184_tree;
    pANTLR3_BASE_TREE Undefined185_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Skip;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Assign;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Undefine;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Change;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Equal;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Undefined;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e_num;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    Comma177       = NULL;
    Assign178       = NULL;
    Comma179       = NULL;
    Comma180       = NULL;
    SetAssign181       = NULL;
    Comma182       = NULL;
    Skip183       = NULL;
    Comma184       = NULL;
    Undefined185       = NULL;
    b.tree = NULL;

    s.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;
    Comma177_tree   = NULL;
    Assign178_tree   = NULL;
    Comma179_tree   = NULL;
    Comma180_tree   = NULL;
    SetAssign181_tree   = NULL;
    Comma182_tree   = NULL;
    Skip183_tree   = NULL;
    Comma184_tree   = NULL;
    Undefined185_tree   = NULL;

    stream_Skip   = NULL;
    #define CREATE_stream_Skip  if (stream_Skip == NULL) {stream_Skip = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Skip"); } 
    stream_Assign   = NULL;
    #define CREATE_stream_Assign  if (stream_Assign == NULL) {stream_Assign = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Assign"); } 
    stream_Undefine   = NULL;
    #define CREATE_stream_Undefine  if (stream_Undefine == NULL) {stream_Undefine = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Undefine"); } 
    stream_Change   = NULL;
    #define CREATE_stream_Change  if (stream_Change == NULL) {stream_Change = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Change"); } 
    stream_Equal   = NULL;
    #define CREATE_stream_Equal  if (stream_Equal == NULL) {stream_Equal = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Equal"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_Undefined   = NULL;
    #define CREATE_stream_Undefined  if (stream_Undefined == NULL) {stream_Undefined = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Undefined"); } 
    stream_e_num   = NULL;
    #define CREATE_stream_e_num  if (stream_e_num == NULL) {stream_e_num = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule e_num"); }

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:542:19: ( ( Comma )? Assign b= e_num | ( Comma )? o= Change b= e_num -> Undefine ^( Assign $b) | ( Comma )? SetAssign s= set | ( Comma )? (o= Equal Skip | o= Skip ) -> Skip | ( Comma )? (o= Assign Undefined | o= Undefine ) -> Undefine )
            
            ANTLR3_UINT32 alt73;

            alt73=5;

            switch ( LA(1) ) 
            {
            case Comma:
            	{
            		switch ( LA(2) ) 
            		{
            		case SetAssign:
            			{
            				alt73=3;
            			}
            		    break;
            		case Change:
            			{
            				alt73=2;
            			}
            		    break;
            		case Assign:
            			{

            				{
            				    int LA73_2 = LA(3);
            				    if ( (LA73_2 == Undefined) ) 
            				    {
            				        alt73=5;
            				    }
            				    else if ( (LA73_2 == ID || LA73_2 == LeftB || LA73_2 == LeftP || LA73_2 == Duration || LA73_2 == NotBit || LA73_2 == Contains || ((LA73_2 >= ForAll) && (LA73_2 <= Exists)) || LA73_2 == Dots || LA73_2 == Minus || ((LA73_2 >= Unordered) && (LA73_2 <= End)) || ((LA73_2 >= INT) && (LA73_2 <= Infinity))) ) 
            				    {
            				        alt73=1;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE; 
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 73;
            				        EXCEPTION->state        = 2;


            				        goto rulestmt_delta_chain_1Ex;
            				    }
            				}
            			}
            		    break;
            		case Equal:
            		case Skip:
            			{
            				alt73=4;
            			}
            		    break;
            		case Undefine:
            			{
            				alt73=5;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE; 
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 73;
            		    EXCEPTION->state        = 1;


            		    goto rulestmt_delta_chain_1Ex;
            		}

            	}
                break;
            case Assign:
            	{

            		{
            		    int LA73_2 = LA(2);
            		    if ( (LA73_2 == Undefined) ) 
            		    {
            		        alt73=5;
            		    }
            		    else if ( (LA73_2 == ID || LA73_2 == LeftB || LA73_2 == LeftP || LA73_2 == Duration || LA73_2 == NotBit || LA73_2 == Contains || ((LA73_2 >= ForAll) && (LA73_2 <= Exists)) || LA73_2 == Dots || LA73_2 == Minus || ((LA73_2 >= Unordered) && (LA73_2 <= End)) || ((LA73_2 >= INT) && (LA73_2 <= Infinity))) ) 
            		    {
            		        alt73=1;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 73;
            		        EXCEPTION->state        = 2;


            		        goto rulestmt_delta_chain_1Ex;
            		    }
            		}
            	}
                break;
            case Change:
            	{
            		alt73=2;
            	}
                break;
            case SetAssign:
            	{
            		alt73=3;
            	}
                break;
            case Equal:
            case Skip:
            	{
            		alt73=4;
            	}
                break;
            case Undefine:
            	{
            		alt73=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 73;
                EXCEPTION->state        = 0;


                goto rulestmt_delta_chain_1Ex;
            }

            switch (alt73) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:543:5: ( Comma )? Assign b= e_num
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // ANML/base/antlr/ANML.g:543:5: ( Comma )?
        	        {
        	            int alt66=2;
        	            {
        	                int LA66_0 = LA(1);
        	                if ( (LA66_0 == Comma) ) 
        	                {
        	                    alt66=1;
        	                }
        	            }
        	            switch (alt66) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:543:5: Comma
        	        	    {
        	        	        Comma177 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_delta_chain_13232); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_delta_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        Comma177_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Comma177));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, Comma177_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        Assign178 = (pANTLR3_COMMON_TOKEN) MATCHT(Assign, &FOLLOW_Assign_in_stmt_delta_chain_13235); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_delta_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        Assign178_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Assign178));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, Assign178_tree, root_0));
        	        }
        	        FOLLOWPUSH(FOLLOW_e_num_in_stmt_delta_chain_13240);
        	        b=e_num(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_delta_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, b.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:544:7: ( Comma )? o= Change b= e_num
        	    {

        	        // ANML/base/antlr/ANML.g:544:7: ( Comma )?
        	        {
        	            int alt67=2;
        	            {
        	                int LA67_0 = LA(1);
        	                if ( (LA67_0 == Comma) ) 
        	                {
        	                    alt67=1;
        	                }
        	            }
        	            switch (alt67) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:544:7: Comma
        	        	    {
        	        	        Comma179 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_delta_chain_13248); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_delta_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma179, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Change, &FOLLOW_Change_in_stmt_delta_chain_13253); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_delta_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Change; stream_Change->add(stream_Change, o, NULL); }

        	        FOLLOWPUSH(FOLLOW_e_num_in_stmt_delta_chain_13257);
        	        b=e_num(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_delta_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_e_num; stream_e_num->add(stream_e_num, b.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : b
        	         * token labels      : 
        	         * rule labels       : retval, b
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 545:6: -> Undefine ^( Assign $b)
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Undefine, (pANTLR3_UINT8)"Undefine"));
        	        	    // ANML/base/antlr/ANML.g:546:7: ^( Assign $b)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Assign, (pANTLR3_UINT8)"Assign"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_b != NULL) stream_b->free(stream_b);


        	        }
        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:547:7: ( Comma )? SetAssign s= set
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // ANML/base/antlr/ANML.g:547:7: ( Comma )?
        	        {
        	            int alt68=2;
        	            {
        	                int LA68_0 = LA(1);
        	                if ( (LA68_0 == Comma) ) 
        	                {
        	                    alt68=1;
        	                }
        	            }
        	            switch (alt68) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:547:7: Comma
        	        	    {
        	        	        Comma180 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_delta_chain_13287); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_delta_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        Comma180_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Comma180));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, Comma180_tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        SetAssign181 = (pANTLR3_COMMON_TOKEN) MATCHT(SetAssign, &FOLLOW_SetAssign_in_stmt_delta_chain_13290); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_delta_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        SetAssign181_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SetAssign181));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, SetAssign181_tree, root_0));
        	        }
        	        FOLLOWPUSH(FOLLOW_set_in_stmt_delta_chain_13295);
        	        s=set(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestmt_delta_chain_1Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, s.tree);

        	    }
        	    break;
        	case 4:
        	    // ANML/base/antlr/ANML.g:548:4: ( Comma )? (o= Equal Skip | o= Skip )
        	    {

        	        // ANML/base/antlr/ANML.g:548:4: ( Comma )?
        	        {
        	            int alt69=2;
        	            {
        	                int LA69_0 = LA(1);
        	                if ( (LA69_0 == Comma) ) 
        	                {
        	                    alt69=1;
        	                }
        	            }
        	            switch (alt69) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:548:4: Comma
        	        	    {
        	        	        Comma182 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_delta_chain_13300); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_delta_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma182, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // ANML/base/antlr/ANML.g:548:11: (o= Equal Skip | o= Skip )
        	        {
        	            int alt70=2;

        	            {
        	                int LA70_0 = LA(1);
        	                if ( (LA70_0 == Equal) ) 
        	                {
        	                    alt70=1;
        	                }
        	                else if ( (LA70_0 == Skip) ) 
        	                {
        	                    alt70=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 70;
        	                    EXCEPTION->state        = 0;


        	                    goto rulestmt_delta_chain_1Ex;
        	                }
        	            }
        	            switch (alt70) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:548:12: o= Equal Skip
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Equal, &FOLLOW_Equal_in_stmt_delta_chain_13306); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_delta_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Equal; stream_Equal->add(stream_Equal, o, NULL); }

        	        	        Skip183 = (pANTLR3_COMMON_TOKEN) MATCHT(Skip, &FOLLOW_Skip_in_stmt_delta_chain_13308); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_delta_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Skip; stream_Skip->add(stream_Skip, Skip183, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:548:27: o= Skip
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Skip, &FOLLOW_Skip_in_stmt_delta_chain_13314); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_delta_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Skip; stream_Skip->add(stream_Skip, o, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : Skip
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 549:3: -> Skip
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Skip == NULL ? NULL : stream_Skip->nextNode(stream_Skip));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // ANML/base/antlr/ANML.g:550:7: ( Comma )? (o= Assign Undefined | o= Undefine )
        	    {

        	        // ANML/base/antlr/ANML.g:550:7: ( Comma )?
        	        {
        	            int alt71=2;
        	            {
        	                int LA71_0 = LA(1);
        	                if ( (LA71_0 == Comma) ) 
        	                {
        	                    alt71=1;
        	                }
        	            }
        	            switch (alt71) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:550:7: Comma
        	        	    {
        	        	        Comma184 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_stmt_delta_chain_13329); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_delta_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma184, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // ANML/base/antlr/ANML.g:550:14: (o= Assign Undefined | o= Undefine )
        	        {
        	            int alt72=2;

        	            {
        	                int LA72_0 = LA(1);
        	                if ( (LA72_0 == Assign) ) 
        	                {
        	                    alt72=1;
        	                }
        	                else if ( (LA72_0 == Undefine) ) 
        	                {
        	                    alt72=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 72;
        	                    EXCEPTION->state        = 0;


        	                    goto rulestmt_delta_chain_1Ex;
        	                }
        	            }
        	            switch (alt72) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:550:15: o= Assign Undefined
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Assign, &FOLLOW_Assign_in_stmt_delta_chain_13335); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_delta_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Assign; stream_Assign->add(stream_Assign, o, NULL); }

        	        	        Undefined185 = (pANTLR3_COMMON_TOKEN) MATCHT(Undefined, &FOLLOW_Undefined_in_stmt_delta_chain_13337); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_delta_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Undefined; stream_Undefined->add(stream_Undefined, Undefined185, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:550:36: o= Undefine
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(Undefine, &FOLLOW_Undefine_in_stmt_delta_chain_13343); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestmt_delta_chain_1Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Undefine; stream_Undefine->add(stream_Undefine, o, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : Undefine
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 551:6: -> Undefine
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Undefine == NULL ? NULL : stream_Undefine->nextNode(stream_Undefine));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_delta_chain_1Ex; /* Prevent compiler warnings */
    rulestmt_delta_chain_1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Skip != NULL) stream_Skip->free(stream_Skip);
        if (stream_Assign != NULL) stream_Assign->free(stream_Assign);
        if (stream_Undefine != NULL) stream_Undefine->free(stream_Undefine);
        if (stream_Change != NULL) stream_Change->free(stream_Change);
        if (stream_Equal != NULL) stream_Equal->free(stream_Equal);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_Undefined != NULL) stream_Undefined->free(stream_Undefined);
        if (stream_e_num != NULL) stream_e_num->free(stream_e_num);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_delta_chain_1 */

/** 
 * $ANTLR start stmt_timeless
 * ANML/base/antlr/ANML.g:554:1: stmt_timeless : time_primitive Assign expr ;
 */
static ANMLParser_stmt_timeless_return
stmt_timeless(pANMLParser ctx)
{   
    ANMLParser_stmt_timeless_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Assign187;
    ANMLParser_time_primitive_return time_primitive186;
    #undef	RETURN_TYPE_time_primitive186
    #define	RETURN_TYPE_time_primitive186 ANMLParser_time_primitive_return

    ANMLParser_expr_return expr188;
    #undef	RETURN_TYPE_expr188
    #define	RETURN_TYPE_expr188 ANMLParser_expr_return

    pANTLR3_BASE_TREE Assign187_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Assign187       = NULL;
    time_primitive186.tree = NULL;

    expr188.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Assign187_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:554:14: ( time_primitive Assign expr )
        // ANML/base/antlr/ANML.g:555:2: time_primitive Assign expr
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_time_primitive_in_stmt_timeless3363);
            time_primitive186=time_primitive(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestmt_timelessEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, time_primitive186.tree);
            Assign187 = (pANTLR3_COMMON_TOKEN) MATCHT(Assign, &FOLLOW_Assign_in_stmt_timeless3365); 
            if  (HASEXCEPTION())
            {
                goto rulestmt_timelessEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            Assign187_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Assign187));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, Assign187_tree, root_0));
            }
            FOLLOWPUSH(FOLLOW_expr_in_stmt_timeless3368);
            expr188=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestmt_timelessEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr188.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestmt_timelessEx; /* Prevent compiler warnings */
    rulestmt_timelessEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stmt_timeless */

/** 
 * $ANTLR start guard
 * ANML/base/antlr/ANML.g:558:1: guard : expr ;
 */
static ANMLParser_guard_return
guard(pANMLParser ctx)
{   
    ANMLParser_guard_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_expr_return expr189;
    #undef	RETURN_TYPE_expr189
    #define	RETURN_TYPE_expr189 ANMLParser_expr_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    expr189.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:558:6: ( expr )
        // ANML/base/antlr/ANML.g:559:2: expr
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_expr_in_guard3379);
            expr189=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleguardEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr189.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleguardEx; /* Prevent compiler warnings */
    ruleguardEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end guard */

/** 
 * $ANTLR start interval
 * ANML/base/antlr/ANML.g:562:1: interval : ( ( univ_time )=> univ_time | ( exist_time )=> exist_time );
 */
static ANMLParser_interval_return
interval(pANMLParser ctx)
{   
    ANMLParser_interval_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_univ_time_return univ_time190;
    #undef	RETURN_TYPE_univ_time190
    #define	RETURN_TYPE_univ_time190 ANMLParser_univ_time_return

    ANMLParser_exist_time_return exist_time191;
    #undef	RETURN_TYPE_exist_time191
    #define	RETURN_TYPE_exist_time191 ANMLParser_exist_time_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    univ_time190.tree = NULL;

    exist_time191.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:562:9: ( ( univ_time )=> univ_time | ( exist_time )=> exist_time )
            
            ANTLR3_UINT32 alt74;

            alt74=2;


            {
                int LA74_0 = LA(1);
                if ( (LA74_0 == LeftB) ) 
                {

                    {
                        int LA74_1 = LA(2);
                        if ( (synpred14_ANML(ctx)) ) 
                        {
                            alt74=1;
                        }
                        else if ( (synpred15_ANML(ctx)) ) 
                        {
                            alt74=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 74;
                            EXCEPTION->state        = 1;


                            goto ruleintervalEx;
                        }
                    }
                }
                else if ( (LA74_0 == LeftP) ) 
                {

                    {
                        int LA74_2 = LA(2);
                        if ( (synpred14_ANML(ctx)) ) 
                        {
                            alt74=1;
                        }
                        else if ( (synpred15_ANML(ctx)) ) 
                        {
                            alt74=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 74;
                            EXCEPTION->state        = 2;


                            goto ruleintervalEx;
                        }
                    }
                }
                else if ( (LA74_0 == Dots) && (synpred15_ANML(ctx))) 
                {
                    alt74=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 74;
                    EXCEPTION->state        = 0;


                    goto ruleintervalEx;
                }
            }
            switch (alt74) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:563:2: ( univ_time )=> univ_time
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_univ_time_in_interval3393);
        	        univ_time190=univ_time(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleintervalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, univ_time190.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:564:4: ( exist_time )=> exist_time
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_exist_time_in_interval3402);
        	        exist_time191=exist_time(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleintervalEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, exist_time191.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleintervalEx; /* Prevent compiler warnings */
    ruleintervalEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end interval */

/** 
 * $ANTLR start univ_time
 * ANML/base/antlr/ANML.g:571:1: univ_time : ( ( bra All ket )=> bra All ket -> ^( DefiniteInterval bra ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ket ) | ( LeftB expr RightB )=> LeftB e= expr RightB -> ^( DefinitePoint ^( TStart $e) ) | bra (d= delta_time Comma e= expr ket -> ^( DefiniteInterval bra ^( TDuration $d) ^( TEnd $e) ket ) | e= expr Comma (d= delta_time ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TDuration $d) ket ) | f= expr ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TEnd $f) ket ) ) ) );
 */
static ANMLParser_univ_time_return
univ_time(pANMLParser ctx)
{   
    ANMLParser_univ_time_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    All193;
    pANTLR3_COMMON_TOKEN    LeftB195;
    pANTLR3_COMMON_TOKEN    RightB196;
    pANTLR3_COMMON_TOKEN    Comma198;
    pANTLR3_COMMON_TOKEN    Comma200;
    ANMLParser_expr_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e ANMLParser_expr_return

    ANMLParser_delta_time_return d;
    #undef	RETURN_TYPE_d
    #define	RETURN_TYPE_d ANMLParser_delta_time_return

    ANMLParser_expr_return f;
    #undef	RETURN_TYPE_f
    #define	RETURN_TYPE_f ANMLParser_expr_return

    ANMLParser_bra_return bra192;
    #undef	RETURN_TYPE_bra192
    #define	RETURN_TYPE_bra192 ANMLParser_bra_return

    ANMLParser_ket_return ket194;
    #undef	RETURN_TYPE_ket194
    #define	RETURN_TYPE_ket194 ANMLParser_ket_return

    ANMLParser_bra_return bra197;
    #undef	RETURN_TYPE_bra197
    #define	RETURN_TYPE_bra197 ANMLParser_bra_return

    ANMLParser_ket_return ket199;
    #undef	RETURN_TYPE_ket199
    #define	RETURN_TYPE_ket199 ANMLParser_ket_return

    ANMLParser_ket_return ket201;
    #undef	RETURN_TYPE_ket201
    #define	RETURN_TYPE_ket201 ANMLParser_ket_return

    ANMLParser_ket_return ket202;
    #undef	RETURN_TYPE_ket202
    #define	RETURN_TYPE_ket202 ANMLParser_ket_return

    pANTLR3_BASE_TREE All193_tree;
    pANTLR3_BASE_TREE LeftB195_tree;
    pANTLR3_BASE_TREE RightB196_tree;
    pANTLR3_BASE_TREE Comma198_tree;
    pANTLR3_BASE_TREE Comma200_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightB;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftB;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_All;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_delta_time;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bra;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ket;
    /* Initialize rule variables
     */


    root_0 = NULL;

    All193       = NULL;
    LeftB195       = NULL;
    RightB196       = NULL;
    Comma198       = NULL;
    Comma200       = NULL;
    e.tree = NULL;

    d.tree = NULL;

    f.tree = NULL;

    bra192.tree = NULL;

    ket194.tree = NULL;

    bra197.tree = NULL;

    ket199.tree = NULL;

    ket201.tree = NULL;

    ket202.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    All193_tree   = NULL;
    LeftB195_tree   = NULL;
    RightB196_tree   = NULL;
    Comma198_tree   = NULL;
    Comma200_tree   = NULL;

    stream_RightB   = NULL;
    #define CREATE_stream_RightB  if (stream_RightB == NULL) {stream_RightB = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightB"); } 
    stream_LeftB   = NULL;
    #define CREATE_stream_LeftB  if (stream_LeftB == NULL) {stream_LeftB = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftB"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_All   = NULL;
    #define CREATE_stream_All  if (stream_All == NULL) {stream_All = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token All"); } 
    stream_delta_time   = NULL;
    #define CREATE_stream_delta_time  if (stream_delta_time == NULL) {stream_delta_time = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule delta_time"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_bra   = NULL;
    #define CREATE_stream_bra  if (stream_bra == NULL) {stream_bra = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bra"); }
    stream_ket   = NULL;
    #define CREATE_stream_ket  if (stream_ket == NULL) {stream_ket = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ket"); }

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:571:10: ( ( bra All ket )=> bra All ket -> ^( DefiniteInterval bra ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ket ) | ( LeftB expr RightB )=> LeftB e= expr RightB -> ^( DefinitePoint ^( TStart $e) ) | bra (d= delta_time Comma e= expr ket -> ^( DefiniteInterval bra ^( TDuration $d) ^( TEnd $e) ket ) | e= expr Comma (d= delta_time ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TDuration $d) ket ) | f= expr ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TEnd $f) ket ) ) ) )
            
            ANTLR3_UINT32 alt77;

            alt77=3;


            {
                int LA77_0 = LA(1);
                if ( (LA77_0 == LeftB) ) 
                {

                    {
                        int LA77_1 = LA(2);
                        if ( (synpred16_ANML(ctx)) ) 
                        {
                            alt77=1;
                        }
                        else if ( (synpred17_ANML(ctx)) ) 
                        {
                            alt77=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt77=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 77;
                            EXCEPTION->state        = 1;


                            goto ruleuniv_timeEx;
                        }
                    }
                }
                else if ( (LA77_0 == LeftP) ) 
                {

                    {
                        int LA77_2 = LA(2);
                        if ( (synpred16_ANML(ctx)) ) 
                        {
                            alt77=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt77=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 77;
                            EXCEPTION->state        = 2;


                            goto ruleuniv_timeEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 77;
                    EXCEPTION->state        = 0;


                    goto ruleuniv_timeEx;
                }
            }
            switch (alt77) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:573:2: ( bra All ket )=> bra All ket
        	    {
        	        FOLLOWPUSH(FOLLOW_bra_in_univ_time3427);
        	        bra192=bra(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleuniv_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_bra; stream_bra->add(stream_bra, bra192.tree, NULL); }
        	        All193 = (pANTLR3_COMMON_TOKEN) MATCHT(All, &FOLLOW_All_in_univ_time3429); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleuniv_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_All; stream_All->add(stream_All, All193, NULL); }

        	        FOLLOWPUSH(FOLLOW_ket_in_univ_time3431);
        	        ket194=ket(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleuniv_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ket; stream_ket->add(stream_ket, ket194.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : bra, ket
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 574:6: -> ^( DefiniteInterval bra ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ket )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:574:9: ^( DefiniteInterval bra ^( TStart Start ) ^( TDuration Duration ) ^( TEnd End ) ket )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DefiniteInterval, (pANTLR3_UINT8)"DefiniteInterval"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bra == NULL ? NULL : stream_bra->nextTree(stream_bra));
        	        	        // ANML/base/antlr/ANML.g:574:32: ^( TStart Start )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Start, (pANTLR3_UINT8)"Start"));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        // ANML/base/antlr/ANML.g:574:48: ^( TDuration Duration )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TDuration, (pANTLR3_UINT8)"TDuration"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Duration, (pANTLR3_UINT8)"Duration"));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        // ANML/base/antlr/ANML.g:574:70: ^( TEnd End )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TEnd, (pANTLR3_UINT8)"TEnd"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, End, (pANTLR3_UINT8)"End"));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ket == NULL ? NULL : stream_ket->nextTree(stream_ket));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:575:4: ( LeftB expr RightB )=> LeftB e= expr RightB
        	    {
        	        LeftB195 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftB, &FOLLOW_LeftB_in_univ_time3479); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleuniv_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftB; stream_LeftB->add(stream_LeftB, LeftB195, NULL); }

        	        FOLLOWPUSH(FOLLOW_expr_in_univ_time3483);
        	        e=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleuniv_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }
        	        RightB196 = (pANTLR3_COMMON_TOKEN) MATCHT(RightB, &FOLLOW_RightB_in_univ_time3485); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleuniv_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RightB; stream_RightB->add(stream_RightB, RightB196, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : e
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 576:4: -> ^( DefinitePoint ^( TStart $e) )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:576:7: ^( DefinitePoint ^( TStart $e) )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DefinitePoint, (pANTLR3_UINT8)"DefinitePoint"), root_1));

        	        	        // ANML/base/antlr/ANML.g:576:23: ^( TStart $e)
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:577:4: bra (d= delta_time Comma e= expr ket -> ^( DefiniteInterval bra ^( TDuration $d) ^( TEnd $e) ket ) | e= expr Comma (d= delta_time ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TDuration $d) ket ) | f= expr ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TEnd $f) ket ) ) )
        	    {
        	        FOLLOWPUSH(FOLLOW_bra_in_univ_time3507);
        	        bra197=bra(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleuniv_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_bra; stream_bra->add(stream_bra, bra197.tree, NULL); }

        	        // ANML/base/antlr/ANML.g:578:4: (d= delta_time Comma e= expr ket -> ^( DefiniteInterval bra ^( TDuration $d) ^( TEnd $e) ket ) | e= expr Comma (d= delta_time ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TDuration $d) ket ) | f= expr ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TEnd $f) ket ) ) )
        	        {
        	            int alt76=2;

        	            {
        	                int LA76_0 = LA(1);
        	                if ( (LA76_0 == Delta) ) 
        	                {
        	                    alt76=1;
        	                }
        	                else if ( (LA76_0 == ID || LA76_0 == LeftB || LA76_0 == LeftP || LA76_0 == Duration || ((LA76_0 >= NotLog) && (LA76_0 <= NotBit)) || LA76_0 == Contains || ((LA76_0 >= ForAll) && (LA76_0 <= Exists)) || LA76_0 == Dots || LA76_0 == Minus || ((LA76_0 >= Unordered) && (LA76_0 <= End)) || ((LA76_0 >= INT) && (LA76_0 <= Infinity))) ) 
        	                {
        	                    alt76=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 76;
        	                    EXCEPTION->state        = 0;


        	                    goto ruleuniv_timeEx;
        	                }
        	            }
        	            switch (alt76) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:578:6: d= delta_time Comma e= expr ket
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_delta_time_in_univ_time3517);
        	        	        d=delta_time(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleuniv_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_delta_time; stream_delta_time->add(stream_delta_time, d.tree, NULL); }
        	        	        Comma198 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_univ_time3519); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleuniv_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma198, NULL); }

        	        	        FOLLOWPUSH(FOLLOW_expr_in_univ_time3523);
        	        	        e=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleuniv_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }
        	        	        FOLLOWPUSH(FOLLOW_ket_in_univ_time3525);
        	        	        ket199=ket(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleuniv_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_ket; stream_ket->add(stream_ket, ket199.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : ket, bra, e, d
        	        	         * token labels      : 
        	        	         * rule labels       : retval, d, e
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_d;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	        	stream_d=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token d", d.tree != NULL ? d.tree : NULL);
        	        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 579:3: -> ^( DefiniteInterval bra ^( TDuration $d) ^( TEnd $e) ket )
        	        	        	{
        	        	        	    // ANML/base/antlr/ANML.g:579:6: ^( DefiniteInterval bra ^( TDuration $d) ^( TEnd $e) ket )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DefiniteInterval, (pANTLR3_UINT8)"DefiniteInterval"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bra == NULL ? NULL : stream_bra->nextTree(stream_bra));
        	        	        	        // ANML/base/antlr/ANML.g:579:29: ^( TDuration $d)
        	        	        	        {
        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TDuration, (pANTLR3_UINT8)"TDuration"), root_2));

        	        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_d == NULL ? NULL : stream_d->nextTree(stream_d));

        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        }
        	        	        	        // ANML/base/antlr/ANML.g:579:45: ^( TEnd $e)
        	        	        	        {
        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TEnd, (pANTLR3_UINT8)"TEnd"), root_2));

        	        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        }
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ket == NULL ? NULL : stream_ket->nextTree(stream_ket));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	        	if (stream_d != NULL) stream_d->free(stream_d);
        	        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:580:6: e= expr Comma (d= delta_time ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TDuration $d) ket ) | f= expr ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TEnd $f) ket ) )
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_univ_time3560);
        	        	        e=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleuniv_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }
        	        	        Comma200 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_univ_time3562); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleuniv_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma200, NULL); }


        	        	        // ANML/base/antlr/ANML.g:581:3: (d= delta_time ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TDuration $d) ket ) | f= expr ket -> ^( DefiniteInterval bra ^( TStart $e) ^( TEnd $f) ket ) )
        	        	        {
        	        	            int alt75=2;

        	        	            {
        	        	                int LA75_0 = LA(1);
        	        	                if ( (LA75_0 == Delta) ) 
        	        	                {
        	        	                    alt75=1;
        	        	                }
        	        	                else if ( (LA75_0 == ID || LA75_0 == LeftB || LA75_0 == LeftP || LA75_0 == Duration || ((LA75_0 >= NotLog) && (LA75_0 <= NotBit)) || LA75_0 == Contains || ((LA75_0 >= ForAll) && (LA75_0 <= Exists)) || LA75_0 == Dots || LA75_0 == Minus || ((LA75_0 >= Unordered) && (LA75_0 <= End)) || ((LA75_0 >= INT) && (LA75_0 <= Infinity))) ) 
        	        	                {
        	        	                    alt75=2;
        	        	                }
        	        	                else 
        	        	                {
        	        	                    if (BACKTRACKING>0)
        	        	                    {
        	        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	        	                        return retval;
        	        	                    }
        	        	                
        	        	                    CONSTRUCTEX();
        	        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	        	                    EXCEPTION->message      = (void *)"";
        	        	                    EXCEPTION->decisionNum  = 75;
        	        	                    EXCEPTION->state        = 0;


        	        	                    goto ruleuniv_timeEx;
        	        	                }
        	        	            }
        	        	            switch (alt75) 
        	        	            {
        	        	        	case 1:
        	        	        	    // ANML/base/antlr/ANML.g:581:5: d= delta_time ket
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_delta_time_in_univ_time3571);
        	        	        	        d=delta_time(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleuniv_timeEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_delta_time; stream_delta_time->add(stream_delta_time, d.tree, NULL); }
        	        	        	        FOLLOWPUSH(FOLLOW_ket_in_univ_time3573);
        	        	        	        ket201=ket(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleuniv_timeEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_ket; stream_ket->add(stream_ket, ket201.tree, NULL); }

        	        	        	         
        	        	        	        /* AST REWRITE
        	        	        	         * elements          : bra, ket, e, d
        	        	        	         * token labels      : 
        	        	        	         * rule labels       : retval, d, e
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 
        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_d;
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	        	        	stream_d=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token d", d.tree != NULL ? d.tree : NULL);
        	        	        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 582:5: -> ^( DefiniteInterval bra ^( TStart $e) ^( TDuration $d) ket )
        	        	        	        	{
        	        	        	        	    // ANML/base/antlr/ANML.g:582:8: ^( DefiniteInterval bra ^( TStart $e) ^( TDuration $d) ket )
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DefiniteInterval, (pANTLR3_UINT8)"DefiniteInterval"), root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bra == NULL ? NULL : stream_bra->nextTree(stream_bra));
        	        	        	        	        // ANML/base/antlr/ANML.g:582:31: ^( TStart $e)
        	        	        	        	        {
        	        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_2));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        	        }
        	        	        	        	        // ANML/base/antlr/ANML.g:582:44: ^( TDuration $d)
        	        	        	        	        {
        	        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TDuration, (pANTLR3_UINT8)"TDuration"), root_2));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_d == NULL ? NULL : stream_d->nextTree(stream_d));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        	        }
        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ket == NULL ? NULL : stream_ket->nextTree(stream_ket));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}

        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	        	        	if (stream_d != NULL) stream_d->free(stream_d);
        	        	        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        	        	        }
        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // ANML/base/antlr/ANML.g:583:5: f= expr ket
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_expr_in_univ_time3609);
        	        	        	        f=expr(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleuniv_timeEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, f.tree, NULL); }
        	        	        	        FOLLOWPUSH(FOLLOW_ket_in_univ_time3611);
        	        	        	        ket202=ket(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleuniv_timeEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_ket; stream_ket->add(stream_ket, ket202.tree, NULL); }

        	        	        	         
        	        	        	        /* AST REWRITE
        	        	        	         * elements          : f, ket, e, bra
        	        	        	         * token labels      : 
        	        	        	         * rule labels       : f, retval, e
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 
        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_f;
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	        	        	stream_f=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token f", f.tree != NULL ? f.tree : NULL);
        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 584:5: -> ^( DefiniteInterval bra ^( TStart $e) ^( TEnd $f) ket )
        	        	        	        	{
        	        	        	        	    // ANML/base/antlr/ANML.g:584:8: ^( DefiniteInterval bra ^( TStart $e) ^( TEnd $f) ket )
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DefiniteInterval, (pANTLR3_UINT8)"DefiniteInterval"), root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bra == NULL ? NULL : stream_bra->nextTree(stream_bra));
        	        	        	        	        // ANML/base/antlr/ANML.g:584:31: ^( TStart $e)
        	        	        	        	        {
        	        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_2));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        	        }
        	        	        	        	        // ANML/base/antlr/ANML.g:584:44: ^( TEnd $f)
        	        	        	        	        {
        	        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TEnd, (pANTLR3_UINT8)"TEnd"), root_2));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_f == NULL ? NULL : stream_f->nextTree(stream_f));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        	        }
        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ket == NULL ? NULL : stream_ket->nextTree(stream_ket));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}

        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_f != NULL) stream_f->free(stream_f);
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        	        	        }
        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleuniv_timeEx; /* Prevent compiler warnings */
    ruleuniv_timeEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RightB != NULL) stream_RightB->free(stream_RightB);
        if (stream_LeftB != NULL) stream_LeftB->free(stream_LeftB);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_All != NULL) stream_All->free(stream_All);
        if (stream_delta_time != NULL) stream_delta_time->free(stream_delta_time);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_bra != NULL) stream_bra->free(stream_bra);
        if (stream_ket != NULL) stream_ket->free(stream_ket);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end univ_time */

/** 
 * $ANTLR start exist_time
 * ANML/base/antlr/ANML.g:589:1: exist_time : ( ( LeftB Skip RightB )=> LeftB Skip RightB -> ^( IndefinitePoint ) | ( bra expr rLimit )=> bra e= expr rLimit -> ^( IndefiniteInterval bra ^( TStart $e) rLimit ) | ( lLimit expr ket )=> lLimit e= expr ket -> ^( IndefiniteInterval lLimit ^( TEnd $e) ket ) | bra ( ( Delta )=>d= delta_time Comma ( Skip )? ket -> ^( IndefiniteInterval bra ^( TDuration $d) ket ) | ( Skip )=> Skip Comma ( ( Delta )=>d= delta_time ket -> ^( IndefiniteInterval bra ^( TDuration $d) ket ) | ( Skip )=> Skip ket -> ^( IndefiniteInterval bra ket ) | e= expr ket -> ^( IndefiniteInterval bra ^( TEnd $e) ket ) ) | e= expr Comma Skip ket -> ^( IndefiniteInterval bra ^( TStart $e) ket ) ) );
 */
static ANMLParser_exist_time_return
exist_time(pANMLParser ctx)
{   
    ANMLParser_exist_time_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LeftB203;
    pANTLR3_COMMON_TOKEN    Skip204;
    pANTLR3_COMMON_TOKEN    RightB205;
    pANTLR3_COMMON_TOKEN    Comma211;
    pANTLR3_COMMON_TOKEN    Skip212;
    pANTLR3_COMMON_TOKEN    Skip214;
    pANTLR3_COMMON_TOKEN    Comma215;
    pANTLR3_COMMON_TOKEN    Skip217;
    pANTLR3_COMMON_TOKEN    Comma220;
    pANTLR3_COMMON_TOKEN    Skip221;
    ANMLParser_expr_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e ANMLParser_expr_return

    ANMLParser_delta_time_return d;
    #undef	RETURN_TYPE_d
    #define	RETURN_TYPE_d ANMLParser_delta_time_return

    ANMLParser_bra_return bra206;
    #undef	RETURN_TYPE_bra206
    #define	RETURN_TYPE_bra206 ANMLParser_bra_return

    ANMLParser_rLimit_return rLimit207;
    #undef	RETURN_TYPE_rLimit207
    #define	RETURN_TYPE_rLimit207 ANMLParser_rLimit_return

    ANMLParser_lLimit_return lLimit208;
    #undef	RETURN_TYPE_lLimit208
    #define	RETURN_TYPE_lLimit208 ANMLParser_lLimit_return

    ANMLParser_ket_return ket209;
    #undef	RETURN_TYPE_ket209
    #define	RETURN_TYPE_ket209 ANMLParser_ket_return

    ANMLParser_bra_return bra210;
    #undef	RETURN_TYPE_bra210
    #define	RETURN_TYPE_bra210 ANMLParser_bra_return

    ANMLParser_ket_return ket213;
    #undef	RETURN_TYPE_ket213
    #define	RETURN_TYPE_ket213 ANMLParser_ket_return

    ANMLParser_ket_return ket216;
    #undef	RETURN_TYPE_ket216
    #define	RETURN_TYPE_ket216 ANMLParser_ket_return

    ANMLParser_ket_return ket218;
    #undef	RETURN_TYPE_ket218
    #define	RETURN_TYPE_ket218 ANMLParser_ket_return

    ANMLParser_ket_return ket219;
    #undef	RETURN_TYPE_ket219
    #define	RETURN_TYPE_ket219 ANMLParser_ket_return

    ANMLParser_ket_return ket222;
    #undef	RETURN_TYPE_ket222
    #define	RETURN_TYPE_ket222 ANMLParser_ket_return

    pANTLR3_BASE_TREE LeftB203_tree;
    pANTLR3_BASE_TREE Skip204_tree;
    pANTLR3_BASE_TREE RightB205_tree;
    pANTLR3_BASE_TREE Comma211_tree;
    pANTLR3_BASE_TREE Skip212_tree;
    pANTLR3_BASE_TREE Skip214_tree;
    pANTLR3_BASE_TREE Comma215_tree;
    pANTLR3_BASE_TREE Skip217_tree;
    pANTLR3_BASE_TREE Comma220_tree;
    pANTLR3_BASE_TREE Skip221_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Skip;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightB;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftB;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_rLimit;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_delta_time;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bra;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ket;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_lLimit;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LeftB203       = NULL;
    Skip204       = NULL;
    RightB205       = NULL;
    Comma211       = NULL;
    Skip212       = NULL;
    Skip214       = NULL;
    Comma215       = NULL;
    Skip217       = NULL;
    Comma220       = NULL;
    Skip221       = NULL;
    e.tree = NULL;

    d.tree = NULL;

    bra206.tree = NULL;

    rLimit207.tree = NULL;

    lLimit208.tree = NULL;

    ket209.tree = NULL;

    bra210.tree = NULL;

    ket213.tree = NULL;

    ket216.tree = NULL;

    ket218.tree = NULL;

    ket219.tree = NULL;

    ket222.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LeftB203_tree   = NULL;
    Skip204_tree   = NULL;
    RightB205_tree   = NULL;
    Comma211_tree   = NULL;
    Skip212_tree   = NULL;
    Skip214_tree   = NULL;
    Comma215_tree   = NULL;
    Skip217_tree   = NULL;
    Comma220_tree   = NULL;
    Skip221_tree   = NULL;

    stream_Skip   = NULL;
    #define CREATE_stream_Skip  if (stream_Skip == NULL) {stream_Skip = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Skip"); } 
    stream_RightB   = NULL;
    #define CREATE_stream_RightB  if (stream_RightB == NULL) {stream_RightB = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightB"); } 
    stream_LeftB   = NULL;
    #define CREATE_stream_LeftB  if (stream_LeftB == NULL) {stream_LeftB = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftB"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_rLimit   = NULL;
    #define CREATE_stream_rLimit  if (stream_rLimit == NULL) {stream_rLimit = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule rLimit"); }
    stream_delta_time   = NULL;
    #define CREATE_stream_delta_time  if (stream_delta_time == NULL) {stream_delta_time = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule delta_time"); }
    stream_bra   = NULL;
    #define CREATE_stream_bra  if (stream_bra == NULL) {stream_bra = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bra"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_ket   = NULL;
    #define CREATE_stream_ket  if (stream_ket == NULL) {stream_ket = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ket"); }
    stream_lLimit   = NULL;
    #define CREATE_stream_lLimit  if (stream_lLimit == NULL) {stream_lLimit = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule lLimit"); }

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:589:11: ( ( LeftB Skip RightB )=> LeftB Skip RightB -> ^( IndefinitePoint ) | ( bra expr rLimit )=> bra e= expr rLimit -> ^( IndefiniteInterval bra ^( TStart $e) rLimit ) | ( lLimit expr ket )=> lLimit e= expr ket -> ^( IndefiniteInterval lLimit ^( TEnd $e) ket ) | bra ( ( Delta )=>d= delta_time Comma ( Skip )? ket -> ^( IndefiniteInterval bra ^( TDuration $d) ket ) | ( Skip )=> Skip Comma ( ( Delta )=>d= delta_time ket -> ^( IndefiniteInterval bra ^( TDuration $d) ket ) | ( Skip )=> Skip ket -> ^( IndefiniteInterval bra ket ) | e= expr ket -> ^( IndefiniteInterval bra ^( TEnd $e) ket ) ) | e= expr Comma Skip ket -> ^( IndefiniteInterval bra ^( TStart $e) ket ) ) )
            
            ANTLR3_UINT32 alt81;

            alt81=4;


            {
                int LA81_0 = LA(1);
                if ( (LA81_0 == LeftB) ) 
                {

                    {
                        int LA81_1 = LA(2);
                        if ( (synpred18_ANML(ctx)) ) 
                        {
                            alt81=1;
                        }
                        else if ( (synpred19_ANML(ctx)) ) 
                        {
                            alt81=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt81=4;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 81;
                            EXCEPTION->state        = 1;


                            goto ruleexist_timeEx;
                        }
                    }
                }
                else if ( (LA81_0 == LeftP) ) 
                {

                    {
                        int LA81_2 = LA(2);
                        if ( (synpred19_ANML(ctx)) ) 
                        {
                            alt81=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt81=4;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 81;
                            EXCEPTION->state        = 2;


                            goto ruleexist_timeEx;
                        }
                    }
                }
                else if ( (LA81_0 == Dots) && (synpred20_ANML(ctx))) 
                {
                    alt81=3;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 81;
                    EXCEPTION->state        = 0;


                    goto ruleexist_timeEx;
                }
            }
            switch (alt81) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:591:2: ( LeftB Skip RightB )=> LeftB Skip RightB
        	    {
        	        LeftB203 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftB, &FOLLOW_LeftB_in_exist_time3669); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexist_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftB; stream_LeftB->add(stream_LeftB, LeftB203, NULL); }

        	        Skip204 = (pANTLR3_COMMON_TOKEN) MATCHT(Skip, &FOLLOW_Skip_in_exist_time3671); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexist_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Skip; stream_Skip->add(stream_Skip, Skip204, NULL); }

        	        RightB205 = (pANTLR3_COMMON_TOKEN) MATCHT(RightB, &FOLLOW_RightB_in_exist_time3673); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexist_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RightB; stream_RightB->add(stream_RightB, RightB205, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 591:42: -> ^( IndefinitePoint )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:591:45: ^( IndefinitePoint )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IndefinitePoint, (pANTLR3_UINT8)"IndefinitePoint"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:592:4: ( bra expr rLimit )=> bra e= expr rLimit
        	    {
        	        FOLLOWPUSH(FOLLOW_bra_in_exist_time3693);
        	        bra206=bra(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexist_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_bra; stream_bra->add(stream_bra, bra206.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_expr_in_exist_time3697);
        	        e=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexist_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_rLimit_in_exist_time3699);
        	        rLimit207=rLimit(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexist_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_rLimit; stream_rLimit->add(stream_rLimit, rLimit207.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : rLimit, bra, e
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 592:42: -> ^( IndefiniteInterval bra ^( TStart $e) rLimit )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:592:45: ^( IndefiniteInterval bra ^( TStart $e) rLimit )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IndefiniteInterval, (pANTLR3_UINT8)"IndefiniteInterval"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bra == NULL ? NULL : stream_bra->nextTree(stream_bra));
        	        	        // ANML/base/antlr/ANML.g:592:70: ^( TStart $e)
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_rLimit == NULL ? NULL : stream_rLimit->nextTree(stream_rLimit));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:593:4: ( lLimit expr ket )=> lLimit e= expr ket
        	    {
        	        FOLLOWPUSH(FOLLOW_lLimit_in_exist_time3730);
        	        lLimit208=lLimit(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexist_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_lLimit; stream_lLimit->add(stream_lLimit, lLimit208.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_expr_in_exist_time3734);
        	        e=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexist_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_ket_in_exist_time3736);
        	        ket209=ket(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexist_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ket; stream_ket->add(stream_ket, ket209.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : ket, lLimit, e
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 593:42: -> ^( IndefiniteInterval lLimit ^( TEnd $e) ket )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:593:45: ^( IndefiniteInterval lLimit ^( TEnd $e) ket )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IndefiniteInterval, (pANTLR3_UINT8)"IndefiniteInterval"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_lLimit == NULL ? NULL : stream_lLimit->nextTree(stream_lLimit));
        	        	        // ANML/base/antlr/ANML.g:593:73: ^( TEnd $e)
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TEnd, (pANTLR3_UINT8)"TEnd"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ket == NULL ? NULL : stream_ket->nextTree(stream_ket));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;
        	case 4:
        	    // ANML/base/antlr/ANML.g:594:4: bra ( ( Delta )=>d= delta_time Comma ( Skip )? ket -> ^( IndefiniteInterval bra ^( TDuration $d) ket ) | ( Skip )=> Skip Comma ( ( Delta )=>d= delta_time ket -> ^( IndefiniteInterval bra ^( TDuration $d) ket ) | ( Skip )=> Skip ket -> ^( IndefiniteInterval bra ket ) | e= expr ket -> ^( IndefiniteInterval bra ^( TEnd $e) ket ) ) | e= expr Comma Skip ket -> ^( IndefiniteInterval bra ^( TStart $e) ket ) )
        	    {
        	        FOLLOWPUSH(FOLLOW_bra_in_exist_time3758);
        	        bra210=bra(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexist_timeEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_bra; stream_bra->add(stream_bra, bra210.tree, NULL); }

        	        // ANML/base/antlr/ANML.g:595:4: ( ( Delta )=>d= delta_time Comma ( Skip )? ket -> ^( IndefiniteInterval bra ^( TDuration $d) ket ) | ( Skip )=> Skip Comma ( ( Delta )=>d= delta_time ket -> ^( IndefiniteInterval bra ^( TDuration $d) ket ) | ( Skip )=> Skip ket -> ^( IndefiniteInterval bra ket ) | e= expr ket -> ^( IndefiniteInterval bra ^( TEnd $e) ket ) ) | e= expr Comma Skip ket -> ^( IndefiniteInterval bra ^( TStart $e) ket ) )
        	        {
        	            int alt80=3;

        	            {
        	                int LA80_0 = LA(1);
        	                if ( (LA80_0 == Delta) && (synpred21_ANML(ctx))) 
        	                {
        	                    alt80=1;
        	                }
        	                else if ( (LA80_0 == Skip) && (synpred22_ANML(ctx))) 
        	                {
        	                    alt80=2;
        	                }
        	                else if ( (LA80_0 == ID || LA80_0 == LeftB || LA80_0 == LeftP || LA80_0 == Duration || ((LA80_0 >= NotLog) && (LA80_0 <= NotBit)) || LA80_0 == Contains || ((LA80_0 >= ForAll) && (LA80_0 <= Exists)) || LA80_0 == Dots || LA80_0 == Minus || ((LA80_0 >= Unordered) && (LA80_0 <= End)) || ((LA80_0 >= INT) && (LA80_0 <= Infinity))) ) 
        	                {
        	                    alt80=3;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 80;
        	                    EXCEPTION->state        = 0;


        	                    goto ruleexist_timeEx;
        	                }
        	            }
        	            switch (alt80) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:595:6: ( Delta )=>d= delta_time Comma ( Skip )? ket
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_delta_time_in_exist_time3773);
        	        	        d=delta_time(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexist_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_delta_time; stream_delta_time->add(stream_delta_time, d.tree, NULL); }
        	        	        Comma211 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_exist_time3775); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexist_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma211, NULL); }


        	        	        // ANML/base/antlr/ANML.g:595:35: ( Skip )?
        	        	        {
        	        	            int alt78=2;
        	        	            {
        	        	                int LA78_0 = LA(1);
        	        	                if ( (LA78_0 == Skip) ) 
        	        	                {
        	        	                    alt78=1;
        	        	                }
        	        	            }
        	        	            switch (alt78) 
        	        	            {
        	        	        	case 1:
        	        	        	    // ANML/base/antlr/ANML.g:595:35: Skip
        	        	        	    {
        	        	        	        Skip212 = (pANTLR3_COMMON_TOKEN) MATCHT(Skip, &FOLLOW_Skip_in_exist_time3777); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleexist_timeEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Skip; stream_Skip->add(stream_Skip, Skip212, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_ket_in_exist_time3780);
        	        	        ket213=ket(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexist_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_ket; stream_ket->add(stream_ket, ket213.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : d, bra, ket
        	        	         * token labels      : 
        	        	         * rule labels       : retval, d
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_d;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	        	stream_d=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token d", d.tree != NULL ? d.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 595:45: -> ^( IndefiniteInterval bra ^( TDuration $d) ket )
        	        	        	{
        	        	        	    // ANML/base/antlr/ANML.g:595:48: ^( IndefiniteInterval bra ^( TDuration $d) ket )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IndefiniteInterval, (pANTLR3_UINT8)"IndefiniteInterval"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bra == NULL ? NULL : stream_bra->nextTree(stream_bra));
        	        	        	        // ANML/base/antlr/ANML.g:595:73: ^( TDuration $d)
        	        	        	        {
        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TDuration, (pANTLR3_UINT8)"TDuration"), root_2));

        	        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_d == NULL ? NULL : stream_d->nextTree(stream_d));

        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        }
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ket == NULL ? NULL : stream_ket->nextTree(stream_ket));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	        	if (stream_d != NULL) stream_d->free(stream_d);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:596:6: ( Skip )=> Skip Comma ( ( Delta )=>d= delta_time ket -> ^( IndefiniteInterval bra ^( TDuration $d) ket ) | ( Skip )=> Skip ket -> ^( IndefiniteInterval bra ket ) | e= expr ket -> ^( IndefiniteInterval bra ^( TEnd $e) ket ) )
        	        	    {
        	        	        Skip214 = (pANTLR3_COMMON_TOKEN) MATCHT(Skip, &FOLLOW_Skip_in_exist_time3809); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexist_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Skip; stream_Skip->add(stream_Skip, Skip214, NULL); }

        	        	        Comma215 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_exist_time3811); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexist_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma215, NULL); }


        	        	        // ANML/base/antlr/ANML.g:597:5: ( ( Delta )=>d= delta_time ket -> ^( IndefiniteInterval bra ^( TDuration $d) ket ) | ( Skip )=> Skip ket -> ^( IndefiniteInterval bra ket ) | e= expr ket -> ^( IndefiniteInterval bra ^( TEnd $e) ket ) )
        	        	        {
        	        	            int alt79=3;

        	        	            {
        	        	                int LA79_0 = LA(1);
        	        	                if ( (LA79_0 == Delta) && (synpred23_ANML(ctx))) 
        	        	                {
        	        	                    alt79=1;
        	        	                }
        	        	                else if ( (LA79_0 == Skip) && (synpred24_ANML(ctx))) 
        	        	                {
        	        	                    alt79=2;
        	        	                }
        	        	                else if ( (LA79_0 == ID || LA79_0 == LeftB || LA79_0 == LeftP || LA79_0 == Duration || ((LA79_0 >= NotLog) && (LA79_0 <= NotBit)) || LA79_0 == Contains || ((LA79_0 >= ForAll) && (LA79_0 <= Exists)) || LA79_0 == Dots || LA79_0 == Minus || ((LA79_0 >= Unordered) && (LA79_0 <= End)) || ((LA79_0 >= INT) && (LA79_0 <= Infinity))) ) 
        	        	                {
        	        	                    alt79=3;
        	        	                }
        	        	                else 
        	        	                {
        	        	                    if (BACKTRACKING>0)
        	        	                    {
        	        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	        	                        return retval;
        	        	                    }
        	        	                
        	        	                    CONSTRUCTEX();
        	        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	        	                    EXCEPTION->message      = (void *)"";
        	        	                    EXCEPTION->decisionNum  = 79;
        	        	                    EXCEPTION->state        = 0;


        	        	                    goto ruleexist_timeEx;
        	        	                }
        	        	            }
        	        	            switch (alt79) 
        	        	            {
        	        	        	case 1:
        	        	        	    // ANML/base/antlr/ANML.g:597:7: ( Delta )=>d= delta_time ket
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_delta_time_in_exist_time3827);
        	        	        	        d=delta_time(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleexist_timeEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_delta_time; stream_delta_time->add(stream_delta_time, d.tree, NULL); }
        	        	        	        FOLLOWPUSH(FOLLOW_ket_in_exist_time3829);
        	        	        	        ket216=ket(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleexist_timeEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_ket; stream_ket->add(stream_ket, ket216.tree, NULL); }

        	        	        	         
        	        	        	        /* AST REWRITE
        	        	        	         * elements          : bra, ket, d
        	        	        	         * token labels      : 
        	        	        	         * rule labels       : retval, d
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 
        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_d;

        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	        	        	stream_d=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token d", d.tree != NULL ? d.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 597:34: -> ^( IndefiniteInterval bra ^( TDuration $d) ket )
        	        	        	        	{
        	        	        	        	    // ANML/base/antlr/ANML.g:597:37: ^( IndefiniteInterval bra ^( TDuration $d) ket )
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IndefiniteInterval, (pANTLR3_UINT8)"IndefiniteInterval"), root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bra == NULL ? NULL : stream_bra->nextTree(stream_bra));
        	        	        	        	        // ANML/base/antlr/ANML.g:597:62: ^( TDuration $d)
        	        	        	        	        {
        	        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TDuration, (pANTLR3_UINT8)"TDuration"), root_2));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_d == NULL ? NULL : stream_d->nextTree(stream_d));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        	        }
        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ket == NULL ? NULL : stream_ket->nextTree(stream_ket));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}

        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	        	        	if (stream_d != NULL) stream_d->free(stream_d);


        	        	        	        }
        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // ANML/base/antlr/ANML.g:598:5: ( Skip )=> Skip ket
        	        	        	    {
        	        	        	        Skip217 = (pANTLR3_COMMON_TOKEN) MATCHT(Skip, &FOLLOW_Skip_in_exist_time3857); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleexist_timeEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Skip; stream_Skip->add(stream_Skip, Skip217, NULL); }

        	        	        	        FOLLOWPUSH(FOLLOW_ket_in_exist_time3859);
        	        	        	        ket218=ket(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleexist_timeEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_ket; stream_ket->add(stream_ket, ket218.tree, NULL); }

        	        	        	         
        	        	        	        /* AST REWRITE
        	        	        	         * elements          : ket, bra
        	        	        	         * token labels      : 
        	        	        	         * rule labels       : retval
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 
        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 598:23: -> ^( IndefiniteInterval bra ket )
        	        	        	        	{
        	        	        	        	    // ANML/base/antlr/ANML.g:598:26: ^( IndefiniteInterval bra ket )
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IndefiniteInterval, (pANTLR3_UINT8)"IndefiniteInterval"), root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bra == NULL ? NULL : stream_bra->nextTree(stream_bra));
        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ket == NULL ? NULL : stream_ket->nextTree(stream_ket));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}

        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        	        }
        	        	        	    }
        	        	        	    break;
        	        	        	case 3:
        	        	        	    // ANML/base/antlr/ANML.g:599:5: e= expr ket
        	        	        	    {
        	        	        	        FOLLOWPUSH(FOLLOW_expr_in_exist_time3878);
        	        	        	        e=expr(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleexist_timeEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }
        	        	        	        FOLLOWPUSH(FOLLOW_ket_in_exist_time3880);
        	        	        	        ket219=ket(ctx);

        	        	        	        FOLLOWPOP();
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleexist_timeEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_ket; stream_ket->add(stream_ket, ket219.tree, NULL); }

        	        	        	         
        	        	        	        /* AST REWRITE
        	        	        	         * elements          : bra, e, ket
        	        	        	         * token labels      : 
        	        	        	         * rule labels       : retval, e
        	        	        	         * token list labels : 
        	        	        	         * rule list labels  : 
        	        	        	         */
        	        	        	        if ( BACKTRACKING==0 ) 
        	        	        	        {
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	retval.tree    = root_0;
        	        	        	        	// 599:16: -> ^( IndefiniteInterval bra ^( TEnd $e) ket )
        	        	        	        	{
        	        	        	        	    // ANML/base/antlr/ANML.g:599:19: ^( IndefiniteInterval bra ^( TEnd $e) ket )
        	        	        	        	    {
        	        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IndefiniteInterval, (pANTLR3_UINT8)"IndefiniteInterval"), root_1));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bra == NULL ? NULL : stream_bra->nextTree(stream_bra));
        	        	        	        	        // ANML/base/antlr/ANML.g:599:44: ^( TEnd $e)
        	        	        	        	        {
        	        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TEnd, (pANTLR3_UINT8)"TEnd"), root_2));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        	        }
        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ket == NULL ? NULL : stream_ket->nextTree(stream_ket));

        	        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	        	    }

        	        	        	        	}

        	        	        	        	retval.tree = root_0; // set result root
        	        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        	        	        }
        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // ANML/base/antlr/ANML.g:601:6: e= expr Comma Skip ket
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_exist_time3910);
        	        	        e=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexist_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }
        	        	        Comma220 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_exist_time3912); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexist_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma220, NULL); }

        	        	        Skip221 = (pANTLR3_COMMON_TOKEN) MATCHT(Skip, &FOLLOW_Skip_in_exist_time3914); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexist_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Skip; stream_Skip->add(stream_Skip, Skip221, NULL); }

        	        	        FOLLOWPUSH(FOLLOW_ket_in_exist_time3916);
        	        	        ket222=ket(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexist_timeEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_ket; stream_ket->add(stream_ket, ket222.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : ket, bra, e
        	        	         * token labels      : 
        	        	         * rule labels       : retval, e
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 601:28: -> ^( IndefiniteInterval bra ^( TStart $e) ket )
        	        	        	{
        	        	        	    // ANML/base/antlr/ANML.g:601:31: ^( IndefiniteInterval bra ^( TStart $e) ket )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IndefiniteInterval, (pANTLR3_UINT8)"IndefiniteInterval"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bra == NULL ? NULL : stream_bra->nextTree(stream_bra));
        	        	        	        // ANML/base/antlr/ANML.g:601:56: ^( TStart $e)
        	        	        	        {
        	        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TStart, (pANTLR3_UINT8)"TStart"), root_2));

        	        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        	        }
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ket == NULL ? NULL : stream_ket->nextTree(stream_ket));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexist_timeEx; /* Prevent compiler warnings */
    ruleexist_timeEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Skip != NULL) stream_Skip->free(stream_Skip);
        if (stream_RightB != NULL) stream_RightB->free(stream_RightB);
        if (stream_LeftB != NULL) stream_LeftB->free(stream_LeftB);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_rLimit != NULL) stream_rLimit->free(stream_rLimit);
        if (stream_delta_time != NULL) stream_delta_time->free(stream_delta_time);
        if (stream_bra != NULL) stream_bra->free(stream_bra);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_ket != NULL) stream_ket->free(stream_ket);
        if (stream_lLimit != NULL) stream_lLimit->free(stream_lLimit);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end exist_time */

/** 
 * $ANTLR start delta_time
 * ANML/base/antlr/ANML.g:605:1: delta_time : Delta e_num_1 ;
 */
static ANMLParser_delta_time_return
delta_time(pANMLParser ctx)
{   
    ANMLParser_delta_time_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Delta223;
    ANMLParser_e_num_1_return e_num_1224;
    #undef	RETURN_TYPE_e_num_1224
    #define	RETURN_TYPE_e_num_1224 ANMLParser_e_num_1_return

    pANTLR3_BASE_TREE Delta223_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Delta223       = NULL;
    e_num_1224.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Delta223_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:605:11: ( Delta e_num_1 )
        // ANML/base/antlr/ANML.g:606:2: Delta e_num_1
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            Delta223 = (pANTLR3_COMMON_TOKEN) MATCHT(Delta, &FOLLOW_Delta_in_delta_time3948); 
            if  (HASEXCEPTION())
            {
                goto ruledelta_timeEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_e_num_1_in_delta_time3951);
            e_num_1224=e_num_1(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledelta_timeEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num_1224.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledelta_timeEx; /* Prevent compiler warnings */
    ruledelta_timeEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end delta_time */

/** 
 * $ANTLR start bra
 * ANML/base/antlr/ANML.g:608:1: bra : ( LeftB -> ^( TBra At[$LeftB,\"At\"] ) | LeftP -> ^( TBra After[$LeftP,\"After\"] ) );
 */
static ANMLParser_bra_return
bra(pANMLParser ctx)
{   
    ANMLParser_bra_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LeftB225;
    pANTLR3_COMMON_TOKEN    LeftP226;

    pANTLR3_BASE_TREE LeftB225_tree;
    pANTLR3_BASE_TREE LeftP226_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftB;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftP;

    /* Initialize rule variables
     */


    root_0 = NULL;

    LeftB225       = NULL;
    LeftP226       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    LeftB225_tree   = NULL;
    LeftP226_tree   = NULL;

    stream_LeftB   = NULL;
    #define CREATE_stream_LeftB  if (stream_LeftB == NULL) {stream_LeftB = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftB"); } 
    stream_LeftP   = NULL;
    #define CREATE_stream_LeftP  if (stream_LeftP == NULL) {stream_LeftP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftP"); } 

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:608:4: ( LeftB -> ^( TBra At[$LeftB,\"At\"] ) | LeftP -> ^( TBra After[$LeftP,\"After\"] ) )
            
            ANTLR3_UINT32 alt82;

            alt82=2;


            {
                int LA82_0 = LA(1);
                if ( (LA82_0 == LeftB) ) 
                {
                    alt82=1;
                }
                else if ( (LA82_0 == LeftP) ) 
                {
                    alt82=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 82;
                    EXCEPTION->state        = 0;


                    goto rulebraEx;
                }
            }
            switch (alt82) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:609:2: LeftB
        	    {
        	        LeftB225 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftB, &FOLLOW_LeftB_in_bra3961); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebraEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftB; stream_LeftB->add(stream_LeftB, LeftB225, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 609:8: -> ^( TBra At[$LeftB,\"At\"] )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:609:11: ^( TBra At[$LeftB,\"At\"] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TBra, (pANTLR3_UINT8)"TBra"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        #if 2 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, At, TOKTEXT(LeftB225, "At"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, At, (pANTLR3_UINT8)LeftB225, "At")
        	        	        #endif
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:610:4: LeftP
        	    {
        	        LeftP226 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftP, &FOLLOW_LeftP_in_bra3976); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebraEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftP; stream_LeftP->add(stream_LeftP, LeftP226, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 610:10: -> ^( TBra After[$LeftP,\"After\"] )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:610:13: ^( TBra After[$LeftP,\"After\"] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TBra, (pANTLR3_UINT8)"TBra"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        #if 2 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, After, TOKTEXT(LeftP226, "After"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, After, (pANTLR3_UINT8)LeftP226, "After")
        	        	        #endif
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebraEx; /* Prevent compiler warnings */
    rulebraEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LeftB != NULL) stream_LeftB->free(stream_LeftB);
        if (stream_LeftP != NULL) stream_LeftP->free(stream_LeftP);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end bra */

/** 
 * $ANTLR start ket
 * ANML/base/antlr/ANML.g:614:1: ket : ( RightB -> ^( TKet At[$RightB,\"At\"] ) | RightP -> ^( TKet Before[$RightP,\"Before\"] ) );
 */
static ANMLParser_ket_return
ket(pANMLParser ctx)
{   
    ANMLParser_ket_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    RightB227;
    pANTLR3_COMMON_TOKEN    RightP228;

    pANTLR3_BASE_TREE RightB227_tree;
    pANTLR3_BASE_TREE RightP228_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightB;

    /* Initialize rule variables
     */


    root_0 = NULL;

    RightB227       = NULL;
    RightP228       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    RightB227_tree   = NULL;
    RightP228_tree   = NULL;

    stream_RightP   = NULL;
    #define CREATE_stream_RightP  if (stream_RightP == NULL) {stream_RightP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightP"); } 
    stream_RightB   = NULL;
    #define CREATE_stream_RightB  if (stream_RightB == NULL) {stream_RightB = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightB"); } 

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:614:4: ( RightB -> ^( TKet At[$RightB,\"At\"] ) | RightP -> ^( TKet Before[$RightP,\"Before\"] ) )
            
            ANTLR3_UINT32 alt83;

            alt83=2;


            {
                int LA83_0 = LA(1);
                if ( (LA83_0 == RightB) ) 
                {
                    alt83=1;
                }
                else if ( (LA83_0 == RightP) ) 
                {
                    alt83=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 83;
                    EXCEPTION->state        = 0;


                    goto ruleketEx;
                }
            }
            switch (alt83) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:614:6: RightB
        	    {
        	        RightB227 = (pANTLR3_COMMON_TOKEN) MATCHT(RightB, &FOLLOW_RightB_in_ket3994); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleketEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RightB; stream_RightB->add(stream_RightB, RightB227, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 614:13: -> ^( TKet At[$RightB,\"At\"] )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:614:16: ^( TKet At[$RightB,\"At\"] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TKet, (pANTLR3_UINT8)"TKet"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        #if 2 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, At, TOKTEXT(RightB227, "At"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, At, (pANTLR3_UINT8)RightB227, "At")
        	        	        #endif
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:615:4: RightP
        	    {
        	        RightP228 = (pANTLR3_COMMON_TOKEN) MATCHT(RightP, &FOLLOW_RightP_in_ket4009); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleketEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RightP; stream_RightP->add(stream_RightP, RightP228, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 615:11: -> ^( TKet Before[$RightP,\"Before\"] )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:615:14: ^( TKet Before[$RightP,\"Before\"] )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TKet, (pANTLR3_UINT8)"TKet"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	        #if 2 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Before, TOKTEXT(RightP228, "Before"))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Before, (pANTLR3_UINT8)RightP228, "Before")
        	        	        #endif
        	        	        );

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleketEx; /* Prevent compiler warnings */
    ruleketEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RightP != NULL) stream_RightP->free(stream_RightP);
        if (stream_RightB != NULL) stream_RightB->free(stream_RightB);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end ket */

/** 
 * $ANTLR start lLimit
 * ANML/base/antlr/ANML.g:619:1: lLimit : Dots -> ^( TBra Before[$Dots,\"Before\"] ) ;
 */
static ANMLParser_lLimit_return
lLimit(pANMLParser ctx)
{   
    ANMLParser_lLimit_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Dots229;

    pANTLR3_BASE_TREE Dots229_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Dots;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Dots229       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    Dots229_tree   = NULL;

    stream_Dots   = NULL;
    #define CREATE_stream_Dots  if (stream_Dots == NULL) {stream_Dots = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Dots"); } 

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:619:8: ( Dots -> ^( TBra Before[$Dots,\"Before\"] ) )
        // ANML/base/antlr/ANML.g:619:10: Dots
        {
            Dots229 = (pANTLR3_COMMON_TOKEN) MATCHT(Dots, &FOLLOW_Dots_in_lLimit4028); 
            if  (HASEXCEPTION())
            {
                goto rulelLimitEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Dots; stream_Dots->add(stream_Dots, Dots229, NULL); }


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 619:15: -> ^( TBra Before[$Dots,\"Before\"] )
            	{
            	    // ANML/base/antlr/ANML.g:619:18: ^( TBra Before[$Dots,\"Before\"] )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TBra, (pANTLR3_UINT8)"TBra"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        #if 2 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Before, TOKTEXT(Dots229, "Before"))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Before, (pANTLR3_UINT8)Dots229, "Before")
            	        #endif
            	        );

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelLimitEx; /* Prevent compiler warnings */
    rulelLimitEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Dots != NULL) stream_Dots->free(stream_Dots);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end lLimit */

/** 
 * $ANTLR start rLimit
 * ANML/base/antlr/ANML.g:620:1: rLimit : Dots -> ^( TKet After[$Dots,\"After\"] ) ;
 */
static ANMLParser_rLimit_return
rLimit(pANMLParser ctx)
{   
    ANMLParser_rLimit_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Dots230;

    pANTLR3_BASE_TREE Dots230_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Dots;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Dots230       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    Dots230_tree   = NULL;

    stream_Dots   = NULL;
    #define CREATE_stream_Dots  if (stream_Dots == NULL) {stream_Dots = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Dots"); } 

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:620:8: ( Dots -> ^( TKet After[$Dots,\"After\"] ) )
        // ANML/base/antlr/ANML.g:620:10: Dots
        {
            Dots230 = (pANTLR3_COMMON_TOKEN) MATCHT(Dots, &FOLLOW_Dots_in_rLimit4044); 
            if  (HASEXCEPTION())
            {
                goto rulerLimitEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Dots; stream_Dots->add(stream_Dots, Dots230, NULL); }


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 620:15: -> ^( TKet After[$Dots,\"After\"] )
            	{
            	    // ANML/base/antlr/ANML.g:620:18: ^( TKet After[$Dots,\"After\"] )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TKet, (pANTLR3_UINT8)"TKet"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        #if 2 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, After, TOKTEXT(Dots230, "After"))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, After, (pANTLR3_UINT8)Dots230, "After")
            	        #endif
            	        );

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerLimitEx; /* Prevent compiler warnings */
    rulerLimitEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Dots != NULL) stream_Dots->free(stream_Dots);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end rLimit */

/** 
 * $ANTLR start expr
 * ANML/base/antlr/ANML.g:624:1: expr : ( ( e_prefix )=> e_prefix | e_log_1 );
 */
static ANMLParser_expr_return
expr(pANMLParser ctx)
{   
    ANMLParser_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_e_prefix_return e_prefix231;
    #undef	RETURN_TYPE_e_prefix231
    #define	RETURN_TYPE_e_prefix231 ANMLParser_e_prefix_return

    ANMLParser_e_log_1_return e_log_1232;
    #undef	RETURN_TYPE_e_log_1232
    #define	RETURN_TYPE_e_log_1232 ANMLParser_e_log_1_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    e_prefix231.tree = NULL;

    e_log_1232.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:624:5: ( ( e_prefix )=> e_prefix | e_log_1 )
            
            ANTLR3_UINT32 alt84;

            alt84=2;

            alt84 = cdfa84.predict(ctx, RECOGNIZER, ISTREAM, &cdfa84);
            if  (HASEXCEPTION())
            {
                goto ruleexprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt84) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:625:2: ( e_prefix )=> e_prefix
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_e_prefix_in_expr4068);
        	        e_prefix231=e_prefix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix231.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:626:4: e_log_1
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_e_log_1_in_expr4073);
        	        e_log_1232=e_log_1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_1232.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end expr */

/** 
 * $ANTLR start e_prefix
 * ANML/base/antlr/ANML.g:629:1: e_prefix : ( ID Colon e= expr -> ^( Label[$Colon] ID $e) | ( interval expr )=> interval e= expr -> ^( TimedExpr interval $e) | ( Contains )=> Contains ( ( exist_time expr )=> exist_time e= expr -> ^( ContainsSomeExpr[$Contains] exist_time $e) | e= expr -> ^( ContainsAllExpr[$Contains] $e) ) | ForAll param_list e= expr -> ^( ForAllExpr[$ForAll] param_list $e) | Exists param_list e= expr -> ^( ExistsExpr[$Exists] param_list $e) );
 */
static ANMLParser_e_prefix_return
e_prefix(pANMLParser ctx)
{   
    ANMLParser_e_prefix_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID233;
    pANTLR3_COMMON_TOKEN    Colon234;
    pANTLR3_COMMON_TOKEN    Contains236;
    pANTLR3_COMMON_TOKEN    ForAll238;
    pANTLR3_COMMON_TOKEN    Exists240;
    ANMLParser_expr_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e ANMLParser_expr_return

    ANMLParser_interval_return interval235;
    #undef	RETURN_TYPE_interval235
    #define	RETURN_TYPE_interval235 ANMLParser_interval_return

    ANMLParser_exist_time_return exist_time237;
    #undef	RETURN_TYPE_exist_time237
    #define	RETURN_TYPE_exist_time237 ANMLParser_exist_time_return

    ANMLParser_param_list_return param_list239;
    #undef	RETURN_TYPE_param_list239
    #define	RETURN_TYPE_param_list239 ANMLParser_param_list_return

    ANMLParser_param_list_return param_list241;
    #undef	RETURN_TYPE_param_list241
    #define	RETURN_TYPE_param_list241 ANMLParser_param_list_return

    pANTLR3_BASE_TREE ID233_tree;
    pANTLR3_BASE_TREE Colon234_tree;
    pANTLR3_BASE_TREE Contains236_tree;
    pANTLR3_BASE_TREE ForAll238_tree;
    pANTLR3_BASE_TREE Exists240_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Colon;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Exists;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Contains;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ForAll;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_interval;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exist_time;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_param_list;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID233       = NULL;
    Colon234       = NULL;
    Contains236       = NULL;
    ForAll238       = NULL;
    Exists240       = NULL;
    e.tree = NULL;

    interval235.tree = NULL;

    exist_time237.tree = NULL;

    param_list239.tree = NULL;

    param_list241.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ID233_tree   = NULL;
    Colon234_tree   = NULL;
    Contains236_tree   = NULL;
    ForAll238_tree   = NULL;
    Exists240_tree   = NULL;

    stream_Colon   = NULL;
    #define CREATE_stream_Colon  if (stream_Colon == NULL) {stream_Colon = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Colon"); } 
    stream_Exists   = NULL;
    #define CREATE_stream_Exists  if (stream_Exists == NULL) {stream_Exists = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Exists"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_Contains   = NULL;
    #define CREATE_stream_Contains  if (stream_Contains == NULL) {stream_Contains = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Contains"); } 
    stream_ForAll   = NULL;
    #define CREATE_stream_ForAll  if (stream_ForAll == NULL) {stream_ForAll = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ForAll"); } 
    stream_interval   = NULL;
    #define CREATE_stream_interval  if (stream_interval == NULL) {stream_interval = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule interval"); }
    stream_exist_time   = NULL;
    #define CREATE_stream_exist_time  if (stream_exist_time == NULL) {stream_exist_time = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exist_time"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_param_list   = NULL;
    #define CREATE_stream_param_list  if (stream_param_list == NULL) {stream_param_list = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule param_list"); }

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:629:9: ( ID Colon e= expr -> ^( Label[$Colon] ID $e) | ( interval expr )=> interval e= expr -> ^( TimedExpr interval $e) | ( Contains )=> Contains ( ( exist_time expr )=> exist_time e= expr -> ^( ContainsSomeExpr[$Contains] exist_time $e) | e= expr -> ^( ContainsAllExpr[$Contains] $e) ) | ForAll param_list e= expr -> ^( ForAllExpr[$ForAll] param_list $e) | Exists param_list e= expr -> ^( ExistsExpr[$Exists] param_list $e) )
            
            ANTLR3_UINT32 alt86;

            alt86=5;


            {
                int LA86_0 = LA(1);
                if ( (LA86_0 == ID) ) 
                {
                    alt86=1;
                }
                else if ( (LA86_0 == LeftB) && (synpred26_ANML(ctx))) 
                {
                    alt86=2;
                }
                else if ( (LA86_0 == LeftP) && (synpred26_ANML(ctx))) 
                {
                    alt86=2;
                }
                else if ( (LA86_0 == Dots) && (synpred26_ANML(ctx))) 
                {
                    alt86=2;
                }
                else if ( (LA86_0 == Contains) && (synpred27_ANML(ctx))) 
                {
                    alt86=3;
                }
                else if ( (LA86_0 == ForAll) ) 
                {
                    alt86=4;
                }
                else if ( (LA86_0 == Exists) ) 
                {
                    alt86=5;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 86;
                    EXCEPTION->state        = 0;


                    goto rulee_prefixEx;
                }
            }
            switch (alt86) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:631:2: ID Colon e= expr
        	    {
        	        ID233 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_e_prefix4084); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID233, NULL); }

        	        Colon234 = (pANTLR3_COMMON_TOKEN) MATCHT(Colon, &FOLLOW_Colon_in_e_prefix4086); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Colon; stream_Colon->add(stream_Colon, Colon234, NULL); }

        	        FOLLOWPUSH(FOLLOW_expr_in_e_prefix4090);
        	        e=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : e, ID
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 632:3: -> ^( Label[$Colon] ID $e)
        	        	{
        	        	    // ANML/base/antlr/ANML.g:632:6: ^( Label[$Colon] ID $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Label, TOKTEXT(Colon234))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Label, (pANTLR3_UINT8)Colon234)
        	        	        #endif
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:633:4: ( interval expr )=> interval e= expr
        	    {
        	        FOLLOWPUSH(FOLLOW_interval_in_e_prefix4116);
        	        interval235=interval(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_interval; stream_interval->add(stream_interval, interval235.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_expr_in_e_prefix4120);
        	        e=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : interval, e
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 634:3: -> ^( TimedExpr interval $e)
        	        	{
        	        	    // ANML/base/antlr/ANML.g:634:6: ^( TimedExpr interval $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TimedExpr, (pANTLR3_UINT8)"TimedExpr"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_interval == NULL ? NULL : stream_interval->nextTree(stream_interval));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:637:4: ( Contains )=> Contains ( ( exist_time expr )=> exist_time e= expr -> ^( ContainsSomeExpr[$Contains] exist_time $e) | e= expr -> ^( ContainsAllExpr[$Contains] $e) )
        	    {
        	        Contains236 = (pANTLR3_COMMON_TOKEN) MATCHT(Contains, &FOLLOW_Contains_in_e_prefix4145); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Contains; stream_Contains->add(stream_Contains, Contains236, NULL); }


        	        // ANML/base/antlr/ANML.g:638:3: ( ( exist_time expr )=> exist_time e= expr -> ^( ContainsSomeExpr[$Contains] exist_time $e) | e= expr -> ^( ContainsAllExpr[$Contains] $e) )
        	        {
        	            int alt85=2;
        	            alt85 = cdfa85.predict(ctx, RECOGNIZER, ISTREAM, &cdfa85);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulee_prefixEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt85) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:638:4: ( exist_time expr )=> exist_time e= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_exist_time_in_e_prefix4158);
        	        	        exist_time237=exist_time(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulee_prefixEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_exist_time; stream_exist_time->add(stream_exist_time, exist_time237.tree, NULL); }
        	        	        FOLLOWPUSH(FOLLOW_expr_in_e_prefix4162);
        	        	        e=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulee_prefixEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : exist_time, e
        	        	         * token labels      : 
        	        	         * rule labels       : retval, e
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 639:4: -> ^( ContainsSomeExpr[$Contains] exist_time $e)
        	        	        	{
        	        	        	    // ANML/base/antlr/ANML.g:639:7: ^( ContainsSomeExpr[$Contains] exist_time $e)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ContainsSomeExpr, TOKTEXT(Contains236))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ContainsSomeExpr, (pANTLR3_UINT8)Contains236)
        	        	        	        #endif
        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_exist_time == NULL ? NULL : stream_exist_time->nextTree(stream_exist_time));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:640:5: e= expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_e_prefix4186);
        	        	        e=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulee_prefixEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : e
        	        	         * token labels      : 
        	        	         * rule labels       : retval, e
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 641:4: -> ^( ContainsAllExpr[$Contains] $e)
        	        	        	{
        	        	        	    // ANML/base/antlr/ANML.g:641:7: ^( ContainsAllExpr[$Contains] $e)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        	        #if 1 == 2
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ContainsAllExpr, TOKTEXT(Contains236))
        	        	        	        #else
        	        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ContainsAllExpr, (pANTLR3_UINT8)Contains236)
        	        	        	        #endif
        	        	        	        , root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 4:
        	    // ANML/base/antlr/ANML.g:643:4: ForAll param_list e= expr
        	    {
        	        ForAll238 = (pANTLR3_COMMON_TOKEN) MATCHT(ForAll, &FOLLOW_ForAll_in_e_prefix4210); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ForAll; stream_ForAll->add(stream_ForAll, ForAll238, NULL); }

        	        FOLLOWPUSH(FOLLOW_param_list_in_e_prefix4212);
        	        param_list239=param_list(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_param_list; stream_param_list->add(stream_param_list, param_list239.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_expr_in_e_prefix4216);
        	        e=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : e, param_list
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 644:3: -> ^( ForAllExpr[$ForAll] param_list $e)
        	        	{
        	        	    // ANML/base/antlr/ANML.g:644:6: ^( ForAllExpr[$ForAll] param_list $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ForAllExpr, TOKTEXT(ForAll238))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ForAllExpr, (pANTLR3_UINT8)ForAll238)
        	        	        #endif
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_param_list == NULL ? NULL : stream_param_list->nextTree(stream_param_list));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;
        	case 5:
        	    // ANML/base/antlr/ANML.g:645:4: Exists param_list e= expr
        	    {
        	        Exists240 = (pANTLR3_COMMON_TOKEN) MATCHT(Exists, &FOLLOW_Exists_in_e_prefix4235); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Exists; stream_Exists->add(stream_Exists, Exists240, NULL); }

        	        FOLLOWPUSH(FOLLOW_param_list_in_e_prefix4237);
        	        param_list241=param_list(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_param_list; stream_param_list->add(stream_param_list, param_list241.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_expr_in_e_prefix4241);
        	        e=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_prefixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : e, param_list
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 646:3: -> ^( ExistsExpr[$Exists] param_list $e)
        	        	{
        	        	    // ANML/base/antlr/ANML.g:646:6: ^( ExistsExpr[$Exists] param_list $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ExistsExpr, TOKTEXT(Exists240))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ExistsExpr, (pANTLR3_UINT8)Exists240)
        	        	        #endif
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_param_list == NULL ? NULL : stream_param_list->nextTree(stream_param_list));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulee_prefixEx; /* Prevent compiler warnings */
    rulee_prefixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_Colon != NULL) stream_Colon->free(stream_Colon);
        if (stream_Exists != NULL) stream_Exists->free(stream_Exists);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_Contains != NULL) stream_Contains->free(stream_Contains);
        if (stream_ForAll != NULL) stream_ForAll->free(stream_ForAll);
        if (stream_interval != NULL) stream_interval->free(stream_interval);
        if (stream_exist_time != NULL) stream_exist_time->free(stream_exist_time);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_param_list != NULL) stream_param_list->free(stream_param_list);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_prefix */

/** 
 * $ANTLR start e_log_1
 * ANML/base/antlr/ANML.g:655:1: e_log_1 : e_log_2 ( ( Implies )=> Implies ( ( e_prefix )=> e_prefix | e_log_1 ) )? ;
 */
static ANMLParser_e_log_1_return
e_log_1(pANMLParser ctx)
{   
    ANMLParser_e_log_1_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Implies243;
    ANMLParser_e_log_2_return e_log_2242;
    #undef	RETURN_TYPE_e_log_2242
    #define	RETURN_TYPE_e_log_2242 ANMLParser_e_log_2_return

    ANMLParser_e_prefix_return e_prefix244;
    #undef	RETURN_TYPE_e_prefix244
    #define	RETURN_TYPE_e_prefix244 ANMLParser_e_prefix_return

    ANMLParser_e_log_1_return e_log_1245;
    #undef	RETURN_TYPE_e_log_1245
    #define	RETURN_TYPE_e_log_1245 ANMLParser_e_log_1_return

    pANTLR3_BASE_TREE Implies243_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Implies243       = NULL;
    e_log_2242.tree = NULL;

    e_prefix244.tree = NULL;

    e_log_1245.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Implies243_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:655:8: ( e_log_2 ( ( Implies )=> Implies ( ( e_prefix )=> e_prefix | e_log_1 ) )? )
        // ANML/base/antlr/ANML.g:656:2: e_log_2 ( ( Implies )=> Implies ( ( e_prefix )=> e_prefix | e_log_1 ) )?
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_e_log_2_in_e_log_14276);
            e_log_2242=e_log_2(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulee_log_1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_2242.tree);

            // ANML/base/antlr/ANML.g:656:10: ( ( Implies )=> Implies ( ( e_prefix )=> e_prefix | e_log_1 ) )?
            {
                int alt88=2;
                {
                    int LA88_0 = LA(1);
                    if ( (LA88_0 == Implies) ) 
                    {
                        {
                            int LA88_1 = LA(2);
                            if ( (synpred29_ANML(ctx)) ) 
                            {
                                alt88=1;
                            }
                        }
                    }
                }
                switch (alt88) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:656:11: ( Implies )=> Implies ( ( e_prefix )=> e_prefix | e_log_1 )
            	    {
            	        Implies243 = (pANTLR3_COMMON_TOKEN) MATCHT(Implies, &FOLLOW_Implies_in_e_log_14283); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulee_log_1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        Implies243_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Implies243));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, Implies243_tree, root_0));
            	        }

            	        // ANML/base/antlr/ANML.g:656:31: ( ( e_prefix )=> e_prefix | e_log_1 )
            	        {
            	            int alt87=2;
            	            alt87 = cdfa87.predict(ctx, RECOGNIZER, ISTREAM, &cdfa87);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulee_log_1Ex;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt87) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:656:32: ( e_prefix )=> e_prefix
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_log_14291);
            	        	        e_prefix244=e_prefix(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_1Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix244.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ANML/base/antlr/ANML.g:656:55: e_log_1
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_log_1_in_e_log_14295);
            	        	        e_log_1245=e_log_1(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_1Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_1245.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulee_log_1Ex; /* Prevent compiler warnings */
    rulee_log_1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_log_1 */

/** 
 * $ANTLR start e_log_2
 * ANML/base/antlr/ANML.g:659:1: e_log_2 : e_log_3 ( ( EqualLog )=> EqualLog ( ( e_prefix )=> e_prefix | e_log_3 ) )* ;
 */
static ANMLParser_e_log_2_return
e_log_2(pANMLParser ctx)
{   
    ANMLParser_e_log_2_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    EqualLog247;
    ANMLParser_e_log_3_return e_log_3246;
    #undef	RETURN_TYPE_e_log_3246
    #define	RETURN_TYPE_e_log_3246 ANMLParser_e_log_3_return

    ANMLParser_e_prefix_return e_prefix248;
    #undef	RETURN_TYPE_e_prefix248
    #define	RETURN_TYPE_e_prefix248 ANMLParser_e_prefix_return

    ANMLParser_e_log_3_return e_log_3249;
    #undef	RETURN_TYPE_e_log_3249
    #define	RETURN_TYPE_e_log_3249 ANMLParser_e_log_3_return

    pANTLR3_BASE_TREE EqualLog247_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    EqualLog247       = NULL;
    e_log_3246.tree = NULL;

    e_prefix248.tree = NULL;

    e_log_3249.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    EqualLog247_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:659:8: ( e_log_3 ( ( EqualLog )=> EqualLog ( ( e_prefix )=> e_prefix | e_log_3 ) )* )
        // ANML/base/antlr/ANML.g:660:2: e_log_3 ( ( EqualLog )=> EqualLog ( ( e_prefix )=> e_prefix | e_log_3 ) )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_e_log_3_in_e_log_24308);
            e_log_3246=e_log_3(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulee_log_2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_3246.tree);

            // ANML/base/antlr/ANML.g:660:10: ( ( EqualLog )=> EqualLog ( ( e_prefix )=> e_prefix | e_log_3 ) )*

            for (;;)
            {
                int alt90=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA90_0 = LA(1);
                    if ( (LA90_0 == EqualLog) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA90_2 = LA(2);
                            if ( (synpred31_ANML(ctx)) ) 
                            {
                                alt90=1;
                            }

                        }
                    }

                }
                switch (alt90) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:660:11: ( EqualLog )=> EqualLog ( ( e_prefix )=> e_prefix | e_log_3 )
            	    {
            	        EqualLog247 = (pANTLR3_COMMON_TOKEN) MATCHT(EqualLog, &FOLLOW_EqualLog_in_e_log_24315); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulee_log_2Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        EqualLog247_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, EqualLog247));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, EqualLog247_tree, root_0));
            	        }

            	        // ANML/base/antlr/ANML.g:660:33: ( ( e_prefix )=> e_prefix | e_log_3 )
            	        {
            	            int alt89=2;
            	            alt89 = cdfa89.predict(ctx, RECOGNIZER, ISTREAM, &cdfa89);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulee_log_2Ex;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt89) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:660:34: ( e_prefix )=> e_prefix
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_log_24323);
            	        	        e_prefix248=e_prefix(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_2Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix248.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ANML/base/antlr/ANML.g:660:57: e_log_3
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_log_3_in_e_log_24327);
            	        	        e_log_3249=e_log_3(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_2Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_3249.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop90;	/* break out of the loop */
            	    break;
                }
            }
            loop90: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulee_log_2Ex; /* Prevent compiler warnings */
    rulee_log_2Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_log_2 */

/** 
 * $ANTLR start e_log_3
 * ANML/base/antlr/ANML.g:663:1: e_log_3 : e_log_4 ( ( XorLog )=> XorLog ( ( e_prefix )=> e_prefix | e_log_4 ) )* ;
 */
static ANMLParser_e_log_3_return
e_log_3(pANMLParser ctx)
{   
    ANMLParser_e_log_3_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    XorLog251;
    ANMLParser_e_log_4_return e_log_4250;
    #undef	RETURN_TYPE_e_log_4250
    #define	RETURN_TYPE_e_log_4250 ANMLParser_e_log_4_return

    ANMLParser_e_prefix_return e_prefix252;
    #undef	RETURN_TYPE_e_prefix252
    #define	RETURN_TYPE_e_prefix252 ANMLParser_e_prefix_return

    ANMLParser_e_log_4_return e_log_4253;
    #undef	RETURN_TYPE_e_log_4253
    #define	RETURN_TYPE_e_log_4253 ANMLParser_e_log_4_return

    pANTLR3_BASE_TREE XorLog251_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    XorLog251       = NULL;
    e_log_4250.tree = NULL;

    e_prefix252.tree = NULL;

    e_log_4253.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    XorLog251_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:663:8: ( e_log_4 ( ( XorLog )=> XorLog ( ( e_prefix )=> e_prefix | e_log_4 ) )* )
        // ANML/base/antlr/ANML.g:664:2: e_log_4 ( ( XorLog )=> XorLog ( ( e_prefix )=> e_prefix | e_log_4 ) )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_e_log_4_in_e_log_34340);
            e_log_4250=e_log_4(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulee_log_3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_4250.tree);

            // ANML/base/antlr/ANML.g:664:10: ( ( XorLog )=> XorLog ( ( e_prefix )=> e_prefix | e_log_4 ) )*

            for (;;)
            {
                int alt92=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA92_0 = LA(1);
                    if ( (LA92_0 == XorLog) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA92_2 = LA(2);
                            if ( (synpred33_ANML(ctx)) ) 
                            {
                                alt92=1;
                            }

                        }
                    }

                }
                switch (alt92) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:664:11: ( XorLog )=> XorLog ( ( e_prefix )=> e_prefix | e_log_4 )
            	    {
            	        XorLog251 = (pANTLR3_COMMON_TOKEN) MATCHT(XorLog, &FOLLOW_XorLog_in_e_log_34347); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulee_log_3Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        XorLog251_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, XorLog251));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, XorLog251_tree, root_0));
            	        }

            	        // ANML/base/antlr/ANML.g:664:29: ( ( e_prefix )=> e_prefix | e_log_4 )
            	        {
            	            int alt91=2;
            	            alt91 = cdfa91.predict(ctx, RECOGNIZER, ISTREAM, &cdfa91);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulee_log_3Ex;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt91) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:664:30: ( e_prefix )=> e_prefix
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_log_34355);
            	        	        e_prefix252=e_prefix(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_3Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix252.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ANML/base/antlr/ANML.g:664:53: e_log_4
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_log_4_in_e_log_34359);
            	        	        e_log_4253=e_log_4(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_3Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_4253.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop92;	/* break out of the loop */
            	    break;
                }
            }
            loop92: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulee_log_3Ex; /* Prevent compiler warnings */
    rulee_log_3Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_log_3 */

/** 
 * $ANTLR start e_log_4
 * ANML/base/antlr/ANML.g:679:1: e_log_4 : e_log_5 ( ( OrLog )=> OrLog ( ( e_prefix )=> e_prefix | e_log_5 ) )* ;
 */
static ANMLParser_e_log_4_return
e_log_4(pANMLParser ctx)
{   
    ANMLParser_e_log_4_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    OrLog255;
    ANMLParser_e_log_5_return e_log_5254;
    #undef	RETURN_TYPE_e_log_5254
    #define	RETURN_TYPE_e_log_5254 ANMLParser_e_log_5_return

    ANMLParser_e_prefix_return e_prefix256;
    #undef	RETURN_TYPE_e_prefix256
    #define	RETURN_TYPE_e_prefix256 ANMLParser_e_prefix_return

    ANMLParser_e_log_5_return e_log_5257;
    #undef	RETURN_TYPE_e_log_5257
    #define	RETURN_TYPE_e_log_5257 ANMLParser_e_log_5_return

    pANTLR3_BASE_TREE OrLog255_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    OrLog255       = NULL;
    e_log_5254.tree = NULL;

    e_prefix256.tree = NULL;

    e_log_5257.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    OrLog255_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:679:8: ( e_log_5 ( ( OrLog )=> OrLog ( ( e_prefix )=> e_prefix | e_log_5 ) )* )
        // ANML/base/antlr/ANML.g:680:2: e_log_5 ( ( OrLog )=> OrLog ( ( e_prefix )=> e_prefix | e_log_5 ) )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_e_log_5_in_e_log_44385);
            e_log_5254=e_log_5(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulee_log_4Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_5254.tree);

            // ANML/base/antlr/ANML.g:680:10: ( ( OrLog )=> OrLog ( ( e_prefix )=> e_prefix | e_log_5 ) )*

            for (;;)
            {
                int alt94=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA94_0 = LA(1);
                    if ( (LA94_0 == OrLog) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA94_2 = LA(2);
                            if ( (synpred35_ANML(ctx)) ) 
                            {
                                alt94=1;
                            }

                        }
                    }

                }
                switch (alt94) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:680:11: ( OrLog )=> OrLog ( ( e_prefix )=> e_prefix | e_log_5 )
            	    {
            	        OrLog255 = (pANTLR3_COMMON_TOKEN) MATCHT(OrLog, &FOLLOW_OrLog_in_e_log_44392); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulee_log_4Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        OrLog255_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, OrLog255));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, OrLog255_tree, root_0));
            	        }

            	        // ANML/base/antlr/ANML.g:680:27: ( ( e_prefix )=> e_prefix | e_log_5 )
            	        {
            	            int alt93=2;
            	            alt93 = cdfa93.predict(ctx, RECOGNIZER, ISTREAM, &cdfa93);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulee_log_4Ex;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt93) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:680:28: ( e_prefix )=> e_prefix
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_log_44400);
            	        	        e_prefix256=e_prefix(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_4Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix256.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ANML/base/antlr/ANML.g:680:51: e_log_5
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_log_5_in_e_log_44404);
            	        	        e_log_5257=e_log_5(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_4Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_5257.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop94;	/* break out of the loop */
            	    break;
                }
            }
            loop94: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulee_log_4Ex; /* Prevent compiler warnings */
    rulee_log_4Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_log_4 */

/** 
 * $ANTLR start e_log_5
 * ANML/base/antlr/ANML.g:683:1: e_log_5 : e_log_6 ( ( AndLog )=> AndLog ( ( e_prefix )=> e_prefix | e_log_6 ) )* ;
 */
static ANMLParser_e_log_5_return
e_log_5(pANMLParser ctx)
{   
    ANMLParser_e_log_5_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    AndLog259;
    ANMLParser_e_log_6_return e_log_6258;
    #undef	RETURN_TYPE_e_log_6258
    #define	RETURN_TYPE_e_log_6258 ANMLParser_e_log_6_return

    ANMLParser_e_prefix_return e_prefix260;
    #undef	RETURN_TYPE_e_prefix260
    #define	RETURN_TYPE_e_prefix260 ANMLParser_e_prefix_return

    ANMLParser_e_log_6_return e_log_6261;
    #undef	RETURN_TYPE_e_log_6261
    #define	RETURN_TYPE_e_log_6261 ANMLParser_e_log_6_return

    pANTLR3_BASE_TREE AndLog259_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    AndLog259       = NULL;
    e_log_6258.tree = NULL;

    e_prefix260.tree = NULL;

    e_log_6261.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    AndLog259_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:683:8: ( e_log_6 ( ( AndLog )=> AndLog ( ( e_prefix )=> e_prefix | e_log_6 ) )* )
        // ANML/base/antlr/ANML.g:684:2: e_log_6 ( ( AndLog )=> AndLog ( ( e_prefix )=> e_prefix | e_log_6 ) )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_e_log_6_in_e_log_54417);
            e_log_6258=e_log_6(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulee_log_5Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_6258.tree);

            // ANML/base/antlr/ANML.g:684:10: ( ( AndLog )=> AndLog ( ( e_prefix )=> e_prefix | e_log_6 ) )*

            for (;;)
            {
                int alt96=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA96_0 = LA(1);
                    if ( (LA96_0 == AndLog) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA96_2 = LA(2);
                            if ( (synpred37_ANML(ctx)) ) 
                            {
                                alt96=1;
                            }

                        }
                    }

                }
                switch (alt96) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:684:11: ( AndLog )=> AndLog ( ( e_prefix )=> e_prefix | e_log_6 )
            	    {
            	        AndLog259 = (pANTLR3_COMMON_TOKEN) MATCHT(AndLog, &FOLLOW_AndLog_in_e_log_54424); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulee_log_5Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        AndLog259_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, AndLog259));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, AndLog259_tree, root_0));
            	        }

            	        // ANML/base/antlr/ANML.g:684:29: ( ( e_prefix )=> e_prefix | e_log_6 )
            	        {
            	            int alt95=2;
            	            alt95 = cdfa95.predict(ctx, RECOGNIZER, ISTREAM, &cdfa95);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulee_log_5Ex;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt95) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:684:30: ( e_prefix )=> e_prefix
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_log_54432);
            	        	        e_prefix260=e_prefix(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_5Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix260.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ANML/base/antlr/ANML.g:684:53: e_log_6
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_log_6_in_e_log_54436);
            	        	        e_log_6261=e_log_6(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_5Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_6261.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop96;	/* break out of the loop */
            	    break;
                }
            }
            loop96: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulee_log_5Ex; /* Prevent compiler warnings */
    rulee_log_5Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_log_5 */

/** 
 * $ANTLR start e_log_6
 * ANML/base/antlr/ANML.g:687:1: e_log_6 : ( ( NotLog )=> NotLog ( ( e_prefix )=> e_prefix | e_log_6 ) | e_log_7 );
 */
static ANMLParser_e_log_6_return
e_log_6(pANMLParser ctx)
{   
    ANMLParser_e_log_6_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NotLog262;
    ANMLParser_e_prefix_return e_prefix263;
    #undef	RETURN_TYPE_e_prefix263
    #define	RETURN_TYPE_e_prefix263 ANMLParser_e_prefix_return

    ANMLParser_e_log_6_return e_log_6264;
    #undef	RETURN_TYPE_e_log_6264
    #define	RETURN_TYPE_e_log_6264 ANMLParser_e_log_6_return

    ANMLParser_e_log_7_return e_log_7265;
    #undef	RETURN_TYPE_e_log_7265
    #define	RETURN_TYPE_e_log_7265 ANMLParser_e_log_7_return

    pANTLR3_BASE_TREE NotLog262_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    NotLog262       = NULL;
    e_prefix263.tree = NULL;

    e_log_6264.tree = NULL;

    e_log_7265.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    NotLog262_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:687:8: ( ( NotLog )=> NotLog ( ( e_prefix )=> e_prefix | e_log_6 ) | e_log_7 )
            
            ANTLR3_UINT32 alt98;

            alt98=2;


            {
                int LA98_0 = LA(1);
                if ( (LA98_0 == NotLog) && (synpred39_ANML(ctx))) 
                {
                    alt98=1;
                }
                else if ( (LA98_0 == ID || LA98_0 == LeftP || LA98_0 == Duration || LA98_0 == NotBit || LA98_0 == Minus || ((LA98_0 >= Unordered) && (LA98_0 <= End)) || ((LA98_0 >= INT) && (LA98_0 <= Infinity))) ) 
                {
                    alt98=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 98;
                    EXCEPTION->state        = 0;


                    goto rulee_log_6Ex;
                }
            }
            switch (alt98) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:688:2: ( NotLog )=> NotLog ( ( e_prefix )=> e_prefix | e_log_6 )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        NotLog262 = (pANTLR3_COMMON_TOKEN) MATCHT(NotLog, &FOLLOW_NotLog_in_e_log_64453); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_log_6Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        NotLog262_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NotLog262));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, NotLog262_tree, root_0));
        	        }

        	        // ANML/base/antlr/ANML.g:688:20: ( ( e_prefix )=> e_prefix | e_log_6 )
        	        {
        	            int alt97=2;
        	            alt97 = cdfa97.predict(ctx, RECOGNIZER, ISTREAM, &cdfa97);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulee_log_6Ex;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt97) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:688:21: ( e_prefix )=> e_prefix
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_log_64461);
        	        	        e_prefix263=e_prefix(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulee_log_6Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix263.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:688:44: e_log_6
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_e_log_6_in_e_log_64465);
        	        	        e_log_6264=e_log_6(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulee_log_6Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_6264.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:689:4: e_log_7
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_e_log_7_in_e_log_64471);
        	        e_log_7265=e_log_7(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_log_6Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_log_7265.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulee_log_6Ex; /* Prevent compiler warnings */
    rulee_log_6Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_log_6 */

/** 
 * $ANTLR start e_log_7
 * ANML/base/antlr/ANML.g:692:1: e_log_7 : e_num_1 ( ( num_relop )=> num_relop ( ( e_prefix )=> e_prefix | e_num_1 ) )? ;
 */
static ANMLParser_e_log_7_return
e_log_7(pANMLParser ctx)
{   
    ANMLParser_e_log_7_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_e_num_1_return e_num_1266;
    #undef	RETURN_TYPE_e_num_1266
    #define	RETURN_TYPE_e_num_1266 ANMLParser_e_num_1_return

    ANMLParser_num_relop_return num_relop267;
    #undef	RETURN_TYPE_num_relop267
    #define	RETURN_TYPE_num_relop267 ANMLParser_num_relop_return

    ANMLParser_e_prefix_return e_prefix268;
    #undef	RETURN_TYPE_e_prefix268
    #define	RETURN_TYPE_e_prefix268 ANMLParser_e_prefix_return

    ANMLParser_e_num_1_return e_num_1269;
    #undef	RETURN_TYPE_e_num_1269
    #define	RETURN_TYPE_e_num_1269 ANMLParser_e_num_1_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    e_num_1266.tree = NULL;

    num_relop267.tree = NULL;

    e_prefix268.tree = NULL;

    e_num_1269.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:692:8: ( e_num_1 ( ( num_relop )=> num_relop ( ( e_prefix )=> e_prefix | e_num_1 ) )? )
        // ANML/base/antlr/ANML.g:693:2: e_num_1 ( ( num_relop )=> num_relop ( ( e_prefix )=> e_prefix | e_num_1 ) )?
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_e_num_1_in_e_log_74481);
            e_num_1266=e_num_1(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulee_log_7Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num_1266.tree);

            // ANML/base/antlr/ANML.g:693:10: ( ( num_relop )=> num_relop ( ( e_prefix )=> e_prefix | e_num_1 ) )?
            {
                int alt100=2;
                {
                    int LA100_0 = LA(1);
                    if ( (LA100_0 == Equal) ) 
                    {
                        {
                            int LA100_1 = LA(2);
                            if ( (synpred41_ANML(ctx)) ) 
                            {
                                alt100=1;
                            }
                        }
                    }
                    else if ( (LA100_0 == LessThan || ((LA100_0 >= NotEqual) && (LA100_0 <= GreaterThanE))) ) 
                    {
                        {
                            int LA100_3 = LA(2);
                            if ( (synpred41_ANML(ctx)) ) 
                            {
                                alt100=1;
                            }
                        }
                    }
                }
                switch (alt100) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:693:11: ( num_relop )=> num_relop ( ( e_prefix )=> e_prefix | e_num_1 )
            	    {
            	        FOLLOWPUSH(FOLLOW_num_relop_in_e_log_74488);
            	        num_relop267=num_relop(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulee_log_7Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, num_relop267.tree, root_0));

            	        // ANML/base/antlr/ANML.g:693:35: ( ( e_prefix )=> e_prefix | e_num_1 )
            	        {
            	            int alt99=2;
            	            alt99 = cdfa99.predict(ctx, RECOGNIZER, ISTREAM, &cdfa99);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulee_log_7Ex;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt99) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:693:36: ( e_prefix )=> e_prefix
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_log_74496);
            	        	        e_prefix268=e_prefix(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_7Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix268.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ANML/base/antlr/ANML.g:693:59: e_num_1
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_num_1_in_e_log_74500);
            	        	        e_num_1269=e_num_1(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_log_7Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num_1269.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulee_log_7Ex; /* Prevent compiler warnings */
    rulee_log_7Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_log_7 */

/** 
 * $ANTLR start e_num
 * ANML/base/antlr/ANML.g:696:1: e_num : ( ( e_prefix )=> e_prefix | e_num_1 );
 */
static ANMLParser_e_num_return
e_num(pANMLParser ctx)
{   
    ANMLParser_e_num_return retval;

    pANTLR3_BASE_TREE root_0;

    ANMLParser_e_prefix_return e_prefix270;
    #undef	RETURN_TYPE_e_prefix270
    #define	RETURN_TYPE_e_prefix270 ANMLParser_e_prefix_return

    ANMLParser_e_num_1_return e_num_1271;
    #undef	RETURN_TYPE_e_num_1271
    #define	RETURN_TYPE_e_num_1271 ANMLParser_e_num_1_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    e_prefix270.tree = NULL;

    e_num_1271.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:696:6: ( ( e_prefix )=> e_prefix | e_num_1 )
            
            ANTLR3_UINT32 alt101;

            alt101=2;

            alt101 = cdfa101.predict(ctx, RECOGNIZER, ISTREAM, &cdfa101);
            if  (HASEXCEPTION())
            {
                goto rulee_numEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt101) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:697:2: ( e_prefix )=> e_prefix
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_num4517);
        	        e_prefix270=e_prefix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_numEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix270.tree);

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:698:4: e_num_1
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_e_num_1_in_e_num4522);
        	        e_num_1271=e_num_1(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_numEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num_1271.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulee_numEx; /* Prevent compiler warnings */
    rulee_numEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_num */

/** 
 * $ANTLR start e_num_1
 * ANML/base/antlr/ANML.g:701:1: e_num_1 : e_num_2 ( ( XorBit )=> XorBit ( ( e_prefix )=> e_prefix | e_num_2 ) )* ;
 */
static ANMLParser_e_num_1_return
e_num_1(pANMLParser ctx)
{   
    ANMLParser_e_num_1_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    XorBit273;
    ANMLParser_e_num_2_return e_num_2272;
    #undef	RETURN_TYPE_e_num_2272
    #define	RETURN_TYPE_e_num_2272 ANMLParser_e_num_2_return

    ANMLParser_e_prefix_return e_prefix274;
    #undef	RETURN_TYPE_e_prefix274
    #define	RETURN_TYPE_e_prefix274 ANMLParser_e_prefix_return

    ANMLParser_e_num_2_return e_num_2275;
    #undef	RETURN_TYPE_e_num_2275
    #define	RETURN_TYPE_e_num_2275 ANMLParser_e_num_2_return

    pANTLR3_BASE_TREE XorBit273_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    XorBit273       = NULL;
    e_num_2272.tree = NULL;

    e_prefix274.tree = NULL;

    e_num_2275.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    XorBit273_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:701:8: ( e_num_2 ( ( XorBit )=> XorBit ( ( e_prefix )=> e_prefix | e_num_2 ) )* )
        // ANML/base/antlr/ANML.g:702:2: e_num_2 ( ( XorBit )=> XorBit ( ( e_prefix )=> e_prefix | e_num_2 ) )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_e_num_2_in_e_num_14532);
            e_num_2272=e_num_2(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulee_num_1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num_2272.tree);

            // ANML/base/antlr/ANML.g:702:10: ( ( XorBit )=> XorBit ( ( e_prefix )=> e_prefix | e_num_2 ) )*

            for (;;)
            {
                int alt103=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA103_0 = LA(1);
                    if ( (LA103_0 == XorBit) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA103_2 = LA(2);
                            if ( (synpred44_ANML(ctx)) ) 
                            {
                                alt103=1;
                            }

                        }
                    }

                }
                switch (alt103) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:702:11: ( XorBit )=> XorBit ( ( e_prefix )=> e_prefix | e_num_2 )
            	    {
            	        XorBit273 = (pANTLR3_COMMON_TOKEN) MATCHT(XorBit, &FOLLOW_XorBit_in_e_num_14539); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulee_num_1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        XorBit273_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, XorBit273));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, XorBit273_tree, root_0));
            	        }

            	        // ANML/base/antlr/ANML.g:702:29: ( ( e_prefix )=> e_prefix | e_num_2 )
            	        {
            	            int alt102=2;
            	            alt102 = cdfa102.predict(ctx, RECOGNIZER, ISTREAM, &cdfa102);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulee_num_1Ex;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt102) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:702:30: ( e_prefix )=> e_prefix
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_num_14547);
            	        	        e_prefix274=e_prefix(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_1Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix274.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ANML/base/antlr/ANML.g:702:53: e_num_2
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_num_2_in_e_num_14551);
            	        	        e_num_2275=e_num_2(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_1Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num_2275.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop103;	/* break out of the loop */
            	    break;
                }
            }
            loop103: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulee_num_1Ex; /* Prevent compiler warnings */
    rulee_num_1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_num_1 */

/** 
 * $ANTLR start e_num_2
 * ANML/base/antlr/ANML.g:705:1: e_num_2 : e_num_3 ( ( Plus | Minus | OrBit )=> ( Plus | Minus | OrBit ) ( ( e_prefix )=> e_prefix | e_num_3 ) )* ;
 */
static ANMLParser_e_num_2_return
e_num_2(pANMLParser ctx)
{   
    ANMLParser_e_num_2_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Plus277;
    pANTLR3_COMMON_TOKEN    Minus278;
    pANTLR3_COMMON_TOKEN    OrBit279;
    ANMLParser_e_num_3_return e_num_3276;
    #undef	RETURN_TYPE_e_num_3276
    #define	RETURN_TYPE_e_num_3276 ANMLParser_e_num_3_return

    ANMLParser_e_prefix_return e_prefix280;
    #undef	RETURN_TYPE_e_prefix280
    #define	RETURN_TYPE_e_prefix280 ANMLParser_e_prefix_return

    ANMLParser_e_num_3_return e_num_3281;
    #undef	RETURN_TYPE_e_num_3281
    #define	RETURN_TYPE_e_num_3281 ANMLParser_e_num_3_return

    pANTLR3_BASE_TREE Plus277_tree;
    pANTLR3_BASE_TREE Minus278_tree;
    pANTLR3_BASE_TREE OrBit279_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Plus277       = NULL;
    Minus278       = NULL;
    OrBit279       = NULL;
    e_num_3276.tree = NULL;

    e_prefix280.tree = NULL;

    e_num_3281.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Plus277_tree   = NULL;
    Minus278_tree   = NULL;
    OrBit279_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:705:8: ( e_num_3 ( ( Plus | Minus | OrBit )=> ( Plus | Minus | OrBit ) ( ( e_prefix )=> e_prefix | e_num_3 ) )* )
        // ANML/base/antlr/ANML.g:706:2: e_num_3 ( ( Plus | Minus | OrBit )=> ( Plus | Minus | OrBit ) ( ( e_prefix )=> e_prefix | e_num_3 ) )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_e_num_3_in_e_num_24564);
            e_num_3276=e_num_3(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulee_num_2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num_3276.tree);

            // ANML/base/antlr/ANML.g:706:10: ( ( Plus | Minus | OrBit )=> ( Plus | Minus | OrBit ) ( ( e_prefix )=> e_prefix | e_num_3 ) )*

            for (;;)
            {
                int alt106=2;
                switch ( LA(1) ) 
                {
                case Minus:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA106_2 = LA(2);
                		    if ( (synpred46_ANML(ctx)) ) 
                		    {
                		        alt106=1;
                		    }

                		}
                	}
                    break;
                case Plus:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA106_3 = LA(2);
                		    if ( (synpred46_ANML(ctx)) ) 
                		    {
                		        alt106=1;
                		    }

                		}
                	}
                    break;
                case OrBit:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA106_4 = LA(2);
                		    if ( (synpred46_ANML(ctx)) ) 
                		    {
                		        alt106=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt106) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:706:11: ( Plus | Minus | OrBit )=> ( Plus | Minus | OrBit ) ( ( e_prefix )=> e_prefix | e_num_3 )
            	    {

            	        // ANML/base/antlr/ANML.g:706:31: ( Plus | Minus | OrBit )
            	        {
            	            int alt104=3;
            	            switch ( LA(1) ) 
            	            {
            	            case Plus:
            	            	{
            	            		alt104=1;
            	            	}
            	                break;
            	            case Minus:
            	            	{
            	            		alt104=2;
            	            	}
            	                break;
            	            case OrBit:
            	            	{
            	            		alt104=3;
            	            	}
            	                break;

            	            default:
            	                if (BACKTRACKING>0)
            	                {
            	                    FAILEDFLAG = ANTLR3_TRUE; 
            	                    return retval;
            	                }
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 104;
            	                EXCEPTION->state        = 0;


            	                goto rulee_num_2Ex;
            	            }

            	            switch (alt104) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:706:32: Plus
            	        	    {
            	        	        Plus277 = (pANTLR3_COMMON_TOKEN) MATCHT(Plus, &FOLLOW_Plus_in_e_num_24576); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_2Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) {
            	        	        Plus277_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Plus277));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, Plus277_tree, root_0));
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ANML/base/antlr/ANML.g:706:38: Minus
            	        	    {
            	        	        Minus278 = (pANTLR3_COMMON_TOKEN) MATCHT(Minus, &FOLLOW_Minus_in_e_num_24579); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_2Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) {
            	        	        Minus278_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Minus278));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, Minus278_tree, root_0));
            	        	        }

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // ANML/base/antlr/ANML.g:706:45: OrBit
            	        	    {
            	        	        OrBit279 = (pANTLR3_COMMON_TOKEN) MATCHT(OrBit, &FOLLOW_OrBit_in_e_num_24582); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_2Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) {
            	        	        OrBit279_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, OrBit279));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, OrBit279_tree, root_0));
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // ANML/base/antlr/ANML.g:706:53: ( ( e_prefix )=> e_prefix | e_num_3 )
            	        {
            	            int alt105=2;
            	            alt105 = cdfa105.predict(ctx, RECOGNIZER, ISTREAM, &cdfa105);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulee_num_2Ex;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt105) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:706:54: ( e_prefix )=> e_prefix
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_num_24591);
            	        	        e_prefix280=e_prefix(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_2Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix280.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ANML/base/antlr/ANML.g:706:77: e_num_3
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_num_3_in_e_num_24595);
            	        	        e_num_3281=e_num_3(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_2Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num_3281.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop106;	/* break out of the loop */
            	    break;
                }
            }
            loop106: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulee_num_2Ex; /* Prevent compiler warnings */
    rulee_num_2Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_num_2 */

/** 
 * $ANTLR start e_num_3
 * ANML/base/antlr/ANML.g:709:1: e_num_3 : e_num_4 ( ( Times | Divide | AndBit )=> ( Times | Divide | AndBit ) ( ( e_prefix )=> e_prefix | e_num_4 ) )* ;
 */
static ANMLParser_e_num_3_return
e_num_3(pANMLParser ctx)
{   
    ANMLParser_e_num_3_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Times283;
    pANTLR3_COMMON_TOKEN    Divide284;
    pANTLR3_COMMON_TOKEN    AndBit285;
    ANMLParser_e_num_4_return e_num_4282;
    #undef	RETURN_TYPE_e_num_4282
    #define	RETURN_TYPE_e_num_4282 ANMLParser_e_num_4_return

    ANMLParser_e_prefix_return e_prefix286;
    #undef	RETURN_TYPE_e_prefix286
    #define	RETURN_TYPE_e_prefix286 ANMLParser_e_prefix_return

    ANMLParser_e_num_4_return e_num_4287;
    #undef	RETURN_TYPE_e_num_4287
    #define	RETURN_TYPE_e_num_4287 ANMLParser_e_num_4_return

    pANTLR3_BASE_TREE Times283_tree;
    pANTLR3_BASE_TREE Divide284_tree;
    pANTLR3_BASE_TREE AndBit285_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Times283       = NULL;
    Divide284       = NULL;
    AndBit285       = NULL;
    e_num_4282.tree = NULL;

    e_prefix286.tree = NULL;

    e_num_4287.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Times283_tree   = NULL;
    Divide284_tree   = NULL;
    AndBit285_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:709:8: ( e_num_4 ( ( Times | Divide | AndBit )=> ( Times | Divide | AndBit ) ( ( e_prefix )=> e_prefix | e_num_4 ) )* )
        // ANML/base/antlr/ANML.g:710:2: e_num_4 ( ( Times | Divide | AndBit )=> ( Times | Divide | AndBit ) ( ( e_prefix )=> e_prefix | e_num_4 ) )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_e_num_4_in_e_num_34608);
            e_num_4282=e_num_4(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulee_num_3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num_4282.tree);

            // ANML/base/antlr/ANML.g:711:3: ( ( Times | Divide | AndBit )=> ( Times | Divide | AndBit ) ( ( e_prefix )=> e_prefix | e_num_4 ) )*

            for (;;)
            {
                int alt109=2;
                switch ( LA(1) ) 
                {
                case Times:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA109_2 = LA(2);
                		    if ( (synpred48_ANML(ctx)) ) 
                		    {
                		        alt109=1;
                		    }

                		}
                	}
                    break;
                case Divide:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA109_3 = LA(2);
                		    if ( (synpred48_ANML(ctx)) ) 
                		    {
                		        alt109=1;
                		    }

                		}
                	}
                    break;
                case AndBit:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA109_4 = LA(2);
                		    if ( (synpred48_ANML(ctx)) ) 
                		    {
                		        alt109=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt109) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:711:4: ( Times | Divide | AndBit )=> ( Times | Divide | AndBit ) ( ( e_prefix )=> e_prefix | e_num_4 )
            	    {

            	        // ANML/base/antlr/ANML.g:711:27: ( Times | Divide | AndBit )
            	        {
            	            int alt107=3;
            	            switch ( LA(1) ) 
            	            {
            	            case Times:
            	            	{
            	            		alt107=1;
            	            	}
            	                break;
            	            case Divide:
            	            	{
            	            		alt107=2;
            	            	}
            	                break;
            	            case AndBit:
            	            	{
            	            		alt107=3;
            	            	}
            	                break;

            	            default:
            	                if (BACKTRACKING>0)
            	                {
            	                    FAILEDFLAG = ANTLR3_TRUE; 
            	                    return retval;
            	                }
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 107;
            	                EXCEPTION->state        = 0;


            	                goto rulee_num_3Ex;
            	            }

            	            switch (alt107) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:711:28: Times
            	        	    {
            	        	        Times283 = (pANTLR3_COMMON_TOKEN) MATCHT(Times, &FOLLOW_Times_in_e_num_34623); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_3Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) {
            	        	        Times283_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Times283));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, Times283_tree, root_0));
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ANML/base/antlr/ANML.g:711:35: Divide
            	        	    {
            	        	        Divide284 = (pANTLR3_COMMON_TOKEN) MATCHT(Divide, &FOLLOW_Divide_in_e_num_34626); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_3Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) {
            	        	        Divide284_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Divide284));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, Divide284_tree, root_0));
            	        	        }

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // ANML/base/antlr/ANML.g:711:43: AndBit
            	        	    {
            	        	        AndBit285 = (pANTLR3_COMMON_TOKEN) MATCHT(AndBit, &FOLLOW_AndBit_in_e_num_34629); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_3Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) {
            	        	        AndBit285_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, AndBit285));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, AndBit285_tree, root_0));
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // ANML/base/antlr/ANML.g:712:4: ( ( e_prefix )=> e_prefix | e_num_4 )
            	        {
            	            int alt108=2;
            	            alt108 = cdfa108.predict(ctx, RECOGNIZER, ISTREAM, &cdfa108);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulee_num_3Ex;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt108) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:712:5: ( e_prefix )=> e_prefix
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_num_34642);
            	        	        e_prefix286=e_prefix(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_3Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix286.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ANML/base/antlr/ANML.g:713:6: e_num_4
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_e_num_4_in_e_num_34650);
            	        	        e_num_4287=e_num_4(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulee_num_3Ex;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num_4287.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop109;	/* break out of the loop */
            	    break;
                }
            }
            loop109: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulee_num_3Ex; /* Prevent compiler warnings */
    rulee_num_3Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_num_3 */

/** 
 * $ANTLR start e_num_4
 * ANML/base/antlr/ANML.g:718:1: e_num_4 : ( ( Minus | NotBit )=> ( Minus | NotBit ) ( ( e_prefix )=> e_prefix | e_num_4 ) | e_atomic );
 */
static ANMLParser_e_num_4_return
e_num_4(pANMLParser ctx)
{   
    ANMLParser_e_num_4_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Minus288;
    pANTLR3_COMMON_TOKEN    NotBit289;
    ANMLParser_e_prefix_return e_prefix290;
    #undef	RETURN_TYPE_e_prefix290
    #define	RETURN_TYPE_e_prefix290 ANMLParser_e_prefix_return

    ANMLParser_e_num_4_return e_num_4291;
    #undef	RETURN_TYPE_e_num_4291
    #define	RETURN_TYPE_e_num_4291 ANMLParser_e_num_4_return

    ANMLParser_e_atomic_return e_atomic292;
    #undef	RETURN_TYPE_e_atomic292
    #define	RETURN_TYPE_e_atomic292 ANMLParser_e_atomic_return

    pANTLR3_BASE_TREE Minus288_tree;
    pANTLR3_BASE_TREE NotBit289_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Minus288       = NULL;
    NotBit289       = NULL;
    e_prefix290.tree = NULL;

    e_num_4291.tree = NULL;

    e_atomic292.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Minus288_tree   = NULL;
    NotBit289_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:718:8: ( ( Minus | NotBit )=> ( Minus | NotBit ) ( ( e_prefix )=> e_prefix | e_num_4 ) | e_atomic )
            
            ANTLR3_UINT32 alt112;

            alt112=2;


            {
                int LA112_0 = LA(1);
                if ( (LA112_0 == Minus) && (synpred50_ANML(ctx))) 
                {
                    alt112=1;
                }
                else if ( (LA112_0 == NotBit) && (synpred50_ANML(ctx))) 
                {
                    alt112=1;
                }
                else if ( (LA112_0 == ID || LA112_0 == LeftP || LA112_0 == Duration || ((LA112_0 >= Unordered) && (LA112_0 <= End)) || ((LA112_0 >= INT) && (LA112_0 <= Infinity))) ) 
                {
                    alt112=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 112;
                    EXCEPTION->state        = 0;


                    goto rulee_num_4Ex;
                }
            }
            switch (alt112) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:719:2: ( Minus | NotBit )=> ( Minus | NotBit ) ( ( e_prefix )=> e_prefix | e_num_4 )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // ANML/base/antlr/ANML.g:719:18: ( Minus | NotBit )
        	        {
        	            int alt110=2;

        	            {
        	                int LA110_0 = LA(1);
        	                if ( (LA110_0 == Minus) ) 
        	                {
        	                    alt110=1;
        	                }
        	                else if ( (LA110_0 == NotBit) ) 
        	                {
        	                    alt110=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 110;
        	                    EXCEPTION->state        = 0;


        	                    goto rulee_num_4Ex;
        	                }
        	            }
        	            switch (alt110) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:719:19: Minus
        	        	    {
        	        	        Minus288 = (pANTLR3_COMMON_TOKEN) MATCHT(Minus, &FOLLOW_Minus_in_e_num_44677); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulee_num_4Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        Minus288_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Minus288));
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, Minus288_tree, root_0));
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:719:26: NotBit
        	        	    {
        	        	        NotBit289 = (pANTLR3_COMMON_TOKEN) MATCHT(NotBit, &FOLLOW_NotBit_in_e_num_44680); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulee_num_4Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        NotBit289_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NotBit289));
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, NotBit289_tree, root_0));
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // ANML/base/antlr/ANML.g:720:3: ( ( e_prefix )=> e_prefix | e_num_4 )
        	        {
        	            int alt111=2;
        	            alt111 = cdfa111.predict(ctx, RECOGNIZER, ISTREAM, &cdfa111);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulee_num_4Ex;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt111) 
        	            {
        	        	case 1:
        	        	    // ANML/base/antlr/ANML.g:720:4: ( e_prefix )=> e_prefix
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_e_prefix_in_e_num_44692);
        	        	        e_prefix290=e_prefix(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulee_num_4Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_prefix290.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ANML/base/antlr/ANML.g:721:5: e_num_4
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_e_num_4_in_e_num_44699);
        	        	        e_num_4291=e_num_4(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulee_num_4Ex;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_num_4291.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:723:4: e_atomic
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_e_atomic_in_e_num_44708);
        	        e_atomic292=e_atomic(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_num_4Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, e_atomic292.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulee_num_4Ex; /* Prevent compiler warnings */
    rulee_num_4Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_num_4 */

/** 
 * $ANTLR start e_atomic
 * ANML/base/antlr/ANML.g:726:1: e_atomic : ( '(' expr ')' | time_primitive | time_complex | literal | ref );
 */
static ANMLParser_e_atomic_return
e_atomic(pANMLParser ctx)
{   
    ANMLParser_e_atomic_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal293;
    pANTLR3_COMMON_TOKEN    char_literal295;
    ANMLParser_expr_return expr294;
    #undef	RETURN_TYPE_expr294
    #define	RETURN_TYPE_expr294 ANMLParser_expr_return

    ANMLParser_time_primitive_return time_primitive296;
    #undef	RETURN_TYPE_time_primitive296
    #define	RETURN_TYPE_time_primitive296 ANMLParser_time_primitive_return

    ANMLParser_time_complex_return time_complex297;
    #undef	RETURN_TYPE_time_complex297
    #define	RETURN_TYPE_time_complex297 ANMLParser_time_complex_return

    ANMLParser_literal_return literal298;
    #undef	RETURN_TYPE_literal298
    #define	RETURN_TYPE_literal298 ANMLParser_literal_return

    ANMLParser_ref_return ref299;
    #undef	RETURN_TYPE_ref299
    #define	RETURN_TYPE_ref299 ANMLParser_ref_return

    pANTLR3_BASE_TREE char_literal293_tree;
    pANTLR3_BASE_TREE char_literal295_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal293       = NULL;
    char_literal295       = NULL;
    expr294.tree = NULL;

    time_primitive296.tree = NULL;

    time_complex297.tree = NULL;

    literal298.tree = NULL;

    ref299.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal293_tree   = NULL;
    char_literal295_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:726:9: ( '(' expr ')' | time_primitive | time_complex | literal | ref )
            
            ANTLR3_UINT32 alt113;

            alt113=5;

            switch ( LA(1) ) 
            {
            case LeftP:
            	{
            		alt113=1;
            	}
                break;
            case Duration:
            case Start:
            case End:
            	{
            		alt113=2;
            	}
                break;
            case Unordered:
            case Ordered:
            	{
            		alt113=3;
            	}
                break;
            case INT:
            case FLOAT:
            case STRING:
            case True:
            case False:
            case Infinity:
            	{
            		alt113=4;
            	}
                break;
            case ID:
            	{
            		alt113=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 113;
                EXCEPTION->state        = 0;


                goto rulee_atomicEx;
            }

            switch (alt113) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:727:2: '(' expr ')'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal293 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftP, &FOLLOW_LeftP_in_e_atomic4718); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_atomicEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        FOLLOWPUSH(FOLLOW_expr_in_e_atomic4721);
        	        expr294=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_atomicEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr294.tree);
        	        char_literal295 = (pANTLR3_COMMON_TOKEN) MATCHT(RightP, &FOLLOW_RightP_in_e_atomic4723); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_atomicEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:728:4: time_primitive
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_time_primitive_in_e_atomic4729);
        	        time_primitive296=time_primitive(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_atomicEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, time_primitive296.tree);

        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:729:4: time_complex
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_time_complex_in_e_atomic4734);
        	        time_complex297=time_complex(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_atomicEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, time_complex297.tree);

        	    }
        	    break;
        	case 4:
        	    // ANML/base/antlr/ANML.g:730:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literal_in_e_atomic4739);
        	        literal298=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_atomicEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal298.tree);

        	    }
        	    break;
        	case 5:
        	    // ANML/base/antlr/ANML.g:731:4: ref
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ref_in_e_atomic4744);
        	        ref299=ref(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulee_atomicEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ref299.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulee_atomicEx; /* Prevent compiler warnings */
    rulee_atomicEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end e_atomic */

/** 
 * $ANTLR start time_complex
 * ANML/base/antlr/ANML.g:734:1: time_complex : ( Unordered | Ordered ) '(' expr ( Comma expr )* ')' ;
 */
static ANMLParser_time_complex_return
time_complex(pANMLParser ctx)
{   
    ANMLParser_time_complex_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Unordered300;
    pANTLR3_COMMON_TOKEN    Ordered301;
    pANTLR3_COMMON_TOKEN    char_literal302;
    pANTLR3_COMMON_TOKEN    Comma304;
    pANTLR3_COMMON_TOKEN    char_literal306;
    ANMLParser_expr_return expr303;
    #undef	RETURN_TYPE_expr303
    #define	RETURN_TYPE_expr303 ANMLParser_expr_return

    ANMLParser_expr_return expr305;
    #undef	RETURN_TYPE_expr305
    #define	RETURN_TYPE_expr305 ANMLParser_expr_return

    pANTLR3_BASE_TREE Unordered300_tree;
    pANTLR3_BASE_TREE Ordered301_tree;
    pANTLR3_BASE_TREE char_literal302_tree;
    pANTLR3_BASE_TREE Comma304_tree;
    pANTLR3_BASE_TREE char_literal306_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Unordered300       = NULL;
    Ordered301       = NULL;
    char_literal302       = NULL;
    Comma304       = NULL;
    char_literal306       = NULL;
    expr303.tree = NULL;

    expr305.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Unordered300_tree   = NULL;
    Ordered301_tree   = NULL;
    char_literal302_tree   = NULL;
    Comma304_tree   = NULL;
    char_literal306_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:734:13: ( ( Unordered | Ordered ) '(' expr ( Comma expr )* ')' )
        // ANML/base/antlr/ANML.g:735:2: ( Unordered | Ordered ) '(' expr ( Comma expr )* ')'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // ANML/base/antlr/ANML.g:735:2: ( Unordered | Ordered )
            {
                int alt114=2;

                {
                    int LA114_0 = LA(1);
                    if ( (LA114_0 == Unordered) ) 
                    {
                        alt114=1;
                    }
                    else if ( (LA114_0 == Ordered) ) 
                    {
                        alt114=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 114;
                        EXCEPTION->state        = 0;


                        goto ruletime_complexEx;
                    }
                }
                switch (alt114) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:735:3: Unordered
            	    {
            	        Unordered300 = (pANTLR3_COMMON_TOKEN) MATCHT(Unordered, &FOLLOW_Unordered_in_time_complex4756); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletime_complexEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        Unordered300_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Unordered300));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, Unordered300_tree, root_0));
            	        }

            	    }
            	    break;
            	case 2:
            	    // ANML/base/antlr/ANML.g:735:14: Ordered
            	    {
            	        Ordered301 = (pANTLR3_COMMON_TOKEN) MATCHT(Ordered, &FOLLOW_Ordered_in_time_complex4759); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletime_complexEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        Ordered301_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Ordered301));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, Ordered301_tree, root_0));
            	        }

            	    }
            	    break;

                }
            }
            char_literal302 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftP, &FOLLOW_LeftP_in_time_complex4763); 
            if  (HASEXCEPTION())
            {
                goto ruletime_complexEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_expr_in_time_complex4766);
            expr303=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletime_complexEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr303.tree);

            // ANML/base/antlr/ANML.g:735:34: ( Comma expr )*

            for (;;)
            {
                int alt115=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA115_0 = LA(1);
                    if ( (LA115_0 == Comma) ) 
                    {
                        alt115=1;
                    }

                }
                switch (alt115) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:735:35: Comma expr
            	    {
            	        Comma304 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_time_complex4769); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletime_complexEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_expr_in_time_complex4772);
            	        expr305=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletime_complexEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr305.tree);

            	    }
            	    break;

            	default:
            	    goto loop115;	/* break out of the loop */
            	    break;
                }
            }
            loop115: ; /* Jump out to here if this rule does not match */

            char_literal306 = (pANTLR3_COMMON_TOKEN) MATCHT(RightP, &FOLLOW_RightP_in_time_complex4776); 
            if  (HASEXCEPTION())
            {
                goto ruletime_complexEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletime_complexEx; /* Prevent compiler warnings */
    ruletime_complexEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end time_complex */

/** 
 * $ANTLR start ref
 * ANML/base/antlr/ANML.g:738:1: ref : (i= ID -> ^( Ref[$i,\"ReferenceID\"] $i) ) ;
 */
static ANMLParser_ref_return
ref(pANMLParser ctx)
{   
    ANMLParser_ref_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    i;

    pANTLR3_BASE_TREE i_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;

    /* Initialize rule variables
     */


    root_0 = NULL;

    i       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    i_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:738:4: ( (i= ID -> ^( Ref[$i,\"ReferenceID\"] $i) ) )
        // ANML/base/antlr/ANML.g:739:2: (i= ID -> ^( Ref[$i,\"ReferenceID\"] $i) )
        {
            // ANML/base/antlr/ANML.g:739:2: (i= ID -> ^( Ref[$i,\"ReferenceID\"] $i) )
            // ANML/base/antlr/ANML.g:739:3: i= ID
            {
                i = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_ref4790); 
                if  (HASEXCEPTION())
                {
                    goto rulerefEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, i, NULL); }


                 
                /* AST REWRITE
                 * elements          : i
                 * token labels      : i
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_i;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_i=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token i", i);
                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 739:8: -> ^( Ref[$i,\"ReferenceID\"] $i)
                	{
                	    // ANML/base/antlr/ANML.g:739:11: ^( Ref[$i,\"ReferenceID\"] $i)
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
                	        #if 2 == 2
                	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Ref, TOKTEXT(i, "ReferenceID"))
                	        #else
                	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Ref, (pANTLR3_UINT8)i, "ReferenceID")
                	        #endif
                	        , root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_i == NULL ? NULL : stream_i->nextNode(stream_i));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_i != NULL) stream_i->free(stream_i); 
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerefEx; /* Prevent compiler warnings */
    rulerefEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end ref */

/** 
 * $ANTLR start time_primitive
 * ANML/base/antlr/ANML.g:748:1: time_primitive : ( ( Start LeftP ID RightP )=> Start LeftP ID RightP -> ^( LabelRef ID Start ) | Start -> ^( LabelRef This Start ) | ( End LeftP ID RightP )=> End LeftP ID RightP -> ^( LabelRef ID End ) | End -> ^( LabelRef This End ) | ( Duration LeftP ID RightP )=> Duration LeftP ID RightP -> ^( LabelRef ID Duration ) | Duration -> ^( LabelRef This Duration ) );
 */
static ANMLParser_time_primitive_return
time_primitive(pANMLParser ctx)
{   
    ANMLParser_time_primitive_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Start307;
    pANTLR3_COMMON_TOKEN    LeftP308;
    pANTLR3_COMMON_TOKEN    ID309;
    pANTLR3_COMMON_TOKEN    RightP310;
    pANTLR3_COMMON_TOKEN    Start311;
    pANTLR3_COMMON_TOKEN    End312;
    pANTLR3_COMMON_TOKEN    LeftP313;
    pANTLR3_COMMON_TOKEN    ID314;
    pANTLR3_COMMON_TOKEN    RightP315;
    pANTLR3_COMMON_TOKEN    End316;
    pANTLR3_COMMON_TOKEN    Duration317;
    pANTLR3_COMMON_TOKEN    LeftP318;
    pANTLR3_COMMON_TOKEN    ID319;
    pANTLR3_COMMON_TOKEN    RightP320;
    pANTLR3_COMMON_TOKEN    Duration321;

    pANTLR3_BASE_TREE Start307_tree;
    pANTLR3_BASE_TREE LeftP308_tree;
    pANTLR3_BASE_TREE ID309_tree;
    pANTLR3_BASE_TREE RightP310_tree;
    pANTLR3_BASE_TREE Start311_tree;
    pANTLR3_BASE_TREE End312_tree;
    pANTLR3_BASE_TREE LeftP313_tree;
    pANTLR3_BASE_TREE ID314_tree;
    pANTLR3_BASE_TREE RightP315_tree;
    pANTLR3_BASE_TREE End316_tree;
    pANTLR3_BASE_TREE Duration317_tree;
    pANTLR3_BASE_TREE LeftP318_tree;
    pANTLR3_BASE_TREE ID319_tree;
    pANTLR3_BASE_TREE RightP320_tree;
    pANTLR3_BASE_TREE Duration321_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_End;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Start;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Duration;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;

    /* Initialize rule variables
     */


    root_0 = NULL;

    Start307       = NULL;
    LeftP308       = NULL;
    ID309       = NULL;
    RightP310       = NULL;
    Start311       = NULL;
    End312       = NULL;
    LeftP313       = NULL;
    ID314       = NULL;
    RightP315       = NULL;
    End316       = NULL;
    Duration317       = NULL;
    LeftP318       = NULL;
    ID319       = NULL;
    RightP320       = NULL;
    Duration321       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    Start307_tree   = NULL;
    LeftP308_tree   = NULL;
    ID309_tree   = NULL;
    RightP310_tree   = NULL;
    Start311_tree   = NULL;
    End312_tree   = NULL;
    LeftP313_tree   = NULL;
    ID314_tree   = NULL;
    RightP315_tree   = NULL;
    End316_tree   = NULL;
    Duration317_tree   = NULL;
    LeftP318_tree   = NULL;
    ID319_tree   = NULL;
    RightP320_tree   = NULL;
    Duration321_tree   = NULL;

    stream_RightP   = NULL;
    #define CREATE_stream_RightP  if (stream_RightP == NULL) {stream_RightP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightP"); } 
    stream_End   = NULL;
    #define CREATE_stream_End  if (stream_End == NULL) {stream_End = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token End"); } 
    stream_Start   = NULL;
    #define CREATE_stream_Start  if (stream_Start == NULL) {stream_Start = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Start"); } 
    stream_Duration   = NULL;
    #define CREATE_stream_Duration  if (stream_Duration == NULL) {stream_Duration = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Duration"); } 
    stream_LeftP   = NULL;
    #define CREATE_stream_LeftP  if (stream_LeftP == NULL) {stream_LeftP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftP"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 

    retval.tree  = NULL;
    {
        {
            //  ANML/base/antlr/ANML.g:748:15: ( ( Start LeftP ID RightP )=> Start LeftP ID RightP -> ^( LabelRef ID Start ) | Start -> ^( LabelRef This Start ) | ( End LeftP ID RightP )=> End LeftP ID RightP -> ^( LabelRef ID End ) | End -> ^( LabelRef This End ) | ( Duration LeftP ID RightP )=> Duration LeftP ID RightP -> ^( LabelRef ID Duration ) | Duration -> ^( LabelRef This Duration ) )
            
            ANTLR3_UINT32 alt116;

            alt116=6;

            alt116 = cdfa116.predict(ctx, RECOGNIZER, ISTREAM, &cdfa116);
            if  (HASEXCEPTION())
            {
                goto ruletime_primitiveEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt116) 
            {
        	case 1:
        	    // ANML/base/antlr/ANML.g:749:2: ( Start LeftP ID RightP )=> Start LeftP ID RightP
        	    {
        	        Start307 = (pANTLR3_COMMON_TOKEN) MATCHT(Start, &FOLLOW_Start_in_time_primitive4834); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Start; stream_Start->add(stream_Start, Start307, NULL); }

        	        LeftP308 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftP, &FOLLOW_LeftP_in_time_primitive4836); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftP; stream_LeftP->add(stream_LeftP, LeftP308, NULL); }

        	        ID309 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_time_primitive4838); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID309, NULL); }

        	        RightP310 = (pANTLR3_COMMON_TOKEN) MATCHT(RightP, &FOLLOW_RightP_in_time_primitive4840); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RightP; stream_RightP->add(stream_RightP, RightP310, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : ID, Start
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 750:6: -> ^( LabelRef ID Start )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:750:9: ^( LabelRef ID Start )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LabelRef, (pANTLR3_UINT8)"LabelRef"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Start == NULL ? NULL : stream_Start->nextNode(stream_Start));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // ANML/base/antlr/ANML.g:751:5: Start
        	    {
        	        Start311 = (pANTLR3_COMMON_TOKEN) MATCHT(Start, &FOLLOW_Start_in_time_primitive4861); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Start; stream_Start->add(stream_Start, Start311, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : Start
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 752:6: -> ^( LabelRef This Start )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:752:9: ^( LabelRef This Start )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LabelRef, (pANTLR3_UINT8)"LabelRef"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, This, (pANTLR3_UINT8)"This"));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Start == NULL ? NULL : stream_Start->nextNode(stream_Start));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // ANML/base/antlr/ANML.g:753:4: ( End LeftP ID RightP )=> End LeftP ID RightP
        	    {
        	        End312 = (pANTLR3_COMMON_TOKEN) MATCHT(End, &FOLLOW_End_in_time_primitive4892); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_End; stream_End->add(stream_End, End312, NULL); }

        	        LeftP313 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftP, &FOLLOW_LeftP_in_time_primitive4894); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftP; stream_LeftP->add(stream_LeftP, LeftP313, NULL); }

        	        ID314 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_time_primitive4896); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID314, NULL); }

        	        RightP315 = (pANTLR3_COMMON_TOKEN) MATCHT(RightP, &FOLLOW_RightP_in_time_primitive4898); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RightP; stream_RightP->add(stream_RightP, RightP315, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : End, ID
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 754:3: -> ^( LabelRef ID End )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:754:6: ^( LabelRef ID End )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LabelRef, (pANTLR3_UINT8)"LabelRef"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_End == NULL ? NULL : stream_End->nextNode(stream_End));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // ANML/base/antlr/ANML.g:755:5: End
        	    {
        	        End316 = (pANTLR3_COMMON_TOKEN) MATCHT(End, &FOLLOW_End_in_time_primitive4916); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_End; stream_End->add(stream_End, End316, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : End
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 756:6: -> ^( LabelRef This End )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:756:9: ^( LabelRef This End )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LabelRef, (pANTLR3_UINT8)"LabelRef"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, This, (pANTLR3_UINT8)"This"));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_End == NULL ? NULL : stream_End->nextNode(stream_End));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // ANML/base/antlr/ANML.g:757:4: ( Duration LeftP ID RightP )=> Duration LeftP ID RightP
        	    {
        	        Duration317 = (pANTLR3_COMMON_TOKEN) MATCHT(Duration, &FOLLOW_Duration_in_time_primitive4947); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Duration; stream_Duration->add(stream_Duration, Duration317, NULL); }

        	        LeftP318 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftP, &FOLLOW_LeftP_in_time_primitive4949); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_LeftP; stream_LeftP->add(stream_LeftP, LeftP318, NULL); }

        	        ID319 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_time_primitive4951); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ID; stream_ID->add(stream_ID, ID319, NULL); }

        	        RightP320 = (pANTLR3_COMMON_TOKEN) MATCHT(RightP, &FOLLOW_RightP_in_time_primitive4953); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_RightP; stream_RightP->add(stream_RightP, RightP320, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : ID, Duration
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 758:3: -> ^( LabelRef ID Duration )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:758:6: ^( LabelRef ID Duration )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LabelRef, (pANTLR3_UINT8)"LabelRef"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Duration == NULL ? NULL : stream_Duration->nextNode(stream_Duration));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // ANML/base/antlr/ANML.g:759:5: Duration
        	    {
        	        Duration321 = (pANTLR3_COMMON_TOKEN) MATCHT(Duration, &FOLLOW_Duration_in_time_primitive4971); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletime_primitiveEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_Duration; stream_Duration->add(stream_Duration, Duration321, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : Duration
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 760:6: -> ^( LabelRef This Duration )
        	        	{
        	        	    // ANML/base/antlr/ANML.g:760:9: ^( LabelRef This Duration )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LabelRef, (pANTLR3_UINT8)"LabelRef"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, This, (pANTLR3_UINT8)"This"));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Duration == NULL ? NULL : stream_Duration->nextNode(stream_Duration));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruletime_primitiveEx; /* Prevent compiler warnings */
    ruletime_primitiveEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RightP != NULL) stream_RightP->free(stream_RightP);
        if (stream_End != NULL) stream_End->free(stream_End);
        if (stream_Start != NULL) stream_Start->free(stream_Start);
        if (stream_Duration != NULL) stream_Duration->free(stream_Duration);
        if (stream_LeftP != NULL) stream_LeftP->free(stream_LeftP);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end time_primitive */

/** 
 * $ANTLR start arg_list
 * ANML/base/antlr/ANML.g:771:1: arg_list : LeftP ( expr ( ( Comma )? expr )* )? RightP -> ^( Arguments[$LeftP,\"Arguments\"] ( expr )* ) ;
 */
static ANMLParser_arg_list_return
arg_list(pANMLParser ctx)
{   
    ANMLParser_arg_list_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LeftP322;
    pANTLR3_COMMON_TOKEN    Comma324;
    pANTLR3_COMMON_TOKEN    RightP326;
    ANMLParser_expr_return expr323;
    #undef	RETURN_TYPE_expr323
    #define	RETURN_TYPE_expr323 ANMLParser_expr_return

    ANMLParser_expr_return expr325;
    #undef	RETURN_TYPE_expr325
    #define	RETURN_TYPE_expr325 ANMLParser_expr_return

    pANTLR3_BASE_TREE LeftP322_tree;
    pANTLR3_BASE_TREE Comma324_tree;
    pANTLR3_BASE_TREE RightP326_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RightP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LeftP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Comma;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    LeftP322       = NULL;
    Comma324       = NULL;
    RightP326       = NULL;
    expr323.tree = NULL;

    expr325.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LeftP322_tree   = NULL;
    Comma324_tree   = NULL;
    RightP326_tree   = NULL;

    stream_RightP   = NULL;
    #define CREATE_stream_RightP  if (stream_RightP == NULL) {stream_RightP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RightP"); } 
    stream_LeftP   = NULL;
    #define CREATE_stream_LeftP  if (stream_LeftP == NULL) {stream_LeftP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LeftP"); } 
    stream_Comma   = NULL;
    #define CREATE_stream_Comma  if (stream_Comma == NULL) {stream_Comma = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Comma"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:771:10: ( LeftP ( expr ( ( Comma )? expr )* )? RightP -> ^( Arguments[$LeftP,\"Arguments\"] ( expr )* ) )
        // ANML/base/antlr/ANML.g:772:4: LeftP ( expr ( ( Comma )? expr )* )? RightP
        {
            LeftP322 = (pANTLR3_COMMON_TOKEN) MATCHT(LeftP, &FOLLOW_LeftP_in_arg_list5007); 
            if  (HASEXCEPTION())
            {
                goto rulearg_listEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_LeftP; stream_LeftP->add(stream_LeftP, LeftP322, NULL); }


            // ANML/base/antlr/ANML.g:772:10: ( expr ( ( Comma )? expr )* )?
            {
                int alt119=2;
                {
                    int LA119_0 = LA(1);
                    if ( (LA119_0 == ID || LA119_0 == LeftB || LA119_0 == LeftP || LA119_0 == Duration || ((LA119_0 >= NotLog) && (LA119_0 <= NotBit)) || LA119_0 == Contains || ((LA119_0 >= ForAll) && (LA119_0 <= Exists)) || LA119_0 == Dots || LA119_0 == Minus || ((LA119_0 >= Unordered) && (LA119_0 <= End)) || ((LA119_0 >= INT) && (LA119_0 <= Infinity))) ) 
                    {
                        alt119=1;
                    }
                }
                switch (alt119) 
                {
            	case 1:
            	    // ANML/base/antlr/ANML.g:772:11: expr ( ( Comma )? expr )*
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_in_arg_list5010);
            	        expr323=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulearg_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr323.tree, NULL); }

            	        // ANML/base/antlr/ANML.g:772:16: ( ( Comma )? expr )*

            	        for (;;)
            	        {
            	            int alt118=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA118_0 = LA(1);
            	                if ( (LA118_0 == ID || LA118_0 == Comma || LA118_0 == LeftB || LA118_0 == LeftP || LA118_0 == Duration || ((LA118_0 >= NotLog) && (LA118_0 <= NotBit)) || LA118_0 == Contains || ((LA118_0 >= ForAll) && (LA118_0 <= Exists)) || LA118_0 == Dots || LA118_0 == Minus || ((LA118_0 >= Unordered) && (LA118_0 <= End)) || ((LA118_0 >= INT) && (LA118_0 <= Infinity))) ) 
            	                {
            	                    alt118=1;
            	                }

            	            }
            	            switch (alt118) 
            	            {
            	        	case 1:
            	        	    // ANML/base/antlr/ANML.g:772:17: ( Comma )? expr
            	        	    {

            	        	        // ANML/base/antlr/ANML.g:772:17: ( Comma )?
            	        	        {
            	        	            int alt117=2;
            	        	            {
            	        	                int LA117_0 = LA(1);
            	        	                if ( (LA117_0 == Comma) ) 
            	        	                {
            	        	                    alt117=1;
            	        	                }
            	        	            }
            	        	            switch (alt117) 
            	        	            {
            	        	        	case 1:
            	        	        	    // ANML/base/antlr/ANML.g:772:17: Comma
            	        	        	    {
            	        	        	        Comma324 = (pANTLR3_COMMON_TOKEN) MATCHT(Comma, &FOLLOW_Comma_in_arg_list5013); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulearg_listEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Comma; stream_Comma->add(stream_Comma, Comma324, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }
            	        	        FOLLOWPUSH(FOLLOW_expr_in_arg_list5016);
            	        	        expr325=expr(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulearg_listEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr325.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop118;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop118: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }
            RightP326 = (pANTLR3_COMMON_TOKEN) MATCHT(RightP, &FOLLOW_RightP_in_arg_list5022); 
            if  (HASEXCEPTION())
            {
                goto rulearg_listEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_RightP; stream_RightP->add(stream_RightP, RightP326, NULL); }


             
            /* AST REWRITE
             * elements          : expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 772:40: -> ^( Arguments[$LeftP,\"Arguments\"] ( expr )* )
            	{
            	    // ANML/base/antlr/ANML.g:772:43: ^( Arguments[$LeftP,\"Arguments\"] ( expr )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 2 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, Arguments, TOKTEXT(LeftP322, "Arguments"))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, Arguments, (pANTLR3_UINT8)LeftP322, "Arguments")
            	        #endif
            	        , root_1));

            	        // ANML/base/antlr/ANML.g:772:75: ( expr )*
            	        {
            	        	while ( (stream_expr != NULL && stream_expr->hasNext(stream_expr))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	}
            	        	if ( stream_expr != NULL) stream_expr->reset(stream_expr);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulearg_listEx; /* Prevent compiler warnings */
    rulearg_listEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RightP != NULL) stream_RightP->free(stream_RightP);
        if (stream_LeftP != NULL) stream_LeftP->free(stream_LeftP);
        if (stream_Comma != NULL) stream_Comma->free(stream_Comma);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end arg_list */

/** 
 * $ANTLR start builtinType
 * ANML/base/antlr/ANML.g:776:1: builtinType : ( Boolean | Integer | Float | Symbol | String | Object );
 */
static ANMLParser_builtinType_return
builtinType(pANMLParser ctx)
{   
    ANMLParser_builtinType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set327;

    pANTLR3_BASE_TREE set327_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set327       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set327_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:776:12: ( Boolean | Integer | Float | Symbol | String | Object )
        // ANML/base/antlr/ANML.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set327=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= Boolean) && (LA(1) <= Object)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set327)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_builtinType0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_builtinType0);    goto rulebuiltinTypeEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebuiltinTypeEx; /* Prevent compiler warnings */
    rulebuiltinTypeEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end builtinType */

/** 
 * $ANTLR start literal
 * ANML/base/antlr/ANML.g:797:1: literal : ( INT | FLOAT | STRING | True | False | Infinity );
 */
static ANMLParser_literal_return
literal(pANMLParser ctx)
{   
    ANMLParser_literal_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set328;

    pANTLR3_BASE_TREE set328_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set328       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set328_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:797:8: ( INT | FLOAT | STRING | True | False | Infinity )
        // ANML/base/antlr/ANML.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set328=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= INT) && (LA(1) <= Infinity)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set328)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end literal */

/** 
 * $ANTLR start num_relop
 * ANML/base/antlr/ANML.g:811:1: num_relop : ( Equal | NotEqual | LessThan | GreaterThan | LessThanE | GreaterThanE );
 */
static ANMLParser_num_relop_return
num_relop(pANMLParser ctx)
{   
    ANMLParser_num_relop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set329;

    pANTLR3_BASE_TREE set329_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set329       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set329_tree   = NULL;


    retval.tree  = NULL;
    {
        // ANML/base/antlr/ANML.g:811:10: ( Equal | NotEqual | LessThan | GreaterThan | LessThanE | GreaterThanE )
        // ANML/base/antlr/ANML.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set329=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == LessThan || LA(1) == Equal || ((LA(1) >= NotEqual) && (LA(1) <= GreaterThanE)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set329)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_num_relop0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_num_relop0);    goto rulenum_relopEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenum_relopEx; /* Prevent compiler warnings */
    rulenum_relopEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end num_relop */

// $ANTLR start synpred1_ANML
static void synpred1_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:406:2: ( ref Semi )
    // ANML/base/antlr/ANML.g:406:3: ref Semi
    {
        FOLLOWPUSH(FOLLOW_ref_in_synpred1_ANML1955);
        ref(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(Semi, &FOLLOW_Semi_in_synpred1_ANML1957); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_ANMLEx; /* Prevent compiler warnings */
rulesynpred1_ANMLEx: ;

}
// $ANTLR end synpred1_ANML

// $ANTLR start synpred2_ANML
static void synpred2_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:408:4: ( ( NotLog | NotBit ) ref Semi )
    // ANML/base/antlr/ANML.g:408:5: ( NotLog | NotBit ) ref Semi
    {
        if ( ((LA(1) >= NotLog) && (LA(1) <= NotBit)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred2_ANML1999;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred2_ANML1999);    goto rulesynpred2_ANMLEx;
        }

        FOLLOWPUSH(FOLLOW_ref_in_synpred2_ANML2005);
        ref(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred2_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(Semi, &FOLLOW_Semi_in_synpred2_ANML2007); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred2_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred2_ANMLEx; /* Prevent compiler warnings */
rulesynpred2_ANMLEx: ;

}
// $ANTLR end synpred2_ANML

// $ANTLR start synpred3_ANML
static void synpred3_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:432:2: ( stmt_primitive )
    // ANML/base/antlr/ANML.g:432:3: stmt_primitive
    {
        FOLLOWPUSH(FOLLOW_stmt_primitive_in_synpred3_ANML2211);
        stmt_primitive(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred3_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred3_ANMLEx; /* Prevent compiler warnings */
rulesynpred3_ANMLEx: ;

}
// $ANTLR end synpred3_ANML

// $ANTLR start synpred4_ANML
static void synpred4_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:433:4: ( stmt_block )
    // ANML/base/antlr/ANML.g:433:5: stmt_block
    {
        FOLLOWPUSH(FOLLOW_stmt_block_in_synpred4_ANML2221);
        stmt_block(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred4_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred4_ANMLEx; /* Prevent compiler warnings */
rulesynpred4_ANMLEx: ;

}
// $ANTLR end synpred4_ANML

// $ANTLR start synpred5_ANML
static void synpred5_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:434:4: ( stmt_timed )
    // ANML/base/antlr/ANML.g:434:5: stmt_timed
    {
        FOLLOWPUSH(FOLLOW_stmt_timed_in_synpred5_ANML2231);
        stmt_timed(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred5_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred5_ANMLEx; /* Prevent compiler warnings */
rulesynpred5_ANMLEx: ;

}
// $ANTLR end synpred5_ANML

// $ANTLR start synpred6_ANML
static void synpred6_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:442:2: ( expr Semi )
    // ANML/base/antlr/ANML.g:442:3: expr Semi
    {
        FOLLOWPUSH(FOLLOW_expr_in_synpred6_ANML2266);
        expr(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred6_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(Semi, &FOLLOW_Semi_in_synpred6_ANML2268); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred6_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred6_ANMLEx; /* Prevent compiler warnings */
rulesynpred6_ANMLEx: ;

}
// $ANTLR end synpred6_ANML

// $ANTLR start synpred7_ANML
static void synpred7_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:443:6: ( stmt_chain Semi )
    // ANML/base/antlr/ANML.g:443:7: stmt_chain Semi
    {
        FOLLOWPUSH(FOLLOW_stmt_chain_in_synpred7_ANML2283);
        stmt_chain(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred7_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(Semi, &FOLLOW_Semi_in_synpred7_ANML2285); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred7_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred7_ANMLEx; /* Prevent compiler warnings */
rulesynpred7_ANMLEx: ;

}
// $ANTLR end synpred7_ANML

// $ANTLR start synpred8_ANML
static void synpred8_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:444:4: ( stmt_delta_chain Semi )
    // ANML/base/antlr/ANML.g:444:5: stmt_delta_chain Semi
    {
        FOLLOWPUSH(FOLLOW_stmt_delta_chain_in_synpred8_ANML2298);
        stmt_delta_chain(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred8_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(Semi, &FOLLOW_Semi_in_synpred8_ANML2300); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred8_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred8_ANMLEx; /* Prevent compiler warnings */
rulesynpred8_ANMLEx: ;

}
// $ANTLR end synpred8_ANML

// $ANTLR start synpred9_ANML
static void synpred9_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:445:6: ( stmt_timeless Semi )
    // ANML/base/antlr/ANML.g:445:7: stmt_timeless Semi
    {
        FOLLOWPUSH(FOLLOW_stmt_timeless_in_synpred9_ANML2315);
        stmt_timeless(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred9_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(Semi, &FOLLOW_Semi_in_synpred9_ANML2317); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred9_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred9_ANMLEx; /* Prevent compiler warnings */
rulesynpred9_ANMLEx: ;

}
// $ANTLR end synpred9_ANML

// $ANTLR start synpred10_ANML
static void synpred10_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:473:4: ( exist_time stmt )
    // ANML/base/antlr/ANML.g:473:5: exist_time stmt
    {
        FOLLOWPUSH(FOLLOW_exist_time_in_synpred10_ANML2508);
        exist_time(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred10_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_stmt_in_synpred10_ANML2510);
        stmt(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred10_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred10_ANMLEx; /* Prevent compiler warnings */
rulesynpred10_ANMLEx: ;

}
// $ANTLR end synpred10_ANML

// $ANTLR start synpred11_ANML
static void synpred11_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:482:5: ( Else )
    // ANML/base/antlr/ANML.g:482:6: Else
    {
         MATCHT(Else, &FOLLOW_Else_in_synpred11_ANML2575); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred11_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred11_ANMLEx; /* Prevent compiler warnings */
rulesynpred11_ANMLEx: ;

}
// $ANTLR end synpred11_ANML

// $ANTLR start synpred12_ANML
static void synpred12_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:507:4: ( interval ref ( stmt_chain_1 )+ )
    // ANML/base/antlr/ANML.g:507:5: interval ref ( stmt_chain_1 )+
    {
        FOLLOWPUSH(FOLLOW_interval_in_synpred12_ANML2766);
        interval(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred12_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_ref_in_synpred12_ANML2768);
        ref(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred12_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // ANML/base/antlr/ANML.g:507:18: ( stmt_chain_1 )+
        {
            int cnt120=0;

            for (;;)
            {
                int alt120=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA120_0 = LA(1);
        	    if ( (LA120_0 == Comma || ((LA120_0 >= LessThan) && (LA120_0 <= Assign)) || LA120_0 == Undefine || LA120_0 == Equal || ((LA120_0 >= Change) && (LA120_0 <= Skip)) || ((LA120_0 >= NotEqual) && (LA120_0 <= GreaterThanE))) ) 
        	    {
        	        alt120=1;
        	    }

        	}
        	switch (alt120) 
        	{
        	    case 1:
        	        // ANML/base/antlr/ANML.g:507:18: stmt_chain_1
        	        {
        	            FOLLOWPUSH(FOLLOW_stmt_chain_1_in_synpred12_ANML2770);
        	            stmt_chain_1(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulesynpred12_ANMLEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }
        	        break;

        	    default:
        	    
        		if ( cnt120 >= 1 )
        		{
        		    goto loop120;
        		}
        		if (BACKTRACKING>0)
        		{
        		    FAILEDFLAG = ANTLR3_TRUE; 
        		    return ;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto rulesynpred12_ANMLEx;
        	}
        	cnt120++;
            }
            loop120: ;	/* Jump to here if this rule does not match */
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred12_ANMLEx; /* Prevent compiler warnings */
rulesynpred12_ANMLEx: ;

}
// $ANTLR end synpred12_ANML

// $ANTLR start synpred13_ANML
static void synpred13_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:537:4: ( interval ref ( stmt_delta_chain_1 )+ )
    // ANML/base/antlr/ANML.g:537:5: interval ref ( stmt_delta_chain_1 )+
    {
        FOLLOWPUSH(FOLLOW_interval_in_synpred13_ANML3183);
        interval(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred13_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_ref_in_synpred13_ANML3185);
        ref(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred13_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // ANML/base/antlr/ANML.g:537:18: ( stmt_delta_chain_1 )+
        {
            int cnt121=0;

            for (;;)
            {
                int alt121=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA121_0 = LA(1);
        	    if ( (LA121_0 == Comma || LA121_0 == Assign || LA121_0 == Undefine || LA121_0 == Equal || LA121_0 == Change || ((LA121_0 >= SetAssign) && (LA121_0 <= Skip))) ) 
        	    {
        	        alt121=1;
        	    }

        	}
        	switch (alt121) 
        	{
        	    case 1:
        	        // ANML/base/antlr/ANML.g:537:18: stmt_delta_chain_1
        	        {
        	            FOLLOWPUSH(FOLLOW_stmt_delta_chain_1_in_synpred13_ANML3187);
        	            stmt_delta_chain_1(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulesynpred13_ANMLEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }
        	        break;

        	    default:
        	    
        		if ( cnt121 >= 1 )
        		{
        		    goto loop121;
        		}
        		if (BACKTRACKING>0)
        		{
        		    FAILEDFLAG = ANTLR3_TRUE; 
        		    return ;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto rulesynpred13_ANMLEx;
        	}
        	cnt121++;
            }
            loop121: ;	/* Jump to here if this rule does not match */
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred13_ANMLEx; /* Prevent compiler warnings */
rulesynpred13_ANMLEx: ;

}
// $ANTLR end synpred13_ANML

// $ANTLR start synpred14_ANML
static void synpred14_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:563:2: ( univ_time )
    // ANML/base/antlr/ANML.g:563:3: univ_time
    {
        FOLLOWPUSH(FOLLOW_univ_time_in_synpred14_ANML3390);
        univ_time(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred14_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred14_ANMLEx; /* Prevent compiler warnings */
rulesynpred14_ANMLEx: ;

}
// $ANTLR end synpred14_ANML

// $ANTLR start synpred15_ANML
static void synpred15_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:564:4: ( exist_time )
    // ANML/base/antlr/ANML.g:564:5: exist_time
    {
        FOLLOWPUSH(FOLLOW_exist_time_in_synpred15_ANML3399);
        exist_time(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred15_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred15_ANMLEx; /* Prevent compiler warnings */
rulesynpred15_ANMLEx: ;

}
// $ANTLR end synpred15_ANML

// $ANTLR start synpred16_ANML
static void synpred16_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:573:2: ( bra All ket )
    // ANML/base/antlr/ANML.g:573:3: bra All ket
    {
        FOLLOWPUSH(FOLLOW_bra_in_synpred16_ANML3419);
        bra(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred16_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(All, &FOLLOW_All_in_synpred16_ANML3421); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred16_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_ket_in_synpred16_ANML3423);
        ket(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred16_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred16_ANMLEx; /* Prevent compiler warnings */
rulesynpred16_ANMLEx: ;

}
// $ANTLR end synpred16_ANML

// $ANTLR start synpred17_ANML
static void synpred17_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:575:4: ( LeftB expr RightB )
    // ANML/base/antlr/ANML.g:575:5: LeftB expr RightB
    {
         MATCHT(LeftB, &FOLLOW_LeftB_in_synpred17_ANML3471); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred17_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_expr_in_synpred17_ANML3473);
        expr(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred17_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(RightB, &FOLLOW_RightB_in_synpred17_ANML3475); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred17_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred17_ANMLEx; /* Prevent compiler warnings */
rulesynpred17_ANMLEx: ;

}
// $ANTLR end synpred17_ANML

// $ANTLR start synpred18_ANML
static void synpred18_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:591:2: ( LeftB Skip RightB )
    // ANML/base/antlr/ANML.g:591:3: LeftB Skip RightB
    {
         MATCHT(LeftB, &FOLLOW_LeftB_in_synpred18_ANML3661); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred18_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(Skip, &FOLLOW_Skip_in_synpred18_ANML3663); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred18_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(RightB, &FOLLOW_RightB_in_synpred18_ANML3665); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred18_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred18_ANMLEx; /* Prevent compiler warnings */
rulesynpred18_ANMLEx: ;

}
// $ANTLR end synpred18_ANML

// $ANTLR start synpred19_ANML
static void synpred19_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:592:4: ( bra expr rLimit )
    // ANML/base/antlr/ANML.g:592:5: bra expr rLimit
    {
        FOLLOWPUSH(FOLLOW_bra_in_synpred19_ANML3685);
        bra(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred19_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_expr_in_synpred19_ANML3687);
        expr(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred19_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_rLimit_in_synpred19_ANML3689);
        rLimit(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred19_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred19_ANMLEx; /* Prevent compiler warnings */
rulesynpred19_ANMLEx: ;

}
// $ANTLR end synpred19_ANML

// $ANTLR start synpred20_ANML
static void synpred20_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:593:4: ( lLimit expr ket )
    // ANML/base/antlr/ANML.g:593:5: lLimit expr ket
    {
        FOLLOWPUSH(FOLLOW_lLimit_in_synpred20_ANML3722);
        lLimit(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred20_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_expr_in_synpred20_ANML3724);
        expr(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred20_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_ket_in_synpred20_ANML3726);
        ket(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred20_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred20_ANMLEx; /* Prevent compiler warnings */
rulesynpred20_ANMLEx: ;

}
// $ANTLR end synpred20_ANML

// $ANTLR start synpred21_ANML
static void synpred21_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:595:6: ( Delta )
    // ANML/base/antlr/ANML.g:595:7: Delta
    {
         MATCHT(Delta, &FOLLOW_Delta_in_synpred21_ANML3767); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred21_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred21_ANMLEx; /* Prevent compiler warnings */
rulesynpred21_ANMLEx: ;

}
// $ANTLR end synpred21_ANML

// $ANTLR start synpred22_ANML
static void synpred22_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:596:6: ( Skip )
    // ANML/base/antlr/ANML.g:596:7: Skip
    {
         MATCHT(Skip, &FOLLOW_Skip_in_synpred22_ANML3805); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred22_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred22_ANMLEx; /* Prevent compiler warnings */
rulesynpred22_ANMLEx: ;

}
// $ANTLR end synpred22_ANML

// $ANTLR start synpred23_ANML
static void synpred23_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:597:7: ( Delta )
    // ANML/base/antlr/ANML.g:597:8: Delta
    {
         MATCHT(Delta, &FOLLOW_Delta_in_synpred23_ANML3821); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred23_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred23_ANMLEx; /* Prevent compiler warnings */
rulesynpred23_ANMLEx: ;

}
// $ANTLR end synpred23_ANML

// $ANTLR start synpred24_ANML
static void synpred24_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:598:5: ( Skip )
    // ANML/base/antlr/ANML.g:598:6: Skip
    {
         MATCHT(Skip, &FOLLOW_Skip_in_synpred24_ANML3853); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred24_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred24_ANMLEx; /* Prevent compiler warnings */
rulesynpred24_ANMLEx: ;

}
// $ANTLR end synpred24_ANML

// $ANTLR start synpred25_ANML
static void synpred25_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:625:2: ( e_prefix )
    // ANML/base/antlr/ANML.g:625:3: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred25_ANML4065);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred25_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred25_ANMLEx; /* Prevent compiler warnings */
rulesynpred25_ANMLEx: ;

}
// $ANTLR end synpred25_ANML

// $ANTLR start synpred26_ANML
static void synpred26_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:633:4: ( interval expr )
    // ANML/base/antlr/ANML.g:633:5: interval expr
    {
        FOLLOWPUSH(FOLLOW_interval_in_synpred26_ANML4110);
        interval(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_expr_in_synpred26_ANML4112);
        expr(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_ANMLEx; /* Prevent compiler warnings */
rulesynpred26_ANMLEx: ;

}
// $ANTLR end synpred26_ANML

// $ANTLR start synpred27_ANML
static void synpred27_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:637:4: ( Contains )
    // ANML/base/antlr/ANML.g:637:5: Contains
    {
         MATCHT(Contains, &FOLLOW_Contains_in_synpred27_ANML4141); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred27_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred27_ANMLEx; /* Prevent compiler warnings */
rulesynpred27_ANMLEx: ;

}
// $ANTLR end synpred27_ANML

// $ANTLR start synpred28_ANML
static void synpred28_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:638:4: ( exist_time expr )
    // ANML/base/antlr/ANML.g:638:5: exist_time expr
    {
        FOLLOWPUSH(FOLLOW_exist_time_in_synpred28_ANML4152);
        exist_time(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred28_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_expr_in_synpred28_ANML4154);
        expr(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred28_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred28_ANMLEx; /* Prevent compiler warnings */
rulesynpred28_ANMLEx: ;

}
// $ANTLR end synpred28_ANML

// $ANTLR start synpred29_ANML
static void synpred29_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:656:11: ( Implies )
    // ANML/base/antlr/ANML.g:656:12: Implies
    {
         MATCHT(Implies, &FOLLOW_Implies_in_synpred29_ANML4280); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred29_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred29_ANMLEx; /* Prevent compiler warnings */
rulesynpred29_ANMLEx: ;

}
// $ANTLR end synpred29_ANML

// $ANTLR start synpred30_ANML
static void synpred30_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:656:32: ( e_prefix )
    // ANML/base/antlr/ANML.g:656:33: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred30_ANML4288);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred30_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred30_ANMLEx; /* Prevent compiler warnings */
rulesynpred30_ANMLEx: ;

}
// $ANTLR end synpred30_ANML

// $ANTLR start synpred31_ANML
static void synpred31_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:660:11: ( EqualLog )
    // ANML/base/antlr/ANML.g:660:12: EqualLog
    {
         MATCHT(EqualLog, &FOLLOW_EqualLog_in_synpred31_ANML4312); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred31_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred31_ANMLEx; /* Prevent compiler warnings */
rulesynpred31_ANMLEx: ;

}
// $ANTLR end synpred31_ANML

// $ANTLR start synpred32_ANML
static void synpred32_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:660:34: ( e_prefix )
    // ANML/base/antlr/ANML.g:660:35: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred32_ANML4320);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred32_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred32_ANMLEx; /* Prevent compiler warnings */
rulesynpred32_ANMLEx: ;

}
// $ANTLR end synpred32_ANML

// $ANTLR start synpred33_ANML
static void synpred33_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:664:11: ( XorLog )
    // ANML/base/antlr/ANML.g:664:12: XorLog
    {
         MATCHT(XorLog, &FOLLOW_XorLog_in_synpred33_ANML4344); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred33_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred33_ANMLEx; /* Prevent compiler warnings */
rulesynpred33_ANMLEx: ;

}
// $ANTLR end synpred33_ANML

// $ANTLR start synpred34_ANML
static void synpred34_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:664:30: ( e_prefix )
    // ANML/base/antlr/ANML.g:664:31: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred34_ANML4352);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred34_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred34_ANMLEx; /* Prevent compiler warnings */
rulesynpred34_ANMLEx: ;

}
// $ANTLR end synpred34_ANML

// $ANTLR start synpred35_ANML
static void synpred35_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:680:11: ( OrLog )
    // ANML/base/antlr/ANML.g:680:12: OrLog
    {
         MATCHT(OrLog, &FOLLOW_OrLog_in_synpred35_ANML4389); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred35_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred35_ANMLEx; /* Prevent compiler warnings */
rulesynpred35_ANMLEx: ;

}
// $ANTLR end synpred35_ANML

// $ANTLR start synpred36_ANML
static void synpred36_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:680:28: ( e_prefix )
    // ANML/base/antlr/ANML.g:680:29: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred36_ANML4397);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred36_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred36_ANMLEx; /* Prevent compiler warnings */
rulesynpred36_ANMLEx: ;

}
// $ANTLR end synpred36_ANML

// $ANTLR start synpred37_ANML
static void synpred37_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:684:11: ( AndLog )
    // ANML/base/antlr/ANML.g:684:12: AndLog
    {
         MATCHT(AndLog, &FOLLOW_AndLog_in_synpred37_ANML4421); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred37_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred37_ANMLEx; /* Prevent compiler warnings */
rulesynpred37_ANMLEx: ;

}
// $ANTLR end synpred37_ANML

// $ANTLR start synpred38_ANML
static void synpred38_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:684:30: ( e_prefix )
    // ANML/base/antlr/ANML.g:684:31: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred38_ANML4429);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred38_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred38_ANMLEx; /* Prevent compiler warnings */
rulesynpred38_ANMLEx: ;

}
// $ANTLR end synpred38_ANML

// $ANTLR start synpred39_ANML
static void synpred39_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:688:2: ( NotLog )
    // ANML/base/antlr/ANML.g:688:3: NotLog
    {
         MATCHT(NotLog, &FOLLOW_NotLog_in_synpred39_ANML4450); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred39_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred39_ANMLEx; /* Prevent compiler warnings */
rulesynpred39_ANMLEx: ;

}
// $ANTLR end synpred39_ANML

// $ANTLR start synpred40_ANML
static void synpred40_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:688:21: ( e_prefix )
    // ANML/base/antlr/ANML.g:688:22: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred40_ANML4458);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred40_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred40_ANMLEx; /* Prevent compiler warnings */
rulesynpred40_ANMLEx: ;

}
// $ANTLR end synpred40_ANML

// $ANTLR start synpred41_ANML
static void synpred41_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:693:11: ( num_relop )
    // ANML/base/antlr/ANML.g:693:12: num_relop
    {
        FOLLOWPUSH(FOLLOW_num_relop_in_synpred41_ANML4485);
        num_relop(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred41_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred41_ANMLEx; /* Prevent compiler warnings */
rulesynpred41_ANMLEx: ;

}
// $ANTLR end synpred41_ANML

// $ANTLR start synpred42_ANML
static void synpred42_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:693:36: ( e_prefix )
    // ANML/base/antlr/ANML.g:693:37: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred42_ANML4493);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred42_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred42_ANMLEx; /* Prevent compiler warnings */
rulesynpred42_ANMLEx: ;

}
// $ANTLR end synpred42_ANML

// $ANTLR start synpred43_ANML
static void synpred43_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:697:2: ( e_prefix )
    // ANML/base/antlr/ANML.g:697:3: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred43_ANML4514);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred43_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred43_ANMLEx; /* Prevent compiler warnings */
rulesynpred43_ANMLEx: ;

}
// $ANTLR end synpred43_ANML

// $ANTLR start synpred44_ANML
static void synpred44_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:702:11: ( XorBit )
    // ANML/base/antlr/ANML.g:702:12: XorBit
    {
         MATCHT(XorBit, &FOLLOW_XorBit_in_synpred44_ANML4536); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred44_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred44_ANMLEx; /* Prevent compiler warnings */
rulesynpred44_ANMLEx: ;

}
// $ANTLR end synpred44_ANML

// $ANTLR start synpred45_ANML
static void synpred45_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:702:30: ( e_prefix )
    // ANML/base/antlr/ANML.g:702:31: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred45_ANML4544);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred45_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred45_ANMLEx; /* Prevent compiler warnings */
rulesynpred45_ANMLEx: ;

}
// $ANTLR end synpred45_ANML

// $ANTLR start synpred46_ANML
static void synpred46_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:706:11: ( Plus | Minus | OrBit )
    // ANML/base/antlr/ANML.g:
    {
        if ( ((LA(1) >= Plus) && (LA(1) <= OrBit)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred46_ANML4567;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred46_ANML4567);    goto rulesynpred46_ANMLEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred46_ANMLEx; /* Prevent compiler warnings */
rulesynpred46_ANMLEx: ;

}
// $ANTLR end synpred46_ANML

// $ANTLR start synpred47_ANML
static void synpred47_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:706:54: ( e_prefix )
    // ANML/base/antlr/ANML.g:706:55: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred47_ANML4588);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred47_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred47_ANMLEx; /* Prevent compiler warnings */
rulesynpred47_ANMLEx: ;

}
// $ANTLR end synpred47_ANML

// $ANTLR start synpred48_ANML
static void synpred48_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:711:4: ( Times | Divide | AndBit )
    // ANML/base/antlr/ANML.g:
    {
        if ( ((LA(1) >= Times) && (LA(1) <= AndBit)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred48_ANML4614;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred48_ANML4614);    goto rulesynpred48_ANMLEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred48_ANMLEx; /* Prevent compiler warnings */
rulesynpred48_ANMLEx: ;

}
// $ANTLR end synpred48_ANML

// $ANTLR start synpred49_ANML
static void synpred49_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:712:5: ( e_prefix )
    // ANML/base/antlr/ANML.g:712:6: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred49_ANML4639);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred49_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred49_ANMLEx; /* Prevent compiler warnings */
rulesynpred49_ANMLEx: ;

}
// $ANTLR end synpred49_ANML

// $ANTLR start synpred50_ANML
static void synpred50_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:719:2: ( Minus | NotBit )
    // ANML/base/antlr/ANML.g:
    {
        if ( LA(1) == NotBit || LA(1) == Minus )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred50_ANML4670;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred50_ANML4670);    goto rulesynpred50_ANMLEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred50_ANMLEx; /* Prevent compiler warnings */
rulesynpred50_ANMLEx: ;

}
// $ANTLR end synpred50_ANML

// $ANTLR start synpred51_ANML
static void synpred51_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:720:4: ( e_prefix )
    // ANML/base/antlr/ANML.g:720:5: e_prefix
    {
        FOLLOWPUSH(FOLLOW_e_prefix_in_synpred51_ANML4689);
        e_prefix(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred51_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred51_ANMLEx; /* Prevent compiler warnings */
rulesynpred51_ANMLEx: ;

}
// $ANTLR end synpred51_ANML

// $ANTLR start synpred52_ANML
static void synpred52_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:749:2: ( Start LeftP ID RightP )
    // ANML/base/antlr/ANML.g:749:3: Start LeftP ID RightP
    {
         MATCHT(Start, &FOLLOW_Start_in_synpred52_ANML4824); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred52_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(LeftP, &FOLLOW_LeftP_in_synpred52_ANML4826); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred52_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(ID, &FOLLOW_ID_in_synpred52_ANML4828); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred52_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(RightP, &FOLLOW_RightP_in_synpred52_ANML4830); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred52_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred52_ANMLEx; /* Prevent compiler warnings */
rulesynpred52_ANMLEx: ;

}
// $ANTLR end synpred52_ANML

// $ANTLR start synpred53_ANML
static void synpred53_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:753:4: ( End LeftP ID RightP )
    // ANML/base/antlr/ANML.g:753:5: End LeftP ID RightP
    {
         MATCHT(End, &FOLLOW_End_in_synpred53_ANML4882); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred53_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(LeftP, &FOLLOW_LeftP_in_synpred53_ANML4884); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred53_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(ID, &FOLLOW_ID_in_synpred53_ANML4886); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred53_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(RightP, &FOLLOW_RightP_in_synpred53_ANML4888); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred53_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred53_ANMLEx; /* Prevent compiler warnings */
rulesynpred53_ANMLEx: ;

}
// $ANTLR end synpred53_ANML

// $ANTLR start synpred54_ANML
static void synpred54_ANML_fragment(pANMLParser ctx ) 
{
    // ANML/base/antlr/ANML.g:757:4: ( Duration LeftP ID RightP )
    // ANML/base/antlr/ANML.g:757:5: Duration LeftP ID RightP
    {
         MATCHT(Duration, &FOLLOW_Duration_in_synpred54_ANML4937); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred54_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(LeftP, &FOLLOW_LeftP_in_synpred54_ANML4939); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred54_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(ID, &FOLLOW_ID_in_synpred54_ANML4941); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred54_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(RightP, &FOLLOW_RightP_in_synpred54_ANML4943); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred54_ANMLEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred54_ANMLEx; /* Prevent compiler warnings */
rulesynpred54_ANMLEx: ;

}
// $ANTLR end synpred54_ANML
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred19_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred19_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred51_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred51_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred52_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred52_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred10_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred10_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred54_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred54_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred4_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred4_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred5_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred5_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred14_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred14_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred37_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred37_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred26_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred18_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred18_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred3_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred3_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred28_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred28_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred16_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred16_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred11_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred11_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred31_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred31_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred42_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred42_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred46_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred46_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred48_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred48_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred22_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred22_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred13_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred13_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred27_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred27_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred38_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred38_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred20_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred20_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred39_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred39_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred49_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred49_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred12_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred12_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred6_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred6_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred30_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred30_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred50_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred50_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred41_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred41_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred44_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred44_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred1_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred29_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred29_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred43_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred43_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred32_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred32_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred2_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred2_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred15_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred15_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred34_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred34_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred53_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred53_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred36_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred36_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred8_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred8_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred17_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred17_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred9_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred9_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred25_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred25_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred7_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred7_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred40_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred40_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred23_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred23_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred47_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred47_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred45_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred45_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred35_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred35_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred21_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred21_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred24_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred24_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred33_ANML(pANMLParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred33_ANML_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
