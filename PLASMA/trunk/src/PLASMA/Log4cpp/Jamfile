SubDir PLASMA Log4cpp ;

moduleName = Log4cpp ;
ModuleExt $(moduleName) ;

log4cpp.baseDir = $(PLASMA_HOME)/src/PLASMA/Log4cpp ;
log4cpp.versionDir = log4cpp-1.0.patch1 ;
log4cpp.versionPath = $(log4cpp.baseDir)/$(log4cpp.versionDir) ;
log4cpp.includeDir = $(PLASMA_HOME) src PLASMA Log4cpp $(log4cpp.versionDir) include ;

buildDir = $(log4cpp.versionPath)/src/.libs ;
installDir = $(PLASMA_HOME)/build/lib ;

actions setup.log4cpp
{
  cd $(log4cpp.baseDir)
  echo "Unpacking $(log4cpp.versionDir).tar.bz2 in "
  pwd
  #tar jxf $(log4cpp.versionDir).tar.bz2
  bunzip2 -c $(log4cpp.versionDir).tar.bz2 | tar x 
  echo Running Log4cpp configure script ... this takes about 1 minute
  echo "  For details, see $(log4cpp.versionPath)/configure.log"
  cd $(log4cpp.versionPath)
  
  # Hack! : config script returns failure on the mac because it fails to remove some dirs.
  # the log2cpp libs look ok though, so here we assign the return value to a var 
  # this prevents the build from dying here.
  export LOG4CPP_CONFIG=`./configure > configure.log`
}

actions build.log4cpp
{
  echo Building Log4cpp  ... this can take a while on the first build
  echo "  running make in $(log4cpp.versionPath)/src"
  echo "  For details, see $(log4cpp.versionPath)/src/make.log  -- or tail -f that file"
  cd $(log4cpp.versionPath)/src 
  make > make.log
}

rule install.log4cpp
{
  setup.log4cpp $(1) ;
  build.log4cpp $(1) ;

  # need to keep the original lib around so that it can be found at runtime  
  local target = $(1:D=$(installDir)) ;
  Depends $(2) : $(target) ;            
  File $(target) : $(1) ;
  SoftLink $(2) : $(1) ;
  
  Clean clean : $(target) ;
  RmDir clean : $(log4cpp.versionPath) ;
}

rule Flog4cppLibName {
  local library = $(1) ;
  
  if $(library) = SHARED {
      if $(OS) = MACOSX {
          return liblog4cpp.4$(SUFSHARE) ;
      }
      else {
          return liblog4cpp$(SUFSHARE).4 ;
      }
  } else if $(library) = STATIC {
      return liblog4cpp$(SUFLIB) ;
  } else {
      Echo can't create library name for $(library), returning lib ; 
      return "lib" ;
  }  
}

for variant in $(VARIANTS) {
    for library in $(LIBRARIES) {
        local log4cppLibName = [ Flog4cppLibName $(library) ] ;        
        local libName = [ FModuleLibraryName $(moduleName) : $(library) : $(variant) ] ;
                
        LOCATE on $(log4cppLibName) = $(buildDir) ;        
        LOCATE on $(libName) = $(installDir) ;        

        Depends $(libName) : $(log4cppLibName) ;            
        install.log4cpp $(log4cppLibName) : $(libName)  ;        
    }
}    

