if ! $(PlatformRules_INCLUDED) {
PlatformRules_INCLUDED = TRUE ;

#
# Globals set by platform
#

# POSITION_INDEPENDENT_CODE_FLAG = Flag to generate position-independent code

POSITION_INDEPENDENT_CODE_FLAG ?= -fPIC ;

# LINKER_PASSTHROUGH_FLAG = Flag to pass an argument through to the linker
LINKER_PASSTHROUGH_FLAG ?= -Wl, ;

# SHARED_FLAG = Flag to generate shared library
if $(OS) = MACOSX {
  SHARED_FLAG ?= -fno-common -dynamiclib ;
} else {
  SHARED_FLAG ?= -shared ;
}

# ENV_VARS_OK = Required to build shared library.
#
# Inhibits building shared library on MAC OS X if
# user has not set DYLD_BIND_AT_LAUNCH=YES environment 
# variable that tells loader to do early binding.

if $(OS) = MACOSX {
  if $(DYLD_BIND_AT_LAUNCH) = YES {
     ENV_VARS_OK ?= YES ;
  } else {
     ENV_VARS_OK ?= NO ;
     ENV_VARS_MSG ?= DYLD_BIND_AT_LAUNCH=YES ;
  }
} else {
     ENV_VARS_OK ?= YES ;
}
  
# LIBRARY_PATH_SEARCH_FLAG = Library search path flag

LIBRARY_PATH_SEARCH_FLAG ?= -L ;

# RUNTIME_SHARED_LIBRARY_PATH_FLAG = Runtime shared library search path flag

if $(OS) = SOLARIS {
  RUNTIME_SHARED_LIBRARY_PATH_FLAG ?= -R ;
} else {
  RUNTIME_SHARED_LIBRARY_PATH_FLAG ?= -rpath ;
}

# LINKTIME_SHARED_LIBRARY_PATH_FLAG = Linktime shared library search path flag

if $(OS) = SOLARIS {
  STATIC_LIBRARY_PATH_FLAG ?= -L ;
} else {
  STATIC_LIBRARY_PATH_FLAG ?= -rpath-link ;
}

# GCC_ROOTDIR = GCC root directory
# CC = C compiler
# C++ = C++ compiler
# LINK = C/C++ linker

if $(GCC_ROOTDIR) {
  CC = $(GCC_PREFIX) $(GCC_ROOTDIR)/bin/gcc ;
  C++ = $(GCC_PREFIX) $(GCC_ROOTDIR)/bin/g++ ;
  LINK = $(C++) $(LINKER_PASSTHROUGH_FLAG)$(RUNTIME_SHARED_LIBRARY_PATH_FLAG)
                $(LINKER_PASSTHROUGH_FLAG)$(GCC_ROOTDIR)/lib
                $(LINKER_PASSTHROUGH_FLAG)$(STATIC_LIBRARY_PATH_FLAG)
                $(LINKER_PASSTHROUGH_FLAG)$(GCC_ROOTDIR)/lib ;
} else if $(OS) = WinVS90 {
  CC = cl /nologo ;
  C++ = cl /nologo /MDd ;
  LINK = link /nologo ;
  AR = lib /nologo ;
} else {
  CC = $(GCC_PREFIX) gcc ;
  C++ = $(GCC_PREFIX) g++ ;
  LINK = $(C++) ;
}

# PROFILE_FLAGS = flags for profiling
# there were once some shenanigans about using '-p' on some platforms
PROFILE_FLAGS ?= -pg ;

# OPTIMIZE_FLAGS = flags for optimization
OPTIMIZE_FLAGS ?= -O3 -DEUROPA_FAST -DNDEBUG ;
OPTIM = ; # suppress built-in optimization

# COVERAGE_FLAGS = flags for code coverage (e.g., gcov)

COVERAGE_FLAGS ?= -fprofile-arcs -ftest-coverage ;

# WARNING_FLAGS = flags for warnings

if $(OS) = BEOS {
  WARNING_FLAGS ?= -Wall -Wno-unused -Wno-sign-promo -Wno-multichar ;
} else {
  WARNING_FLAGS ?= -Wall ;
}

# DEBUG_FLAGS = flags to enable debugging
DEBUG_FLAGS ?= -g3 ;

# PTHREADS_LIBRARY = library with pthread related functions

if $(OS) = BEOS {
  PTHREADS_LIBRARY = condvar ;
} else if $(OS) = SOLARIS {
  PTHREADS_LIBRARY = pthread socket ;
} else {
  PTHREADS_LIBRARY = pthread ;
}

# SUFSHARE = suffix for shared libraries
if $(OS) = MACOSX {
  SUFSHARE ?= .dylib ;
}
else 
{
  SUFSHARE ?= .so ;
}

# JAVA_HOME = java root directory
# JAVA = java virtual machine
# JAVAC = java compiler
# JAR = java archiver

if ! $(JAVA_HOME) {
  if $(OS) = MACOSX {
    JAVA_HOME = /System/Library/Frameworks/JavaVM.framework/Home ;
  }
}

if $(JAVA_HOME) {
  JAVA ?= [ FDirName $(JAVA_HOME:J=" ") bin java ] ;
  JAVAC ?= [ FDirName $(JAVA_HOME:J=" ") bin javac ] ;
  JAR ?= [ FDirName $(JAVA_HOME:J=" ") bin jar ] ;
} else {
  JAVA ?= java ;
  JAVAC ?= javac ;
  JAR ?= jar ;
}

if $(ANT_HOME) {
  ANT ?= [ FDirName $(ANT_HOME) bin ant ] ;
}

ANT ?= ant ;

#SWIG_HOME ?= [ FDirName $(PLASMA) ext swig ] ;
if $(SWIG_HOME) {
  SWIG ?= [ FDirName $(SWIG_HOME) swig ] ;
}

SWIG ?= swig ;

# CLASSPATH_SEPARATOR = separator for java class path
CLASSPATH_SEPARATOR = ":" ;

PATH_PREPROCESSOR = "echo" ;

# DLOPEN_LIBRARY = library with open libraries functions

if $(OS) = OSF {
  DLOPEN_LIBRARY = ;
}
else {
  DLOPEN_LIBRARY = dl ;
}

#
# Other miscellaneous platform tweaks
#
if $(OS) = MACOSX {
  PLATFORM_FLAGS += -I/opt/local/include ;
}

if $(OS) = SOLARIS {
  LINKFLAGS += -Wl,-L/usr/local/lib -L/usr/lib ;
  LINKLIBS += -lsocket -lpthread ;
}

if $(OS) = BEOS {
  LINKLIBS += -lbe ;
}

if $(64BIT) = 1 {
  PLATFORM_FLAGS += -m64 -DEUROPA_64_BIT_PLATFORM ;
  if $(OS) = MACOSX {
  	LINKFLAGS += $(LINKER_PASSTHROUGH_FLAG)-arch $(LINKER_PASSTHROUGH_FLAG)x86_64 ;
  }
}

# Supress the message that ar usually prints (unifies build output further)
AR = $(AR[1]) $(AR[2])c $(AR[3-]) ;

# Using ar scan causes problems on MacOS X and Cygwin
# Without ar scan building static libraries is more
# compatible with building without libraries.

NOARSCAN = true ;

} # PlatformRules_INCLUDED
