/** \file
 *  This C source file was generated by $ANTLR version 3.1.2
 *
 *     -  From the grammar source file : NDDL/base/antlr/NDDL3.g
 *     -                            On : 2011-08-23 12:07:12
 *     -                 for the lexer : NDDL3LexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "NDDL3Lexer.h"
/* ----------------------------------------- */


/** String literals used by NDDL3Lexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x65, 0x6E, 0x75, 0x6D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x66, 0x69, 0x6C, 0x74, 0x65, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x6E, 0x65, 0x77,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x74, 0x68, 0x69, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x69, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x63, 0x6C, 0x61, 0x73, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x65, 0x78, 0x74, 0x65, 0x6E, 0x64, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_11[]  = { 0x3A, 0x3A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_12[]  = { 0x69, 0x6E, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_13[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_14[]  = { 0x62, 0x6F, 0x6F, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_15[]  = { 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_16[]  = { 0x72, 0x65, 0x6A, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6C, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_17[]  = { 0x67, 0x6F, 0x61, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_18[]  = { 0x66, 0x61, 0x63, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_19[]  = { 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_20[]  = { 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_21[]  = { 0x65, 0x6E, 0x66, 0x6F, 0x72, 0x63, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_22[]  = { 0x7C, 0x7C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_23[]  = { 0x26, 0x26,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_24[]  = { 0x3D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_25[]  = { 0x21, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_26[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_27[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_28[]  = { 0x73, 0x75, 0x70, 0x65, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_29[]  = { 0x69, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_30[]  = { 0x65, 0x6C, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_31[]  = { 0x66, 0x6F, 0x72, 0x65, 0x61, 0x63, 0x68,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_32[]  = { 0x61, 0x66, 0x74, 0x65, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_33[]  = { 0x61, 0x6E, 0x79,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_34[]  = { 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_35[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x64, 0x5F, 0x62, 0x79,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_36[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_37[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x73, 0x5F, 0x65, 0x6E, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_38[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_39[]  = { 0x65, 0x6E, 0x64, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_40[]  = { 0x65, 0x6E, 0x64, 0x73, 0x5F, 0x61, 0x66, 0x74, 0x65, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_41[]  = { 0x65, 0x6E, 0x64, 0x73, 0x5F, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_42[]  = { 0x65, 0x6E, 0x64, 0x73, 0x5F, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_43[]  = { 0x65, 0x6E, 0x64, 0x73, 0x5F, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_44[]  = { 0x65, 0x71, 0x75, 0x61, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_45[]  = { 0x65, 0x71, 0x75, 0x61, 0x6C, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_46[]  = { 0x6D, 0x65, 0x65, 0x74, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_47[]  = { 0x6D, 0x65, 0x74, 0x5F, 0x62, 0x79,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_48[]  = { 0x70, 0x61, 0x72, 0x61, 0x6C, 0x6C, 0x65, 0x6C, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_49[]  = { 0x70, 0x61, 0x72, 0x61, 0x6C, 0x6C, 0x65, 0x6C, 0x65, 0x64, 0x5F, 0x62, 0x79,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_50[]  = { 0x73, 0x74, 0x61, 0x72, 0x74, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_51[]  = { 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5F, 0x61, 0x66, 0x74, 0x65, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_52[]  = { 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5F, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_53[]  = { 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5F, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x5F, 0x65, 0x6E, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_54[]  = { 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5F, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_55[]  = { 0x74, 0x72, 0x75, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_56[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_57[]  = { 0x69, 0x6E, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_58[]  = { 0x69, 0x6E, 0x66, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_59[]  = { 0x2D, 0x69, 0x6E, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_60[]  = { 0x2D, 0x69, 0x6E, 0x66, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_61[]  = { 0x63, 0x6C, 0x6F, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_62[]  = { 0x23, 0x69, 0x6E, 0x63, 0x6C, 0x75, 0x64, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_63[]  = { 0x2F, 0x2A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_64[]  = { 0x2A, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_65[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pNDDL3Lexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pNDDL3Lexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pNDDL3Lexer_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or 16 bit input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_ASCII) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_ASCII

/* 8 bit "ASCII" (actually any 8 bit character set) */

#  define	    NEXTCHAR			((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP				((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR			((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP				((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define	    CONSUME()											\
{																	\
    if	(NEXTCHAR < (DATAP + INPUT->sizeBuf))						\
    {																\
		INPUT->charPositionInLine++;								\
		if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)		\
		{															\
			INPUT->line++;											\
			INPUT->charPositionInLine	= 0;						\
			INPUT->currentLine		= (void *)(NEXTCHAR + 1);		\
		}															\
		INPUT->nextChar = (void *)(NEXTCHAR + 1);					\
    }																\
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()				INPUT->istream->consume(INPUT->istream)
#define	    LA(n)					INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mT__32    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__33    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__34    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__35    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__36    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__37    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__38    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__39    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__40    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__41    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__42    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__43    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__44    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__45    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__46    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__47    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__48    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__49    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__50    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__51    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__52    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__53    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__54    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__55    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__56    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__57    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__58    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__59    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__60    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__61    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__62    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__63    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__64    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__65    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__66    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__67    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__68    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__69    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__70    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__71    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__72    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__73    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__74    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__75    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__76    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__77    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__78    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__79    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__80    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__81    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__82    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__83    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__84    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__85    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__86    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__87    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__88    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__89    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__90    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__91    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__92    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__93    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__94    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__95    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__96    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__97    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__98    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__99    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__100    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__101    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__102    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__103    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__104    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__105    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__106    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__107    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mT__108    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mINCLUDE    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mIDENT    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mSTRING    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mESCAPE_SEQUENCE    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mOCTAL_ESC    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mUNICODE_ESC    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mHEX_DIGIT    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mDIGIT    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mINT    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mINT_SUFFIX    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mFLOAT    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mEXPONENT    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mFLOAT_SUFFIX    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mCOMMENT    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mLINE_COMMENT    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mWS    (pNDDL3Lexer ctx);
static ANTLR3_INLINE  void	mTokens    (pNDDL3Lexer ctx);
static void	NDDL3LexerFree(pNDDL3Lexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void newNDDL3LexerFree(pNDDL3Lexer ctx) {
    delete ctx->lexerErrors;
    NDDL3LexerFree(ctx);
}


static void
NDDL3LexerFree  (pNDDL3Lexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "NDDL/base/antlr/NDDL3.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called NDDL3Lexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pNDDL3Lexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pNDDL3Lexer NDDL3LexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return NDDL3LexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called NDDL3Lexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pNDDL3Lexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pNDDL3Lexer NDDL3LexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pNDDL3Lexer ctx; // Context structure we will build and return

    ctx = (pNDDL3Lexer) ANTLR3_CALLOC(1, sizeof(NDDL3Lexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in NDDL3Lexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our NDDL3Lexer interface
     */
    ctx->mT__32	= mT__32;
    ctx->mT__33	= mT__33;
    ctx->mT__34	= mT__34;
    ctx->mT__35	= mT__35;
    ctx->mT__36	= mT__36;
    ctx->mT__37	= mT__37;
    ctx->mT__38	= mT__38;
    ctx->mT__39	= mT__39;
    ctx->mT__40	= mT__40;
    ctx->mT__41	= mT__41;
    ctx->mT__42	= mT__42;
    ctx->mT__43	= mT__43;
    ctx->mT__44	= mT__44;
    ctx->mT__45	= mT__45;
    ctx->mT__46	= mT__46;
    ctx->mT__47	= mT__47;
    ctx->mT__48	= mT__48;
    ctx->mT__49	= mT__49;
    ctx->mT__50	= mT__50;
    ctx->mT__51	= mT__51;
    ctx->mT__52	= mT__52;
    ctx->mT__53	= mT__53;
    ctx->mT__54	= mT__54;
    ctx->mT__55	= mT__55;
    ctx->mT__56	= mT__56;
    ctx->mT__57	= mT__57;
    ctx->mT__58	= mT__58;
    ctx->mT__59	= mT__59;
    ctx->mT__60	= mT__60;
    ctx->mT__61	= mT__61;
    ctx->mT__62	= mT__62;
    ctx->mT__63	= mT__63;
    ctx->mT__64	= mT__64;
    ctx->mT__65	= mT__65;
    ctx->mT__66	= mT__66;
    ctx->mT__67	= mT__67;
    ctx->mT__68	= mT__68;
    ctx->mT__69	= mT__69;
    ctx->mT__70	= mT__70;
    ctx->mT__71	= mT__71;
    ctx->mT__72	= mT__72;
    ctx->mT__73	= mT__73;
    ctx->mT__74	= mT__74;
    ctx->mT__75	= mT__75;
    ctx->mT__76	= mT__76;
    ctx->mT__77	= mT__77;
    ctx->mT__78	= mT__78;
    ctx->mT__79	= mT__79;
    ctx->mT__80	= mT__80;
    ctx->mT__81	= mT__81;
    ctx->mT__82	= mT__82;
    ctx->mT__83	= mT__83;
    ctx->mT__84	= mT__84;
    ctx->mT__85	= mT__85;
    ctx->mT__86	= mT__86;
    ctx->mT__87	= mT__87;
    ctx->mT__88	= mT__88;
    ctx->mT__89	= mT__89;
    ctx->mT__90	= mT__90;
    ctx->mT__91	= mT__91;
    ctx->mT__92	= mT__92;
    ctx->mT__93	= mT__93;
    ctx->mT__94	= mT__94;
    ctx->mT__95	= mT__95;
    ctx->mT__96	= mT__96;
    ctx->mT__97	= mT__97;
    ctx->mT__98	= mT__98;
    ctx->mT__99	= mT__99;
    ctx->mT__100	= mT__100;
    ctx->mT__101	= mT__101;
    ctx->mT__102	= mT__102;
    ctx->mT__103	= mT__103;
    ctx->mT__104	= mT__104;
    ctx->mT__105	= mT__105;
    ctx->mT__106	= mT__106;
    ctx->mT__107	= mT__107;
    ctx->mT__108	= mT__108;
    ctx->mINCLUDE	= mINCLUDE;
    ctx->mIDENT	= mIDENT;
    ctx->mSTRING	= mSTRING;
    ctx->mESCAPE_SEQUENCE	= mESCAPE_SEQUENCE;
    ctx->mOCTAL_ESC	= mOCTAL_ESC;
    ctx->mUNICODE_ESC	= mUNICODE_ESC;
    ctx->mHEX_DIGIT	= mHEX_DIGIT;
    ctx->mDIGIT	= mDIGIT;
    ctx->mINT	= mINT;
    ctx->mINT_SUFFIX	= mINT_SUFFIX;
    ctx->mFLOAT	= mFLOAT;
    ctx->mEXPONENT	= mEXPONENT;
    ctx->mFLOAT_SUFFIX	= mFLOAT_SUFFIX;
    ctx->mCOMMENT	= mCOMMENT;
    ctx->mLINE_COMMENT	= mLINE_COMMENT;
    ctx->mWS	= mWS;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= NDDL3LexerFree;

    
    

	     RECOGNIZER->displayRecognitionError = reportLexerError;
	     ctx->lexerErrors = new std::vector<PSLanguageException>;
	     ctx->free = newNDDL3LexerFree;


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}

/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    546:1: FLOAT : ( ( '+' | '-' )? ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( FLOAT_SUFFIX )? | '.' ( '0' .. '9' )+ ( EXPONENT )? ( FLOAT_SUFFIX )? | ( '0' .. '9' )+ EXPONENT ( FLOAT_SUFFIX )? | ( '0' .. '9' )+ FLOAT_SUFFIX );
 */
static const ANTLR3_INT32 dfa21_eot[6] =
    {
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa21_eof[6] =
    {
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa21_min[6] =
    {
	43, -1, 46, -1, -1, -1
    };
static const ANTLR3_INT32 dfa21_max[6] =
    {
	57, -1, 102, -1, -1, -1
    };
static const ANTLR3_INT32 dfa21_accept[6] =
    {
	-1, 1, -1, 2, 4, 3
    };
static const ANTLR3_INT32 dfa21_special[6] =
    {	
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa21_T_empty	    NULL

static const ANTLR3_INT32 dfa21_T0[] =
    {
	1, -1, 1, 3, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa21_T1[] =
    {
	1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 4, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 5, 4
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa21_transitions[] =
{
    dfa21_T0, dfa21_T_empty, dfa21_T1, dfa21_T_empty, dfa21_T_empty, dfa21_T_empty	
};


/* Declare tracking structure for Cyclic DFA 21
 */
static
ANTLR3_CYCLIC_DFA cdfa21
    =	{
	    21,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"546:1: FLOAT : ( ( '+' | '-' )? ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( FLOAT_SUFFIX )? | '.' ( '0' .. '9' )+ ( EXPONENT )? ( FLOAT_SUFFIX )? | ( '0' .. '9' )+ EXPONENT ( FLOAT_SUFFIX )? | ( '0' .. '9' )+ FLOAT_SUFFIX );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa21_eot,	    /* EOT table			    */
	    dfa21_eof,	    /* EOF table			    */
	    dfa21_min,	    /* Minimum tokens for each state    */
	    dfa21_max,	    /* Maximum tokens for each state    */
	    dfa21_accept,	/* Accept table			    */
	    dfa21_special,	/* Special transition states	    */
	    dfa21_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 21
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | INCLUDE | IDENT | STRING | INT | FLOAT | COMMENT | LINE_COMMENT | WS );
 */
static const ANTLR3_INT32 dfa27_eot[338] =
    {
	-1, 34, -1, -1, -1, 34, -1, -1, -1, 34, -1, -1, 53, 34, 55, 34, 34, 34, 
	34, 67, 34, 34, 34, 34, -1, -1, -1, 75, 77, 80, 82, -1, 34, -1, -1, -1, 
	84, 84, -1, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, 
	34, -1, -1, 106, 107, 34, 34, 34, 34, 34, 34, 34, -1, -1, 34, 34, 34, 34, 
	34, 34, -1, -1, -1, -1, 84, 84, -1, -1, -1, 34, -1, 84, -1, -1, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 142, 143, 145, -1, 
	-1, 34, 34, 34, 34, 34, 34, 34, 154, 34, 34, 34, 34, 34, 34, 34, 84, -1, 
	34, 34, 165, 34, 168, 34, 34, 171, 34, 34, 174, 175, 34, 34, 178, 34, 34, 
	-1, -1, 181, -1, 34, 34, 34, 34, 34, 34, 34, 34, -1, 190, 34, 34, 34, 34, 
	34, 196, 198, 34, 34, -1, 34, 34, -1, 34, 34, -1, 208, 34, -1, -1, 34, 
	211, -1, 212, 34, -1, 214, 215, 34, 34, 34, 34, 34, 221, -1, 34, 34, 34, 
	225, 34, -1, -1, -1, 227, 34, 34, 34, 34, 34, 34, 234, 235, -1, 34, 237, 
	-1, -1, 34, -1, -1, 34, 34, 34, 34, 243, -1, 244, 245, 247, -1, 34, -1, 
	249, 250, 34, 34, 34, 254, -1, -1, 255, -1, 256, 34, 34, 34, 34, -1, -1, 
	-1, 34, -1, 34, -1, -1, 34, 34, 34, -1, -1, -1, 34, 34, 272, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 283, 34, 34, -1, 287, 288, 34, 34, 34, 34, 34, 
	295, 34, 34, -1, 34, 34, 34, -1, -1, 34, 34, 34, 34, 305, 34, -1, 307, 
	308, 34, 34, 34, 34, 34, 34, 34, -1, 34, -1, -1, 317, 318, 34, 34, 321, 
	34, 34, 34, -1, -1, 34, 326, -1, 328, 329, 34, 331, -1, 34, -1, -1, 34, 
	-1, 34, 335, 34, -1, 337, -1
    };
static const ANTLR3_INT32 dfa27_eof[338] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_min[338] =
    {
	9, 102, -1, -1, -1, 104, -1, -1, -1, 97, -1, -1, 61, 101, 48, 102, 108, 
	97, 99, 58, 101, 116, 101, 111, -1, -1, -1, 61, 61, 48, 48, -1, 101, -1, 
	-1, -1, 46, 46, 42, -1, 100, 116, 102, 115, 117, 112, 105, 117, 108, 111, 
	99, 114, -1, -1, 119, -1, -1, 36, 36, 97, 110, 101, 114, 116, 116, 121, 
	-1, -1, 111, 102, 97, 112, 106, 97, -1, -1, -1, -1, 46, 46, -1, 110, -1, 
	101, -1, 46, -1, -1, 109, 111, 115, 101, 101, 101, 97, 101, 115, 101, 116, 
	97, 116, 115, 101, 36, 36, 36, -1, -1, 115, 115, 100, 100, 97, 105, 101, 
	36, 108, 111, 105, 114, 101, 101, 108, 46, 102, 116, 95, 36, 114, 36, 110, 
	99, 36, 108, 100, 36, 36, 101, 116, 36, 101, 97, -1, -1, 36, -1, 115, 101, 
	105, 97, 105, 108, 111, 114, -1, 36, 114, 110, 116, 114, 99, 36, 102, 115, 
	98, -1, 99, 97, -1, 100, 116, -1, 36, 101, -1, -1, 114, 36, -1, 36, 99, 
	-1, 36, 36, 116, 105, 99, 108, 110, 36, -1, 101, 103, 115, 36, 116, -1, 
	-1, -1, 36, 121, 101, 102, 101, 117, 115, 36, 36, -1, 102, 36, -1, -1, 
	104, -1, -1, 105, 110, 97, 101, 36, -1, 36, 36, 36, -1, 97, -1, 36, 36, 
	116, 102, 114, 36, -1, -1, 36, -1, 36, 111, 101, 116, 108, -1, -1, -1, 
	97, -1, 98, -1, -1, 101, 111, 105, -1, -1, -1, 110, 100, 36, 101, 101, 
	102, 101, 117, 108, 114, 114, 110, 36, 95, 101, -1, 36, 36, 100, 116, 102, 
	114, 101, 36, 101, 103, -1, 98, 110, 116, -1, -1, 95, 101, 111, 105, 36, 
	115, -1, 36, 36, 121, 100, 97, 98, 114, 114, 110, -1, 116, -1, -1, 36, 
	36, 114, 121, 36, 101, 103, 97, -1, -1, 116, 36, -1, 36, 36, 114, 36, -1, 
	101, -1, -1, 116, -1, 110, 36, 100, -1, 36, -1
    };
static const ANTLR3_INT32 dfa27_max[338] =
    {
	125, 120, -1, -1, -1, 121, -1, -1, -1, 111, -1, -1, 61, 101, 57, 110, 111, 
	114, 110, 58, 111, 117, 101, 111, -1, -1, -1, 61, 61, 57, 105, -1, 101, 
	-1, -1, -1, 102, 102, 47, -1, 117, 116, 102, 115, 117, 112, 105, 117, 108, 
	111, 108, 114, -1, -1, 119, -1, -1, 122, 122, 111, 110, 101, 114, 116, 
	116, 121, -1, -1, 111, 102, 114, 112, 106, 97, -1, -1, -1, -1, 57, 57, 
	-1, 110, -1, 116, -1, 102, -1, -1, 109, 111, 115, 101, 101, 101, 97, 101, 
	115, 101, 116, 97, 116, 115, 101, 122, 122, 122, -1, -1, 115, 115, 116, 
	100, 97, 105, 101, 122, 108, 111, 105, 114, 101, 101, 108, 57, 102, 116, 
	95, 122, 114, 122, 110, 99, 122, 108, 100, 122, 122, 101, 116, 122, 101, 
	97, -1, -1, 122, -1, 115, 101, 105, 97, 105, 108, 111, 114, -1, 122, 114, 
	110, 116, 114, 99, 122, 102, 115, 98, -1, 99, 100, -1, 100, 116, -1, 122, 
	101, -1, -1, 114, 122, -1, 122, 99, -1, 122, 122, 116, 105, 99, 108, 110, 
	122, -1, 101, 103, 115, 122, 116, -1, -1, -1, 122, 121, 101, 102, 101, 
	117, 115, 122, 122, -1, 102, 122, -1, -1, 104, -1, -1, 105, 110, 97, 101, 
	122, -1, 122, 122, 122, -1, 97, -1, 122, 122, 116, 102, 114, 122, -1, -1, 
	122, -1, 122, 111, 115, 116, 108, -1, -1, -1, 100, -1, 98, -1, -1, 101, 
	111, 105, -1, -1, -1, 110, 100, 122, 101, 115, 102, 101, 117, 108, 114, 
	114, 110, 122, 95, 115, -1, 122, 122, 100, 116, 102, 114, 101, 122, 101, 
	103, -1, 98, 110, 116, -1, -1, 95, 101, 111, 105, 122, 115, -1, 122, 122, 
	121, 100, 97, 98, 114, 114, 110, -1, 116, -1, -1, 122, 122, 114, 121, 122, 
	101, 103, 97, -1, -1, 116, 122, -1, 122, 122, 114, 122, -1, 101, -1, -1, 
	116, -1, 110, 122, 100, -1, 122, -1
    };
static const ANTLR3_INT32 dfa27_accept[338] =
    {
	-1, -1, 2, 3, 4, -1, 6, 7, 8, -1, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 33, 34, 36, -1, -1, -1, -1, 43, -1, 78, 79, 80, -1, -1, 
	-1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 12, -1, 15, 
	82, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 31, -1, -1, -1, -1, -1, -1, 
	40, 37, 39, 38, -1, -1, 41, -1, 42, -1, 81, -1, 83, 84, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 45, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 22, -1, 73, 
	-1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 1, -1, -1, 55, -1, -1, 46, -1, -1, 14, 71, -1, -1, 28, -1, -1, 74, 
	-1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, 27, 76, 75, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, 23, 72, -1, 17, 77, -1, -1, 
	-1, -1, -1, 48, -1, -1, -1, 44, -1, 62, -1, -1, -1, -1, -1, -1, 30, 61, 
	-1, 9, -1, -1, -1, -1, -1, 20, 50, 25, -1, 66, -1, 63, 32, -1, -1, -1, 
	18, 5, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, 19, 64, -1, 
	-1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, 58, 
	59, -1, -1, -1, -1, -1, -1, -1, -1, 51, 53, -1, -1, 67, -1, -1, -1, -1, 
	65, -1, 68, 70, -1, 54, -1, -1, -1, 57, -1, 69
    };
static const ANTLR3_INT32 dfa27_special[338] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa27_T_empty	    NULL

static const ANTLR3_INT32 dfa27_T0[] =
    {
	78, 79, 79, 79, 79, 79, 79, 79, 79, 79
    };static const ANTLR3_INT32 dfa27_T1[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, -1, -1, -1, -1, 34, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34
    };static const ANTLR3_INT32 dfa27_T2[] =
    {
	56, -1, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123
    };static const ANTLR3_INT32 dfa27_T3[] =
    {
	202, 203, -1, 204
    };static const ANTLR3_INT32 dfa27_T4[] =
    {
	228
    };static const ANTLR3_INT32 dfa27_T5[] =
    {
	127
    };static const ANTLR3_INT32 dfa27_T6[] =
    {
	200
    };static const ANTLR3_INT32 dfa27_T7[] =
    {
	42, -1, -1, -1, -1, -1, 43, -1, 40, -1, -1, 44, -1, -1, -1, -1, -1, -1, 
	41
    };static const ANTLR3_INT32 dfa27_T8[] =
    {
	164
    };static const ANTLR3_INT32 dfa27_T9[] =
    {
	199
    };static const ANTLR3_INT32 dfa27_T10[] =
    {
	163
    };static const ANTLR3_INT32 dfa27_T11[] =
    {
	66
    };static const ANTLR3_INT32 dfa27_T12[] =
    {
	312
    };static const ANTLR3_INT32 dfa27_T13[] =
    {
	124
    };static const ANTLR3_INT32 dfa27_T14[] =
    {
	301
    };static const ANTLR3_INT32 dfa27_T15[] =
    {
	162
    };static const ANTLR3_INT32 dfa27_T16[] =
    {
	320
    };static const ANTLR3_INT32 dfa27_T17[] =
    {
	62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61
    };static const ANTLR3_INT32 dfa27_T18[] =
    {
	289
    };static const ANTLR3_INT32 dfa27_T19[] =
    {
	280
    };static const ANTLR3_INT32 dfa27_T20[] =
    {
	276
    };static const ANTLR3_INT32 dfa27_T21[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, -1, -1, -1, -1, 34, -1, 34, 34, 34, 34, 34, 144, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34
    };static const ANTLR3_INT32 dfa27_T22[] =
    {
	313
    };static const ANTLR3_INT32 dfa27_T23[] =
    {
	137
    };static const ANTLR3_INT32 dfa27_T24[] =
    {
	176
    };static const ANTLR3_INT32 dfa27_T25[] =
    {
	290
    };static const ANTLR3_INT32 dfa27_T26[] =
    {
	210
    };static const ANTLR3_INT32 dfa27_T27[] =
    {
	302
    };static const ANTLR3_INT32 dfa27_T28[] =
    {
	98
    };static const ANTLR3_INT32 dfa27_T29[] =
    {
	103
    };static const ANTLR3_INT32 dfa27_T30[] =
    {
	56, -1, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56
    };static const ANTLR3_INT32 dfa27_T31[] =
    {
	119, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 118
    };static const ANTLR3_INT32 dfa27_T32[] =
    {
	100, -1, -1, -1, -1, -1, -1, -1, -1, 101
    };static const ANTLR3_INT32 dfa27_T33[] =
    {
	46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, 45
    };static const ANTLR3_INT32 dfa27_T34[] =
    {
	292
    };static const ANTLR3_INT32 dfa27_T35[] =
    {
	278
    };static const ANTLR3_INT32 dfa27_T36[] =
    {
	334
    };static const ANTLR3_INT32 dfa27_T37[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, -1, -1, -1, -1, 294, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34
    };static const ANTLR3_INT32 dfa27_T38[] =
    {
	332
    };static const ANTLR3_INT32 dfa27_T39[] =
    {
	230
    };static const ANTLR3_INT32 dfa27_T40[] =
    {
	236
    };static const ANTLR3_INT32 dfa27_T41[] =
    {
	336
    };static const ANTLR3_INT32 dfa27_T42[] =
    {
	209
    };static const ANTLR3_INT32 dfa27_T43[] =
    {
	173
    };static const ANTLR3_INT32 dfa27_T44[] =
    {
	266
    };static const ANTLR3_INT32 dfa27_T45[] =
    {
	134
    };static const ANTLR3_INT32 dfa27_T46[] =
    {
	95
    };static const ANTLR3_INT32 dfa27_T47[] =
    {
	251
    };static const ANTLR3_INT32 dfa27_T48[] =
    {
	270
    };static const ANTLR3_INT32 dfa27_T49[] =
    {
	69, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68
    };static const ANTLR3_INT32 dfa27_T50[] =
    {
	309
    };static const ANTLR3_INT32 dfa27_T51[] =
    {
	298
    };static const ANTLR3_INT32 dfa27_T52[] =
    {
	284
    };static const ANTLR3_INT32 dfa27_T53[] =
    {
	262, 263, -1, 264
    };static const ANTLR3_INT32 dfa27_T54[] =
    {
	310
    };static const ANTLR3_INT32 dfa27_T55[] =
    {
	299
    };static const ANTLR3_INT32 dfa27_T56[] =
    {
	129
    };static const ANTLR3_INT32 dfa27_T57[] =
    {
	108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 109
    };static const ANTLR3_INT32 dfa27_T58[] =
    {
	319
    };static const ANTLR3_INT32 dfa27_T59[] =
    {
	63, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, 65
    };static const ANTLR3_INT32 dfa27_T60[] =
    {
	325
    };static const ANTLR3_INT32 dfa27_T61[] =
    {
	300
    };static const ANTLR3_INT32 dfa27_T62[] =
    {
	311
    };static const ANTLR3_INT32 dfa27_T63[] =
    {
	285, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 286
    };static const ANTLR3_INT32 dfa27_T64[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, -1, -1, -1, -1, 271, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34
    };static const ANTLR3_INT32 dfa27_T65[] =
    {
	110
    };static const ANTLR3_INT32 dfa27_T66[] =
    {
	148, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 149
    };static const ANTLR3_INT32 dfa27_T67[] =
    {
	78, 79, 79, 79, 79, 79, 79, 79, 79, 79, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 81
    };static const ANTLR3_INT32 dfa27_T68[] =
    {
	83
    };static const ANTLR3_INT32 dfa27_T69[] =
    {
	197
    };static const ANTLR3_INT32 dfa27_T70[] =
    {
	90, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 88
    };static const ANTLR3_INT32 dfa27_T71[] =
    {
	86, -1, -1, -1, -1, 87
    };static const ANTLR3_INT32 dfa27_T72[] =
    {
	324
    };static const ANTLR3_INT32 dfa27_T73[] =
    {
	330
    };static const ANTLR3_INT32 dfa27_T74[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, -1, -1, -1, -1, 327, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34
    };static const ANTLR3_INT32 dfa27_T75[] =
    {
	306
    };static const ANTLR3_INT32 dfa27_T76[] =
    {
	316
    };static const ANTLR3_INT32 dfa27_T77[] =
    {
	333
    };static const ANTLR3_INT32 dfa27_T78[] =
    {
	52
    };static const ANTLR3_INT32 dfa27_T79[] =
    {
	252
    };static const ANTLR3_INT32 dfa27_T80[] =
    {
	231
    };static const ANTLR3_INT32 dfa27_T81[] =
    {
	281
    };static const ANTLR3_INT32 dfa27_T82[] =
    {
	267
    };static const ANTLR3_INT32 dfa27_T83[] =
    {
	54
    };static const ANTLR3_INT32 dfa27_T84[] =
    {
	296
    };static const ANTLR3_INT32 dfa27_T85[] =
    {
	232
    };static const ANTLR3_INT32 dfa27_T86[] =
    {
	253
    };static const ANTLR3_INT32 dfa27_T87[] =
    {
	268
    };static const ANTLR3_INT32 dfa27_T88[] =
    {
	282
    };static const ANTLR3_INT32 dfa27_T89[] =
    {
	297
    };static const ANTLR3_INT32 dfa27_T90[] =
    {
	50, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, 49, -1, -1, 51
    };static const ANTLR3_INT32 dfa27_T91[] =
    {
	193
    };static const ANTLR3_INT32 dfa27_T92[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, -1, -1, -1, -1, 167, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34
    };static const ANTLR3_INT32 dfa27_T93[] =
    {
	158
    };static const ANTLR3_INT32 dfa27_T94[] =
    {
	229
    };static const ANTLR3_INT32 dfa27_T95[] =
    {
	128
    };static const ANTLR3_INT32 dfa27_T96[] =
    {
	201
    };static const ANTLR3_INT32 dfa27_T97[] =
    {
	166
    };static const ANTLR3_INT32 dfa27_T98[] =
    {
	76
    };static const ANTLR3_INT32 dfa27_T99[] =
    {
	277
    };static const ANTLR3_INT32 dfa27_T100[] =
    {
	74
    };static const ANTLR3_INT32 dfa27_T101[] =
    {
	291
    };static const ANTLR3_INT32 dfa27_T102[] =
    {
	131
    };static const ANTLR3_INT32 dfa27_T103[] =
    {
	303
    };static const ANTLR3_INT32 dfa27_T104[] =
    {
	170
    };static const ANTLR3_INT32 dfa27_T105[] =
    {
	206
    };static const ANTLR3_INT32 dfa27_T106[] =
    {
	314
    };static const ANTLR3_INT32 dfa27_T107[] =
    {
	322
    };static const ANTLR3_INT32 dfa27_T108[] =
    {
	92
    };static const ANTLR3_INT32 dfa27_T109[] =
    {
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56
    };static const ANTLR3_INT32 dfa27_T110[] =
    {
	56, -1, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	56, 56, 56
    };static const ANTLR3_INT32 dfa27_T111[] =
    {
	217
    };static const ANTLR3_INT32 dfa27_T112[] =
    {
	59, -1, -1, 60
    };static const ANTLR3_INT32 dfa27_T113[] =
    {
	185
    };static const ANTLR3_INT32 dfa27_T114[] =
    {
	58, -1, -1, -1, -1, -1, -1, -1, 57
    };static const ANTLR3_INT32 dfa27_T115[] =
    {
	258, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 259
    };static const ANTLR3_INT32 dfa27_T116[] =
    {
	240
    };static const ANTLR3_INT32 dfa27_T117[] =
    {
	93
    };static const ANTLR3_INT32 dfa27_T118[] =
    {
	132
    };static const ANTLR3_INT32 dfa27_T119[] =
    {
	72
    };static const ANTLR3_INT32 dfa27_T120[] =
    {
	120
    };static const ANTLR3_INT32 dfa27_T121[] =
    {
	159
    };static const ANTLR3_INT32 dfa27_T122[] =
    {
	194
    };static const ANTLR3_INT32 dfa27_T123[] =
    {
	73
    };static const ANTLR3_INT32 dfa27_T124[] =
    {
	222
    };static const ANTLR3_INT32 dfa27_T125[] =
    {
	191
    };static const ANTLR3_INT32 dfa27_T126[] =
    {
	156
    };static const ANTLR3_INT32 dfa27_T127[] =
    {
	117
    };static const ANTLR3_INT32 dfa27_T128[] =
    {
	115
    };static const ANTLR3_INT32 dfa27_T129[] =
    {
	114
    };static const ANTLR3_INT32 dfa27_T130[] =
    {
	153
    };static const ANTLR3_INT32 dfa27_T131[] =
    {
	189
    };static const ANTLR3_INT32 dfa27_T132[] =
    {
	180
    };static const ANTLR3_INT32 dfa27_T133[] =
    {
	213
    };static const ANTLR3_INT32 dfa27_T134[] =
    {
	102
    };static const ANTLR3_INT32 dfa27_T135[] =
    {
	141
    };static const ANTLR3_INT32 dfa27_T136[] =
    {
	224
    };static const ANTLR3_INT32 dfa27_T137[] =
    {
	238
    };static const ANTLR3_INT32 dfa27_T138[] =
    {
	182
    };static const ANTLR3_INT32 dfa27_T139[] =
    {
	275, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 274
    };static const ANTLR3_INT32 dfa27_T140[] =
    {
	146
    };static const ANTLR3_INT32 dfa27_T141[] =
    {
	169
    };static const ANTLR3_INT32 dfa27_T142[] =
    {
	187
    };static const ANTLR3_INT32 dfa27_T143[] =
    {
	205
    };static const ANTLR3_INT32 dfa27_T144[] =
    {
	233
    };static const ANTLR3_INT32 dfa27_T145[] =
    {
	219
    };static const ANTLR3_INT32 dfa27_T146[] =
    {
	242
    };static const ANTLR3_INT32 dfa27_T147[] =
    {
	91
    };static const ANTLR3_INT32 dfa27_T148[] =
    {
	261
    };static const ANTLR3_INT32 dfa27_T149[] =
    {
	130
    };static const ANTLR3_INT32 dfa27_T150[] =
    {
	112
    };static const ANTLR3_INT32 dfa27_T151[] =
    {
	135
    };static const ANTLR3_INT32 dfa27_T152[] =
    {
	151
    };static const ANTLR3_INT32 dfa27_T153[] =
    {
	96
    };static const ANTLR3_INT32 dfa27_T154[] =
    {
	70, 71
    };static const ANTLR3_INT32 dfa27_T155[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, -1, -1, -1, -1, 34, -1, 34, 34, 34, 34, 34, 105, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 104, 34, 34, 34, 34, 34, 34
    };static const ANTLR3_INT32 dfa27_T156[] =
    {
	188
    };static const ANTLR3_INT32 dfa27_T157[] =
    {
	220
    };static const ANTLR3_INT32 dfa27_T158[] =
    {
	113
    };static const ANTLR3_INT32 dfa27_T159[] =
    {
	152
    };static const ANTLR3_INT32 dfa27_T160[] =
    {
	218
    };static const ANTLR3_INT32 dfa27_T161[] =
    {
	186
    };static const ANTLR3_INT32 dfa27_T162[] =
    {
	150
    };static const ANTLR3_INT32 dfa27_T163[] =
    {
	111
    };static const ANTLR3_INT32 dfa27_T164[] =
    {
	273
    };static const ANTLR3_INT32 dfa27_T165[] =
    {
	260
    };static const ANTLR3_INT32 dfa27_T166[] =
    {
	241
    };static const ANTLR3_INT32 dfa27_T167[] =
    {
	157
    };static const ANTLR3_INT32 dfa27_T168[] =
    {
	192
    };static const ANTLR3_INT32 dfa27_T169[] =
    {
	223
    };static const ANTLR3_INT32 dfa27_T170[] =
    {
	121
    };static const ANTLR3_INT32 dfa27_T171[] =
    {
	160
    };static const ANTLR3_INT32 dfa27_T172[] =
    {
	147
    };static const ANTLR3_INT32 dfa27_T173[] =
    {
	195
    };static const ANTLR3_INT32 dfa27_T174[] =
    {
	226
    };static const ANTLR3_INT32 dfa27_T175[] =
    {
	183
    };static const ANTLR3_INT32 dfa27_T176[] =
    {
	39, 39, -1, 39, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 39, 26, 35, 33, 34, -1, 25, -1, 10, 11, 31, 29, 3, 
	30, 14, 38, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 19, 6, 27, 12, 28, 
	-1, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 7, -1, 8, -1, 34, -1, 18, 20, 16, 
	34, 1, 9, 23, 34, 15, 34, 34, 34, 32, 13, 34, 17, 34, 22, 21, 5, 34, 34, 
	34, 34, 34, 34, 2, 24, 4
    };static const ANTLR3_INT32 dfa27_T177[] =
    {
	56, -1, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	56, 56, 56
    };static const ANTLR3_INT32 dfa27_T178[] =
    {
	138
    };static const ANTLR3_INT32 dfa27_T179[] =
    {
	172
    };static const ANTLR3_INT32 dfa27_T180[] =
    {
	99
    };static const ANTLR3_INT32 dfa27_T181[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, -1, -1, -1, -1, 246, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34
    };static const ANTLR3_INT32 dfa27_T182[] =
    {
	177
    };static const ANTLR3_INT32 dfa27_T183[] =
    {
	94
    };static const ANTLR3_INT32 dfa27_T184[] =
    {
	133
    };static const ANTLR3_INT32 dfa27_T185[] =
    {
	155
    };static const ANTLR3_INT32 dfa27_T186[] =
    {
	116
    };static const ANTLR3_INT32 dfa27_T187[] =
    {
	139
    };static const ANTLR3_INT32 dfa27_T188[] =
    {
	140
    };static const ANTLR3_INT32 dfa27_T189[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, -1, -1, -1, -1, 34, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 207, 34, 34, 34, 34, 34, 34, 34
    };static const ANTLR3_INT32 dfa27_T190[] =
    {
	216
    };static const ANTLR3_INT32 dfa27_T191[] =
    {
	239
    };static const ANTLR3_INT32 dfa27_T192[] =
    {
	179
    };static const ANTLR3_INT32 dfa27_T193[] =
    {
	184
    };static const ANTLR3_INT32 dfa27_T194[] =
    {
	257
    };static const ANTLR3_INT32 dfa27_T195[] =
    {
	269
    };static const ANTLR3_INT32 dfa27_T196[] =
    {
	293
    };static const ANTLR3_INT32 dfa27_T197[] =
    {
	136
    };static const ANTLR3_INT32 dfa27_T198[] =
    {
	279
    };static const ANTLR3_INT32 dfa27_T199[] =
    {
	97
    };static const ANTLR3_INT32 dfa27_T200[] =
    {
	265
    };static const ANTLR3_INT32 dfa27_T201[] =
    {
	248
    };static const ANTLR3_INT32 dfa27_T202[] =
    {
	315
    };static const ANTLR3_INT32 dfa27_T203[] =
    {
	125, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 126
    };static const ANTLR3_INT32 dfa27_T204[] =
    {
	304
    };static const ANTLR3_INT32 dfa27_T205[] =
    {
	161
    };static const ANTLR3_INT32 dfa27_T206[] =
    {
	122
    };static const ANTLR3_INT32 dfa27_T207[] =
    {
	323
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa27_transitions[] =
{
    dfa27_T176, dfa27_T7, dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, dfa27_T33, 
    dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, dfa27_T90, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T78, dfa27_T83, dfa27_T109, dfa27_T114, dfa27_T112, 
    dfa27_T17, dfa27_T59, dfa27_T11, dfa27_T49, dfa27_T154, dfa27_T119, 
    dfa27_T123, dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, dfa27_T100, 
    dfa27_T98, dfa27_T0, dfa27_T67, dfa27_T_empty, dfa27_T68, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T_empty, dfa27_T177, dfa27_T110, dfa27_T71, dfa27_T_empty, 
    dfa27_T70, dfa27_T147, dfa27_T108, dfa27_T117, dfa27_T183, dfa27_T46, 
    dfa27_T153, dfa27_T199, dfa27_T28, dfa27_T180, dfa27_T32, dfa27_T134, 
    dfa27_T_empty, dfa27_T_empty, dfa27_T29, dfa27_T_empty, dfa27_T_empty, 
    dfa27_T155, dfa27_T1, dfa27_T57, dfa27_T65, dfa27_T163, dfa27_T150, 
    dfa27_T158, dfa27_T129, dfa27_T128, dfa27_T_empty, dfa27_T_empty, dfa27_T186, 
    dfa27_T127, dfa27_T31, dfa27_T120, dfa27_T170, dfa27_T206, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, dfa27_T30, dfa27_T2, dfa27_T_empty, 
    dfa27_T13, dfa27_T_empty, dfa27_T203, dfa27_T_empty, dfa27_T110, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T5, dfa27_T95, dfa27_T56, dfa27_T149, dfa27_T102, 
    dfa27_T118, dfa27_T184, dfa27_T45, dfa27_T151, dfa27_T197, dfa27_T23, 
    dfa27_T178, dfa27_T187, dfa27_T188, dfa27_T135, dfa27_T1, dfa27_T1, 
    dfa27_T21, dfa27_T_empty, dfa27_T_empty, dfa27_T140, dfa27_T172, dfa27_T66, 
    dfa27_T162, dfa27_T152, dfa27_T159, dfa27_T130, dfa27_T1, dfa27_T185, 
    dfa27_T126, dfa27_T167, dfa27_T93, dfa27_T121, dfa27_T171, dfa27_T205, 
    dfa27_T2, dfa27_T15, dfa27_T10, dfa27_T8, dfa27_T1, dfa27_T97, dfa27_T92, 
    dfa27_T141, dfa27_T104, dfa27_T1, dfa27_T179, dfa27_T43, dfa27_T1, dfa27_T1, 
    dfa27_T24, dfa27_T182, dfa27_T1, dfa27_T192, dfa27_T132, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T1, dfa27_T_empty, dfa27_T138, dfa27_T175, dfa27_T193, 
    dfa27_T113, dfa27_T161, dfa27_T142, dfa27_T156, dfa27_T131, dfa27_T_empty, 
    dfa27_T1, dfa27_T125, dfa27_T168, dfa27_T91, dfa27_T122, dfa27_T173, 
    dfa27_T1, dfa27_T69, dfa27_T9, dfa27_T6, dfa27_T_empty, dfa27_T96, dfa27_T3, 
    dfa27_T_empty, dfa27_T143, dfa27_T105, dfa27_T_empty, dfa27_T189, dfa27_T42, 
    dfa27_T_empty, dfa27_T_empty, dfa27_T26, dfa27_T1, dfa27_T_empty, dfa27_T1, 
    dfa27_T133, dfa27_T_empty, dfa27_T1, dfa27_T1, dfa27_T190, dfa27_T111, 
    dfa27_T160, dfa27_T145, dfa27_T157, dfa27_T1, dfa27_T_empty, dfa27_T124, 
    dfa27_T169, dfa27_T136, dfa27_T1, dfa27_T174, dfa27_T_empty, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T1, dfa27_T4, dfa27_T94, dfa27_T39, dfa27_T80, 
    dfa27_T85, dfa27_T144, dfa27_T1, dfa27_T1, dfa27_T_empty, dfa27_T40, 
    dfa27_T1, dfa27_T_empty, dfa27_T_empty, dfa27_T137, dfa27_T_empty, dfa27_T_empty, 
    dfa27_T191, dfa27_T116, dfa27_T166, dfa27_T146, dfa27_T1, dfa27_T_empty, 
    dfa27_T1, dfa27_T1, dfa27_T181, dfa27_T_empty, dfa27_T201, dfa27_T_empty, 
    dfa27_T1, dfa27_T1, dfa27_T47, dfa27_T79, dfa27_T86, dfa27_T1, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T1, dfa27_T_empty, dfa27_T1, dfa27_T194, dfa27_T115, 
    dfa27_T165, dfa27_T148, dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, 
    dfa27_T53, dfa27_T_empty, dfa27_T200, dfa27_T_empty, dfa27_T_empty, 
    dfa27_T44, dfa27_T82, dfa27_T87, dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, 
    dfa27_T195, dfa27_T48, dfa27_T64, dfa27_T164, dfa27_T139, dfa27_T20, 
    dfa27_T99, dfa27_T35, dfa27_T198, dfa27_T19, dfa27_T81, dfa27_T88, dfa27_T1, 
    dfa27_T52, dfa27_T63, dfa27_T_empty, dfa27_T1, dfa27_T1, dfa27_T18, 
    dfa27_T25, dfa27_T101, dfa27_T34, dfa27_T196, dfa27_T37, dfa27_T84, 
    dfa27_T89, dfa27_T_empty, dfa27_T51, dfa27_T55, dfa27_T61, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T14, dfa27_T27, dfa27_T103, dfa27_T204, dfa27_T1, 
    dfa27_T75, dfa27_T_empty, dfa27_T1, dfa27_T1, dfa27_T50, dfa27_T54, 
    dfa27_T62, dfa27_T12, dfa27_T22, dfa27_T106, dfa27_T202, dfa27_T_empty, 
    dfa27_T76, dfa27_T_empty, dfa27_T_empty, dfa27_T1, dfa27_T1, dfa27_T58, 
    dfa27_T16, dfa27_T1, dfa27_T107, dfa27_T207, dfa27_T72, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T60, dfa27_T1, dfa27_T_empty, dfa27_T74, dfa27_T1, 
    dfa27_T73, dfa27_T1, dfa27_T_empty, dfa27_T38, dfa27_T_empty, dfa27_T_empty, 
    dfa27_T77, dfa27_T_empty, dfa27_T36, dfa27_T1, dfa27_T41, dfa27_T_empty, 
    dfa27_T1, dfa27_T_empty	
};


/* Declare tracking structure for Cyclic DFA 27
 */
static
ANTLR3_CYCLIC_DFA cdfa27
    =	{
	    27,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1:1: Tokens : ( T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | INCLUDE | IDENT | STRING | INT | FLOAT | COMMENT | LINE_COMMENT | WS );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa27_eot,	    /* EOT table			    */
	    dfa27_eof,	    /* EOF table			    */
	    dfa27_min,	    /* Minimum tokens for each state    */
	    dfa27_max,	    /* Maximum tokens for each state    */
	    dfa27_accept,	/* Accept table			    */
	    dfa27_special,	/* Special transition states	    */
	    dfa27_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 27
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */ 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 32:7: ( 'enum' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__32
 *
 * Looks to match the characters the constitute the token T__32
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__32(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__32;
       
    
    // NDDL/base/antlr/NDDL3.g:32:7: ( 'enum' )
    // NDDL/base/antlr/NDDL3.g:32:9: 'enum'
    {
        MATCHS(lit_1); 
        if  (HASEXCEPTION())
        {
            goto ruleT__32Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__32Ex; /* Prevent compiler warnings */
    ruleT__32Ex: ;

}
// $ANTLR end T__32

//   Comes from: 33:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__33
 *
 * Looks to match the characters the constitute the token T__33
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__33(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__33;
       
    
    // NDDL/base/antlr/NDDL3.g:33:7: ( '{' )
    // NDDL/base/antlr/NDDL3.g:33:9: '{'
    {
        MATCHC('{'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__33Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__33Ex; /* Prevent compiler warnings */
    ruleT__33Ex: ;

}
// $ANTLR end T__33

//   Comes from: 34:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__34
 *
 * Looks to match the characters the constitute the token T__34
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__34(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__34;
       
    
    // NDDL/base/antlr/NDDL3.g:34:7: ( ',' )
    // NDDL/base/antlr/NDDL3.g:34:9: ','
    {
        MATCHC(','); 
        if  (HASEXCEPTION())
        {
            goto ruleT__34Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__34Ex; /* Prevent compiler warnings */
    ruleT__34Ex: ;

}
// $ANTLR end T__34

//   Comes from: 35:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__35
 *
 * Looks to match the characters the constitute the token T__35
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__35(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__35;
       
    
    // NDDL/base/antlr/NDDL3.g:35:7: ( '}' )
    // NDDL/base/antlr/NDDL3.g:35:9: '}'
    {
        MATCHC('}'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__35Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__35Ex; /* Prevent compiler warnings */
    ruleT__35Ex: ;

}
// $ANTLR end T__35

//   Comes from: 36:7: ( 'typedef' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__36
 *
 * Looks to match the characters the constitute the token T__36
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__36(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__36;
       
    
    // NDDL/base/antlr/NDDL3.g:36:7: ( 'typedef' )
    // NDDL/base/antlr/NDDL3.g:36:9: 'typedef'
    {
        MATCHS(lit_2); 
        if  (HASEXCEPTION())
        {
            goto ruleT__36Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__36Ex; /* Prevent compiler warnings */
    ruleT__36Ex: ;

}
// $ANTLR end T__36

//   Comes from: 37:7: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__37
 *
 * Looks to match the characters the constitute the token T__37
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__37(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__37;
       
    
    // NDDL/base/antlr/NDDL3.g:37:7: ( ';' )
    // NDDL/base/antlr/NDDL3.g:37:9: ';'
    {
        MATCHC(';'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__37Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__37Ex; /* Prevent compiler warnings */
    ruleT__37Ex: ;

}
// $ANTLR end T__37

//   Comes from: 38:7: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__38
 *
 * Looks to match the characters the constitute the token T__38
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__38(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__38;
       
    
    // NDDL/base/antlr/NDDL3.g:38:7: ( '[' )
    // NDDL/base/antlr/NDDL3.g:38:9: '['
    {
        MATCHC('['); 
        if  (HASEXCEPTION())
        {
            goto ruleT__38Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__38Ex; /* Prevent compiler warnings */
    ruleT__38Ex: ;

}
// $ANTLR end T__38

//   Comes from: 39:7: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__39
 *
 * Looks to match the characters the constitute the token T__39
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__39(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__39;
       
    
    // NDDL/base/antlr/NDDL3.g:39:7: ( ']' )
    // NDDL/base/antlr/NDDL3.g:39:9: ']'
    {
        MATCHC(']'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__39Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__39Ex; /* Prevent compiler warnings */
    ruleT__39Ex: ;

}
// $ANTLR end T__39

//   Comes from: 40:7: ( 'filter' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__40
 *
 * Looks to match the characters the constitute the token T__40
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__40(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__40;
       
    
    // NDDL/base/antlr/NDDL3.g:40:7: ( 'filter' )
    // NDDL/base/antlr/NDDL3.g:40:9: 'filter'
    {
        MATCHS(lit_3); 
        if  (HASEXCEPTION())
        {
            goto ruleT__40Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__40Ex; /* Prevent compiler warnings */
    ruleT__40Ex: ;

}
// $ANTLR end T__40

//   Comes from: 41:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__41
 *
 * Looks to match the characters the constitute the token T__41
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__41(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__41;
       
    
    // NDDL/base/antlr/NDDL3.g:41:7: ( '(' )
    // NDDL/base/antlr/NDDL3.g:41:9: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto ruleT__41Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__41Ex; /* Prevent compiler warnings */
    ruleT__41Ex: ;

}
// $ANTLR end T__41

//   Comes from: 42:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__42
 *
 * Looks to match the characters the constitute the token T__42
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__42(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__42;
       
    
    // NDDL/base/antlr/NDDL3.g:42:7: ( ')' )
    // NDDL/base/antlr/NDDL3.g:42:9: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__42Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__42Ex; /* Prevent compiler warnings */
    ruleT__42Ex: ;

}
// $ANTLR end T__42

//   Comes from: 43:7: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__43
 *
 * Looks to match the characters the constitute the token T__43
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__43(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__43;
       
    
    // NDDL/base/antlr/NDDL3.g:43:7: ( '=' )
    // NDDL/base/antlr/NDDL3.g:43:9: '='
    {
        MATCHC('='); 
        if  (HASEXCEPTION())
        {
            goto ruleT__43Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__43Ex; /* Prevent compiler warnings */
    ruleT__43Ex: ;

}
// $ANTLR end T__43

//   Comes from: 44:7: ( 'new' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__44
 *
 * Looks to match the characters the constitute the token T__44
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__44(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__44;
       
    
    // NDDL/base/antlr/NDDL3.g:44:7: ( 'new' )
    // NDDL/base/antlr/NDDL3.g:44:9: 'new'
    {
        MATCHS(lit_4); 
        if  (HASEXCEPTION())
        {
            goto ruleT__44Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__44Ex; /* Prevent compiler warnings */
    ruleT__44Ex: ;

}
// $ANTLR end T__44

//   Comes from: 45:7: ( 'this' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__45
 *
 * Looks to match the characters the constitute the token T__45
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__45(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__45;
       
    
    // NDDL/base/antlr/NDDL3.g:45:7: ( 'this' )
    // NDDL/base/antlr/NDDL3.g:45:9: 'this'
    {
        MATCHS(lit_5); 
        if  (HASEXCEPTION())
        {
            goto ruleT__45Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__45Ex; /* Prevent compiler warnings */
    ruleT__45Ex: ;

}
// $ANTLR end T__45

//   Comes from: 46:7: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__46
 *
 * Looks to match the characters the constitute the token T__46
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__46(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__46;
       
    
    // NDDL/base/antlr/NDDL3.g:46:7: ( '.' )
    // NDDL/base/antlr/NDDL3.g:46:9: '.'
    {
        MATCHC('.'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__46Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__46Ex; /* Prevent compiler warnings */
    ruleT__46Ex: ;

}
// $ANTLR end T__46

//   Comes from: 47:7: ( 'in' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__47
 *
 * Looks to match the characters the constitute the token T__47
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__47(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__47;
       
    
    // NDDL/base/antlr/NDDL3.g:47:7: ( 'in' )
    // NDDL/base/antlr/NDDL3.g:47:9: 'in'
    {
        MATCHS(lit_6); 
        if  (HASEXCEPTION())
        {
            goto ruleT__47Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__47Ex; /* Prevent compiler warnings */
    ruleT__47Ex: ;

}
// $ANTLR end T__47

//   Comes from: 48:7: ( 'class' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__48
 *
 * Looks to match the characters the constitute the token T__48
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__48(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__48;
       
    
    // NDDL/base/antlr/NDDL3.g:48:7: ( 'class' )
    // NDDL/base/antlr/NDDL3.g:48:9: 'class'
    {
        MATCHS(lit_7); 
        if  (HASEXCEPTION())
        {
            goto ruleT__48Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__48Ex; /* Prevent compiler warnings */
    ruleT__48Ex: ;

}
// $ANTLR end T__48

//   Comes from: 49:7: ( 'extends' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__49
 *
 * Looks to match the characters the constitute the token T__49
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__49(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__49;
       
    
    // NDDL/base/antlr/NDDL3.g:49:7: ( 'extends' )
    // NDDL/base/antlr/NDDL3.g:49:9: 'extends'
    {
        MATCHS(lit_8); 
        if  (HASEXCEPTION())
        {
            goto ruleT__49Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__49Ex; /* Prevent compiler warnings */
    ruleT__49Ex: ;

}
// $ANTLR end T__49

//   Comes from: 50:7: ( 'predicate' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__50
 *
 * Looks to match the characters the constitute the token T__50
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__50(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__50;
       
    
    // NDDL/base/antlr/NDDL3.g:50:7: ( 'predicate' )
    // NDDL/base/antlr/NDDL3.g:50:9: 'predicate'
    {
        MATCHS(lit_9); 
        if  (HASEXCEPTION())
        {
            goto ruleT__50Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__50Ex; /* Prevent compiler warnings */
    ruleT__50Ex: ;

}
// $ANTLR end T__50

//   Comes from: 51:7: ( 'action' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__51
 *
 * Looks to match the characters the constitute the token T__51
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__51(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__51;
       
    
    // NDDL/base/antlr/NDDL3.g:51:7: ( 'action' )
    // NDDL/base/antlr/NDDL3.g:51:9: 'action'
    {
        MATCHS(lit_10); 
        if  (HASEXCEPTION())
        {
            goto ruleT__51Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__51Ex; /* Prevent compiler warnings */
    ruleT__51Ex: ;

}
// $ANTLR end T__51

//   Comes from: 52:7: ( '::' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__52
 *
 * Looks to match the characters the constitute the token T__52
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__52(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__52;
       
    
    // NDDL/base/antlr/NDDL3.g:52:7: ( '::' )
    // NDDL/base/antlr/NDDL3.g:52:9: '::'
    {
        MATCHS(lit_11); 
        if  (HASEXCEPTION())
        {
            goto ruleT__52Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__52Ex; /* Prevent compiler warnings */
    ruleT__52Ex: ;

}
// $ANTLR end T__52

//   Comes from: 53:7: ( 'int' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__53
 *
 * Looks to match the characters the constitute the token T__53
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__53(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__53;
       
    
    // NDDL/base/antlr/NDDL3.g:53:7: ( 'int' )
    // NDDL/base/antlr/NDDL3.g:53:9: 'int'
    {
        MATCHS(lit_12); 
        if  (HASEXCEPTION())
        {
            goto ruleT__53Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__53Ex; /* Prevent compiler warnings */
    ruleT__53Ex: ;

}
// $ANTLR end T__53

//   Comes from: 54:7: ( 'float' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__54
 *
 * Looks to match the characters the constitute the token T__54
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__54(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__54;
       
    
    // NDDL/base/antlr/NDDL3.g:54:7: ( 'float' )
    // NDDL/base/antlr/NDDL3.g:54:9: 'float'
    {
        MATCHS(lit_13); 
        if  (HASEXCEPTION())
        {
            goto ruleT__54Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__54Ex; /* Prevent compiler warnings */
    ruleT__54Ex: ;

}
// $ANTLR end T__54

//   Comes from: 55:7: ( 'bool' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__55
 *
 * Looks to match the characters the constitute the token T__55
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__55(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__55;
       
    
    // NDDL/base/antlr/NDDL3.g:55:7: ( 'bool' )
    // NDDL/base/antlr/NDDL3.g:55:9: 'bool'
    {
        MATCHS(lit_14); 
        if  (HASEXCEPTION())
        {
            goto ruleT__55Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__55Ex; /* Prevent compiler warnings */
    ruleT__55Ex: ;

}
// $ANTLR end T__55

//   Comes from: 56:7: ( 'string' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__56
 *
 * Looks to match the characters the constitute the token T__56
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__56(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__56;
       
    
    // NDDL/base/antlr/NDDL3.g:56:7: ( 'string' )
    // NDDL/base/antlr/NDDL3.g:56:9: 'string'
    {
        MATCHS(lit_15); 
        if  (HASEXCEPTION())
        {
            goto ruleT__56Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__56Ex; /* Prevent compiler warnings */
    ruleT__56Ex: ;

}
// $ANTLR end T__56

//   Comes from: 57:7: ( 'rejectable' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__57
 *
 * Looks to match the characters the constitute the token T__57
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__57(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__57;
       
    
    // NDDL/base/antlr/NDDL3.g:57:7: ( 'rejectable' )
    // NDDL/base/antlr/NDDL3.g:57:9: 'rejectable'
    {
        MATCHS(lit_16); 
        if  (HASEXCEPTION())
        {
            goto ruleT__57Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__57Ex; /* Prevent compiler warnings */
    ruleT__57Ex: ;

}
// $ANTLR end T__57

//   Comes from: 58:7: ( 'goal' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__58
 *
 * Looks to match the characters the constitute the token T__58
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__58(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__58;
       
    
    // NDDL/base/antlr/NDDL3.g:58:7: ( 'goal' )
    // NDDL/base/antlr/NDDL3.g:58:9: 'goal'
    {
        MATCHS(lit_17); 
        if  (HASEXCEPTION())
        {
            goto ruleT__58Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__58Ex; /* Prevent compiler warnings */
    ruleT__58Ex: ;

}
// $ANTLR end T__58

//   Comes from: 59:7: ( 'fact' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__59
 *
 * Looks to match the characters the constitute the token T__59
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__59(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__59;
       
    
    // NDDL/base/antlr/NDDL3.g:59:7: ( 'fact' )
    // NDDL/base/antlr/NDDL3.g:59:9: 'fact'
    {
        MATCHS(lit_18); 
        if  (HASEXCEPTION())
        {
            goto ruleT__59Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__59Ex; /* Prevent compiler warnings */
    ruleT__59Ex: ;

}
// $ANTLR end T__59

//   Comes from: 60:7: ( 'condition' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__60
 *
 * Looks to match the characters the constitute the token T__60
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__60(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__60;
       
    
    // NDDL/base/antlr/NDDL3.g:60:7: ( 'condition' )
    // NDDL/base/antlr/NDDL3.g:60:9: 'condition'
    {
        MATCHS(lit_19); 
        if  (HASEXCEPTION())
        {
            goto ruleT__60Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__60Ex; /* Prevent compiler warnings */
    ruleT__60Ex: ;

}
// $ANTLR end T__60

//   Comes from: 61:7: ( 'effect' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__61
 *
 * Looks to match the characters the constitute the token T__61
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__61(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__61;
       
    
    // NDDL/base/antlr/NDDL3.g:61:7: ( 'effect' )
    // NDDL/base/antlr/NDDL3.g:61:9: 'effect'
    {
        MATCHS(lit_20); 
        if  (HASEXCEPTION())
        {
            goto ruleT__61Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__61Ex; /* Prevent compiler warnings */
    ruleT__61Ex: ;

}
// $ANTLR end T__61

//   Comes from: 62:7: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__62
 *
 * Looks to match the characters the constitute the token T__62
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__62(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__62;
       
    
    // NDDL/base/antlr/NDDL3.g:62:7: ( ':' )
    // NDDL/base/antlr/NDDL3.g:62:9: ':'
    {
        MATCHC(':'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__62Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__62Ex; /* Prevent compiler warnings */
    ruleT__62Ex: ;

}
// $ANTLR end T__62

//   Comes from: 63:7: ( 'enforce' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__63
 *
 * Looks to match the characters the constitute the token T__63
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__63(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__63;
       
    
    // NDDL/base/antlr/NDDL3.g:63:7: ( 'enforce' )
    // NDDL/base/antlr/NDDL3.g:63:9: 'enforce'
    {
        MATCHS(lit_21); 
        if  (HASEXCEPTION())
        {
            goto ruleT__63Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__63Ex; /* Prevent compiler warnings */
    ruleT__63Ex: ;

}
// $ANTLR end T__63

//   Comes from: 64:7: ( '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__64
 *
 * Looks to match the characters the constitute the token T__64
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__64(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__64;
       
    
    // NDDL/base/antlr/NDDL3.g:64:7: ( '||' )
    // NDDL/base/antlr/NDDL3.g:64:9: '||'
    {
        MATCHS(lit_22); 
        if  (HASEXCEPTION())
        {
            goto ruleT__64Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__64Ex; /* Prevent compiler warnings */
    ruleT__64Ex: ;

}
// $ANTLR end T__64

//   Comes from: 65:7: ( '&&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__65
 *
 * Looks to match the characters the constitute the token T__65
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__65(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__65;
       
    
    // NDDL/base/antlr/NDDL3.g:65:7: ( '&&' )
    // NDDL/base/antlr/NDDL3.g:65:9: '&&'
    {
        MATCHS(lit_23); 
        if  (HASEXCEPTION())
        {
            goto ruleT__65Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__65Ex; /* Prevent compiler warnings */
    ruleT__65Ex: ;

}
// $ANTLR end T__65

//   Comes from: 66:7: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__66
 *
 * Looks to match the characters the constitute the token T__66
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__66(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__66;
       
    
    // NDDL/base/antlr/NDDL3.g:66:7: ( '==' )
    // NDDL/base/antlr/NDDL3.g:66:9: '=='
    {
        MATCHS(lit_24); 
        if  (HASEXCEPTION())
        {
            goto ruleT__66Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__66Ex; /* Prevent compiler warnings */
    ruleT__66Ex: ;

}
// $ANTLR end T__66

//   Comes from: 67:7: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__67
 *
 * Looks to match the characters the constitute the token T__67
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__67(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__67;
       
    
    // NDDL/base/antlr/NDDL3.g:67:7: ( '!=' )
    // NDDL/base/antlr/NDDL3.g:67:9: '!='
    {
        MATCHS(lit_25); 
        if  (HASEXCEPTION())
        {
            goto ruleT__67Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__67Ex; /* Prevent compiler warnings */
    ruleT__67Ex: ;

}
// $ANTLR end T__67

//   Comes from: 68:7: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__68
 *
 * Looks to match the characters the constitute the token T__68
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__68(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__68;
       
    
    // NDDL/base/antlr/NDDL3.g:68:7: ( '<' )
    // NDDL/base/antlr/NDDL3.g:68:9: '<'
    {
        MATCHC('<'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__68Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__68Ex; /* Prevent compiler warnings */
    ruleT__68Ex: ;

}
// $ANTLR end T__68

//   Comes from: 69:7: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__69
 *
 * Looks to match the characters the constitute the token T__69
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__69(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__69;
       
    
    // NDDL/base/antlr/NDDL3.g:69:7: ( '>' )
    // NDDL/base/antlr/NDDL3.g:69:9: '>'
    {
        MATCHC('>'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__69Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__69Ex; /* Prevent compiler warnings */
    ruleT__69Ex: ;

}
// $ANTLR end T__69

//   Comes from: 70:7: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__70
 *
 * Looks to match the characters the constitute the token T__70
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__70(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__70;
       
    
    // NDDL/base/antlr/NDDL3.g:70:7: ( '>=' )
    // NDDL/base/antlr/NDDL3.g:70:9: '>='
    {
        MATCHS(lit_26); 
        if  (HASEXCEPTION())
        {
            goto ruleT__70Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__70Ex; /* Prevent compiler warnings */
    ruleT__70Ex: ;

}
// $ANTLR end T__70

//   Comes from: 71:7: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__71
 *
 * Looks to match the characters the constitute the token T__71
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__71(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__71;
       
    
    // NDDL/base/antlr/NDDL3.g:71:7: ( '<=' )
    // NDDL/base/antlr/NDDL3.g:71:9: '<='
    {
        MATCHS(lit_27); 
        if  (HASEXCEPTION())
        {
            goto ruleT__71Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__71Ex; /* Prevent compiler warnings */
    ruleT__71Ex: ;

}
// $ANTLR end T__71

//   Comes from: 72:7: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__72
 *
 * Looks to match the characters the constitute the token T__72
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__72(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__72;
       
    
    // NDDL/base/antlr/NDDL3.g:72:7: ( '+' )
    // NDDL/base/antlr/NDDL3.g:72:9: '+'
    {
        MATCHC('+'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__72Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__72Ex; /* Prevent compiler warnings */
    ruleT__72Ex: ;

}
// $ANTLR end T__72

//   Comes from: 73:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__73
 *
 * Looks to match the characters the constitute the token T__73
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__73(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__73;
       
    
    // NDDL/base/antlr/NDDL3.g:73:7: ( '-' )
    // NDDL/base/antlr/NDDL3.g:73:9: '-'
    {
        MATCHC('-'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__73Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__73Ex; /* Prevent compiler warnings */
    ruleT__73Ex: ;

}
// $ANTLR end T__73

//   Comes from: 74:7: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__74
 *
 * Looks to match the characters the constitute the token T__74
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__74(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__74;
       
    
    // NDDL/base/antlr/NDDL3.g:74:7: ( '*' )
    // NDDL/base/antlr/NDDL3.g:74:9: '*'
    {
        MATCHC('*'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__74Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__74Ex; /* Prevent compiler warnings */
    ruleT__74Ex: ;

}
// $ANTLR end T__74

//   Comes from: 75:7: ( 'super' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__75
 *
 * Looks to match the characters the constitute the token T__75
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__75(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__75;
       
    
    // NDDL/base/antlr/NDDL3.g:75:7: ( 'super' )
    // NDDL/base/antlr/NDDL3.g:75:9: 'super'
    {
        MATCHS(lit_28); 
        if  (HASEXCEPTION())
        {
            goto ruleT__75Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__75Ex; /* Prevent compiler warnings */
    ruleT__75Ex: ;

}
// $ANTLR end T__75

//   Comes from: 76:7: ( 'if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__76
 *
 * Looks to match the characters the constitute the token T__76
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__76(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__76;
       
    
    // NDDL/base/antlr/NDDL3.g:76:7: ( 'if' )
    // NDDL/base/antlr/NDDL3.g:76:9: 'if'
    {
        MATCHS(lit_29); 
        if  (HASEXCEPTION())
        {
            goto ruleT__76Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__76Ex; /* Prevent compiler warnings */
    ruleT__76Ex: ;

}
// $ANTLR end T__76

//   Comes from: 77:7: ( 'else' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__77
 *
 * Looks to match the characters the constitute the token T__77
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__77(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__77;
       
    
    // NDDL/base/antlr/NDDL3.g:77:7: ( 'else' )
    // NDDL/base/antlr/NDDL3.g:77:9: 'else'
    {
        MATCHS(lit_30); 
        if  (HASEXCEPTION())
        {
            goto ruleT__77Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__77Ex; /* Prevent compiler warnings */
    ruleT__77Ex: ;

}
// $ANTLR end T__77

//   Comes from: 78:7: ( 'foreach' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__78
 *
 * Looks to match the characters the constitute the token T__78
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__78(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__78;
       
    
    // NDDL/base/antlr/NDDL3.g:78:7: ( 'foreach' )
    // NDDL/base/antlr/NDDL3.g:78:9: 'foreach'
    {
        MATCHS(lit_31); 
        if  (HASEXCEPTION())
        {
            goto ruleT__78Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__78Ex; /* Prevent compiler warnings */
    ruleT__78Ex: ;

}
// $ANTLR end T__78

//   Comes from: 79:7: ( 'after' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__79
 *
 * Looks to match the characters the constitute the token T__79
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__79(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__79;
       
    
    // NDDL/base/antlr/NDDL3.g:79:7: ( 'after' )
    // NDDL/base/antlr/NDDL3.g:79:9: 'after'
    {
        MATCHS(lit_32); 
        if  (HASEXCEPTION())
        {
            goto ruleT__79Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__79Ex; /* Prevent compiler warnings */
    ruleT__79Ex: ;

}
// $ANTLR end T__79

//   Comes from: 80:7: ( 'any' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__80
 *
 * Looks to match the characters the constitute the token T__80
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__80(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__80;
       
    
    // NDDL/base/antlr/NDDL3.g:80:7: ( 'any' )
    // NDDL/base/antlr/NDDL3.g:80:9: 'any'
    {
        MATCHS(lit_33); 
        if  (HASEXCEPTION())
        {
            goto ruleT__80Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__80Ex; /* Prevent compiler warnings */
    ruleT__80Ex: ;

}
// $ANTLR end T__80

//   Comes from: 81:7: ( 'before' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__81
 *
 * Looks to match the characters the constitute the token T__81
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__81(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__81;
       
    
    // NDDL/base/antlr/NDDL3.g:81:7: ( 'before' )
    // NDDL/base/antlr/NDDL3.g:81:9: 'before'
    {
        MATCHS(lit_34); 
        if  (HASEXCEPTION())
        {
            goto ruleT__81Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__81Ex; /* Prevent compiler warnings */
    ruleT__81Ex: ;

}
// $ANTLR end T__81

//   Comes from: 82:7: ( 'contained_by' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__82
 *
 * Looks to match the characters the constitute the token T__82
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__82(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__82;
       
    
    // NDDL/base/antlr/NDDL3.g:82:7: ( 'contained_by' )
    // NDDL/base/antlr/NDDL3.g:82:9: 'contained_by'
    {
        MATCHS(lit_35); 
        if  (HASEXCEPTION())
        {
            goto ruleT__82Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__82Ex; /* Prevent compiler warnings */
    ruleT__82Ex: ;

}
// $ANTLR end T__82

//   Comes from: 83:7: ( 'contains' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__83
 *
 * Looks to match the characters the constitute the token T__83
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__83(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__83;
       
    
    // NDDL/base/antlr/NDDL3.g:83:7: ( 'contains' )
    // NDDL/base/antlr/NDDL3.g:83:9: 'contains'
    {
        MATCHS(lit_36); 
        if  (HASEXCEPTION())
        {
            goto ruleT__83Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__83Ex; /* Prevent compiler warnings */
    ruleT__83Ex: ;

}
// $ANTLR end T__83

//   Comes from: 84:7: ( 'contains_end' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__84
 *
 * Looks to match the characters the constitute the token T__84
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__84(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__84;
       
    
    // NDDL/base/antlr/NDDL3.g:84:7: ( 'contains_end' )
    // NDDL/base/antlr/NDDL3.g:84:9: 'contains_end'
    {
        MATCHS(lit_37); 
        if  (HASEXCEPTION())
        {
            goto ruleT__84Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__84Ex; /* Prevent compiler warnings */
    ruleT__84Ex: ;

}
// $ANTLR end T__84

//   Comes from: 85:7: ( 'contains_start' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__85
 *
 * Looks to match the characters the constitute the token T__85
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__85(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__85;
       
    
    // NDDL/base/antlr/NDDL3.g:85:7: ( 'contains_start' )
    // NDDL/base/antlr/NDDL3.g:85:9: 'contains_start'
    {
        MATCHS(lit_38); 
        if  (HASEXCEPTION())
        {
            goto ruleT__85Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__85Ex; /* Prevent compiler warnings */
    ruleT__85Ex: ;

}
// $ANTLR end T__85

//   Comes from: 86:7: ( 'ends' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__86
 *
 * Looks to match the characters the constitute the token T__86
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__86(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__86;
       
    
    // NDDL/base/antlr/NDDL3.g:86:7: ( 'ends' )
    // NDDL/base/antlr/NDDL3.g:86:9: 'ends'
    {
        MATCHS(lit_39); 
        if  (HASEXCEPTION())
        {
            goto ruleT__86Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__86Ex; /* Prevent compiler warnings */
    ruleT__86Ex: ;

}
// $ANTLR end T__86

//   Comes from: 87:7: ( 'ends_after' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__87
 *
 * Looks to match the characters the constitute the token T__87
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__87(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__87;
       
    
    // NDDL/base/antlr/NDDL3.g:87:7: ( 'ends_after' )
    // NDDL/base/antlr/NDDL3.g:87:9: 'ends_after'
    {
        MATCHS(lit_40); 
        if  (HASEXCEPTION())
        {
            goto ruleT__87Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__87Ex; /* Prevent compiler warnings */
    ruleT__87Ex: ;

}
// $ANTLR end T__87

//   Comes from: 88:7: ( 'ends_after_start' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__88
 *
 * Looks to match the characters the constitute the token T__88
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__88(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__88;
       
    
    // NDDL/base/antlr/NDDL3.g:88:7: ( 'ends_after_start' )
    // NDDL/base/antlr/NDDL3.g:88:9: 'ends_after_start'
    {
        MATCHS(lit_41); 
        if  (HASEXCEPTION())
        {
            goto ruleT__88Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__88Ex; /* Prevent compiler warnings */
    ruleT__88Ex: ;

}
// $ANTLR end T__88

//   Comes from: 89:7: ( 'ends_before' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__89
 *
 * Looks to match the characters the constitute the token T__89
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__89(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__89;
       
    
    // NDDL/base/antlr/NDDL3.g:89:7: ( 'ends_before' )
    // NDDL/base/antlr/NDDL3.g:89:9: 'ends_before'
    {
        MATCHS(lit_42); 
        if  (HASEXCEPTION())
        {
            goto ruleT__89Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__89Ex; /* Prevent compiler warnings */
    ruleT__89Ex: ;

}
// $ANTLR end T__89

//   Comes from: 90:7: ( 'ends_during' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__90
 *
 * Looks to match the characters the constitute the token T__90
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__90(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__90;
       
    
    // NDDL/base/antlr/NDDL3.g:90:7: ( 'ends_during' )
    // NDDL/base/antlr/NDDL3.g:90:9: 'ends_during'
    {
        MATCHS(lit_43); 
        if  (HASEXCEPTION())
        {
            goto ruleT__90Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__90Ex; /* Prevent compiler warnings */
    ruleT__90Ex: ;

}
// $ANTLR end T__90

//   Comes from: 91:7: ( 'equal' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__91
 *
 * Looks to match the characters the constitute the token T__91
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__91(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__91;
       
    
    // NDDL/base/antlr/NDDL3.g:91:7: ( 'equal' )
    // NDDL/base/antlr/NDDL3.g:91:9: 'equal'
    {
        MATCHS(lit_44); 
        if  (HASEXCEPTION())
        {
            goto ruleT__91Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__91Ex; /* Prevent compiler warnings */
    ruleT__91Ex: ;

}
// $ANTLR end T__91

//   Comes from: 92:7: ( 'equals' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__92
 *
 * Looks to match the characters the constitute the token T__92
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__92(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__92;
       
    
    // NDDL/base/antlr/NDDL3.g:92:7: ( 'equals' )
    // NDDL/base/antlr/NDDL3.g:92:9: 'equals'
    {
        MATCHS(lit_45); 
        if  (HASEXCEPTION())
        {
            goto ruleT__92Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__92Ex; /* Prevent compiler warnings */
    ruleT__92Ex: ;

}
// $ANTLR end T__92

//   Comes from: 93:7: ( 'meets' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__93
 *
 * Looks to match the characters the constitute the token T__93
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__93(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__93;
       
    
    // NDDL/base/antlr/NDDL3.g:93:7: ( 'meets' )
    // NDDL/base/antlr/NDDL3.g:93:9: 'meets'
    {
        MATCHS(lit_46); 
        if  (HASEXCEPTION())
        {
            goto ruleT__93Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__93Ex; /* Prevent compiler warnings */
    ruleT__93Ex: ;

}
// $ANTLR end T__93

//   Comes from: 94:7: ( 'met_by' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__94
 *
 * Looks to match the characters the constitute the token T__94
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__94(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__94;
       
    
    // NDDL/base/antlr/NDDL3.g:94:7: ( 'met_by' )
    // NDDL/base/antlr/NDDL3.g:94:9: 'met_by'
    {
        MATCHS(lit_47); 
        if  (HASEXCEPTION())
        {
            goto ruleT__94Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__94Ex; /* Prevent compiler warnings */
    ruleT__94Ex: ;

}
// $ANTLR end T__94

//   Comes from: 95:7: ( 'parallels' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__95
 *
 * Looks to match the characters the constitute the token T__95
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__95(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__95;
       
    
    // NDDL/base/antlr/NDDL3.g:95:7: ( 'parallels' )
    // NDDL/base/antlr/NDDL3.g:95:9: 'parallels'
    {
        MATCHS(lit_48); 
        if  (HASEXCEPTION())
        {
            goto ruleT__95Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__95Ex; /* Prevent compiler warnings */
    ruleT__95Ex: ;

}
// $ANTLR end T__95

//   Comes from: 96:7: ( 'paralleled_by' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__96
 *
 * Looks to match the characters the constitute the token T__96
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__96(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__96;
       
    
    // NDDL/base/antlr/NDDL3.g:96:7: ( 'paralleled_by' )
    // NDDL/base/antlr/NDDL3.g:96:9: 'paralleled_by'
    {
        MATCHS(lit_49); 
        if  (HASEXCEPTION())
        {
            goto ruleT__96Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__96Ex; /* Prevent compiler warnings */
    ruleT__96Ex: ;

}
// $ANTLR end T__96

//   Comes from: 97:7: ( 'starts' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__97
 *
 * Looks to match the characters the constitute the token T__97
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__97(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__97;
       
    
    // NDDL/base/antlr/NDDL3.g:97:7: ( 'starts' )
    // NDDL/base/antlr/NDDL3.g:97:9: 'starts'
    {
        MATCHS(lit_50); 
        if  (HASEXCEPTION())
        {
            goto ruleT__97Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__97Ex; /* Prevent compiler warnings */
    ruleT__97Ex: ;

}
// $ANTLR end T__97

//   Comes from: 98:7: ( 'starts_after' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__98
 *
 * Looks to match the characters the constitute the token T__98
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__98(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__98;
       
    
    // NDDL/base/antlr/NDDL3.g:98:7: ( 'starts_after' )
    // NDDL/base/antlr/NDDL3.g:98:9: 'starts_after'
    {
        MATCHS(lit_51); 
        if  (HASEXCEPTION())
        {
            goto ruleT__98Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__98Ex; /* Prevent compiler warnings */
    ruleT__98Ex: ;

}
// $ANTLR end T__98

//   Comes from: 99:7: ( 'starts_before' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__99
 *
 * Looks to match the characters the constitute the token T__99
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__99(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__99;
       
    
    // NDDL/base/antlr/NDDL3.g:99:7: ( 'starts_before' )
    // NDDL/base/antlr/NDDL3.g:99:9: 'starts_before'
    {
        MATCHS(lit_52); 
        if  (HASEXCEPTION())
        {
            goto ruleT__99Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__99Ex; /* Prevent compiler warnings */
    ruleT__99Ex: ;

}
// $ANTLR end T__99

//   Comes from: 100:8: ( 'starts_before_end' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__100
 *
 * Looks to match the characters the constitute the token T__100
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__100(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__100;
       
    
    // NDDL/base/antlr/NDDL3.g:100:8: ( 'starts_before_end' )
    // NDDL/base/antlr/NDDL3.g:100:10: 'starts_before_end'
    {
        MATCHS(lit_53); 
        if  (HASEXCEPTION())
        {
            goto ruleT__100Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__100Ex; /* Prevent compiler warnings */
    ruleT__100Ex: ;

}
// $ANTLR end T__100

//   Comes from: 101:8: ( 'starts_during' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__101
 *
 * Looks to match the characters the constitute the token T__101
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__101(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__101;
       
    
    // NDDL/base/antlr/NDDL3.g:101:8: ( 'starts_during' )
    // NDDL/base/antlr/NDDL3.g:101:10: 'starts_during'
    {
        MATCHS(lit_54); 
        if  (HASEXCEPTION())
        {
            goto ruleT__101Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__101Ex; /* Prevent compiler warnings */
    ruleT__101Ex: ;

}
// $ANTLR end T__101

//   Comes from: 102:8: ( 'true' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__102
 *
 * Looks to match the characters the constitute the token T__102
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__102(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__102;
       
    
    // NDDL/base/antlr/NDDL3.g:102:8: ( 'true' )
    // NDDL/base/antlr/NDDL3.g:102:10: 'true'
    {
        MATCHS(lit_55); 
        if  (HASEXCEPTION())
        {
            goto ruleT__102Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__102Ex; /* Prevent compiler warnings */
    ruleT__102Ex: ;

}
// $ANTLR end T__102

//   Comes from: 103:8: ( 'false' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__103
 *
 * Looks to match the characters the constitute the token T__103
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__103(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__103;
       
    
    // NDDL/base/antlr/NDDL3.g:103:8: ( 'false' )
    // NDDL/base/antlr/NDDL3.g:103:10: 'false'
    {
        MATCHS(lit_56); 
        if  (HASEXCEPTION())
        {
            goto ruleT__103Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__103Ex; /* Prevent compiler warnings */
    ruleT__103Ex: ;

}
// $ANTLR end T__103

//   Comes from: 104:8: ( 'inf' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__104
 *
 * Looks to match the characters the constitute the token T__104
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__104(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__104;
       
    
    // NDDL/base/antlr/NDDL3.g:104:8: ( 'inf' )
    // NDDL/base/antlr/NDDL3.g:104:10: 'inf'
    {
        MATCHS(lit_57); 
        if  (HASEXCEPTION())
        {
            goto ruleT__104Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__104Ex; /* Prevent compiler warnings */
    ruleT__104Ex: ;

}
// $ANTLR end T__104

//   Comes from: 105:8: ( 'inff' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__105
 *
 * Looks to match the characters the constitute the token T__105
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__105(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__105;
       
    
    // NDDL/base/antlr/NDDL3.g:105:8: ( 'inff' )
    // NDDL/base/antlr/NDDL3.g:105:10: 'inff'
    {
        MATCHS(lit_58); 
        if  (HASEXCEPTION())
        {
            goto ruleT__105Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__105Ex; /* Prevent compiler warnings */
    ruleT__105Ex: ;

}
// $ANTLR end T__105

//   Comes from: 106:8: ( '-inf' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__106
 *
 * Looks to match the characters the constitute the token T__106
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__106(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__106;
       
    
    // NDDL/base/antlr/NDDL3.g:106:8: ( '-inf' )
    // NDDL/base/antlr/NDDL3.g:106:10: '-inf'
    {
        MATCHS(lit_59); 
        if  (HASEXCEPTION())
        {
            goto ruleT__106Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__106Ex; /* Prevent compiler warnings */
    ruleT__106Ex: ;

}
// $ANTLR end T__106

//   Comes from: 107:8: ( '-inff' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__107
 *
 * Looks to match the characters the constitute the token T__107
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__107(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__107;
       
    
    // NDDL/base/antlr/NDDL3.g:107:8: ( '-inff' )
    // NDDL/base/antlr/NDDL3.g:107:10: '-inff'
    {
        MATCHS(lit_60); 
        if  (HASEXCEPTION())
        {
            goto ruleT__107Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__107Ex; /* Prevent compiler warnings */
    ruleT__107Ex: ;

}
// $ANTLR end T__107

//   Comes from: 108:8: ( 'close' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__108
 *
 * Looks to match the characters the constitute the token T__108
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__108(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__108;
       
    
    // NDDL/base/antlr/NDDL3.g:108:8: ( 'close' )
    // NDDL/base/antlr/NDDL3.g:108:10: 'close'
    {
        MATCHS(lit_61); 
        if  (HASEXCEPTION())
        {
            goto ruleT__108Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__108Ex; /* Prevent compiler warnings */
    ruleT__108Ex: ;

}
// $ANTLR end T__108

//   Comes from: 458:9: ( '#include' ( WS )+ file= STRING )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INCLUDE
 *
 * Looks to match the characters the constitute the token INCLUDE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINCLUDE(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;
    pANTLR3_COMMON_TOKEN file;


    file = NULL;

    _type	    = INCLUDE;
       
    
    // NDDL/base/antlr/NDDL3.g:458:9: ( '#include' ( WS )+ file= STRING )
    // NDDL/base/antlr/NDDL3.g:458:11: '#include' ( WS )+ file= STRING
    {
        MATCHS(lit_62); 
        if  (HASEXCEPTION())
        {
            goto ruleINCLUDEEx;
        }


        // NDDL/base/antlr/NDDL3.g:458:22: ( WS )+
        {
            int cnt1=0;

            for (;;)
            {
                int alt1=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA1_0 = LA(1);
        	    if ( (((LA1_0 >= '\t') && (LA1_0 <= '\n')) || ((LA1_0 >= '\f') && (LA1_0 <= '\r')) || LA1_0 == ' ') ) 
        	    {
        	        alt1=1;
        	    }

        	}
        	switch (alt1) 
        	{
        	    case 1:
        	        // NDDL/base/antlr/NDDL3.g:458:22: WS
        	        {
        	            /* 458:22: WS */
        	            mWS(ctx ); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleINCLUDEEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt1 >= 1 )
        		{
        		    goto loop1;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleINCLUDEEx;
        	}
        	cnt1++;
            }
            loop1: ;	/* Jump to here if this rule does not match */
        }
        /* 458:11: '#include' ( WS )+ file= STRING */
        {
            ANTLR3_MARKER fileStart670 = GETCHARINDEX();
        mSTRING(ctx ); 
            if  (HASEXCEPTION())
            {
                goto ruleINCLUDEEx;
            }

            file = LEXSTATE->tokFactory->newToken(LEXSTATE->tokFactory);
            file->setType(file, ANTLR3_TOKEN_INVALID);
            file->setStartIndex(file, fileStart670);
            file->setStopIndex(file, GETCHARINDEX()-1);
            file->input = INPUT;
        }
        {

                                    std::string fullName = std::string((const char*)((file->getText(file))->chars));
                                    
                                    // Look for the included file in include path
                                    fullName = CTX->parserObj->getFilename(fullName);

                                    // TODO: if we couldn't find it, look in the same dir as the current file
                                     
                                    if (fullName.length() == 0) {
                                        std::string path = "";
                                        std::vector<std::string> parserPath = CTX->parserObj->getIncludePath();
                                        for (unsigned int i=0; i<parserPath.size();i++) {
                                            path += parserPath[i] + PATH_SEPARATOR_STR;
                                        }
                                        //Error message here.
                                        CONSTRUCTEX();
                                        FAILEDFLAG = ANTLR3_TRUE;
                                        RECOGNIZER->state->errorCount++;
                                        std::string message = ("File not found: " + std::string((const char*)(file->getText(file))->chars)
                                                               + ", search path \"" + path + "\"");
                                        EXCEPTION->message      = (void*) strdup(message.c_str());
                                        EXCEPTION->token        = file;
                                        return; // generated code has GOTO to the end
                                        // reportLexerError(RECOGNIZER, NULL); //Note: the second argument does not appear to be used for anything.
                                        //  check_runtime_error(false, std::string("ERROR!: couldn't find file: " + std::string((const char*)(file->getText(file))->chars)
                                        //                                       + ", search path \"" + path + "\"").c_str());
                                    }

                                    if (!CTX->parserObj->queryIncludeGuard(fullName)) {
                                        CTX->parserObj->addInclude(fullName);

                                        // Create a new input stream and take advantage of built in stream stacking
                                        // in C target runtime.

                                        pANTLR3_STRING_FACTORY factory = antlr3StringFactoryNew();
                                        pANTLR3_STRING fName = factory->newStr(factory,(ANTLR3_UINT8 *)fullName.c_str());
                                    
                                        pANTLR3_INPUT_STREAM in = antlr3AsciiFileStreamNew(fName->chars);
                                        PUSHSTREAM(in);
                                        CTX->parserObj->addInputStream(in);
                                        factory->destroy(factory,fName);
                                        factory->close(factory);
                                    } else {
                                        //std::cout << "Ignoring already included file " << fullName << std::endl;
                                    }
                                    
                                    LEXSTATE->channel=HIDDEN;
            		
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleINCLUDEEx; /* Prevent compiler warnings */
    ruleINCLUDEEx: ;

    file = NULL;

}
// $ANTLR end INCLUDE

//   Comes from: 509:7: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' | '$' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IDENT
 *
 * Looks to match the characters the constitute the token IDENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mIDENT(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = IDENT;
       
    
    // NDDL/base/antlr/NDDL3.g:509:7: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' | '$' )* )
    // NDDL/base/antlr/NDDL3.g:509:10: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' | '$' )*
    {
        if ( LA(1) == '$' || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleIDENTEx;
        }


        // NDDL/base/antlr/NDDL3.g:509:38: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' | '$' )*

        for (;;)
        {
            int alt2=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA2_0 = LA(1);
                if ( (LA2_0 == '$' || ((LA2_0 >= '0') && (LA2_0 <= '9')) || ((LA2_0 >= 'A') && (LA2_0 <= 'Z')) || LA2_0 == '_' || ((LA2_0 >= 'a') && (LA2_0 <= 'z'))) ) 
                {
                    alt2=1;
                }

            }
            switch (alt2) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:
        	    {
        	        if ( LA(1) == '$' || ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleIDENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop2;	/* break out of the loop */
        	    break;
            }
        }
        loop2: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleIDENTEx; /* Prevent compiler warnings */
    ruleIDENTEx: ;

}
// $ANTLR end IDENT

//   Comes from: 512:8: ( '\"' (~ ( '\\\\' | '\"' ) | ESCAPE_SEQUENCE )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING
 *
 * Looks to match the characters the constitute the token STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRING;
       
    
    // NDDL/base/antlr/NDDL3.g:512:8: ( '\"' (~ ( '\\\\' | '\"' ) | ESCAPE_SEQUENCE )* '\"' )
    // NDDL/base/antlr/NDDL3.g:512:10: '\"' (~ ( '\\\\' | '\"' ) | ESCAPE_SEQUENCE )* '\"'
    {
        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRINGEx;
        }


        // NDDL/base/antlr/NDDL3.g:512:14: (~ ( '\\\\' | '\"' ) | ESCAPE_SEQUENCE )*

        for (;;)
        {
            int alt3=3;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA3_0 = LA(1);
                if ( (((LA3_0 >= 0x0000) && (LA3_0 <= '!')) || ((LA3_0 >= '#') && (LA3_0 <= '[')) || ((LA3_0 >= ']') && (LA3_0 <= 0xFFFF))) ) 
                {
                    alt3=1;
                }
                else if ( (LA3_0 == '\\') ) 
                {
                    alt3=2;
                }

            }
            switch (alt3) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:512:15: ~ ( '\\\\' | '\"' )
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '!')) || ((LA(1) >= '#') && (LA(1) <= '[')) || ((LA(1) >= ']') && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleSTRINGEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:512:29: ESCAPE_SEQUENCE
        	    {
        	        /* 512:29: ESCAPE_SEQUENCE */
        	        mESCAPE_SEQUENCE(ctx ); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleSTRINGEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop3;	/* break out of the loop */
        	    break;
            }
        }
        loop3: ; /* Jump out to here if this rule does not match */

        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRINGEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTRINGEx; /* Prevent compiler warnings */
    ruleSTRINGEx: ;

}
// $ANTLR end STRING

//   Comes from: 516:2: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESCAPE_SEQUENCE
 *
 * Looks to match the characters the constitute the token ESCAPE_SEQUENCE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mESCAPE_SEQUENCE(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

        
    {
        //  NDDL/base/antlr/NDDL3.g:516:2: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
        
        ANTLR3_UINT32 alt4;

        alt4=3;


        {
            int LA4_0 = LA(1);
            if ( (LA4_0 == '\\') ) 
            {
                switch ( LA(2) ) 
                {
                case '"':
                case '\'':
                case '\\':
                case 'b':
                case 'f':
                case 'n':
                case 'r':
                case 't':
                	{
                		alt4=1;
                	}
                    break;
                case 'u':
                	{
                		alt4=2;
                	}
                    break;
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                	{
                		alt4=3;
                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 4;
                    EXCEPTION->state        = 1;


                    goto ruleESCAPE_SEQUENCEEx;
                }

            }
            else 
            {
            
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto ruleESCAPE_SEQUENCEEx;
            }
        }
        switch (alt4) 
        {
    	case 1:
    	    // NDDL/base/antlr/NDDL3.g:516:4: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESCAPE_SEQUENCEEx;
    	        }

    	        if ( LA(1) == '"' || LA(1) == '\'' || LA(1) == '\\' || LA(1) == 'b' || LA(1) == 'f' || LA(1) == 'n' || LA(1) == 'r' || LA(1) == 't' )
    	        {
    	            CONSUME();

    	        }
    	        else 
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();    goto ruleESCAPE_SEQUENCEEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // NDDL/base/antlr/NDDL3.g:517:4: UNICODE_ESC
    	    {
    	        /* 517:4: UNICODE_ESC */
    	        mUNICODE_ESC(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESCAPE_SEQUENCEEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // NDDL/base/antlr/NDDL3.g:518:4: OCTAL_ESC
    	    {
    	        /* 518:4: OCTAL_ESC */
    	        mOCTAL_ESC(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESCAPE_SEQUENCEEx;
    	        }


    	    }
    	    break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleESCAPE_SEQUENCEEx; /* Prevent compiler warnings */
    ruleESCAPE_SEQUENCEEx: ;

}
// $ANTLR end ESCAPE_SEQUENCE

//   Comes from: 522:2: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OCTAL_ESC
 *
 * Looks to match the characters the constitute the token OCTAL_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOCTAL_ESC(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

        
    {
        //  NDDL/base/antlr/NDDL3.g:522:2: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
        
        ANTLR3_UINT32 alt5;

        alt5=3;


        {
            int LA5_0 = LA(1);
            if ( (LA5_0 == '\\') ) 
            {

                {
                    int LA5_1 = LA(2);
                    if ( (((LA5_1 >= '0') && (LA5_1 <= '3'))) ) 
                    {

                        {
                            int LA5_2 = LA(3);
                            if ( (((LA5_2 >= '0') && (LA5_2 <= '7'))) ) 
                            {

                                {
                                    int LA5_4 = LA(4);
                                    if ( (((LA5_4 >= '0') && (LA5_4 <= '7'))) ) 
                                    {
                                        alt5=1;
                                    }
                                    else 
                                    {
                                        alt5=2;    }
                                }
                            }
                            else 
                            {
                                alt5=3;    }
                        }
                    }
                    else if ( (((LA5_1 >= '4') && (LA5_1 <= '7'))) ) 
                    {

                        {
                            int LA5_3 = LA(3);
                            if ( (((LA5_3 >= '0') && (LA5_3 <= '7'))) ) 
                            {
                                alt5=2;
                            }
                            else 
                            {
                                alt5=3;    }
                        }
                    }
                    else 
                    {
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 5;
                        EXCEPTION->state        = 1;


                        goto ruleOCTAL_ESCEx;
                    }
                }
            }
            else 
            {
            
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 5;
                EXCEPTION->state        = 0;


                goto ruleOCTAL_ESCEx;
            }
        }
        switch (alt5) 
        {
    	case 1:
    	    // NDDL/base/antlr/NDDL3.g:522:4: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // NDDL/base/antlr/NDDL3.g:522:9: ( '0' .. '3' )
    	        // NDDL/base/antlr/NDDL3.g:522:10: '0' .. '3'
    	        {
    	            MATCHRANGE('0', '3'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // NDDL/base/antlr/NDDL3.g:522:20: ( '0' .. '7' )
    	        // NDDL/base/antlr/NDDL3.g:522:21: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // NDDL/base/antlr/NDDL3.g:522:31: ( '0' .. '7' )
    	        // NDDL/base/antlr/NDDL3.g:522:32: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;
    	case 2:
    	    // NDDL/base/antlr/NDDL3.g:523:4: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // NDDL/base/antlr/NDDL3.g:523:9: ( '0' .. '7' )
    	        // NDDL/base/antlr/NDDL3.g:523:10: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // NDDL/base/antlr/NDDL3.g:523:20: ( '0' .. '7' )
    	        // NDDL/base/antlr/NDDL3.g:523:21: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;
    	case 3:
    	    // NDDL/base/antlr/NDDL3.g:524:4: '\\\\' ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // NDDL/base/antlr/NDDL3.g:524:9: ( '0' .. '7' )
    	        // NDDL/base/antlr/NDDL3.g:524:10: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleOCTAL_ESCEx; /* Prevent compiler warnings */
    ruleOCTAL_ESCEx: ;

}
// $ANTLR end OCTAL_ESC

//   Comes from: 528:2: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNICODE_ESC
 *
 * Looks to match the characters the constitute the token UNICODE_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUNICODE_ESC(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // NDDL/base/antlr/NDDL3.g:528:2: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    // NDDL/base/antlr/NDDL3.g:528:4: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    {
        MATCHC('\\'); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        MATCHC('u'); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 528:4: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 528:4: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 528:4: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 528:4: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleUNICODE_ESCEx; /* Prevent compiler warnings */
    ruleUNICODE_ESCEx: ;

}
// $ANTLR end UNICODE_ESC

//   Comes from: 532:2: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_DIGIT
 *
 * Looks to match the characters the constitute the token HEX_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHEX_DIGIT(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // NDDL/base/antlr/NDDL3.g:532:2: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    // NDDL/base/antlr/NDDL3.g:532:4: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleHEX_DIGITEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleHEX_DIGITEx; /* Prevent compiler warnings */
    ruleHEX_DIGITEx: ;

}
// $ANTLR end HEX_DIGIT

//   Comes from: 536:2: ( ( '0' .. '9' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIGIT
 *
 * Looks to match the characters the constitute the token DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDIGIT(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // NDDL/base/antlr/NDDL3.g:536:2: ( ( '0' .. '9' ) )
    // NDDL/base/antlr/NDDL3.g:536:4: ( '0' .. '9' )
    {
        // NDDL/base/antlr/NDDL3.g:536:4: ( '0' .. '9' )
        // NDDL/base/antlr/NDDL3.g:536:5: '0' .. '9'
        {
            MATCHRANGE('0', '9'); 
            if  (HASEXCEPTION())
            {
                goto ruleDIGITEx;
            }


        }


    }



    // This is where rules clean up and exit
    //
    goto ruleDIGITEx; /* Prevent compiler warnings */
    ruleDIGITEx: ;

}
// $ANTLR end DIGIT

//   Comes from: 539:5: ( ( '+' | '-' )? ( '0' | '1' .. '9' ( '0' .. '9' )* ) ( INT_SUFFIX )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT
 *
 * Looks to match the characters the constitute the token INT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINT(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INT;
       
    
    // NDDL/base/antlr/NDDL3.g:539:5: ( ( '+' | '-' )? ( '0' | '1' .. '9' ( '0' .. '9' )* ) ( INT_SUFFIX )? )
    // NDDL/base/antlr/NDDL3.g:539:7: ( '+' | '-' )? ( '0' | '1' .. '9' ( '0' .. '9' )* ) ( INT_SUFFIX )?
    {

        // NDDL/base/antlr/NDDL3.g:539:7: ( '+' | '-' )?
        {
            int alt6=2;
            {
                int LA6_0 = LA(1);
                if ( (LA6_0 == '+' || LA6_0 == '-') ) 
                {
                    alt6=1;
                }
            }
            switch (alt6) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:
        	    {
        	        if ( LA(1) == '+' || LA(1) == '-' )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleINTEx;
        	        }


        	    }
        	    break;

            }
        }

        // NDDL/base/antlr/NDDL3.g:539:20: ( '0' | '1' .. '9' ( '0' .. '9' )* )
        {
            int alt8=2;

            {
                int LA8_0 = LA(1);
                if ( (LA8_0 == '0') ) 
                {
                    alt8=1;
                }
                else if ( (((LA8_0 >= '1') && (LA8_0 <= '9'))) ) 
                {
                    alt8=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 8;
                    EXCEPTION->state        = 0;


                    goto ruleINTEx;
                }
            }
            switch (alt8) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:539:21: '0'
        	    {
        	        MATCHC('0'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleINTEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:539:27: '1' .. '9' ( '0' .. '9' )*
        	    {
        	        MATCHRANGE('1', '9'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleINTEx;
        	        }


        	        // NDDL/base/antlr/NDDL3.g:539:36: ( '0' .. '9' )*

        	        for (;;)
        	        {
        	            int alt7=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA7_0 = LA(1);
        	                if ( (((LA7_0 >= '0') && (LA7_0 <= '9'))) ) 
        	                {
        	                    alt7=1;
        	                }

        	            }
        	            switch (alt7) 
        	            {
        	        	case 1:
        	        	    // NDDL/base/antlr/NDDL3.g:539:36: '0' .. '9'
        	        	    {
        	        	        MATCHRANGE('0', '9'); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleINTEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop7;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop7: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }

        // NDDL/base/antlr/NDDL3.g:539:47: ( INT_SUFFIX )?
        {
            int alt9=2;
            {
                int LA9_0 = LA(1);
                if ( (LA9_0 == 'L' || LA9_0 == 'l') ) 
                {
                    alt9=1;
                }
            }
            switch (alt9) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:539:47: INT_SUFFIX
        	    {
        	        /* 539:47: INT_SUFFIX */
        	        mINT_SUFFIX(ctx ); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleINTEx;
        	        }


        	    }
        	    break;

            }
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleINTEx; /* Prevent compiler warnings */
    ruleINTEx: ;

}
// $ANTLR end INT

//   Comes from: 543:2: ( ( 'l' | 'L' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT_SUFFIX
 *
 * Looks to match the characters the constitute the token INT_SUFFIX
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINT_SUFFIX(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // NDDL/base/antlr/NDDL3.g:543:2: ( ( 'l' | 'L' ) )
    // NDDL/base/antlr/NDDL3.g:543:4: ( 'l' | 'L' )
    {
        if ( LA(1) == 'L' || LA(1) == 'l' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleINT_SUFFIXEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleINT_SUFFIXEx; /* Prevent compiler warnings */
    ruleINT_SUFFIXEx: ;

}
// $ANTLR end INT_SUFFIX

//   Comes from: 546:7: ( ( '+' | '-' )? ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( FLOAT_SUFFIX )? | '.' ( '0' .. '9' )+ ( EXPONENT )? ( FLOAT_SUFFIX )? | ( '0' .. '9' )+ EXPONENT ( FLOAT_SUFFIX )? | ( '0' .. '9' )+ FLOAT_SUFFIX )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT
 *
 * Looks to match the characters the constitute the token FLOAT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOAT(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FLOAT;
       
    
    {
        //  NDDL/base/antlr/NDDL3.g:546:7: ( ( '+' | '-' )? ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( FLOAT_SUFFIX )? | '.' ( '0' .. '9' )+ ( EXPONENT )? ( FLOAT_SUFFIX )? | ( '0' .. '9' )+ EXPONENT ( FLOAT_SUFFIX )? | ( '0' .. '9' )+ FLOAT_SUFFIX )
        
        ANTLR3_UINT32 alt21;

        alt21=4;

        alt21 = cdfa21.predict(ctx, RECOGNIZER, ISTREAM, &cdfa21);
        if  (HASEXCEPTION())
        {
            goto ruleFLOATEx;
        }

        switch (alt21) 
        {
    	case 1:
    	    // NDDL/base/antlr/NDDL3.g:546:9: ( '+' | '-' )? ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( FLOAT_SUFFIX )?
    	    {

    	        // NDDL/base/antlr/NDDL3.g:546:9: ( '+' | '-' )?
    	        {
    	            int alt10=2;
    	            {
    	                int LA10_0 = LA(1);
    	                if ( (LA10_0 == '+' || LA10_0 == '-') ) 
    	                {
    	                    alt10=1;
    	                }
    	            }
    	            switch (alt10) 
    	            {
    	        	case 1:
    	        	    // NDDL/base/antlr/NDDL3.g:
    	        	    {
    	        	        if ( LA(1) == '+' || LA(1) == '-' )
    	        	        {
    	        	            CONSUME();

    	        	        }
    	        	        else 
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();    goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }
    	        // NDDL/base/antlr/NDDL3.g:546:22: ( '0' .. '9' )+
    	        {
    	            int cnt11=0;

    	            for (;;)
    	            {
    	                int alt11=2;
    	        	{
    	        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	        	    */
    	        	    int LA11_0 = LA(1);
    	        	    if ( (((LA11_0 >= '0') && (LA11_0 <= '9'))) ) 
    	        	    {
    	        	        alt11=1;
    	        	    }

    	        	}
    	        	switch (alt11) 
    	        	{
    	        	    case 1:
    	        	        // NDDL/base/antlr/NDDL3.g:546:23: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt11 >= 1 )
    	        		{
    	        		    goto loop11;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt11++;
    	            }
    	            loop11: ;	/* Jump to here if this rule does not match */
    	        }
    	        MATCHC('.'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        // NDDL/base/antlr/NDDL3.g:546:38: ( '0' .. '9' )*

    	        for (;;)
    	        {
    	            int alt12=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA12_0 = LA(1);
    	                if ( (((LA12_0 >= '0') && (LA12_0 <= '9'))) ) 
    	                {
    	                    alt12=1;
    	                }

    	            }
    	            switch (alt12) 
    	            {
    	        	case 1:
    	        	    // NDDL/base/antlr/NDDL3.g:546:39: '0' .. '9'
    	        	    {
    	        	        MATCHRANGE('0', '9'); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop12;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop12: ; /* Jump out to here if this rule does not match */


    	        // NDDL/base/antlr/NDDL3.g:546:50: ( EXPONENT )?
    	        {
    	            int alt13=2;
    	            {
    	                int LA13_0 = LA(1);
    	                if ( (LA13_0 == 'E' || LA13_0 == 'e') ) 
    	                {
    	                    alt13=1;
    	                }
    	            }
    	            switch (alt13) 
    	            {
    	        	case 1:
    	        	    // NDDL/base/antlr/NDDL3.g:546:50: EXPONENT
    	        	    {
    	        	        /* 546:50: EXPONENT */
    	        	        mEXPONENT(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	        // NDDL/base/antlr/NDDL3.g:546:60: ( FLOAT_SUFFIX )?
    	        {
    	            int alt14=2;
    	            {
    	                int LA14_0 = LA(1);
    	                if ( (LA14_0 == 'D' || LA14_0 == 'F' || LA14_0 == 'd' || LA14_0 == 'f') ) 
    	                {
    	                    alt14=1;
    	                }
    	            }
    	            switch (alt14) 
    	            {
    	        	case 1:
    	        	    // NDDL/base/antlr/NDDL3.g:546:60: FLOAT_SUFFIX
    	        	    {
    	        	        /* 546:60: FLOAT_SUFFIX */
    	        	        mFLOAT_SUFFIX(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // NDDL/base/antlr/NDDL3.g:547:4: '.' ( '0' .. '9' )+ ( EXPONENT )? ( FLOAT_SUFFIX )?
    	    {
    	        MATCHC('.'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }

    	        // NDDL/base/antlr/NDDL3.g:547:8: ( '0' .. '9' )+
    	        {
    	            int cnt15=0;

    	            for (;;)
    	            {
    	                int alt15=2;
    	        	{
    	        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	        	    */
    	        	    int LA15_0 = LA(1);
    	        	    if ( (((LA15_0 >= '0') && (LA15_0 <= '9'))) ) 
    	        	    {
    	        	        alt15=1;
    	        	    }

    	        	}
    	        	switch (alt15) 
    	        	{
    	        	    case 1:
    	        	        // NDDL/base/antlr/NDDL3.g:547:9: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt15 >= 1 )
    	        		{
    	        		    goto loop15;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt15++;
    	            }
    	            loop15: ;	/* Jump to here if this rule does not match */
    	        }

    	        // NDDL/base/antlr/NDDL3.g:547:20: ( EXPONENT )?
    	        {
    	            int alt16=2;
    	            {
    	                int LA16_0 = LA(1);
    	                if ( (LA16_0 == 'E' || LA16_0 == 'e') ) 
    	                {
    	                    alt16=1;
    	                }
    	            }
    	            switch (alt16) 
    	            {
    	        	case 1:
    	        	    // NDDL/base/antlr/NDDL3.g:547:20: EXPONENT
    	        	    {
    	        	        /* 547:20: EXPONENT */
    	        	        mEXPONENT(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	        // NDDL/base/antlr/NDDL3.g:547:30: ( FLOAT_SUFFIX )?
    	        {
    	            int alt17=2;
    	            {
    	                int LA17_0 = LA(1);
    	                if ( (LA17_0 == 'D' || LA17_0 == 'F' || LA17_0 == 'd' || LA17_0 == 'f') ) 
    	                {
    	                    alt17=1;
    	                }
    	            }
    	            switch (alt17) 
    	            {
    	        	case 1:
    	        	    // NDDL/base/antlr/NDDL3.g:547:30: FLOAT_SUFFIX
    	        	    {
    	        	        /* 547:30: FLOAT_SUFFIX */
    	        	        mFLOAT_SUFFIX(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    // NDDL/base/antlr/NDDL3.g:548:4: ( '0' .. '9' )+ EXPONENT ( FLOAT_SUFFIX )?
    	    {
    	        // NDDL/base/antlr/NDDL3.g:548:4: ( '0' .. '9' )+
    	        {
    	            int cnt18=0;

    	            for (;;)
    	            {
    	                int alt18=2;
    	        	{
    	        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	        	    */
    	        	    int LA18_0 = LA(1);
    	        	    if ( (((LA18_0 >= '0') && (LA18_0 <= '9'))) ) 
    	        	    {
    	        	        alt18=1;
    	        	    }

    	        	}
    	        	switch (alt18) 
    	        	{
    	        	    case 1:
    	        	        // NDDL/base/antlr/NDDL3.g:548:5: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt18 >= 1 )
    	        		{
    	        		    goto loop18;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt18++;
    	            }
    	            loop18: ;	/* Jump to here if this rule does not match */
    	        }
    	        /* 548:4: ( '0' .. '9' )+ EXPONENT ( FLOAT_SUFFIX )? */
    	        mEXPONENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        // NDDL/base/antlr/NDDL3.g:548:25: ( FLOAT_SUFFIX )?
    	        {
    	            int alt19=2;
    	            {
    	                int LA19_0 = LA(1);
    	                if ( (LA19_0 == 'D' || LA19_0 == 'F' || LA19_0 == 'd' || LA19_0 == 'f') ) 
    	                {
    	                    alt19=1;
    	                }
    	            }
    	            switch (alt19) 
    	            {
    	        	case 1:
    	        	    // NDDL/base/antlr/NDDL3.g:548:25: FLOAT_SUFFIX
    	        	    {
    	        	        /* 548:25: FLOAT_SUFFIX */
    	        	        mFLOAT_SUFFIX(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 4:
    	    // NDDL/base/antlr/NDDL3.g:549:4: ( '0' .. '9' )+ FLOAT_SUFFIX
    	    {
    	        // NDDL/base/antlr/NDDL3.g:549:4: ( '0' .. '9' )+
    	        {
    	            int cnt20=0;

    	            for (;;)
    	            {
    	                int alt20=2;
    	        	{
    	        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	        	    */
    	        	    int LA20_0 = LA(1);
    	        	    if ( (((LA20_0 >= '0') && (LA20_0 <= '9'))) ) 
    	        	    {
    	        	        alt20=1;
    	        	    }

    	        	}
    	        	switch (alt20) 
    	        	{
    	        	    case 1:
    	        	        // NDDL/base/antlr/NDDL3.g:549:5: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt20 >= 1 )
    	        		{
    	        		    goto loop20;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt20++;
    	            }
    	            loop20: ;	/* Jump to here if this rule does not match */
    	        }
    	        /* 549:4: ( '0' .. '9' )+ FLOAT_SUFFIX */
    	        mFLOAT_SUFFIX(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFLOATEx; /* Prevent compiler warnings */
    ruleFLOATEx: ;

}
// $ANTLR end FLOAT

//   Comes from: 553:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENT
 *
 * Looks to match the characters the constitute the token EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXPONENT(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // NDDL/base/antlr/NDDL3.g:553:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    // NDDL/base/antlr/NDDL3.g:553:4: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    {
        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEXPONENTEx;
        }


        // NDDL/base/antlr/NDDL3.g:553:14: ( '+' | '-' )?
        {
            int alt22=2;
            {
                int LA22_0 = LA(1);
                if ( (LA22_0 == '+' || LA22_0 == '-') ) 
                {
                    alt22=1;
                }
            }
            switch (alt22) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:
        	    {
        	        if ( LA(1) == '+' || LA(1) == '-' )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleEXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }
        // NDDL/base/antlr/NDDL3.g:553:25: ( '0' .. '9' )+
        {
            int cnt23=0;

            for (;;)
            {
                int alt23=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA23_0 = LA(1);
        	    if ( (((LA23_0 >= '0') && (LA23_0 <= '9'))) ) 
        	    {
        	        alt23=1;
        	    }

        	}
        	switch (alt23) 
        	{
        	    case 1:
        	        // NDDL/base/antlr/NDDL3.g:553:26: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleEXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt23 >= 1 )
        		{
        		    goto loop23;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleEXPONENTEx;
        	}
        	cnt23++;
            }
            loop23: ;	/* Jump to here if this rule does not match */
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleEXPONENTEx; /* Prevent compiler warnings */
    ruleEXPONENTEx: ;

}
// $ANTLR end EXPONENT

//   Comes from: 557:2: ( ( 'f' | 'F' | 'd' | 'D' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT_SUFFIX
 *
 * Looks to match the characters the constitute the token FLOAT_SUFFIX
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOAT_SUFFIX(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // NDDL/base/antlr/NDDL3.g:557:2: ( ( 'f' | 'F' | 'd' | 'D' ) )
    // NDDL/base/antlr/NDDL3.g:557:4: ( 'f' | 'F' | 'd' | 'D' )
    {
        if ( LA(1) == 'D' || LA(1) == 'F' || LA(1) == 'd' || LA(1) == 'f' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleFLOAT_SUFFIXEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleFLOAT_SUFFIXEx; /* Prevent compiler warnings */
    ruleFLOAT_SUFFIXEx: ;

}
// $ANTLR end FLOAT_SUFFIX

//   Comes from: 560:9: ( '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMENT(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMENT;
       
    
    // NDDL/base/antlr/NDDL3.g:560:9: ( '/*' ( options {greedy=false; } : . )* '*/' )
    // NDDL/base/antlr/NDDL3.g:560:11: '/*' ( options {greedy=false; } : . )* '*/'
    {
        MATCHS(lit_63); 
        if  (HASEXCEPTION())
        {
            goto ruleCOMMENTEx;
        }



        // NDDL/base/antlr/NDDL3.g:560:16: ( options {greedy=false; } : . )*

        for (;;)
        {
            int alt24=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA24_0 = LA(1);
                if ( (LA24_0 == '*') ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA24_1 = LA(2);
                        if ( (LA24_1 == '/') ) 
                        {
                            alt24=2;
                        }
                        else if ( (((LA24_1 >= 0x0000) && (LA24_1 <= '.')) || ((LA24_1 >= '0') && (LA24_1 <= 0xFFFF))) ) 
                        {
                            alt24=1;
                        }

                    }
                }
                else if ( (((LA24_0 >= 0x0000) && (LA24_0 <= ')')) || ((LA24_0 >= '+') && (LA24_0 <= 0xFFFF))) ) 
                {
                    alt24=1;
                }

            }
            switch (alt24) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:560:44: .
        	    {
        	        MATCHANY(); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop24;	/* break out of the loop */
        	    break;
            }
        }
        loop24: ; /* Jump out to here if this rule does not match */

        MATCHS(lit_64); 
        if  (HASEXCEPTION())
        {
            goto ruleCOMMENTEx;
        }


        {
            LEXSTATE->channel=HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 564:2: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LINE_COMMENT
 *
 * Looks to match the characters the constitute the token LINE_COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLINE_COMMENT(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LINE_COMMENT;
       
    
    // NDDL/base/antlr/NDDL3.g:564:2: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
    // NDDL/base/antlr/NDDL3.g:564:4: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    {
        MATCHS(lit_65); 
        if  (HASEXCEPTION())
        {
            goto ruleLINE_COMMENTEx;
        }



        // NDDL/base/antlr/NDDL3.g:564:9: (~ ( '\\n' | '\\r' ) )*

        for (;;)
        {
            int alt25=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA25_0 = LA(1);
                if ( (((LA25_0 >= 0x0000) && (LA25_0 <= '\t')) || ((LA25_0 >= 0x000B) && (LA25_0 <= '\f')) || ((LA25_0 >= 0x000E) && (LA25_0 <= 0xFFFF))) ) 
                {
                    alt25=1;
                }

            }
            switch (alt25) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:564:9: ~ ( '\\n' | '\\r' )
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop25;	/* break out of the loop */
        	    break;
            }
        }
        loop25: ; /* Jump out to here if this rule does not match */


        // NDDL/base/antlr/NDDL3.g:564:23: ( '\\r' )?
        {
            int alt26=2;
            {
                int LA26_0 = LA(1);
                if ( (LA26_0 == '\r') ) 
                {
                    alt26=1;
                }
            }
            switch (alt26) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:564:23: '\\r'
        	    {
        	        MATCHC('\r'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;

            }
        }
        MATCHC('\n'); 
        if  (HASEXCEPTION())
        {
            goto ruleLINE_COMMENTEx;
        }

        {
            LEXSTATE->channel=HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLINE_COMMENTEx; /* Prevent compiler warnings */
    ruleLINE_COMMENTEx: ;

}
// $ANTLR end LINE_COMMENT

//   Comes from: 567:4: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pNDDL3Lexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;
       
    
    // NDDL/base/antlr/NDDL3.g:567:4: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
    // NDDL/base/antlr/NDDL3.g:567:6: ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' )
    {
        if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || ((LA(1) >= '\f') && (LA(1) <= '\r')) || LA(1) == ' ' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWSEx;
        }

        {
            LEXSTATE->channel=HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pNDDL3Lexer ctx)
{
    {
        //  NDDL/base/antlr/NDDL3.g:1:8: ( T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | INCLUDE | IDENT | STRING | INT | FLOAT | COMMENT | LINE_COMMENT | WS )
        
        ANTLR3_UINT32 alt27;

        alt27=85;

        alt27 = cdfa27.predict(ctx, RECOGNIZER, ISTREAM, &cdfa27);
        if  (HASEXCEPTION())
        {
            goto ruleTokensEx;
        }

        switch (alt27) 
        {
    	case 1:
    	    // NDDL/base/antlr/NDDL3.g:1:10: T__32
    	    {
    	        /* 1:10: T__32 */
    	        mT__32(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // NDDL/base/antlr/NDDL3.g:1:16: T__33
    	    {
    	        /* 1:16: T__33 */
    	        mT__33(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // NDDL/base/antlr/NDDL3.g:1:22: T__34
    	    {
    	        /* 1:22: T__34 */
    	        mT__34(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // NDDL/base/antlr/NDDL3.g:1:28: T__35
    	    {
    	        /* 1:28: T__35 */
    	        mT__35(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // NDDL/base/antlr/NDDL3.g:1:34: T__36
    	    {
    	        /* 1:34: T__36 */
    	        mT__36(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // NDDL/base/antlr/NDDL3.g:1:40: T__37
    	    {
    	        /* 1:40: T__37 */
    	        mT__37(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // NDDL/base/antlr/NDDL3.g:1:46: T__38
    	    {
    	        /* 1:46: T__38 */
    	        mT__38(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // NDDL/base/antlr/NDDL3.g:1:52: T__39
    	    {
    	        /* 1:52: T__39 */
    	        mT__39(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // NDDL/base/antlr/NDDL3.g:1:58: T__40
    	    {
    	        /* 1:58: T__40 */
    	        mT__40(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // NDDL/base/antlr/NDDL3.g:1:64: T__41
    	    {
    	        /* 1:64: T__41 */
    	        mT__41(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // NDDL/base/antlr/NDDL3.g:1:70: T__42
    	    {
    	        /* 1:70: T__42 */
    	        mT__42(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // NDDL/base/antlr/NDDL3.g:1:76: T__43
    	    {
    	        /* 1:76: T__43 */
    	        mT__43(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // NDDL/base/antlr/NDDL3.g:1:82: T__44
    	    {
    	        /* 1:82: T__44 */
    	        mT__44(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // NDDL/base/antlr/NDDL3.g:1:88: T__45
    	    {
    	        /* 1:88: T__45 */
    	        mT__45(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // NDDL/base/antlr/NDDL3.g:1:94: T__46
    	    {
    	        /* 1:94: T__46 */
    	        mT__46(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // NDDL/base/antlr/NDDL3.g:1:100: T__47
    	    {
    	        /* 1:100: T__47 */
    	        mT__47(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 17:
    	    // NDDL/base/antlr/NDDL3.g:1:106: T__48
    	    {
    	        /* 1:106: T__48 */
    	        mT__48(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 18:
    	    // NDDL/base/antlr/NDDL3.g:1:112: T__49
    	    {
    	        /* 1:112: T__49 */
    	        mT__49(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 19:
    	    // NDDL/base/antlr/NDDL3.g:1:118: T__50
    	    {
    	        /* 1:118: T__50 */
    	        mT__50(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 20:
    	    // NDDL/base/antlr/NDDL3.g:1:124: T__51
    	    {
    	        /* 1:124: T__51 */
    	        mT__51(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 21:
    	    // NDDL/base/antlr/NDDL3.g:1:130: T__52
    	    {
    	        /* 1:130: T__52 */
    	        mT__52(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 22:
    	    // NDDL/base/antlr/NDDL3.g:1:136: T__53
    	    {
    	        /* 1:136: T__53 */
    	        mT__53(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 23:
    	    // NDDL/base/antlr/NDDL3.g:1:142: T__54
    	    {
    	        /* 1:142: T__54 */
    	        mT__54(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 24:
    	    // NDDL/base/antlr/NDDL3.g:1:148: T__55
    	    {
    	        /* 1:148: T__55 */
    	        mT__55(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 25:
    	    // NDDL/base/antlr/NDDL3.g:1:154: T__56
    	    {
    	        /* 1:154: T__56 */
    	        mT__56(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 26:
    	    // NDDL/base/antlr/NDDL3.g:1:160: T__57
    	    {
    	        /* 1:160: T__57 */
    	        mT__57(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 27:
    	    // NDDL/base/antlr/NDDL3.g:1:166: T__58
    	    {
    	        /* 1:166: T__58 */
    	        mT__58(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 28:
    	    // NDDL/base/antlr/NDDL3.g:1:172: T__59
    	    {
    	        /* 1:172: T__59 */
    	        mT__59(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 29:
    	    // NDDL/base/antlr/NDDL3.g:1:178: T__60
    	    {
    	        /* 1:178: T__60 */
    	        mT__60(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 30:
    	    // NDDL/base/antlr/NDDL3.g:1:184: T__61
    	    {
    	        /* 1:184: T__61 */
    	        mT__61(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 31:
    	    // NDDL/base/antlr/NDDL3.g:1:190: T__62
    	    {
    	        /* 1:190: T__62 */
    	        mT__62(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 32:
    	    // NDDL/base/antlr/NDDL3.g:1:196: T__63
    	    {
    	        /* 1:196: T__63 */
    	        mT__63(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 33:
    	    // NDDL/base/antlr/NDDL3.g:1:202: T__64
    	    {
    	        /* 1:202: T__64 */
    	        mT__64(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 34:
    	    // NDDL/base/antlr/NDDL3.g:1:208: T__65
    	    {
    	        /* 1:208: T__65 */
    	        mT__65(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 35:
    	    // NDDL/base/antlr/NDDL3.g:1:214: T__66
    	    {
    	        /* 1:214: T__66 */
    	        mT__66(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 36:
    	    // NDDL/base/antlr/NDDL3.g:1:220: T__67
    	    {
    	        /* 1:220: T__67 */
    	        mT__67(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 37:
    	    // NDDL/base/antlr/NDDL3.g:1:226: T__68
    	    {
    	        /* 1:226: T__68 */
    	        mT__68(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 38:
    	    // NDDL/base/antlr/NDDL3.g:1:232: T__69
    	    {
    	        /* 1:232: T__69 */
    	        mT__69(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 39:
    	    // NDDL/base/antlr/NDDL3.g:1:238: T__70
    	    {
    	        /* 1:238: T__70 */
    	        mT__70(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 40:
    	    // NDDL/base/antlr/NDDL3.g:1:244: T__71
    	    {
    	        /* 1:244: T__71 */
    	        mT__71(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 41:
    	    // NDDL/base/antlr/NDDL3.g:1:250: T__72
    	    {
    	        /* 1:250: T__72 */
    	        mT__72(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 42:
    	    // NDDL/base/antlr/NDDL3.g:1:256: T__73
    	    {
    	        /* 1:256: T__73 */
    	        mT__73(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 43:
    	    // NDDL/base/antlr/NDDL3.g:1:262: T__74
    	    {
    	        /* 1:262: T__74 */
    	        mT__74(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 44:
    	    // NDDL/base/antlr/NDDL3.g:1:268: T__75
    	    {
    	        /* 1:268: T__75 */
    	        mT__75(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 45:
    	    // NDDL/base/antlr/NDDL3.g:1:274: T__76
    	    {
    	        /* 1:274: T__76 */
    	        mT__76(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 46:
    	    // NDDL/base/antlr/NDDL3.g:1:280: T__77
    	    {
    	        /* 1:280: T__77 */
    	        mT__77(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 47:
    	    // NDDL/base/antlr/NDDL3.g:1:286: T__78
    	    {
    	        /* 1:286: T__78 */
    	        mT__78(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 48:
    	    // NDDL/base/antlr/NDDL3.g:1:292: T__79
    	    {
    	        /* 1:292: T__79 */
    	        mT__79(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 49:
    	    // NDDL/base/antlr/NDDL3.g:1:298: T__80
    	    {
    	        /* 1:298: T__80 */
    	        mT__80(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 50:
    	    // NDDL/base/antlr/NDDL3.g:1:304: T__81
    	    {
    	        /* 1:304: T__81 */
    	        mT__81(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 51:
    	    // NDDL/base/antlr/NDDL3.g:1:310: T__82
    	    {
    	        /* 1:310: T__82 */
    	        mT__82(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 52:
    	    // NDDL/base/antlr/NDDL3.g:1:316: T__83
    	    {
    	        /* 1:316: T__83 */
    	        mT__83(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 53:
    	    // NDDL/base/antlr/NDDL3.g:1:322: T__84
    	    {
    	        /* 1:322: T__84 */
    	        mT__84(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 54:
    	    // NDDL/base/antlr/NDDL3.g:1:328: T__85
    	    {
    	        /* 1:328: T__85 */
    	        mT__85(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 55:
    	    // NDDL/base/antlr/NDDL3.g:1:334: T__86
    	    {
    	        /* 1:334: T__86 */
    	        mT__86(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 56:
    	    // NDDL/base/antlr/NDDL3.g:1:340: T__87
    	    {
    	        /* 1:340: T__87 */
    	        mT__87(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 57:
    	    // NDDL/base/antlr/NDDL3.g:1:346: T__88
    	    {
    	        /* 1:346: T__88 */
    	        mT__88(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 58:
    	    // NDDL/base/antlr/NDDL3.g:1:352: T__89
    	    {
    	        /* 1:352: T__89 */
    	        mT__89(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 59:
    	    // NDDL/base/antlr/NDDL3.g:1:358: T__90
    	    {
    	        /* 1:358: T__90 */
    	        mT__90(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 60:
    	    // NDDL/base/antlr/NDDL3.g:1:364: T__91
    	    {
    	        /* 1:364: T__91 */
    	        mT__91(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 61:
    	    // NDDL/base/antlr/NDDL3.g:1:370: T__92
    	    {
    	        /* 1:370: T__92 */
    	        mT__92(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 62:
    	    // NDDL/base/antlr/NDDL3.g:1:376: T__93
    	    {
    	        /* 1:376: T__93 */
    	        mT__93(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 63:
    	    // NDDL/base/antlr/NDDL3.g:1:382: T__94
    	    {
    	        /* 1:382: T__94 */
    	        mT__94(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 64:
    	    // NDDL/base/antlr/NDDL3.g:1:388: T__95
    	    {
    	        /* 1:388: T__95 */
    	        mT__95(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 65:
    	    // NDDL/base/antlr/NDDL3.g:1:394: T__96
    	    {
    	        /* 1:394: T__96 */
    	        mT__96(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 66:
    	    // NDDL/base/antlr/NDDL3.g:1:400: T__97
    	    {
    	        /* 1:400: T__97 */
    	        mT__97(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 67:
    	    // NDDL/base/antlr/NDDL3.g:1:406: T__98
    	    {
    	        /* 1:406: T__98 */
    	        mT__98(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 68:
    	    // NDDL/base/antlr/NDDL3.g:1:412: T__99
    	    {
    	        /* 1:412: T__99 */
    	        mT__99(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 69:
    	    // NDDL/base/antlr/NDDL3.g:1:418: T__100
    	    {
    	        /* 1:418: T__100 */
    	        mT__100(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 70:
    	    // NDDL/base/antlr/NDDL3.g:1:425: T__101
    	    {
    	        /* 1:425: T__101 */
    	        mT__101(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 71:
    	    // NDDL/base/antlr/NDDL3.g:1:432: T__102
    	    {
    	        /* 1:432: T__102 */
    	        mT__102(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 72:
    	    // NDDL/base/antlr/NDDL3.g:1:439: T__103
    	    {
    	        /* 1:439: T__103 */
    	        mT__103(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 73:
    	    // NDDL/base/antlr/NDDL3.g:1:446: T__104
    	    {
    	        /* 1:446: T__104 */
    	        mT__104(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 74:
    	    // NDDL/base/antlr/NDDL3.g:1:453: T__105
    	    {
    	        /* 1:453: T__105 */
    	        mT__105(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 75:
    	    // NDDL/base/antlr/NDDL3.g:1:460: T__106
    	    {
    	        /* 1:460: T__106 */
    	        mT__106(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 76:
    	    // NDDL/base/antlr/NDDL3.g:1:467: T__107
    	    {
    	        /* 1:467: T__107 */
    	        mT__107(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 77:
    	    // NDDL/base/antlr/NDDL3.g:1:474: T__108
    	    {
    	        /* 1:474: T__108 */
    	        mT__108(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 78:
    	    // NDDL/base/antlr/NDDL3.g:1:481: INCLUDE
    	    {
    	        /* 1:481: INCLUDE */
    	        mINCLUDE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 79:
    	    // NDDL/base/antlr/NDDL3.g:1:489: IDENT
    	    {
    	        /* 1:489: IDENT */
    	        mIDENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 80:
    	    // NDDL/base/antlr/NDDL3.g:1:495: STRING
    	    {
    	        /* 1:495: STRING */
    	        mSTRING(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 81:
    	    // NDDL/base/antlr/NDDL3.g:1:502: INT
    	    {
    	        /* 1:502: INT */
    	        mINT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 82:
    	    // NDDL/base/antlr/NDDL3.g:1:506: FLOAT
    	    {
    	        /* 1:506: FLOAT */
    	        mFLOAT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 83:
    	    // NDDL/base/antlr/NDDL3.g:1:512: COMMENT
    	    {
    	        /* 1:512: COMMENT */
    	        mCOMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 84:
    	    // NDDL/base/antlr/NDDL3.g:1:520: LINE_COMMENT
    	    {
    	        /* 1:520: LINE_COMMENT */
    	        mLINE_COMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 85:
    	    // NDDL/base/antlr/NDDL3.g:1:533: WS
    	    {
    	        /* 1:533: WS */
    	        mWS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
