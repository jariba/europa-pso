/** \file
 *  This C header file was generated by $ANTLR version 3.1.2
 *
 *     -  From the grammar source file : NDDL/base/antlr/NDDL3.g
 *     -                            On : 2010-11-29 23:01:42
 *     -                for the parser : NDDL3ParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser NDDL3Parser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pNDDL3Parser, which is returned from a call to NDDL3ParserNew().
 *
 * The methods in pNDDL3Parser are  as follows:
 *
 *  - NDDL3Parser_nddl_return      pNDDL3Parser->nddl(pNDDL3Parser)
 *  - NDDL3Parser_nddlStatement_return      pNDDL3Parser->nddlStatement(pNDDL3Parser)
 *  - NDDL3Parser_enumDefinition_return      pNDDL3Parser->enumDefinition(pNDDL3Parser)
 *  - NDDL3Parser_enumValues_return      pNDDL3Parser->enumValues(pNDDL3Parser)
 *  - NDDL3Parser_typeDefinition_return      pNDDL3Parser->typeDefinition(pNDDL3Parser)
 *  - NDDL3Parser_baseDomain_return      pNDDL3Parser->baseDomain(pNDDL3Parser)
 *  - NDDL3Parser_intervalBaseDomain_return      pNDDL3Parser->intervalBaseDomain(pNDDL3Parser)
 *  - NDDL3Parser_enumeratedBaseDomain_return      pNDDL3Parser->enumeratedBaseDomain(pNDDL3Parser)
 *  - NDDL3Parser_baseDomainValue_return      pNDDL3Parser->baseDomainValue(pNDDL3Parser)
 *  - NDDL3Parser_variableDeclarations_return      pNDDL3Parser->variableDeclarations(pNDDL3Parser)
 *  - NDDL3Parser_nameWithBaseDomain_return      pNDDL3Parser->nameWithBaseDomain(pNDDL3Parser)
 *  - NDDL3Parser_anyValue_return      pNDDL3Parser->anyValue(pNDDL3Parser)
 *  - NDDL3Parser_allocation_return      pNDDL3Parser->allocation(pNDDL3Parser)
 *  - NDDL3Parser_constructorInvocation_return      pNDDL3Parser->constructorInvocation(pNDDL3Parser)
 *  - NDDL3Parser_qualified_return      pNDDL3Parser->qualified(pNDDL3Parser)
 *  - NDDL3Parser_assignment_return      pNDDL3Parser->assignment(pNDDL3Parser)
 *  - NDDL3Parser_initializer_return      pNDDL3Parser->initializer(pNDDL3Parser)
 *  - NDDL3Parser_classDeclaration_return      pNDDL3Parser->classDeclaration(pNDDL3Parser)
 *  - NDDL3Parser_classBlock_return      pNDDL3Parser->classBlock(pNDDL3Parser)
 *  - NDDL3Parser_classStatement_return      pNDDL3Parser->classStatement(pNDDL3Parser)
 *  - NDDL3Parser_constructor_return      pNDDL3Parser->constructor(pNDDL3Parser)
 *  - NDDL3Parser_constructorBlock_return      pNDDL3Parser->constructorBlock(pNDDL3Parser)
 *  - NDDL3Parser_constructorStatement_return      pNDDL3Parser->constructorStatement(pNDDL3Parser)
 *  - NDDL3Parser_constructorParameterList_return      pNDDL3Parser->constructorParameterList(pNDDL3Parser)
 *  - NDDL3Parser_constructorParameters_return      pNDDL3Parser->constructorParameters(pNDDL3Parser)
 *  - NDDL3Parser_constructorParameter_return      pNDDL3Parser->constructorParameter(pNDDL3Parser)
 *  - NDDL3Parser_predicate_return      pNDDL3Parser->predicate(pNDDL3Parser)
 *  - NDDL3Parser_predicateBlock_return      pNDDL3Parser->predicateBlock(pNDDL3Parser)
 *  - NDDL3Parser_predicateStatement_return      pNDDL3Parser->predicateStatement(pNDDL3Parser)
 *  - NDDL3Parser_rule_return      pNDDL3Parser->rule(pNDDL3Parser)
 *  - NDDL3Parser_ruleBlock_return      pNDDL3Parser->ruleBlock(pNDDL3Parser)
 *  - NDDL3Parser_ruleStatement_return      pNDDL3Parser->ruleStatement(pNDDL3Parser)
 *  - NDDL3Parser_type_return      pNDDL3Parser->type(pNDDL3Parser)
 *  - NDDL3Parser_relation_return      pNDDL3Parser->relation(pNDDL3Parser)
 *  - NDDL3Parser_problemStmt_return      pNDDL3Parser->problemStmt(pNDDL3Parser)
 *  - NDDL3Parser_predicateArgumentList_return      pNDDL3Parser->predicateArgumentList(pNDDL3Parser)
 *  - NDDL3Parser_predicateArguments_return      pNDDL3Parser->predicateArguments(pNDDL3Parser)
 *  - NDDL3Parser_predicateArgument_return      pNDDL3Parser->predicateArgument(pNDDL3Parser)
 *  - NDDL3Parser_constraintInstantiation_return      pNDDL3Parser->constraintInstantiation(pNDDL3Parser)
 *  - NDDL3Parser_enforceStatement_return      pNDDL3Parser->enforceStatement(pNDDL3Parser)
 *  - NDDL3Parser_violationMsg_return      pNDDL3Parser->violationMsg(pNDDL3Parser)
 *  - NDDL3Parser_cexpression_return      pNDDL3Parser->cexpression(pNDDL3Parser)
 *  - NDDL3Parser_cbooleanOrExpression_return      pNDDL3Parser->cbooleanOrExpression(pNDDL3Parser)
 *  - NDDL3Parser_cbooleanAndExpression_return      pNDDL3Parser->cbooleanAndExpression(pNDDL3Parser)
 *  - NDDL3Parser_crelationalExpression_return      pNDDL3Parser->crelationalExpression(pNDDL3Parser)
 *  - NDDL3Parser_cadditiveExpression_return      pNDDL3Parser->cadditiveExpression(pNDDL3Parser)
 *  - NDDL3Parser_cmultiplicativeExpression_return      pNDDL3Parser->cmultiplicativeExpression(pNDDL3Parser)
 *  - NDDL3Parser_cprimary_return      pNDDL3Parser->cprimary(pNDDL3Parser)
 *  - NDDL3Parser_cexpressionList_return      pNDDL3Parser->cexpressionList(pNDDL3Parser)
 *  - NDDL3Parser_superInvocation_return      pNDDL3Parser->superInvocation(pNDDL3Parser)
 *  - NDDL3Parser_variableArgumentList_return      pNDDL3Parser->variableArgumentList(pNDDL3Parser)
 *  - NDDL3Parser_variableArguments_return      pNDDL3Parser->variableArguments(pNDDL3Parser)
 *  - NDDL3Parser_variableArgument_return      pNDDL3Parser->variableArgument(pNDDL3Parser)
 *  - NDDL3Parser_typeArgumentList_return      pNDDL3Parser->typeArgumentList(pNDDL3Parser)
 *  - NDDL3Parser_typeArguments_return      pNDDL3Parser->typeArguments(pNDDL3Parser)
 *  - NDDL3Parser_typeArgument_return      pNDDL3Parser->typeArgument(pNDDL3Parser)
 *  - NDDL3Parser_flowControl_return      pNDDL3Parser->flowControl(pNDDL3Parser)
 *  - NDDL3Parser_guardExpression_return      pNDDL3Parser->guardExpression(pNDDL3Parser)
 *  - NDDL3Parser_allocationStmt_return      pNDDL3Parser->allocationStmt(pNDDL3Parser)
 *  - NDDL3Parser_temporalRelation_return      pNDDL3Parser->temporalRelation(pNDDL3Parser)
 *  - NDDL3Parser_literalValue_return      pNDDL3Parser->literalValue(pNDDL3Parser)
 *  - NDDL3Parser_booleanLiteral_return      pNDDL3Parser->booleanLiteral(pNDDL3Parser)
 *  - NDDL3Parser_numericLiteral_return      pNDDL3Parser->numericLiteral(pNDDL3Parser)
 *  - NDDL3Parser_stringLiteral_return      pNDDL3Parser->stringLiteral(pNDDL3Parser)
 *  - NDDL3Parser_methodInvocation_return      pNDDL3Parser->methodInvocation(pNDDL3Parser)
 *  - NDDL3Parser_methodName_return      pNDDL3Parser->methodName(pNDDL3Parser)
 *  - NDDL3Parser_noopstatement_return      pNDDL3Parser->noopstatement(pNDDL3Parser)
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_NDDL3Parser_H
#define _NDDL3Parser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "NddlInterpreter.hh"


using namespace EUROPA;

// Forward declaration so that we can use this function in apifuncs
typedef struct NDDL3Parser_Ctx_struct NDDL3Parser, * pNDDL3Parser;
static void newNDDL3ParserFree(pNDDL3Parser ctx);

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct NDDL3Parser_Ctx_struct NDDL3Parser, * pNDDL3Parser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct NDDL3Parser_nddl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_nddl_return;

typedef struct NDDL3Parser_nddlStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_nddlStatement_return;

typedef struct NDDL3Parser_enumDefinition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_enumDefinition_return;

typedef struct NDDL3Parser_enumValues_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_enumValues_return;

typedef struct NDDL3Parser_typeDefinition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_typeDefinition_return;

typedef struct NDDL3Parser_baseDomain_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_baseDomain_return;

typedef struct NDDL3Parser_intervalBaseDomain_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_intervalBaseDomain_return;

typedef struct NDDL3Parser_enumeratedBaseDomain_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_enumeratedBaseDomain_return;

typedef struct NDDL3Parser_baseDomainValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_baseDomainValue_return;

typedef struct NDDL3Parser_variableDeclarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_variableDeclarations_return;

typedef struct NDDL3Parser_nameWithBaseDomain_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_nameWithBaseDomain_return;

typedef struct NDDL3Parser_anyValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_anyValue_return;

typedef struct NDDL3Parser_allocation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_allocation_return;

typedef struct NDDL3Parser_constructorInvocation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_constructorInvocation_return;

typedef struct NDDL3Parser_qualified_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_qualified_return;

typedef struct NDDL3Parser_assignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_assignment_return;

typedef struct NDDL3Parser_initializer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_initializer_return;

typedef struct NDDL3Parser_classDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_classDeclaration_return;

typedef struct NDDL3Parser_classBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_classBlock_return;

typedef struct NDDL3Parser_classStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_classStatement_return;

typedef struct NDDL3Parser_constructor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_constructor_return;

typedef struct NDDL3Parser_constructorBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_constructorBlock_return;

typedef struct NDDL3Parser_constructorStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_constructorStatement_return;

typedef struct NDDL3Parser_constructorParameterList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_constructorParameterList_return;

typedef struct NDDL3Parser_constructorParameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_constructorParameters_return;

typedef struct NDDL3Parser_constructorParameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_constructorParameter_return;

typedef struct NDDL3Parser_predicate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_predicate_return;

typedef struct NDDL3Parser_predicateBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_predicateBlock_return;

typedef struct NDDL3Parser_predicateStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_predicateStatement_return;

typedef struct NDDL3Parser_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_rule_return;

typedef struct NDDL3Parser_ruleBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_ruleBlock_return;

typedef struct NDDL3Parser_ruleStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_ruleStatement_return;

typedef struct NDDL3Parser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_type_return;

typedef struct NDDL3Parser_relation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_relation_return;

typedef struct NDDL3Parser_problemStmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_problemStmt_return;

typedef struct NDDL3Parser_predicateArgumentList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_predicateArgumentList_return;

typedef struct NDDL3Parser_predicateArguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_predicateArguments_return;

typedef struct NDDL3Parser_predicateArgument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_predicateArgument_return;

typedef struct NDDL3Parser_constraintInstantiation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_constraintInstantiation_return;

typedef struct NDDL3Parser_enforceStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_enforceStatement_return;

typedef struct NDDL3Parser_violationMsg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_violationMsg_return;

typedef struct NDDL3Parser_cexpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_cexpression_return;

typedef struct NDDL3Parser_cbooleanOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_cbooleanOrExpression_return;

typedef struct NDDL3Parser_cbooleanAndExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_cbooleanAndExpression_return;

typedef struct NDDL3Parser_crelationalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_crelationalExpression_return;

typedef struct NDDL3Parser_cadditiveExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_cadditiveExpression_return;

typedef struct NDDL3Parser_cmultiplicativeExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_cmultiplicativeExpression_return;

typedef struct NDDL3Parser_cprimary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_cprimary_return;

typedef struct NDDL3Parser_cexpressionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_cexpressionList_return;

typedef struct NDDL3Parser_superInvocation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_superInvocation_return;

typedef struct NDDL3Parser_variableArgumentList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_variableArgumentList_return;

typedef struct NDDL3Parser_variableArguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_variableArguments_return;

typedef struct NDDL3Parser_variableArgument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_variableArgument_return;

typedef struct NDDL3Parser_typeArgumentList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_typeArgumentList_return;

typedef struct NDDL3Parser_typeArguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_typeArguments_return;

typedef struct NDDL3Parser_typeArgument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_typeArgument_return;

typedef struct NDDL3Parser_flowControl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_flowControl_return;

typedef struct NDDL3Parser_guardExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_guardExpression_return;

typedef struct NDDL3Parser_allocationStmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_allocationStmt_return;

typedef struct NDDL3Parser_temporalRelation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_temporalRelation_return;

typedef struct NDDL3Parser_literalValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_literalValue_return;

typedef struct NDDL3Parser_booleanLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_booleanLiteral_return;

typedef struct NDDL3Parser_numericLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_numericLiteral_return;

typedef struct NDDL3Parser_stringLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_stringLiteral_return;

typedef struct NDDL3Parser_methodInvocation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_methodInvocation_return;

typedef struct NDDL3Parser_methodName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_methodName_return;

typedef struct NDDL3Parser_noopstatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    NDDL3Parser_noopstatement_return;



/** Context tracking structure for NDDL3Parser
 */
struct NDDL3Parser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     NDDL3Parser_nddl_return (*nddl)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_nddlStatement_return (*nddlStatement)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_enumDefinition_return (*enumDefinition)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_enumValues_return (*enumValues)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_typeDefinition_return (*typeDefinition)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_baseDomain_return (*baseDomain)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_intervalBaseDomain_return (*intervalBaseDomain)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_enumeratedBaseDomain_return (*enumeratedBaseDomain)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_baseDomainValue_return (*baseDomainValue)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_variableDeclarations_return (*variableDeclarations)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_nameWithBaseDomain_return (*nameWithBaseDomain)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_anyValue_return (*anyValue)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_allocation_return (*allocation)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_constructorInvocation_return (*constructorInvocation)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_qualified_return (*qualified)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_assignment_return (*assignment)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_initializer_return (*initializer)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_classDeclaration_return (*classDeclaration)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_classBlock_return (*classBlock)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_classStatement_return (*classStatement)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_constructor_return (*constructor)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_constructorBlock_return (*constructorBlock)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_constructorStatement_return (*constructorStatement)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_constructorParameterList_return (*constructorParameterList)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_constructorParameters_return (*constructorParameters)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_constructorParameter_return (*constructorParameter)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_predicate_return (*predicate)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_predicateBlock_return (*predicateBlock)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_predicateStatement_return (*predicateStatement)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_rule_return (*rule)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_ruleBlock_return (*ruleBlock)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_ruleStatement_return (*ruleStatement)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_type_return (*type)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_relation_return (*relation)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_problemStmt_return (*problemStmt)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_predicateArgumentList_return (*predicateArgumentList)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_predicateArguments_return (*predicateArguments)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_predicateArgument_return (*predicateArgument)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_constraintInstantiation_return (*constraintInstantiation)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_enforceStatement_return (*enforceStatement)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_violationMsg_return (*violationMsg)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_cexpression_return (*cexpression)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_cbooleanOrExpression_return (*cbooleanOrExpression)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_cbooleanAndExpression_return (*cbooleanAndExpression)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_crelationalExpression_return (*crelationalExpression)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_cadditiveExpression_return (*cadditiveExpression)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_cmultiplicativeExpression_return (*cmultiplicativeExpression)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_cprimary_return (*cprimary)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_cexpressionList_return (*cexpressionList)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_superInvocation_return (*superInvocation)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_variableArgumentList_return (*variableArgumentList)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_variableArguments_return (*variableArguments)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_variableArgument_return (*variableArgument)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_typeArgumentList_return (*typeArgumentList)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_typeArguments_return (*typeArguments)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_typeArgument_return (*typeArgument)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_flowControl_return (*flowControl)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_guardExpression_return (*guardExpression)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_allocationStmt_return (*allocationStmt)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_temporalRelation_return (*temporalRelation)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_literalValue_return (*literalValue)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_booleanLiteral_return (*booleanLiteral)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_numericLiteral_return (*numericLiteral)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_stringLiteral_return (*stringLiteral)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_methodInvocation_return (*methodInvocation)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_methodName_return (*methodName)	(struct NDDL3Parser_Ctx_struct * ctx);
     NDDL3Parser_noopstatement_return (*noopstatement)	(struct NDDL3Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1_NDDL3)	(struct NDDL3Parser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred2_NDDL3)	(struct NDDL3Parser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct NDDL3Parser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */

        std::vector<PSLanguageException>* parserErrors;

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pNDDL3Parser NDDL3ParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pNDDL3Parser NDDL3ParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EXPONENT      28
#define FLOAT_SUFFIX      29
#define CONSTRUCTOR_INVOCATION      6
#define OCTAL_ESC      24
#define EOF      -1
#define T__93      93
#define T__94      94
#define T__91      91
#define T__92      92
#define T__90      90
#define INCLUDE      21
#define PREDICATE_INSTANCE      9
#define COMMENT      30
#define T__99      99
#define T__98      98
#define T__97      97
#define T__96      96
#define T__95      95
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define LINE_COMMENT      31
#define INT      17
#define T__85      85
#define T__84      84
#define T__87      87
#define METHOD_CALL      7
#define T__86      86
#define T__89      89
#define T__88      88
#define WS      20
#define T__71      71
#define T__72      72
#define VARIABLE      11
#define T__70      70
#define T__76      76
#define T__75      75
#define FUNCTION_CALL      14
#define T__74      74
#define T__73      73
#define CONSTRUCTOR      5
#define T__79      79
#define T__78      78
#define T__77      77
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define T__65      65
#define INT_SUFFIX      27
#define T__62      62
#define T__63      63
#define FLOAT      18
#define TOKEN_RELATION      10
#define T__61      61
#define T__60      60
#define EXPRESSION_ENFORCE      12
#define T__55      55
#define ESCAPE_SEQUENCE      22
#define T__56      56
#define T__57      57
#define T__58      58
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__59      59
#define T__103      103
#define T__104      104
#define T__105      105
#define IDENT      16
#define DIGIT      26
#define T__50      50
#define T__42      42
#define T__43      43
#define T__40      40
#define T__41      41
#define T__46      46
#define T__47      47
#define T__44      44
#define T__45      45
#define T__48      48
#define T__49      49
#define UNICODE_ESC      23
#define HEX_DIGIT      25
#define T__102      102
#define T__101      101
#define T__100      100
#define T__32      32
#define T__33      33
#define T__34      34
#define T__35      35
#define EXPRESSION_RETURN      13
#define T__36      36
#define CLOSE      15
#define T__37      37
#define T__38      38
#define NDDL      8
#define T__39      39
#define CONSTRAINT_INSTANTIATION      4
#define STRING      19
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for NDDL3Parser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
