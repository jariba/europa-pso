/** \file
 *  This C source file was generated by $ANTLR version 3.1.2
 *
 *     -  From the grammar source file : NDDL/base/antlr/NDDL3.g
 *     -                            On : 2011-08-23 12:07:10
 *     -                for the parser : NDDL3ParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "NDDL3Parser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pNDDL3Parser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pNDDL3Parser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pNDDL3Parser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   NDDL3ParserTokenNames[105+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "CONSTRAINT_INSTANTIATION",
        (pANTLR3_UINT8) "CONSTRUCTOR",
        (pANTLR3_UINT8) "CONSTRUCTOR_INVOCATION",
        (pANTLR3_UINT8) "METHOD_CALL",
        (pANTLR3_UINT8) "NDDL",
        (pANTLR3_UINT8) "PREDICATE_INSTANCE",
        (pANTLR3_UINT8) "TOKEN_RELATION",
        (pANTLR3_UINT8) "VARIABLE",
        (pANTLR3_UINT8) "EXPRESSION_ENFORCE",
        (pANTLR3_UINT8) "EXPRESSION_RETURN",
        (pANTLR3_UINT8) "FUNCTION_CALL",
        (pANTLR3_UINT8) "CLOSE",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "INT",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "INCLUDE",
        (pANTLR3_UINT8) "ESCAPE_SEQUENCE",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "INT_SUFFIX",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT_SUFFIX",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "'enum'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "'typedef'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'filter'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'class'",
        (pANTLR3_UINT8) "'extends'",
        (pANTLR3_UINT8) "'predicate'",
        (pANTLR3_UINT8) "'action'",
        (pANTLR3_UINT8) "'::'",
        (pANTLR3_UINT8) "'int'",
        (pANTLR3_UINT8) "'float'",
        (pANTLR3_UINT8) "'bool'",
        (pANTLR3_UINT8) "'string'",
        (pANTLR3_UINT8) "'rejectable'",
        (pANTLR3_UINT8) "'goal'",
        (pANTLR3_UINT8) "'fact'",
        (pANTLR3_UINT8) "'condition'",
        (pANTLR3_UINT8) "'effect'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'enforce'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'super'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'foreach'",
        (pANTLR3_UINT8) "'after'",
        (pANTLR3_UINT8) "'any'",
        (pANTLR3_UINT8) "'before'",
        (pANTLR3_UINT8) "'contained_by'",
        (pANTLR3_UINT8) "'contains'",
        (pANTLR3_UINT8) "'contains_end'",
        (pANTLR3_UINT8) "'contains_start'",
        (pANTLR3_UINT8) "'ends'",
        (pANTLR3_UINT8) "'ends_after'",
        (pANTLR3_UINT8) "'ends_after_start'",
        (pANTLR3_UINT8) "'ends_before'",
        (pANTLR3_UINT8) "'ends_during'",
        (pANTLR3_UINT8) "'equal'",
        (pANTLR3_UINT8) "'equals'",
        (pANTLR3_UINT8) "'meets'",
        (pANTLR3_UINT8) "'met_by'",
        (pANTLR3_UINT8) "'parallels'",
        (pANTLR3_UINT8) "'paralleled_by'",
        (pANTLR3_UINT8) "'starts'",
        (pANTLR3_UINT8) "'starts_after'",
        (pANTLR3_UINT8) "'starts_before'",
        (pANTLR3_UINT8) "'starts_before_end'",
        (pANTLR3_UINT8) "'starts_during'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'",
        (pANTLR3_UINT8) "'inf'",
        (pANTLR3_UINT8) "'inff'",
        (pANTLR3_UINT8) "'-inf'",
        (pANTLR3_UINT8) "'-inff'",
        (pANTLR3_UINT8) "'close'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static NDDL3Parser_nddl_return	nddl    (pNDDL3Parser ctx);
static NDDL3Parser_nddlStatement_return	nddlStatement    (pNDDL3Parser ctx);
static NDDL3Parser_enumDefinition_return	enumDefinition    (pNDDL3Parser ctx);
static NDDL3Parser_enumValues_return	enumValues    (pNDDL3Parser ctx);
static NDDL3Parser_typeDefinition_return	typeDefinition    (pNDDL3Parser ctx);
static NDDL3Parser_baseDomain_return	baseDomain    (pNDDL3Parser ctx);
static NDDL3Parser_intervalBaseDomain_return	intervalBaseDomain    (pNDDL3Parser ctx);
static NDDL3Parser_enumeratedBaseDomain_return	enumeratedBaseDomain    (pNDDL3Parser ctx);
static NDDL3Parser_baseDomainValue_return	baseDomainValue    (pNDDL3Parser ctx);
static NDDL3Parser_variableDeclarations_return	variableDeclarations    (pNDDL3Parser ctx);
static NDDL3Parser_nameWithBaseDomain_return	nameWithBaseDomain    (pNDDL3Parser ctx);
static NDDL3Parser_anyValue_return	anyValue    (pNDDL3Parser ctx);
static NDDL3Parser_allocation_return	allocation    (pNDDL3Parser ctx);
static NDDL3Parser_constructorInvocation_return	constructorInvocation    (pNDDL3Parser ctx);
static NDDL3Parser_qualified_return	qualified    (pNDDL3Parser ctx);
static NDDL3Parser_assignment_return	assignment    (pNDDL3Parser ctx);
static NDDL3Parser_initializer_return	initializer    (pNDDL3Parser ctx);
static NDDL3Parser_classDeclaration_return	classDeclaration    (pNDDL3Parser ctx);
static NDDL3Parser_classBlock_return	classBlock    (pNDDL3Parser ctx);
static NDDL3Parser_classStatement_return	classStatement    (pNDDL3Parser ctx);
static NDDL3Parser_constructor_return	constructor    (pNDDL3Parser ctx);
static NDDL3Parser_constructorBlock_return	constructorBlock    (pNDDL3Parser ctx);
static NDDL3Parser_constructorStatement_return	constructorStatement    (pNDDL3Parser ctx);
static NDDL3Parser_constructorParameterList_return	constructorParameterList    (pNDDL3Parser ctx);
static NDDL3Parser_constructorParameters_return	constructorParameters    (pNDDL3Parser ctx);
static NDDL3Parser_constructorParameter_return	constructorParameter    (pNDDL3Parser ctx);
static NDDL3Parser_tokenType_return	tokenType    (pNDDL3Parser ctx);
static NDDL3Parser_tokenBlock_return	tokenBlock    (pNDDL3Parser ctx);
static NDDL3Parser_tokenStatement_return	tokenStatement    (pNDDL3Parser ctx);
static NDDL3Parser_rule_return	rule    (pNDDL3Parser ctx);
static NDDL3Parser_ruleBlock_return	ruleBlock    (pNDDL3Parser ctx);
static NDDL3Parser_ruleStatement_return	ruleStatement    (pNDDL3Parser ctx);
static NDDL3Parser_type_return	type    (pNDDL3Parser ctx);
static NDDL3Parser_relation_return	relation    (pNDDL3Parser ctx);
static NDDL3Parser_problemStmt_return	problemStmt    (pNDDL3Parser ctx);
static NDDL3Parser_tokenInstanceList_return	tokenInstanceList    (pNDDL3Parser ctx);
static NDDL3Parser_tokenInstances_return	tokenInstances    (pNDDL3Parser ctx);
static NDDL3Parser_tokenInstance_return	tokenInstance    (pNDDL3Parser ctx);
static NDDL3Parser_tokenAnnotation_return	tokenAnnotation    (pNDDL3Parser ctx);
static NDDL3Parser_constraintInstantiation_return	constraintInstantiation    (pNDDL3Parser ctx);
static NDDL3Parser_enforceStatement_return	enforceStatement    (pNDDL3Parser ctx);
static NDDL3Parser_violationMsg_return	violationMsg    (pNDDL3Parser ctx);
static NDDL3Parser_cexpression_return	cexpression    (pNDDL3Parser ctx);
static NDDL3Parser_cbooleanOrExpression_return	cbooleanOrExpression    (pNDDL3Parser ctx);
static NDDL3Parser_cbooleanAndExpression_return	cbooleanAndExpression    (pNDDL3Parser ctx);
static NDDL3Parser_crelationalExpression_return	crelationalExpression    (pNDDL3Parser ctx);
static NDDL3Parser_cadditiveExpression_return	cadditiveExpression    (pNDDL3Parser ctx);
static NDDL3Parser_cmultiplicativeExpression_return	cmultiplicativeExpression    (pNDDL3Parser ctx);
static NDDL3Parser_cprimary_return	cprimary    (pNDDL3Parser ctx);
static NDDL3Parser_cexpressionList_return	cexpressionList    (pNDDL3Parser ctx);
static NDDL3Parser_superInvocation_return	superInvocation    (pNDDL3Parser ctx);
static NDDL3Parser_variableArgumentList_return	variableArgumentList    (pNDDL3Parser ctx);
static NDDL3Parser_variableArguments_return	variableArguments    (pNDDL3Parser ctx);
static NDDL3Parser_variableArgument_return	variableArgument    (pNDDL3Parser ctx);
static NDDL3Parser_typeArgumentList_return	typeArgumentList    (pNDDL3Parser ctx);
static NDDL3Parser_typeArguments_return	typeArguments    (pNDDL3Parser ctx);
static NDDL3Parser_typeArgument_return	typeArgument    (pNDDL3Parser ctx);
static NDDL3Parser_flowControl_return	flowControl    (pNDDL3Parser ctx);
static NDDL3Parser_guardExpression_return	guardExpression    (pNDDL3Parser ctx);
static NDDL3Parser_allocationStmt_return	allocationStmt    (pNDDL3Parser ctx);
static NDDL3Parser_temporalRelation_return	temporalRelation    (pNDDL3Parser ctx);
static NDDL3Parser_literalValue_return	literalValue    (pNDDL3Parser ctx);
static NDDL3Parser_booleanLiteral_return	booleanLiteral    (pNDDL3Parser ctx);
static NDDL3Parser_numericLiteral_return	numericLiteral    (pNDDL3Parser ctx);
static NDDL3Parser_stringLiteral_return	stringLiteral    (pNDDL3Parser ctx);
static NDDL3Parser_methodInvocation_return	methodInvocation    (pNDDL3Parser ctx);
static NDDL3Parser_methodName_return	methodName    (pNDDL3Parser ctx);
static NDDL3Parser_noopstatement_return	noopstatement    (pNDDL3Parser ctx);
static ANTLR3_BOOLEAN	synpred1_NDDL3    (pNDDL3Parser ctx);
static ANTLR3_BOOLEAN	synpred2_NDDL3    (pNDDL3Parser ctx);
static void	NDDL3ParserFree(pNDDL3Parser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "NDDL/base/antlr/NDDL3.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new NDDL3Parser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pNDDL3Parser
NDDL3ParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return NDDL3ParserNewSSD(instream, NULL);
}

/** \brief Create a new NDDL3Parser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pNDDL3Parser
NDDL3ParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pNDDL3Parser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pNDDL3Parser) ANTLR3_CALLOC(1, sizeof(NDDL3Parser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in NDDL3Parser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our NDDL3Parser interface
     */
    ctx->nddl	= nddl;
    ctx->nddlStatement	= nddlStatement;
    ctx->enumDefinition	= enumDefinition;
    ctx->enumValues	= enumValues;
    ctx->typeDefinition	= typeDefinition;
    ctx->baseDomain	= baseDomain;
    ctx->intervalBaseDomain	= intervalBaseDomain;
    ctx->enumeratedBaseDomain	= enumeratedBaseDomain;
    ctx->baseDomainValue	= baseDomainValue;
    ctx->variableDeclarations	= variableDeclarations;
    ctx->nameWithBaseDomain	= nameWithBaseDomain;
    ctx->anyValue	= anyValue;
    ctx->allocation	= allocation;
    ctx->constructorInvocation	= constructorInvocation;
    ctx->qualified	= qualified;
    ctx->assignment	= assignment;
    ctx->initializer	= initializer;
    ctx->classDeclaration	= classDeclaration;
    ctx->classBlock	= classBlock;
    ctx->classStatement	= classStatement;
    ctx->constructor	= constructor;
    ctx->constructorBlock	= constructorBlock;
    ctx->constructorStatement	= constructorStatement;
    ctx->constructorParameterList	= constructorParameterList;
    ctx->constructorParameters	= constructorParameters;
    ctx->constructorParameter	= constructorParameter;
    ctx->tokenType	= tokenType;
    ctx->tokenBlock	= tokenBlock;
    ctx->tokenStatement	= tokenStatement;
    ctx->rule	= rule;
    ctx->ruleBlock	= ruleBlock;
    ctx->ruleStatement	= ruleStatement;
    ctx->type	= type;
    ctx->relation	= relation;
    ctx->problemStmt	= problemStmt;
    ctx->tokenInstanceList	= tokenInstanceList;
    ctx->tokenInstances	= tokenInstances;
    ctx->tokenInstance	= tokenInstance;
    ctx->tokenAnnotation	= tokenAnnotation;
    ctx->constraintInstantiation	= constraintInstantiation;
    ctx->enforceStatement	= enforceStatement;
    ctx->violationMsg	= violationMsg;
    ctx->cexpression	= cexpression;
    ctx->cbooleanOrExpression	= cbooleanOrExpression;
    ctx->cbooleanAndExpression	= cbooleanAndExpression;
    ctx->crelationalExpression	= crelationalExpression;
    ctx->cadditiveExpression	= cadditiveExpression;
    ctx->cmultiplicativeExpression	= cmultiplicativeExpression;
    ctx->cprimary	= cprimary;
    ctx->cexpressionList	= cexpressionList;
    ctx->superInvocation	= superInvocation;
    ctx->variableArgumentList	= variableArgumentList;
    ctx->variableArguments	= variableArguments;
    ctx->variableArgument	= variableArgument;
    ctx->typeArgumentList	= typeArgumentList;
    ctx->typeArguments	= typeArguments;
    ctx->typeArgument	= typeArgument;
    ctx->flowControl	= flowControl;
    ctx->guardExpression	= guardExpression;
    ctx->allocationStmt	= allocationStmt;
    ctx->temporalRelation	= temporalRelation;
    ctx->literalValue	= literalValue;
    ctx->booleanLiteral	= booleanLiteral;
    ctx->numericLiteral	= numericLiteral;
    ctx->stringLiteral	= stringLiteral;
    ctx->methodInvocation	= methodInvocation;
    ctx->methodName	= methodName;
    ctx->noopstatement	= noopstatement;
    ctx->synpred1_NDDL3	= synpred1_NDDL3;
    ctx->synpred2_NDDL3	= synpred2_NDDL3;
    ctx->free			= NDDL3ParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

        RECOGNIZER->displayRecognitionError = reportParserError;
        ctx->parserErrors = new std::vector<PSLanguageException>;
        ctx->free = newNDDL3ParserFree;
        // This is needed so that we can get to the CTX from reportParseError
        // Thanks to http://www.antlr.org/pipermail/antlr-interest/2009-May/034567.html
        // for the tip
        PARSER->super = (void *)ctx;

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = NDDL3ParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 NDDL3ParserFree(pNDDL3Parser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return NDDL3ParserTokenNames; 
}


    // Declare it in members, so that we can refer to the original Free
    static void newNDDL3ParserFree(pNDDL3Parser ctx) {
       delete ctx->parserErrors;
       NDDL3ParserFree(ctx);
    }

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_nddlStatement_in_nddl184  */
static	ANTLR3_BITWORD FOLLOW_nddlStatement_in_nddl184_bits[]	= { ANTLR3_UINT64_LIT(0x8FE13373000F0002), ANTLR3_UINT64_LIT(0x00001FFFFFFF8100) };
static  ANTLR3_BITSET_LIST FOLLOW_nddlStatement_in_nddl184	= { FOLLOW_nddlStatement_in_nddl184_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeDefinition_in_nddlStatement221  */
static	ANTLR3_BITWORD FOLLOW_typeDefinition_in_nddlStatement221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_typeDefinition_in_nddlStatement221	= { FOLLOW_typeDefinition_in_nddlStatement221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumDefinition_in_nddlStatement231  */
static	ANTLR3_BITWORD FOLLOW_enumDefinition_in_nddlStatement231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_enumDefinition_in_nddlStatement231	= { FOLLOW_enumDefinition_in_nddlStatement231_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarations_in_nddlStatement241  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarations_in_nddlStatement241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarations_in_nddlStatement241	= { FOLLOW_variableDeclarations_in_nddlStatement241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_in_nddlStatement251  */
static	ANTLR3_BITWORD FOLLOW_assignment_in_nddlStatement251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_in_nddlStatement251	= { FOLLOW_assignment_in_nddlStatement251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constraintInstantiation_in_nddlStatement261  */
static	ANTLR3_BITWORD FOLLOW_constraintInstantiation_in_nddlStatement261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constraintInstantiation_in_nddlStatement261	= { FOLLOW_constraintInstantiation_in_nddlStatement261_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_classDeclaration_in_nddlStatement271  */
static	ANTLR3_BITWORD FOLLOW_classDeclaration_in_nddlStatement271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_classDeclaration_in_nddlStatement271	= { FOLLOW_classDeclaration_in_nddlStatement271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_allocationStmt_in_nddlStatement281  */
static	ANTLR3_BITWORD FOLLOW_allocationStmt_in_nddlStatement281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_allocationStmt_in_nddlStatement281	= { FOLLOW_allocationStmt_in_nddlStatement281_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_rule_in_nddlStatement291  */
static	ANTLR3_BITWORD FOLLOW_rule_in_nddlStatement291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_rule_in_nddlStatement291	= { FOLLOW_rule_in_nddlStatement291_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_problemStmt_in_nddlStatement301  */
static	ANTLR3_BITWORD FOLLOW_problemStmt_in_nddlStatement301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_problemStmt_in_nddlStatement301	= { FOLLOW_problemStmt_in_nddlStatement301_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_nddlStatement311  */
static	ANTLR3_BITWORD FOLLOW_relation_in_nddlStatement311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_nddlStatement311	= { FOLLOW_relation_in_nddlStatement311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_methodInvocation_in_nddlStatement321  */
static	ANTLR3_BITWORD FOLLOW_methodInvocation_in_nddlStatement321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_methodInvocation_in_nddlStatement321	= { FOLLOW_methodInvocation_in_nddlStatement321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noopstatement_in_nddlStatement331  */
static	ANTLR3_BITWORD FOLLOW_noopstatement_in_nddlStatement331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noopstatement_in_nddlStatement331	= { FOLLOW_noopstatement_in_nddlStatement331_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_32_in_enumDefinition348  */
static	ANTLR3_BITWORD FOLLOW_32_in_enumDefinition348_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_32_in_enumDefinition348	= { FOLLOW_32_in_enumDefinition348_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_enumDefinition351  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_enumDefinition351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_enumDefinition351	= { FOLLOW_IDENT_in_enumDefinition351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumValues_in_enumDefinition353  */
static	ANTLR3_BITWORD FOLLOW_enumValues_in_enumDefinition353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_enumValues_in_enumDefinition353	= { FOLLOW_enumValues_in_enumDefinition353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_enumValues373  */
static	ANTLR3_BITWORD FOLLOW_33_in_enumValues373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_enumValues373	= { FOLLOW_33_in_enumValues373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_enumValues376  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_enumValues376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_enumValues376	= { FOLLOW_IDENT_in_enumValues376_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_enumValues379  */
static	ANTLR3_BITWORD FOLLOW_34_in_enumValues379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_enumValues379	= { FOLLOW_34_in_enumValues379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_enumValues382  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_enumValues382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_enumValues382	= { FOLLOW_IDENT_in_enumValues382_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_enumValues386  */
static	ANTLR3_BITWORD FOLLOW_35_in_enumValues386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_enumValues386	= { FOLLOW_35_in_enumValues386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_typeDefinition417  */
static	ANTLR3_BITWORD FOLLOW_36_in_typeDefinition417_bits[]	= { ANTLR3_UINT64_LIT(0x01E0010000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_typeDefinition417	= { FOLLOW_36_in_typeDefinition417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_typeDefinition419  */
static	ANTLR3_BITWORD FOLLOW_type_in_typeDefinition419_bits[]	= { ANTLR3_UINT64_LIT(0x0000004200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_typeDefinition419	= { FOLLOW_type_in_typeDefinition419_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_baseDomain_in_typeDefinition421  */
static	ANTLR3_BITWORD FOLLOW_baseDomain_in_typeDefinition421_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_baseDomain_in_typeDefinition421	= { FOLLOW_baseDomain_in_typeDefinition421_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_typeDefinition423  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_typeDefinition423_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_typeDefinition423	= { FOLLOW_IDENT_in_typeDefinition423_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_typeDefinition425  */
static	ANTLR3_BITWORD FOLLOW_37_in_typeDefinition425_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_typeDefinition425	= { FOLLOW_37_in_typeDefinition425_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_intervalBaseDomain_in_baseDomain463  */
static	ANTLR3_BITWORD FOLLOW_intervalBaseDomain_in_baseDomain463_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_intervalBaseDomain_in_baseDomain463	= { FOLLOW_intervalBaseDomain_in_baseDomain463_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumeratedBaseDomain_in_baseDomain473  */
static	ANTLR3_BITWORD FOLLOW_enumeratedBaseDomain_in_baseDomain473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_enumeratedBaseDomain_in_baseDomain473	= { FOLLOW_enumeratedBaseDomain_in_baseDomain473_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_intervalBaseDomain492  */
static	ANTLR3_BITWORD FOLLOW_38_in_intervalBaseDomain492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000060000), ANTLR3_UINT64_LIT(0x00000F0000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_intervalBaseDomain492	= { FOLLOW_38_in_intervalBaseDomain492_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numericLiteral_in_intervalBaseDomain495  */
static	ANTLR3_BITWORD FOLLOW_numericLiteral_in_intervalBaseDomain495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400060000), ANTLR3_UINT64_LIT(0x00000F0000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_numericLiteral_in_intervalBaseDomain495	= { FOLLOW_numericLiteral_in_intervalBaseDomain495_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_intervalBaseDomain498  */
static	ANTLR3_BITWORD FOLLOW_34_in_intervalBaseDomain498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000060000), ANTLR3_UINT64_LIT(0x00000F0000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_intervalBaseDomain498	= { FOLLOW_34_in_intervalBaseDomain498_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numericLiteral_in_intervalBaseDomain503  */
static	ANTLR3_BITWORD FOLLOW_numericLiteral_in_intervalBaseDomain503_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_numericLiteral_in_intervalBaseDomain503	= { FOLLOW_numericLiteral_in_intervalBaseDomain503_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_intervalBaseDomain505  */
static	ANTLR3_BITWORD FOLLOW_39_in_intervalBaseDomain505_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_intervalBaseDomain505	= { FOLLOW_39_in_intervalBaseDomain505_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_enumeratedBaseDomain525  */
static	ANTLR3_BITWORD FOLLOW_33_in_enumeratedBaseDomain525_bits[]	= { ANTLR3_UINT64_LIT(0x00002000000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_enumeratedBaseDomain525	= { FOLLOW_33_in_enumeratedBaseDomain525_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_baseDomainValue_in_enumeratedBaseDomain528  */
static	ANTLR3_BITWORD FOLLOW_baseDomainValue_in_enumeratedBaseDomain528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_baseDomainValue_in_enumeratedBaseDomain528	= { FOLLOW_baseDomainValue_in_enumeratedBaseDomain528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_enumeratedBaseDomain531  */
static	ANTLR3_BITWORD FOLLOW_34_in_enumeratedBaseDomain531_bits[]	= { ANTLR3_UINT64_LIT(0x00002000000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_enumeratedBaseDomain531	= { FOLLOW_34_in_enumeratedBaseDomain531_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_baseDomainValue_in_enumeratedBaseDomain534  */
static	ANTLR3_BITWORD FOLLOW_baseDomainValue_in_enumeratedBaseDomain534_bits[]	= { ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_baseDomainValue_in_enumeratedBaseDomain534	= { FOLLOW_baseDomainValue_in_enumeratedBaseDomain534_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_enumeratedBaseDomain538  */
static	ANTLR3_BITWORD FOLLOW_35_in_enumeratedBaseDomain538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_enumeratedBaseDomain538	= { FOLLOW_35_in_enumeratedBaseDomain538_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literalValue_in_baseDomainValue563  */
static	ANTLR3_BITWORD FOLLOW_literalValue_in_baseDomainValue563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literalValue_in_baseDomainValue563	= { FOLLOW_literalValue_in_baseDomainValue563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_baseDomainValue571  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_baseDomainValue571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_baseDomainValue571	= { FOLLOW_qualified_in_baseDomainValue571_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_40_in_variableDeclarations609  */
static	ANTLR3_BITWORD FOLLOW_40_in_variableDeclarations609_bits[]	= { ANTLR3_UINT64_LIT(0x01E0010000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_40_in_variableDeclarations609	= { FOLLOW_40_in_variableDeclarations609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_variableDeclarations613  */
static	ANTLR3_BITWORD FOLLOW_type_in_variableDeclarations613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_variableDeclarations613	= { FOLLOW_type_in_variableDeclarations613_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameWithBaseDomain_in_variableDeclarations615  */
static	ANTLR3_BITWORD FOLLOW_nameWithBaseDomain_in_variableDeclarations615_bits[]	= { ANTLR3_UINT64_LIT(0x0000002400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameWithBaseDomain_in_variableDeclarations615	= { FOLLOW_nameWithBaseDomain_in_variableDeclarations615_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_variableDeclarations618  */
static	ANTLR3_BITWORD FOLLOW_34_in_variableDeclarations618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_variableDeclarations618	= { FOLLOW_34_in_variableDeclarations618_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameWithBaseDomain_in_variableDeclarations620  */
static	ANTLR3_BITWORD FOLLOW_nameWithBaseDomain_in_variableDeclarations620_bits[]	= { ANTLR3_UINT64_LIT(0x0000002400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameWithBaseDomain_in_variableDeclarations620	= { FOLLOW_nameWithBaseDomain_in_variableDeclarations620_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_variableDeclarations624  */
static	ANTLR3_BITWORD FOLLOW_37_in_variableDeclarations624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_variableDeclarations624	= { FOLLOW_37_in_variableDeclarations624_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_nameWithBaseDomain676  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_nameWithBaseDomain676_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_nameWithBaseDomain676	= { FOLLOW_IDENT_in_nameWithBaseDomain676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_nameWithBaseDomain679  */
static	ANTLR3_BITWORD FOLLOW_41_in_nameWithBaseDomain679_bits[]	= { ANTLR3_UINT64_LIT(0x00003042000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_nameWithBaseDomain679	= { FOLLOW_41_in_nameWithBaseDomain679_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initializer_in_nameWithBaseDomain684  */
static	ANTLR3_BITWORD FOLLOW_initializer_in_nameWithBaseDomain684_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_initializer_in_nameWithBaseDomain684	= { FOLLOW_initializer_in_nameWithBaseDomain684_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_nameWithBaseDomain686  */
static	ANTLR3_BITWORD FOLLOW_42_in_nameWithBaseDomain686_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_nameWithBaseDomain686	= { FOLLOW_42_in_nameWithBaseDomain686_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_nameWithBaseDomain706  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_nameWithBaseDomain706_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_nameWithBaseDomain706	= { FOLLOW_IDENT_in_nameWithBaseDomain706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_nameWithBaseDomain708  */
static	ANTLR3_BITWORD FOLLOW_43_in_nameWithBaseDomain708_bits[]	= { ANTLR3_UINT64_LIT(0x00003042000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_nameWithBaseDomain708	= { FOLLOW_43_in_nameWithBaseDomain708_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initializer_in_nameWithBaseDomain713  */
static	ANTLR3_BITWORD FOLLOW_initializer_in_nameWithBaseDomain713_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initializer_in_nameWithBaseDomain713	= { FOLLOW_initializer_in_nameWithBaseDomain713_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literalValue_in_anyValue742  */
static	ANTLR3_BITWORD FOLLOW_literalValue_in_anyValue742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literalValue_in_anyValue742	= { FOLLOW_literalValue_in_anyValue742_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_baseDomain_in_anyValue752  */
static	ANTLR3_BITWORD FOLLOW_baseDomain_in_anyValue752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_baseDomain_in_anyValue752	= { FOLLOW_baseDomain_in_anyValue752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_anyValue762  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_anyValue762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_anyValue762	= { FOLLOW_qualified_in_anyValue762_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_44_in_allocation781  */
static	ANTLR3_BITWORD FOLLOW_44_in_allocation781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_44_in_allocation781	= { FOLLOW_44_in_allocation781_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorInvocation_in_allocation784  */
static	ANTLR3_BITWORD FOLLOW_constructorInvocation_in_allocation784_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorInvocation_in_allocation784	= { FOLLOW_constructorInvocation_in_allocation784_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_constructorInvocation803  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_constructorInvocation803_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_constructorInvocation803	= { FOLLOW_IDENT_in_constructorInvocation803_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_constructorInvocation805  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_constructorInvocation805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_constructorInvocation805	= { FOLLOW_variableArgumentList_in_constructorInvocation805_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_qualified846  */
static	ANTLR3_BITWORD FOLLOW_set_in_qualified846_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_qualified846	= { FOLLOW_set_in_qualified846_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_46_in_qualified855  */
static	ANTLR3_BITWORD FOLLOW_46_in_qualified855_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_46_in_qualified855	= { FOLLOW_46_in_qualified855_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_qualified858  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_qualified858_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_qualified858	= { FOLLOW_IDENT_in_qualified858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_assignment879  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_assignment879_bits[]	= { ANTLR3_UINT64_LIT(0x0000880000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_assignment879	= { FOLLOW_qualified_in_assignment879_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_47_in_assignment882  */
static	ANTLR3_BITWORD FOLLOW_47_in_assignment882_bits[]	= { ANTLR3_UINT64_LIT(0x00003042000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_47_in_assignment882	= { FOLLOW_47_in_assignment882_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_assignment886  */
static	ANTLR3_BITWORD FOLLOW_43_in_assignment886_bits[]	= { ANTLR3_UINT64_LIT(0x00003042000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_assignment886	= { FOLLOW_43_in_assignment886_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initializer_in_assignment889  */
static	ANTLR3_BITWORD FOLLOW_initializer_in_assignment889_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_initializer_in_assignment889	= { FOLLOW_initializer_in_assignment889_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_assignment891  */
static	ANTLR3_BITWORD FOLLOW_37_in_assignment891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_assignment891	= { FOLLOW_37_in_assignment891_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_anyValue_in_initializer924  */
static	ANTLR3_BITWORD FOLLOW_anyValue_in_initializer924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_anyValue_in_initializer924	= { FOLLOW_anyValue_in_initializer924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_allocation_in_initializer934  */
static	ANTLR3_BITWORD FOLLOW_allocation_in_initializer934_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_allocation_in_initializer934	= { FOLLOW_allocation_in_initializer934_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_48_in_classDeclaration956  */
static	ANTLR3_BITWORD FOLLOW_48_in_classDeclaration956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_48_in_classDeclaration956	= { FOLLOW_48_in_classDeclaration956_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_classDeclaration960  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_classDeclaration960_bits[]	= { ANTLR3_UINT64_LIT(0x0002002200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_classDeclaration960	= { FOLLOW_IDENT_in_classDeclaration960_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_49_in_classDeclaration968  */
static	ANTLR3_BITWORD FOLLOW_49_in_classDeclaration968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_49_in_classDeclaration968	= { FOLLOW_49_in_classDeclaration968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_classDeclaration972  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_classDeclaration972_bits[]	= { ANTLR3_UINT64_LIT(0x0002000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_classDeclaration972	= { FOLLOW_IDENT_in_classDeclaration972_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_classBlock_in_classDeclaration976  */
static	ANTLR3_BITWORD FOLLOW_classBlock_in_classDeclaration976_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_classBlock_in_classDeclaration976	= { FOLLOW_classBlock_in_classDeclaration976_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_classDeclaration1012  */
static	ANTLR3_BITWORD FOLLOW_37_in_classDeclaration1012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_classDeclaration1012	= { FOLLOW_37_in_classDeclaration1012_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_classBlock1055  */
static	ANTLR3_BITWORD FOLLOW_33_in_classBlock1055_bits[]	= { ANTLR3_UINT64_LIT(0x8FED337B000F0000), ANTLR3_UINT64_LIT(0x00001FFFFFFF8100) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_classBlock1055	= { FOLLOW_33_in_classBlock1055_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_classStatement_in_classBlock1058  */
static	ANTLR3_BITWORD FOLLOW_classStatement_in_classBlock1058_bits[]	= { ANTLR3_UINT64_LIT(0x8FED337B000F0000), ANTLR3_UINT64_LIT(0x00001FFFFFFF8100) };
static  ANTLR3_BITSET_LIST FOLLOW_classStatement_in_classBlock1058	= { FOLLOW_classStatement_in_classBlock1058_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_classBlock1061  */
static	ANTLR3_BITWORD FOLLOW_35_in_classBlock1061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_classBlock1061	= { FOLLOW_35_in_classBlock1061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarations_in_classStatement1073  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarations_in_classStatement1073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarations_in_classStatement1073	= { FOLLOW_variableDeclarations_in_classStatement1073_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructor_in_classStatement1078  */
static	ANTLR3_BITWORD FOLLOW_constructor_in_classStatement1078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructor_in_classStatement1078	= { FOLLOW_constructor_in_classStatement1078_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tokenType_in_classStatement1083  */
static	ANTLR3_BITWORD FOLLOW_tokenType_in_classStatement1083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tokenType_in_classStatement1083	= { FOLLOW_tokenType_in_classStatement1083_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noopstatement_in_classStatement1088  */
static	ANTLR3_BITWORD FOLLOW_noopstatement_in_classStatement1088_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noopstatement_in_classStatement1088	= { FOLLOW_noopstatement_in_classStatement1088_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_constructor1099  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_constructor1099_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_constructor1099	= { FOLLOW_IDENT_in_constructor1099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorParameterList_in_constructor1101  */
static	ANTLR3_BITWORD FOLLOW_constructorParameterList_in_constructor1101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorParameterList_in_constructor1101	= { FOLLOW_constructorParameterList_in_constructor1101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorBlock_in_constructor1103  */
static	ANTLR3_BITWORD FOLLOW_constructorBlock_in_constructor1103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorBlock_in_constructor1103	= { FOLLOW_constructorBlock_in_constructor1103_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_constructorBlock1129  */
static	ANTLR3_BITWORD FOLLOW_33_in_constructorBlock1129_bits[]	= { ANTLR3_UINT64_LIT(0x8FE1337B000F0000), ANTLR3_UINT64_LIT(0x00001FFFFFFF8900) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_constructorBlock1129	= { FOLLOW_33_in_constructorBlock1129_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorStatement_in_constructorBlock1132  */
static	ANTLR3_BITWORD FOLLOW_constructorStatement_in_constructorBlock1132_bits[]	= { ANTLR3_UINT64_LIT(0x8FE1337B000F0000), ANTLR3_UINT64_LIT(0x00001FFFFFFF8900) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorStatement_in_constructorBlock1132	= { FOLLOW_constructorStatement_in_constructorBlock1132_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_constructorBlock1135  */
static	ANTLR3_BITWORD FOLLOW_35_in_constructorBlock1135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_constructorBlock1135	= { FOLLOW_35_in_constructorBlock1135_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_in_constructorStatement1147  */
static	ANTLR3_BITWORD FOLLOW_assignment_in_constructorStatement1147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_in_constructorStatement1147	= { FOLLOW_assignment_in_constructorStatement1147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_superInvocation_in_constructorStatement1152  */
static	ANTLR3_BITWORD FOLLOW_superInvocation_in_constructorStatement1152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_superInvocation_in_constructorStatement1152	= { FOLLOW_superInvocation_in_constructorStatement1152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noopstatement_in_constructorStatement1157  */
static	ANTLR3_BITWORD FOLLOW_noopstatement_in_constructorStatement1157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noopstatement_in_constructorStatement1157	= { FOLLOW_noopstatement_in_constructorStatement1157_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_constructorParameterList1168  */
static	ANTLR3_BITWORD FOLLOW_41_in_constructorParameterList1168_bits[]	= { ANTLR3_UINT64_LIT(0x01E0050000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_constructorParameterList1168	= { FOLLOW_41_in_constructorParameterList1168_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorParameters_in_constructorParameterList1171  */
static	ANTLR3_BITWORD FOLLOW_constructorParameters_in_constructorParameterList1171_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorParameters_in_constructorParameterList1171	= { FOLLOW_constructorParameters_in_constructorParameterList1171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_constructorParameterList1174  */
static	ANTLR3_BITWORD FOLLOW_42_in_constructorParameterList1174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_constructorParameterList1174	= { FOLLOW_42_in_constructorParameterList1174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorParameter_in_constructorParameters1186  */
static	ANTLR3_BITWORD FOLLOW_constructorParameter_in_constructorParameters1186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorParameter_in_constructorParameters1186	= { FOLLOW_constructorParameter_in_constructorParameters1186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_constructorParameters1190  */
static	ANTLR3_BITWORD FOLLOW_34_in_constructorParameters1190_bits[]	= { ANTLR3_UINT64_LIT(0x01E0010000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_constructorParameters1190	= { FOLLOW_34_in_constructorParameters1190_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorParameters_in_constructorParameters1193  */
static	ANTLR3_BITWORD FOLLOW_constructorParameters_in_constructorParameters1193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorParameters_in_constructorParameters1193	= { FOLLOW_constructorParameters_in_constructorParameters1193_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_constructorParameter1206  */
static	ANTLR3_BITWORD FOLLOW_type_in_constructorParameter1206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_constructorParameter1206	= { FOLLOW_type_in_constructorParameter1206_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_constructorParameter1208  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_constructorParameter1208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_constructorParameter1208	= { FOLLOW_IDENT_in_constructorParameter1208_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_tokenType1232  */
static	ANTLR3_BITWORD FOLLOW_set_in_tokenType1232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_tokenType1232	= { FOLLOW_set_in_tokenType1232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_tokenType1241  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_tokenType1241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_tokenType1241	= { FOLLOW_IDENT_in_tokenType1241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tokenBlock_in_tokenType1243  */
static	ANTLR3_BITWORD FOLLOW_tokenBlock_in_tokenType1243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tokenBlock_in_tokenType1243	= { FOLLOW_tokenBlock_in_tokenType1243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_tokenBlock1255  */
static	ANTLR3_BITWORD FOLLOW_33_in_tokenBlock1255_bits[]	= { ANTLR3_UINT64_LIT(0x81E0234A000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_tokenBlock1255	= { FOLLOW_33_in_tokenBlock1255_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tokenStatement_in_tokenBlock1258  */
static	ANTLR3_BITWORD FOLLOW_tokenStatement_in_tokenBlock1258_bits[]	= { ANTLR3_UINT64_LIT(0x81E0234A000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_tokenStatement_in_tokenBlock1258	= { FOLLOW_tokenStatement_in_tokenBlock1258_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_tokenBlock1261  */
static	ANTLR3_BITWORD FOLLOW_35_in_tokenBlock1261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_tokenBlock1261	= { FOLLOW_35_in_tokenBlock1261_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarations_in_tokenStatement1274  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarations_in_tokenStatement1274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarations_in_tokenStatement1274	= { FOLLOW_variableDeclarations_in_tokenStatement1274_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constraintInstantiation_in_tokenStatement1279  */
static	ANTLR3_BITWORD FOLLOW_constraintInstantiation_in_tokenStatement1279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constraintInstantiation_in_tokenStatement1279	= { FOLLOW_constraintInstantiation_in_tokenStatement1279_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_in_tokenStatement1284  */
static	ANTLR3_BITWORD FOLLOW_assignment_in_tokenStatement1284_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_in_tokenStatement1284	= { FOLLOW_assignment_in_tokenStatement1284_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_rule1298  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_rule1298_bits[]	= { ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_rule1298	= { FOLLOW_IDENT_in_rule1298_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_52_in_rule1300  */
static	ANTLR3_BITWORD FOLLOW_52_in_rule1300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_52_in_rule1300	= { FOLLOW_52_in_rule1300_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_rule1303  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_rule1303_bits[]	= { ANTLR3_UINT64_LIT(0x8FE13373000F0000), ANTLR3_UINT64_LIT(0x00001FFFFFFFD100) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_rule1303	= { FOLLOW_IDENT_in_rule1303_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleBlock_in_rule1305  */
static	ANTLR3_BITWORD FOLLOW_ruleBlock_in_rule1305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleBlock_in_rule1305	= { FOLLOW_ruleBlock_in_rule1305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_ruleBlock1316  */
static	ANTLR3_BITWORD FOLLOW_33_in_ruleBlock1316_bits[]	= { ANTLR3_UINT64_LIT(0x8FE1337B000F0000), ANTLR3_UINT64_LIT(0x00001FFFFFFFD100) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_ruleBlock1316	= { FOLLOW_33_in_ruleBlock1316_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleStatement_in_ruleBlock1319  */
static	ANTLR3_BITWORD FOLLOW_ruleStatement_in_ruleBlock1319_bits[]	= { ANTLR3_UINT64_LIT(0x8FE1337B000F0000), ANTLR3_UINT64_LIT(0x00001FFFFFFFD100) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleStatement_in_ruleBlock1319	= { FOLLOW_ruleStatement_in_ruleBlock1319_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_ruleBlock1322  */
static	ANTLR3_BITWORD FOLLOW_35_in_ruleBlock1322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_ruleBlock1322	= { FOLLOW_35_in_ruleBlock1322_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleStatement_in_ruleBlock1328  */
static	ANTLR3_BITWORD FOLLOW_ruleStatement_in_ruleBlock1328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleStatement_in_ruleBlock1328	= { FOLLOW_ruleStatement_in_ruleBlock1328_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_ruleStatement1347  */
static	ANTLR3_BITWORD FOLLOW_relation_in_ruleStatement1347_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_ruleStatement1347	= { FOLLOW_relation_in_ruleStatement1347_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarations_in_ruleStatement1352  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarations_in_ruleStatement1352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarations_in_ruleStatement1352	= { FOLLOW_variableDeclarations_in_ruleStatement1352_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constraintInstantiation_in_ruleStatement1357  */
static	ANTLR3_BITWORD FOLLOW_constraintInstantiation_in_ruleStatement1357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constraintInstantiation_in_ruleStatement1357	= { FOLLOW_constraintInstantiation_in_ruleStatement1357_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_flowControl_in_ruleStatement1362  */
static	ANTLR3_BITWORD FOLLOW_flowControl_in_ruleStatement1362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_flowControl_in_ruleStatement1362	= { FOLLOW_flowControl_in_ruleStatement1362_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noopstatement_in_ruleStatement1367  */
static	ANTLR3_BITWORD FOLLOW_noopstatement_in_ruleStatement1367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noopstatement_in_ruleStatement1367	= { FOLLOW_noopstatement_in_ruleStatement1367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type0  */
static	ANTLR3_BITWORD FOLLOW_set_in_type0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type0	= { FOLLOW_set_in_type0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_relation1419  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_relation1419_bits[]	= { ANTLR3_UINT64_LIT(0x0000200000010000), ANTLR3_UINT64_LIT(0x0000003FFFFF8000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_relation1419	= { FOLLOW_IDENT_in_relation1419_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_45_in_relation1425  */
static	ANTLR3_BITWORD FOLLOW_45_in_relation1425_bits[]	= { ANTLR3_UINT64_LIT(0x0000200000010000), ANTLR3_UINT64_LIT(0x0000003FFFFF8000) };
static  ANTLR3_BITSET_LIST FOLLOW_45_in_relation1425	= { FOLLOW_45_in_relation1425_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_temporalRelation_in_relation1429  */
static	ANTLR3_BITWORD FOLLOW_temporalRelation_in_relation1429_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_temporalRelation_in_relation1429	= { FOLLOW_temporalRelation_in_relation1429_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tokenInstanceList_in_relation1431  */
static	ANTLR3_BITWORD FOLLOW_tokenInstanceList_in_relation1431_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_tokenInstanceList_in_relation1431	= { FOLLOW_tokenInstanceList_in_relation1431_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_relation1433  */
static	ANTLR3_BITWORD FOLLOW_37_in_relation1433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_relation1433	= { FOLLOW_37_in_relation1433_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_57_in_problemStmt1468  */
static	ANTLR3_BITWORD FOLLOW_57_in_problemStmt1468_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_57_in_problemStmt1468	= { FOLLOW_57_in_problemStmt1468_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_58_in_problemStmt1473  */
static	ANTLR3_BITWORD FOLLOW_58_in_problemStmt1473_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_58_in_problemStmt1473	= { FOLLOW_58_in_problemStmt1473_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_59_in_problemStmt1478  */
static	ANTLR3_BITWORD FOLLOW_59_in_problemStmt1478_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_59_in_problemStmt1478	= { FOLLOW_59_in_problemStmt1478_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tokenInstanceList_in_problemStmt1482  */
static	ANTLR3_BITWORD FOLLOW_tokenInstanceList_in_problemStmt1482_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_tokenInstanceList_in_problemStmt1482	= { FOLLOW_tokenInstanceList_in_problemStmt1482_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_problemStmt1484  */
static	ANTLR3_BITWORD FOLLOW_37_in_problemStmt1484_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_problemStmt1484	= { FOLLOW_37_in_problemStmt1484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_tokenInstanceList1504  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_tokenInstanceList1504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_tokenInstanceList1504	= { FOLLOW_IDENT_in_tokenInstanceList1504_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_tokenInstanceList1509  */
static	ANTLR3_BITWORD FOLLOW_41_in_tokenInstanceList1509_bits[]	= { ANTLR3_UINT64_LIT(0x3000240000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_tokenInstanceList1509	= { FOLLOW_41_in_tokenInstanceList1509_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tokenInstances_in_tokenInstanceList1512  */
static	ANTLR3_BITWORD FOLLOW_tokenInstances_in_tokenInstanceList1512_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_tokenInstances_in_tokenInstanceList1512	= { FOLLOW_tokenInstances_in_tokenInstanceList1512_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_tokenInstanceList1515  */
static	ANTLR3_BITWORD FOLLOW_42_in_tokenInstanceList1515_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_tokenInstanceList1515	= { FOLLOW_42_in_tokenInstanceList1515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tokenInstance_in_tokenInstances1527  */
static	ANTLR3_BITWORD FOLLOW_tokenInstance_in_tokenInstances1527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tokenInstance_in_tokenInstances1527	= { FOLLOW_tokenInstance_in_tokenInstances1527_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_tokenInstances1530  */
static	ANTLR3_BITWORD FOLLOW_34_in_tokenInstances1530_bits[]	= { ANTLR3_UINT64_LIT(0x3000200000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_tokenInstances1530	= { FOLLOW_34_in_tokenInstances1530_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tokenInstance_in_tokenInstances1533  */
static	ANTLR3_BITWORD FOLLOW_tokenInstance_in_tokenInstances1533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tokenInstance_in_tokenInstances1533	= { FOLLOW_tokenInstance_in_tokenInstances1533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tokenAnnotation_in_tokenInstance1546  */
static	ANTLR3_BITWORD FOLLOW_tokenAnnotation_in_tokenInstance1546_bits[]	= { ANTLR3_UINT64_LIT(0x0000200000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_tokenAnnotation_in_tokenInstance1546	= { FOLLOW_tokenAnnotation_in_tokenInstance1546_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_tokenInstance1549  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_tokenInstance1549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_tokenInstance1549	= { FOLLOW_qualified_in_tokenInstance1549_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_tokenInstance1551  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_tokenInstance1551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_tokenInstance1551	= { FOLLOW_IDENT_in_tokenInstance1551_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_tokenAnnotation0  */
static	ANTLR3_BITWORD FOLLOW_set_in_tokenAnnotation0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_tokenAnnotation0	= { FOLLOW_set_in_tokenAnnotation0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_constraintInstantiation1617  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_constraintInstantiation1617_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_constraintInstantiation1617	= { FOLLOW_IDENT_in_constraintInstantiation1617_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_constraintInstantiation1619  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_constraintInstantiation1619_bits[]	= { ANTLR3_UINT64_LIT(0x4000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_constraintInstantiation1619	= { FOLLOW_variableArgumentList_in_constraintInstantiation1619_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_constraintInstantiation1622  */
static	ANTLR3_BITWORD FOLLOW_62_in_constraintInstantiation1622_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000E0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_constraintInstantiation1622	= { FOLLOW_62_in_constraintInstantiation1622_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_violationMsg_in_constraintInstantiation1624  */
static	ANTLR3_BITWORD FOLLOW_violationMsg_in_constraintInstantiation1624_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_violationMsg_in_constraintInstantiation1624	= { FOLLOW_violationMsg_in_constraintInstantiation1624_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_constraintInstantiation1628  */
static	ANTLR3_BITWORD FOLLOW_37_in_constraintInstantiation1628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_constraintInstantiation1628	= { FOLLOW_37_in_constraintInstantiation1628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enforceStatement_in_constraintInstantiation1651  */
static	ANTLR3_BITWORD FOLLOW_enforceStatement_in_constraintInstantiation1651_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_enforceStatement_in_constraintInstantiation1651	= { FOLLOW_enforceStatement_in_constraintInstantiation1651_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_63_in_enforceStatement1666  */
static	ANTLR3_BITWORD FOLLOW_63_in_enforceStatement1666_bits[]	= { ANTLR3_UINT64_LIT(0x80002242000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_63_in_enforceStatement1666	= { FOLLOW_63_in_enforceStatement1666_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexpression_in_enforceStatement1671  */
static	ANTLR3_BITWORD FOLLOW_cexpression_in_enforceStatement1671_bits[]	= { ANTLR3_UINT64_LIT(0x4000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_cexpression_in_enforceStatement1671	= { FOLLOW_cexpression_in_enforceStatement1671_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_enforceStatement1674  */
static	ANTLR3_BITWORD FOLLOW_62_in_enforceStatement1674_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000E0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_enforceStatement1674	= { FOLLOW_62_in_enforceStatement1674_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_violationMsg_in_enforceStatement1678  */
static	ANTLR3_BITWORD FOLLOW_violationMsg_in_enforceStatement1678_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_violationMsg_in_enforceStatement1678	= { FOLLOW_violationMsg_in_enforceStatement1678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_enforceStatement1682  */
static	ANTLR3_BITWORD FOLLOW_37_in_enforceStatement1682_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_enforceStatement1682	= { FOLLOW_37_in_enforceStatement1682_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stringLiteral_in_violationMsg1712  */
static	ANTLR3_BITWORD FOLLOW_stringLiteral_in_violationMsg1712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stringLiteral_in_violationMsg1712	= { FOLLOW_stringLiteral_in_violationMsg1712_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cbooleanOrExpression_in_cexpression1725  */
static	ANTLR3_BITWORD FOLLOW_cbooleanOrExpression_in_cexpression1725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cbooleanOrExpression_in_cexpression1725	= { FOLLOW_cbooleanOrExpression_in_cexpression1725_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cbooleanAndExpression_in_cbooleanOrExpression1737  */
static	ANTLR3_BITWORD FOLLOW_cbooleanAndExpression_in_cbooleanOrExpression1737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_cbooleanAndExpression_in_cbooleanOrExpression1737	= { FOLLOW_cbooleanAndExpression_in_cbooleanOrExpression1737_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_64_in_cbooleanOrExpression1740  */
static	ANTLR3_BITWORD FOLLOW_64_in_cbooleanOrExpression1740_bits[]	= { ANTLR3_UINT64_LIT(0x80002242000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_64_in_cbooleanOrExpression1740	= { FOLLOW_64_in_cbooleanOrExpression1740_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cbooleanAndExpression_in_cbooleanOrExpression1743  */
static	ANTLR3_BITWORD FOLLOW_cbooleanAndExpression_in_cbooleanOrExpression1743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_cbooleanAndExpression_in_cbooleanOrExpression1743	= { FOLLOW_cbooleanAndExpression_in_cbooleanOrExpression1743_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_crelationalExpression_in_cbooleanAndExpression1759  */
static	ANTLR3_BITWORD FOLLOW_crelationalExpression_in_cbooleanAndExpression1759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_crelationalExpression_in_cbooleanAndExpression1759	= { FOLLOW_crelationalExpression_in_cbooleanAndExpression1759_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_65_in_cbooleanAndExpression1762  */
static	ANTLR3_BITWORD FOLLOW_65_in_cbooleanAndExpression1762_bits[]	= { ANTLR3_UINT64_LIT(0x80002242000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_65_in_cbooleanAndExpression1762	= { FOLLOW_65_in_cbooleanAndExpression1762_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_crelationalExpression_in_cbooleanAndExpression1767  */
static	ANTLR3_BITWORD FOLLOW_crelationalExpression_in_cbooleanAndExpression1767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_crelationalExpression_in_cbooleanAndExpression1767	= { FOLLOW_crelationalExpression_in_cbooleanAndExpression1767_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cadditiveExpression_in_crelationalExpression1791  */
static	ANTLR3_BITWORD FOLLOW_cadditiveExpression_in_crelationalExpression1791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00000000000000FC) };
static  ANTLR3_BITSET_LIST FOLLOW_cadditiveExpression_in_crelationalExpression1791	= { FOLLOW_cadditiveExpression_in_crelationalExpression1791_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_crelationalExpression1794  */
static	ANTLR3_BITWORD FOLLOW_set_in_crelationalExpression1794_bits[]	= { ANTLR3_UINT64_LIT(0x80002242000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_crelationalExpression1794	= { FOLLOW_set_in_crelationalExpression1794_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cadditiveExpression_in_crelationalExpression1819  */
static	ANTLR3_BITWORD FOLLOW_cadditiveExpression_in_crelationalExpression1819_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00000000000000FC) };
static  ANTLR3_BITSET_LIST FOLLOW_cadditiveExpression_in_crelationalExpression1819	= { FOLLOW_cadditiveExpression_in_crelationalExpression1819_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cmultiplicativeExpression_in_cadditiveExpression1842  */
static	ANTLR3_BITWORD FOLLOW_cmultiplicativeExpression_in_cadditiveExpression1842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000300) };
static  ANTLR3_BITSET_LIST FOLLOW_cmultiplicativeExpression_in_cadditiveExpression1842	= { FOLLOW_cmultiplicativeExpression_in_cadditiveExpression1842_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_cadditiveExpression1845  */
static	ANTLR3_BITWORD FOLLOW_set_in_cadditiveExpression1845_bits[]	= { ANTLR3_UINT64_LIT(0x80002242000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_cadditiveExpression1845	= { FOLLOW_set_in_cadditiveExpression1845_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cmultiplicativeExpression_in_cadditiveExpression1854  */
static	ANTLR3_BITWORD FOLLOW_cmultiplicativeExpression_in_cadditiveExpression1854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000300) };
static  ANTLR3_BITSET_LIST FOLLOW_cmultiplicativeExpression_in_cadditiveExpression1854	= { FOLLOW_cmultiplicativeExpression_in_cadditiveExpression1854_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cprimary_in_cmultiplicativeExpression1871  */
static	ANTLR3_BITWORD FOLLOW_cprimary_in_cmultiplicativeExpression1871_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_cprimary_in_cmultiplicativeExpression1871	= { FOLLOW_cprimary_in_cmultiplicativeExpression1871_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_74_in_cmultiplicativeExpression1874  */
static	ANTLR3_BITWORD FOLLOW_74_in_cmultiplicativeExpression1874_bits[]	= { ANTLR3_UINT64_LIT(0x80002242000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_74_in_cmultiplicativeExpression1874	= { FOLLOW_74_in_cmultiplicativeExpression1874_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cprimary_in_cmultiplicativeExpression1877  */
static	ANTLR3_BITWORD FOLLOW_cprimary_in_cmultiplicativeExpression1877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_cprimary_in_cmultiplicativeExpression1877	= { FOLLOW_cprimary_in_cmultiplicativeExpression1877_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_anyValue_in_cprimary1891  */
static	ANTLR3_BITWORD FOLLOW_anyValue_in_cprimary1891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_anyValue_in_cprimary1891	= { FOLLOW_anyValue_in_cprimary1891_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_cprimary1899  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_cprimary1899_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_cprimary1899	= { FOLLOW_IDENT_in_cprimary1899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_cprimary1901  */
static	ANTLR3_BITWORD FOLLOW_41_in_cprimary1901_bits[]	= { ANTLR3_UINT64_LIT(0x80002242000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_cprimary1901	= { FOLLOW_41_in_cprimary1901_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexpressionList_in_cprimary1905  */
static	ANTLR3_BITWORD FOLLOW_cexpressionList_in_cprimary1905_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_cexpressionList_in_cprimary1905	= { FOLLOW_cexpressionList_in_cprimary1905_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_cprimary1907  */
static	ANTLR3_BITWORD FOLLOW_42_in_cprimary1907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_cprimary1907	= { FOLLOW_42_in_cprimary1907_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_cprimary1927  */
static	ANTLR3_BITWORD FOLLOW_41_in_cprimary1927_bits[]	= { ANTLR3_UINT64_LIT(0x80002242000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_cprimary1927	= { FOLLOW_41_in_cprimary1927_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cbooleanOrExpression_in_cprimary1930  */
static	ANTLR3_BITWORD FOLLOW_cbooleanOrExpression_in_cprimary1930_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_cbooleanOrExpression_in_cprimary1930	= { FOLLOW_cbooleanOrExpression_in_cprimary1930_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_cprimary1932  */
static	ANTLR3_BITWORD FOLLOW_42_in_cprimary1932_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_cprimary1932	= { FOLLOW_42_in_cprimary1932_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexpression_in_cexpressionList1945  */
static	ANTLR3_BITWORD FOLLOW_cexpression_in_cexpressionList1945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cexpression_in_cexpressionList1945	= { FOLLOW_cexpression_in_cexpressionList1945_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_cexpressionList1948  */
static	ANTLR3_BITWORD FOLLOW_34_in_cexpressionList1948_bits[]	= { ANTLR3_UINT64_LIT(0x80002242000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_cexpressionList1948	= { FOLLOW_34_in_cexpressionList1948_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexpression_in_cexpressionList1951  */
static	ANTLR3_BITWORD FOLLOW_cexpression_in_cexpressionList1951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cexpression_in_cexpressionList1951	= { FOLLOW_cexpression_in_cexpressionList1951_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_75_in_superInvocation1966  */
static	ANTLR3_BITWORD FOLLOW_75_in_superInvocation1966_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_75_in_superInvocation1966	= { FOLLOW_75_in_superInvocation1966_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_superInvocation1969  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_superInvocation1969_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_superInvocation1969	= { FOLLOW_variableArgumentList_in_superInvocation1969_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_superInvocation1971  */
static	ANTLR3_BITWORD FOLLOW_37_in_superInvocation1971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_superInvocation1971	= { FOLLOW_37_in_superInvocation1971_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_variableArgumentList1983  */
static	ANTLR3_BITWORD FOLLOW_41_in_variableArgumentList1983_bits[]	= { ANTLR3_UINT64_LIT(0x00002442000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_variableArgumentList1983	= { FOLLOW_41_in_variableArgumentList1983_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArguments_in_variableArgumentList1986  */
static	ANTLR3_BITWORD FOLLOW_variableArguments_in_variableArgumentList1986_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArguments_in_variableArgumentList1986	= { FOLLOW_variableArguments_in_variableArgumentList1986_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_variableArgumentList1989  */
static	ANTLR3_BITWORD FOLLOW_42_in_variableArgumentList1989_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_variableArgumentList1989	= { FOLLOW_42_in_variableArgumentList1989_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgument_in_variableArguments2001  */
static	ANTLR3_BITWORD FOLLOW_variableArgument_in_variableArguments2001_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgument_in_variableArguments2001	= { FOLLOW_variableArgument_in_variableArguments2001_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_variableArguments2004  */
static	ANTLR3_BITWORD FOLLOW_34_in_variableArguments2004_bits[]	= { ANTLR3_UINT64_LIT(0x00002042000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_variableArguments2004	= { FOLLOW_34_in_variableArguments2004_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgument_in_variableArguments2007  */
static	ANTLR3_BITWORD FOLLOW_variableArgument_in_variableArguments2007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgument_in_variableArguments2007	= { FOLLOW_variableArgument_in_variableArguments2007_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_anyValue_in_variableArgument2020  */
static	ANTLR3_BITWORD FOLLOW_anyValue_in_variableArgument2020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_anyValue_in_variableArgument2020	= { FOLLOW_anyValue_in_variableArgument2020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_typeArgumentList2031  */
static	ANTLR3_BITWORD FOLLOW_41_in_typeArgumentList2031_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_typeArgumentList2031	= { FOLLOW_41_in_typeArgumentList2031_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeArguments_in_typeArgumentList2034  */
static	ANTLR3_BITWORD FOLLOW_typeArguments_in_typeArgumentList2034_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_typeArguments_in_typeArgumentList2034	= { FOLLOW_typeArguments_in_typeArgumentList2034_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_typeArgumentList2037  */
static	ANTLR3_BITWORD FOLLOW_42_in_typeArgumentList2037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_typeArgumentList2037	= { FOLLOW_42_in_typeArgumentList2037_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeArgument_in_typeArguments2049  */
static	ANTLR3_BITWORD FOLLOW_typeArgument_in_typeArguments2049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_typeArgument_in_typeArguments2049	= { FOLLOW_typeArgument_in_typeArguments2049_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_typeArguments2052  */
static	ANTLR3_BITWORD FOLLOW_34_in_typeArguments2052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_typeArguments2052	= { FOLLOW_34_in_typeArguments2052_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeArgument_in_typeArguments2055  */
static	ANTLR3_BITWORD FOLLOW_typeArgument_in_typeArguments2055_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_typeArgument_in_typeArguments2055	= { FOLLOW_typeArgument_in_typeArguments2055_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_typeArgument2068  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_typeArgument2068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_typeArgument2068	= { FOLLOW_IDENT_in_typeArgument2068_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_76_in_flowControl2088  */
static	ANTLR3_BITWORD FOLLOW_76_in_flowControl2088_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_76_in_flowControl2088	= { FOLLOW_76_in_flowControl2088_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_flowControl2090  */
static	ANTLR3_BITWORD FOLLOW_41_in_flowControl2090_bits[]	= { ANTLR3_UINT64_LIT(0x80002242000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_flowControl2090	= { FOLLOW_41_in_flowControl2090_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexpression_in_flowControl2094  */
static	ANTLR3_BITWORD FOLLOW_cexpression_in_flowControl2094_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_cexpression_in_flowControl2094	= { FOLLOW_cexpression_in_flowControl2094_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_flowControl2096  */
static	ANTLR3_BITWORD FOLLOW_42_in_flowControl2096_bits[]	= { ANTLR3_UINT64_LIT(0x8FE13373000F0000), ANTLR3_UINT64_LIT(0x00001FFFFFFFD100) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_flowControl2096	= { FOLLOW_42_in_flowControl2096_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleBlock_in_flowControl2100  */
static	ANTLR3_BITWORD FOLLOW_ruleBlock_in_flowControl2100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleBlock_in_flowControl2100	= { FOLLOW_ruleBlock_in_flowControl2100_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_flowControl2108  */
static	ANTLR3_BITWORD FOLLOW_77_in_flowControl2108_bits[]	= { ANTLR3_UINT64_LIT(0x8FE13373000F0000), ANTLR3_UINT64_LIT(0x00001FFFFFFFD100) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_flowControl2108	= { FOLLOW_77_in_flowControl2108_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleBlock_in_flowControl2112  */
static	ANTLR3_BITWORD FOLLOW_ruleBlock_in_flowControl2112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleBlock_in_flowControl2112	= { FOLLOW_ruleBlock_in_flowControl2112_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_78_in_flowControl2177  */
static	ANTLR3_BITWORD FOLLOW_78_in_flowControl2177_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_78_in_flowControl2177	= { FOLLOW_78_in_flowControl2177_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_flowControl2180  */
static	ANTLR3_BITWORD FOLLOW_41_in_flowControl2180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_flowControl2180	= { FOLLOW_41_in_flowControl2180_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_flowControl2183  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_flowControl2183_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_flowControl2183	= { FOLLOW_IDENT_in_flowControl2183_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_47_in_flowControl2185  */
static	ANTLR3_BITWORD FOLLOW_47_in_flowControl2185_bits[]	= { ANTLR3_UINT64_LIT(0x0000200000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_47_in_flowControl2185	= { FOLLOW_47_in_flowControl2185_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_flowControl2188  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_flowControl2188_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_flowControl2188	= { FOLLOW_qualified_in_flowControl2188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_flowControl2190  */
static	ANTLR3_BITWORD FOLLOW_42_in_flowControl2190_bits[]	= { ANTLR3_UINT64_LIT(0x8FE13373000F0000), ANTLR3_UINT64_LIT(0x00001FFFFFFFD100) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_flowControl2190	= { FOLLOW_42_in_flowControl2190_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleBlock_in_flowControl2193  */
static	ANTLR3_BITWORD FOLLOW_ruleBlock_in_flowControl2193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleBlock_in_flowControl2193	= { FOLLOW_ruleBlock_in_flowControl2193_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_guardExpression2205  */
static	ANTLR3_BITWORD FOLLOW_41_in_guardExpression2205_bits[]	= { ANTLR3_UINT64_LIT(0x00002042000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_guardExpression2205	= { FOLLOW_41_in_guardExpression2205_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_anyValue_in_guardExpression2208  */
static	ANTLR3_BITWORD FOLLOW_anyValue_in_guardExpression2208_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000), ANTLR3_UINT64_LIT(0x000000000000000C) };
static  ANTLR3_BITSET_LIST FOLLOW_anyValue_in_guardExpression2208	= { FOLLOW_anyValue_in_guardExpression2208_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_66_in_guardExpression2212  */
static	ANTLR3_BITWORD FOLLOW_66_in_guardExpression2212_bits[]	= { ANTLR3_UINT64_LIT(0x00002042000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_66_in_guardExpression2212	= { FOLLOW_66_in_guardExpression2212_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_67_in_guardExpression2217  */
static	ANTLR3_BITWORD FOLLOW_67_in_guardExpression2217_bits[]	= { ANTLR3_UINT64_LIT(0x00002042000F0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_67_in_guardExpression2217	= { FOLLOW_67_in_guardExpression2217_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_anyValue_in_guardExpression2221  */
static	ANTLR3_BITWORD FOLLOW_anyValue_in_guardExpression2221_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_anyValue_in_guardExpression2221	= { FOLLOW_anyValue_in_guardExpression2221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_guardExpression2225  */
static	ANTLR3_BITWORD FOLLOW_42_in_guardExpression2225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_guardExpression2225	= { FOLLOW_42_in_guardExpression2225_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_allocation_in_allocationStmt2247  */
static	ANTLR3_BITWORD FOLLOW_allocation_in_allocationStmt2247_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_allocation_in_allocationStmt2247	= { FOLLOW_allocation_in_allocationStmt2247_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_allocationStmt2249  */
static	ANTLR3_BITWORD FOLLOW_37_in_allocationStmt2249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_allocationStmt2249	= { FOLLOW_37_in_allocationStmt2249_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_temporalRelation0  */
static	ANTLR3_BITWORD FOLLOW_set_in_temporalRelation0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_temporalRelation0	= { FOLLOW_set_in_temporalRelation0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_booleanLiteral_in_literalValue2502  */
static	ANTLR3_BITWORD FOLLOW_booleanLiteral_in_literalValue2502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_booleanLiteral_in_literalValue2502	= { FOLLOW_booleanLiteral_in_literalValue2502_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numericLiteral_in_literalValue2512  */
static	ANTLR3_BITWORD FOLLOW_numericLiteral_in_literalValue2512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_numericLiteral_in_literalValue2512	= { FOLLOW_numericLiteral_in_literalValue2512_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stringLiteral_in_literalValue2522  */
static	ANTLR3_BITWORD FOLLOW_stringLiteral_in_literalValue2522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stringLiteral_in_literalValue2522	= { FOLLOW_stringLiteral_in_literalValue2522_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_booleanLiteral0  */
static	ANTLR3_BITWORD FOLLOW_set_in_booleanLiteral0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_booleanLiteral0	= { FOLLOW_set_in_booleanLiteral0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_numericLiteral2570  */
static	ANTLR3_BITWORD FOLLOW_INT_in_numericLiteral2570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_numericLiteral2570	= { FOLLOW_INT_in_numericLiteral2570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_numericLiteral2575  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_numericLiteral2575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_numericLiteral2575	= { FOLLOW_FLOAT_in_numericLiteral2575_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_72_in_numericLiteral2581  */
static	ANTLR3_BITWORD FOLLOW_72_in_numericLiteral2581_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000030000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_72_in_numericLiteral2581	= { FOLLOW_72_in_numericLiteral2581_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_numericLiteral2586  */
static	ANTLR3_BITWORD FOLLOW_set_in_numericLiteral2586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_numericLiteral2586	= { FOLLOW_set_in_numericLiteral2586_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_106_in_numericLiteral2597  */
static	ANTLR3_BITWORD FOLLOW_106_in_numericLiteral2597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_106_in_numericLiteral2597	= { FOLLOW_106_in_numericLiteral2597_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_107_in_numericLiteral2608  */
static	ANTLR3_BITWORD FOLLOW_107_in_numericLiteral2608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_107_in_numericLiteral2608	= { FOLLOW_107_in_numericLiteral2608_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_stringLiteral2625  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_stringLiteral2625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_stringLiteral2625	= { FOLLOW_STRING_in_stringLiteral2625_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_methodInvocation2648  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_methodInvocation2648_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_methodInvocation2648	= { FOLLOW_qualified_in_methodInvocation2648_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_46_in_methodInvocation2650  */
static	ANTLR3_BITWORD FOLLOW_46_in_methodInvocation2650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_46_in_methodInvocation2650	= { FOLLOW_46_in_methodInvocation2650_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_methodName_in_methodInvocation2652  */
static	ANTLR3_BITWORD FOLLOW_methodName_in_methodInvocation2652_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_methodName_in_methodInvocation2652	= { FOLLOW_methodName_in_methodInvocation2652_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_methodInvocation2654  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_methodInvocation2654_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_methodInvocation2654	= { FOLLOW_variableArgumentList_in_methodInvocation2654_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_methodInvocation2656  */
static	ANTLR3_BITWORD FOLLOW_37_in_methodInvocation2656_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_methodInvocation2656	= { FOLLOW_37_in_methodInvocation2656_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_108_in_methodInvocation2685  */
static	ANTLR3_BITWORD FOLLOW_108_in_methodInvocation2685_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_108_in_methodInvocation2685	= { FOLLOW_108_in_methodInvocation2685_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_methodInvocation2687  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_methodInvocation2687_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_methodInvocation2687	= { FOLLOW_variableArgumentList_in_methodInvocation2687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_methodInvocation2689  */
static	ANTLR3_BITWORD FOLLOW_37_in_methodInvocation2689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_methodInvocation2689	= { FOLLOW_37_in_methodInvocation2689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_methodName0  */
static	ANTLR3_BITWORD FOLLOW_set_in_methodName0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_methodName0	= { FOLLOW_set_in_methodName0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_noopstatement2730  */
static	ANTLR3_BITWORD FOLLOW_37_in_noopstatement2730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_noopstatement2730	= { FOLLOW_37_in_noopstatement2730_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_synpred1_NDDL31603  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_synpred1_NDDL31603_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_synpred1_NDDL31603	= { FOLLOW_IDENT_in_synpred1_NDDL31603_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_synpred1_NDDL31605  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_synpred1_NDDL31605_bits[]	= { ANTLR3_UINT64_LIT(0x4000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_synpred1_NDDL31605	= { FOLLOW_variableArgumentList_in_synpred1_NDDL31605_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_62_in_synpred1_NDDL31608  */
static	ANTLR3_BITWORD FOLLOW_62_in_synpred1_NDDL31608_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000E0000), ANTLR3_UINT64_LIT(0x00000FC000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_62_in_synpred1_NDDL31608	= { FOLLOW_62_in_synpred1_NDDL31608_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_violationMsg_in_synpred1_NDDL31610  */
static	ANTLR3_BITWORD FOLLOW_violationMsg_in_synpred1_NDDL31610_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_violationMsg_in_synpred1_NDDL31610	= { FOLLOW_violationMsg_in_synpred1_NDDL31610_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_synpred1_NDDL31614  */
static	ANTLR3_BITWORD FOLLOW_37_in_synpred1_NDDL31614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_synpred1_NDDL31614	= { FOLLOW_37_in_synpred1_NDDL31614_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_synpred2_NDDL32104  */
static	ANTLR3_BITWORD FOLLOW_77_in_synpred2_NDDL32104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_synpred2_NDDL32104	= { FOLLOW_77_in_synpred2_NDDL32104_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    98:1: nddlStatement : ( typeDefinition | enumDefinition | variableDeclarations | assignment | constraintInstantiation | classDeclaration | allocationStmt | rule | problemStmt | relation | methodInvocation | noopstatement );
 */
static const ANTLR3_INT32 dfa2_eot[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_eof[17] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_min[17] =
    {
	16, -1, -1, -1, 16, 37, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, 37
    };
static const ANTLR3_INT32 dfa2_max[17] =
    {
	108, -1, -1, -1, 101, 101, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, 74
    };
static const ANTLR3_INT32 dfa2_accept[17] =
    {
	-1, 1, 2, 3, -1, -1, 5, 6, 7, 9, 10, 11, 12, 8, -1, 4, -1
    };
static const ANTLR3_INT32 dfa2_special[17] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa2_T_empty	    NULL

static const ANTLR3_INT32 dfa2_T0[] =
    {
	6, -1, -1, -1, 11, -1, 15, -1, -1, 14, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 6, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
    };static const ANTLR3_INT32 dfa2_T1[] =
    {
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 6, -1, -1, -1, 6, -1, 15, -1, -1, 14, 15, -1, -1, -1, -1, 13, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
	6, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10
    };static const ANTLR3_INT32 dfa2_T2[] =
    {
	4, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 6, -1, -1, 
	1, 12, 6, -1, 3, 6, -1, -1, 8, 5, -1, -1, 7, -1, -1, -1, -1, 3, 3, 3, 3, 
	9, 9, 9, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, 
	-1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 6, 11
    };static const ANTLR3_INT32 dfa2_T3[] =
    {
	16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 11
    };static const ANTLR3_INT32 dfa2_T4[] =
    {
	6, -1, -1, -1, -1, -1, 15, -1, -1, 14, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 6, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, 
	-1, -1, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa2_transitions[] =
{
    dfa2_T2, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T1, dfa2_T4, 
    dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, 
    dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T3, dfa2_T_empty, dfa2_T0	
};


/* Declare tracking structure for Cyclic DFA 2
 */
static
ANTLR3_CYCLIC_DFA cdfa2
    =	{
	    2,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"98:1: nddlStatement : ( typeDefinition | enumDefinition | variableDeclarations | assignment | constraintInstantiation | classDeclaration | allocationStmt | rule | problemStmt | relation | methodInvocation | noopstatement );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa2_eot,	    /* EOT table			    */
	    dfa2_eof,	    /* EOF table			    */
	    dfa2_min,	    /* Minimum tokens for each state    */
	    dfa2_max,	    /* Maximum tokens for each state    */
	    dfa2_accept,	/* Accept table			    */
	    dfa2_special,	/* Special transition states	    */
	    dfa2_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 2
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    240:1: tokenStatement : ( variableDeclarations | constraintInstantiation | assignment );
 */
static const ANTLR3_INT32 dfa25_eot[8] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa25_eof[8] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa25_min[8] =
    {
	16, -1, 16, -1, 37, 16, -1, 37
    };
static const ANTLR3_INT32 dfa25_max[8] =
    {
	107, -1, 74, -1, 74, 16, -1, 74
    };
static const ANTLR3_INT32 dfa25_accept[8] =
    {
	-1, 1, -1, 2, -1, -1, 3, -1
    };
static const ANTLR3_INT32 dfa25_special[8] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa25_T_empty	    NULL

static const ANTLR3_INT32 dfa25_T0[] =
    {
	7
    };static const ANTLR3_INT32 dfa25_T1[] =
    {
	3, -1, -1, -1, -1, -1, 6, -1, -1, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa25_T2[] =
    {
	2, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 
	-1, -1, -1, 3, -1, 1, 3, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 1, 
	1, 1, 1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 3, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa25_T3[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 3, -1, -1, -1, 3, -1, 6, -1, -1, 5, 6, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
	3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa25_transitions[] =
{
    dfa25_T2, dfa25_T_empty, dfa25_T3, dfa25_T_empty, dfa25_T1, dfa25_T0, 
    dfa25_T_empty, dfa25_T1	
};


/* Declare tracking structure for Cyclic DFA 25
 */
static
ANTLR3_CYCLIC_DFA cdfa25
    =	{
	    25,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"240:1: tokenStatement : ( variableDeclarations | constraintInstantiation | assignment );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa25_eot,	    /* EOT table			    */
	    dfa25_eof,	    /* EOF table			    */
	    dfa25_min,	    /* Minimum tokens for each state    */
	    dfa25_max,	    /* Maximum tokens for each state    */
	    dfa25_accept,	/* Accept table			    */
	    dfa25_special,	/* Special transition states	    */
	    dfa25_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 25
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    250:1: ruleBlock : ( '{' ( ruleStatement )* '}' | ruleStatement -> ^( '{' ruleStatement ) );
 */
static const ANTLR3_INT32 dfa27_eot[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_eof[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_min[16] =
    {
	16, 16, -1, 16, 34, -1, 34, 34, 34, 104, 34, 34, 34, 34, 16, 34
    };
static const ANTLR3_INT32 dfa27_max[16] =
    {
	107, 107, -1, 101, 101, -1, 74, 74, 74, 105, 74, 74, 74, 74, 16, 74
    };
static const ANTLR3_INT32 dfa27_accept[16] =
    {
	-1, -1, 2, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_special[16] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa27_T_empty	    NULL

static const ANTLR3_INT32 dfa27_T0[] =
    {
	2, 2, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
	5
    };static const ANTLR3_INT32 dfa27_T1[] =
    {
	2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 
	-1, -1, 2, 2, -1, 2, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa27_T2[] =
    {
	2, 2, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
	5, -1, -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5
    };static const ANTLR3_INT32 dfa27_T3[] =
    {
	10, 10
    };static const ANTLR3_INT32 dfa27_T4[] =
    {
	2, 2, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
	5
    };static const ANTLR3_INT32 dfa27_T5[] =
    {
	15
    };static const ANTLR3_INT32 dfa27_T6[] =
    {
	3, 7, 8, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 
	5, -1, 5, 5, -1, 5, 5, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
	5, 5, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, 
	-1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 6, 6, 10, 10, 11, 12
    };static const ANTLR3_INT32 dfa27_T7[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, -1, 5, -1, -1, -1, 5, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
	5, -1, -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa27_transitions[] =
{
    dfa27_T1, dfa27_T6, dfa27_T_empty, dfa27_T7, dfa27_T2, dfa27_T_empty, 
    dfa27_T0, dfa27_T0, dfa27_T0, dfa27_T3, dfa27_T0, dfa27_T0, dfa27_T0, 
    dfa27_T0, dfa27_T5, dfa27_T4	
};


/* Declare tracking structure for Cyclic DFA 27
 */
static
ANTLR3_CYCLIC_DFA cdfa27
    =	{
	    27,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"250:1: ruleBlock : ( '{' ( ruleStatement )* '}' | ruleStatement -> ^( '{' ruleStatement ) );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa27_eot,	    /* EOT table			    */
	    dfa27_eof,	    /* EOF table			    */
	    dfa27_min,	    /* Minimum tokens for each state    */
	    dfa27_max,	    /* Maximum tokens for each state    */
	    dfa27_accept,	/* Accept table			    */
	    dfa27_special,	/* Special transition states	    */
	    dfa27_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 27
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    298:1: constraintInstantiation : ( ( ( IDENT variableArgumentList ( ':' violationMsg )? ';' )=> IDENT variableArgumentList ( ':' violationMsg )? ';' ) -> ^( CONSTRAINT_INSTANTIATION IDENT variableArgumentList ( violationMsg )? ) | enforceStatement );
 */
static const ANTLR3_INT32 dfa37_eot[114] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_eof[114] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_min[114] =
    {
	16, 37, -1, 16, 34, 34, 34, 104, 34, 34, 34, 34, 17, 16, 34, 34, -1, 16, 
	37, 17, 17, 104, 17, 17, 17, 34, 34, 34, 104, 34, 34, 34, 34, 34, 16, 34, 
	34, 34, 104, 34, 34, 34, 34, 17, 16, 34, 34, 19, 0, 17, 39, 39, 104, 39, 
	39, 39, 16, 34, 16, 34, 17, 17, 104, 17, 17, 17, 34, 34, 34, 104, 34, 34, 
	34, 34, 34, 16, 37, 34, 34, 34, 34, 104, 34, 34, 34, 34, 34, 34, 17, 39, 
	39, 104, 39, 39, 39, 16, 34, 16, 34, 16, 34, 34, 34, 34, 104, 34, 34, 34, 
	34, 34, 34, 34, 16, 34
    };
static const ANTLR3_INT32 dfa37_max[114] =
    {
	107, 74, -1, 107, 74, 74, 74, 105, 74, 74, 74, 74, 107, 107, 74, 74, -1, 
	107, 74, 107, 107, 105, 107, 107, 107, 35, 35, 35, 105, 35, 35, 35, 35, 
	46, 16, 74, 74, 74, 105, 74, 74, 74, 74, 107, 107, 74, 74, 19, 0, 107, 
	39, 39, 105, 39, 39, 39, 107, 74, 16, 74, 107, 107, 105, 107, 107, 107, 
	35, 35, 35, 105, 35, 35, 35, 35, 46, 16, 37, 74, 35, 35, 35, 105, 35, 35, 
	35, 35, 46, 46, 107, 39, 39, 105, 39, 39, 39, 107, 74, 16, 74, 16, 74, 
	35, 35, 35, 105, 35, 35, 35, 35, 46, 46, 46, 16, 46
    };
static const ANTLR3_INT32 dfa37_accept[114] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_special[114] =
    {	
	-1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa37_T_empty	    NULL

static const ANTLR3_INT32 dfa37_T0[] =
    {
	77
    };static const ANTLR3_INT32 dfa37_T1[] =
    {
	100
    };static const ANTLR3_INT32 dfa37_T2[] =
    {
	56, 57
    };static const ANTLR3_INT32 dfa37_T3[] =
    {
	95, 96
    };static const ANTLR3_INT32 dfa37_T4[] =
    {
	95, 96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97
    };static const ANTLR3_INT32 dfa37_T5[] =
    {
	56, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58
    };static const ANTLR3_INT32 dfa37_T6[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };static const ANTLR3_INT32 dfa37_T7[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa37_T8[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 34, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };static const ANTLR3_INT32 dfa37_T9[] =
    {
	17, -1, -1, -1, -1, -1, -1, 2, 18, -1, -1, -1, 75, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };static const ANTLR3_INT32 dfa37_T10[] =
    {
	48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 47, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa37_T11[] =
    {
	45, 36, 37, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 
	-1, -1, -1, -1, 43, -1, -1, 2, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 35, 39, 39, 
	40, 41
    };static const ANTLR3_INT32 dfa37_T12[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 75, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };static const ANTLR3_INT32 dfa37_T13[] =
    {
	14, 5, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, 
	-1, -1, -1, 12, -1, -1, 2, 16, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 8, 8, 9, 10
    };static const ANTLR3_INT32 dfa37_T14[] =
    {
	76
    };static const ANTLR3_INT32 dfa37_T15[] =
    {
	50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 53, 54, 
	55
    };static const ANTLR3_INT32 dfa37_T16[] =
    {
	89, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 88, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 92, 92, 93, 
	94
    };static const ANTLR3_INT32 dfa37_T17[] =
    {
	95, 96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 112
    };static const ANTLR3_INT32 dfa37_T18[] =
    {
	56, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99
    };static const ANTLR3_INT32 dfa37_T19[] =
    {
	60, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 63, 64, 
	65
    };static const ANTLR3_INT32 dfa37_T20[] =
    {
	19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 22, 23, 
	24
    };static const ANTLR3_INT32 dfa37_T21[] =
    {
	-1
    };static const ANTLR3_INT32 dfa37_T22[] =
    {
	48
    };static const ANTLR3_INT32 dfa37_T23[] =
    {
	2, -1, -1, -1, 3, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa37_T24[] =
    {
	105, 105
    };static const ANTLR3_INT32 dfa37_T25[] =
    {
	39, 39
    };static const ANTLR3_INT32 dfa37_T26[] =
    {
	29, 29
    };static const ANTLR3_INT32 dfa37_T27[] =
    {
	8, 8
    };static const ANTLR3_INT32 dfa37_T28[] =
    {
	22, 22
    };static const ANTLR3_INT32 dfa37_T29[] =
    {
	53, 53
    };static const ANTLR3_INT32 dfa37_T30[] =
    {
	63, 63
    };static const ANTLR3_INT32 dfa37_T31[] =
    {
	70, 70
    };static const ANTLR3_INT32 dfa37_T32[] =
    {
	82, 82
    };static const ANTLR3_INT32 dfa37_T33[] =
    {
	92, 92
    };static const ANTLR3_INT32 dfa37_T34[] =
    {
	113
    };static const ANTLR3_INT32 dfa37_T35[] =
    {
	111
    };static const ANTLR3_INT32 dfa37_T36[] =
    {
	110
    };static const ANTLR3_INT32 dfa37_T37[] =
    {
	59
    };static const ANTLR3_INT32 dfa37_T38[] =
    {
	87
    };static const ANTLR3_INT32 dfa37_T39[] =
    {
	98
    };static const ANTLR3_INT32 dfa37_T40[] =
    {
	86, 79, 80, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, 78, 82, 82, 
	83, 84
    };static const ANTLR3_INT32 dfa37_T41[] =
    {
	109, 102, 103, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 109, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 101, 101, 105, 
	105, 106, 107
    };static const ANTLR3_INT32 dfa37_T42[] =
    {
	50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 53, 54, 
	55
    };static const ANTLR3_INT32 dfa37_T43[] =
    {
	89, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 92, 92, 93, 
	94
    };static const ANTLR3_INT32 dfa37_T44[] =
    {
	74, 67, 68, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 66, 70, 70, 
	71, 72
    };static const ANTLR3_INT32 dfa37_T45[] =
    {
	33, 26, 27, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 25, 29, 29, 
	30, 31
    };static const ANTLR3_INT32 dfa37_T46[] =
    {
	17, -1, -1, -1, -1, -1, -1, 2, 18, -1, -1, -1, 34, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa37_transitions[] =
{
    dfa37_T7, dfa37_T23, dfa37_T_empty, dfa37_T13, dfa37_T6, dfa37_T6, dfa37_T6, 
    dfa37_T27, dfa37_T6, dfa37_T6, dfa37_T6, dfa37_T6, dfa37_T20, dfa37_T45, 
    dfa37_T46, dfa37_T8, dfa37_T_empty, dfa37_T11, dfa37_T10, dfa37_T15, 
    dfa37_T15, dfa37_T28, dfa37_T15, dfa37_T15, dfa37_T15, dfa37_T2, dfa37_T2, 
    dfa37_T2, dfa37_T26, dfa37_T2, dfa37_T2, dfa37_T2, dfa37_T2, dfa37_T5, 
    dfa37_T37, dfa37_T6, dfa37_T6, dfa37_T6, dfa37_T25, dfa37_T6, dfa37_T6, 
    dfa37_T6, dfa37_T6, dfa37_T19, dfa37_T44, dfa37_T9, dfa37_T12, dfa37_T14, 
    dfa37_T21, dfa37_T42, dfa37_T0, dfa37_T0, dfa37_T29, dfa37_T0, dfa37_T0, 
    dfa37_T0, dfa37_T40, dfa37_T6, dfa37_T38, dfa37_T8, dfa37_T16, dfa37_T16, 
    dfa37_T30, dfa37_T16, dfa37_T16, dfa37_T16, dfa37_T3, dfa37_T3, dfa37_T3, 
    dfa37_T31, dfa37_T3, dfa37_T3, dfa37_T3, dfa37_T3, dfa37_T4, dfa37_T39, 
    dfa37_T22, dfa37_T6, dfa37_T2, dfa37_T2, dfa37_T2, dfa37_T32, dfa37_T2, 
    dfa37_T2, dfa37_T2, dfa37_T2, dfa37_T18, dfa37_T5, dfa37_T43, dfa37_T1, 
    dfa37_T1, dfa37_T33, dfa37_T1, dfa37_T1, dfa37_T1, dfa37_T41, dfa37_T6, 
    dfa37_T36, dfa37_T12, dfa37_T35, dfa37_T6, dfa37_T3, dfa37_T3, dfa37_T3, 
    dfa37_T24, dfa37_T3, dfa37_T3, dfa37_T3, dfa37_T3, dfa37_T17, dfa37_T4, 
    dfa37_T18, dfa37_T34, dfa37_T17	
};

static ANTLR3_INT32 dfa37_sst(pNDDL3Parser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA37_3;

    	    ANTLR3_MARKER index37_3;


    		LA37_3 = LA(1);

    	 
    	    index37_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (((LA37_3 >= 102) && (LA37_3 <= 103))) )
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA37_3 == INT) )
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA37_3 == FLOAT) )
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA37_3 == 72) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (((LA37_3 >= 104) && (LA37_3 <= 105))) )
    	    {
    	        s = 8;
    	    }

    	    else if ( (LA37_3 == 106) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (LA37_3 == 107) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (LA37_3 == STRING) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (LA37_3 == 38) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (LA37_3 == 33) )
    	    {
    	        s = 13;
    	    }

    	    else if ( (LA37_3 == IDENT) )
    	    {
    	        s = 14;
    	    }

    	    else if ( (LA37_3 == 45) )
    	    {
    	        s = 15;
    	    }

    	    else if ( (LA37_3 == 41) )
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA37_3 == 42) && (synpred1_NDDL3(ctx)))
    	    {
    	        s = 16;
    	    }

    	 
    		SEEK(index37_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA37_48;

    	    ANTLR3_MARKER index37_48;


    		LA37_48 = LA(1);

    	 
    	    index37_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred1_NDDL3(ctx)) )
    	    {
    	        s = 16;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index37_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"298:1: constraintInstantiation : ( ( ( IDENT variableArgumentList ( ':' violationMsg )? ';' )=> IDENT variableArgumentList ( ':' violationMsg )? ';' ) -> ^( CONSTRAINT_INSTANTIATION IDENT variableArgumentList ( violationMsg )? ) | enforceStatement );";
    EXCEPTION->decisionNum  = 37;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 37
 */
static
ANTLR3_CYCLIC_DFA cdfa37
    =	{
	    37,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"298:1: constraintInstantiation : ( ( ( IDENT variableArgumentList ( ':' violationMsg )? ';' )=> IDENT variableArgumentList ( ':' violationMsg )? ';' ) -> ^( CONSTRAINT_INSTANTIATION IDENT variableArgumentList ( violationMsg )? ) | enforceStatement );",	
	    (CDFA_SPECIAL_FUNC) dfa37_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa37_eot,	    /* EOT table			    */
	    dfa37_eof,	    /* EOF table			    */
	    dfa37_min,	    /* Minimum tokens for each state    */
	    dfa37_max,	    /* Maximum tokens for each state    */
	    dfa37_accept,	/* Accept table			    */
	    dfa37_special,	/* Special transition states	    */
	    dfa37_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 37
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start nddl
 * NDDL/base/antlr/NDDL3.g:93:1: nddl : ( nddlStatement )* -> ^( NDDL ( nddlStatement )* ) ;
 */
static NDDL3Parser_nddl_return
nddl(pNDDL3Parser ctx)
{   
    NDDL3Parser_nddl_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_nddlStatement_return nddlStatement1;
    #undef	RETURN_TYPE_nddlStatement1
    #define	RETURN_TYPE_nddlStatement1 NDDL3Parser_nddlStatement_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_nddlStatement;
    /* Initialize rule variables
     */


    root_0 = NULL;

    nddlStatement1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_nddlStatement   = NULL;
    #define CREATE_stream_nddlStatement  if (stream_nddlStatement == NULL) {stream_nddlStatement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule nddlStatement"); }

    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:94:5: ( ( nddlStatement )* -> ^( NDDL ( nddlStatement )* ) )
        // NDDL/base/antlr/NDDL3.g:94:9: ( nddlStatement )*
        {

            // NDDL/base/antlr/NDDL3.g:94:9: ( nddlStatement )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (((LA1_0 >= IDENT) && (LA1_0 <= STRING)) || ((LA1_0 >= 32) && (LA1_0 <= 33)) || ((LA1_0 >= 36) && (LA1_0 <= 38)) || ((LA1_0 >= 40) && (LA1_0 <= 41)) || ((LA1_0 >= 44) && (LA1_0 <= 45)) || LA1_0 == 48 || ((LA1_0 >= 53) && (LA1_0 <= 59)) || LA1_0 == 63 || LA1_0 == 72 || ((LA1_0 >= 79) && (LA1_0 <= 108))) ) 
                    {
                        alt1=1;
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:94:9: nddlStatement
            	    {
            	        FOLLOWPUSH(FOLLOW_nddlStatement_in_nddl184);
            	        nddlStatement1=nddlStatement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenddlEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_nddlStatement; stream_nddlStatement->add(stream_nddlStatement, nddlStatement1.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : nddlStatement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 95:9: -> ^( NDDL ( nddlStatement )* )
            	{
            	    // NDDL/base/antlr/NDDL3.g:95:12: ^( NDDL ( nddlStatement )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NDDL, (pANTLR3_UINT8)"NDDL"), root_1));

            	        // NDDL/base/antlr/NDDL3.g:95:19: ( nddlStatement )*
            	        {
            	        	while ( (stream_nddlStatement != NULL && stream_nddlStatement->hasNext(stream_nddlStatement))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_nddlStatement == NULL ? NULL : stream_nddlStatement->nextTree(stream_nddlStatement));

            	        	}
            	        	if ( stream_nddlStatement != NULL) stream_nddlStatement->reset(stream_nddlStatement);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenddlEx; /* Prevent compiler warnings */
    rulenddlEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_nddlStatement != NULL) stream_nddlStatement->free(stream_nddlStatement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end nddl */

/** 
 * $ANTLR start nddlStatement
 * NDDL/base/antlr/NDDL3.g:98:1: nddlStatement : ( typeDefinition | enumDefinition | variableDeclarations | assignment | constraintInstantiation | classDeclaration | allocationStmt | rule | problemStmt | relation | methodInvocation | noopstatement );
 */
static NDDL3Parser_nddlStatement_return
nddlStatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_nddlStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_typeDefinition_return typeDefinition2;
    #undef	RETURN_TYPE_typeDefinition2
    #define	RETURN_TYPE_typeDefinition2 NDDL3Parser_typeDefinition_return

    NDDL3Parser_enumDefinition_return enumDefinition3;
    #undef	RETURN_TYPE_enumDefinition3
    #define	RETURN_TYPE_enumDefinition3 NDDL3Parser_enumDefinition_return

    NDDL3Parser_variableDeclarations_return variableDeclarations4;
    #undef	RETURN_TYPE_variableDeclarations4
    #define	RETURN_TYPE_variableDeclarations4 NDDL3Parser_variableDeclarations_return

    NDDL3Parser_assignment_return assignment5;
    #undef	RETURN_TYPE_assignment5
    #define	RETURN_TYPE_assignment5 NDDL3Parser_assignment_return

    NDDL3Parser_constraintInstantiation_return constraintInstantiation6;
    #undef	RETURN_TYPE_constraintInstantiation6
    #define	RETURN_TYPE_constraintInstantiation6 NDDL3Parser_constraintInstantiation_return

    NDDL3Parser_classDeclaration_return classDeclaration7;
    #undef	RETURN_TYPE_classDeclaration7
    #define	RETURN_TYPE_classDeclaration7 NDDL3Parser_classDeclaration_return

    NDDL3Parser_allocationStmt_return allocationStmt8;
    #undef	RETURN_TYPE_allocationStmt8
    #define	RETURN_TYPE_allocationStmt8 NDDL3Parser_allocationStmt_return

    NDDL3Parser_rule_return rule9;
    #undef	RETURN_TYPE_rule9
    #define	RETURN_TYPE_rule9 NDDL3Parser_rule_return

    NDDL3Parser_problemStmt_return problemStmt10;
    #undef	RETURN_TYPE_problemStmt10
    #define	RETURN_TYPE_problemStmt10 NDDL3Parser_problemStmt_return

    NDDL3Parser_relation_return relation11;
    #undef	RETURN_TYPE_relation11
    #define	RETURN_TYPE_relation11 NDDL3Parser_relation_return

    NDDL3Parser_methodInvocation_return methodInvocation12;
    #undef	RETURN_TYPE_methodInvocation12
    #define	RETURN_TYPE_methodInvocation12 NDDL3Parser_methodInvocation_return

    NDDL3Parser_noopstatement_return noopstatement13;
    #undef	RETURN_TYPE_noopstatement13
    #define	RETURN_TYPE_noopstatement13 NDDL3Parser_noopstatement_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    typeDefinition2.tree = NULL;

    enumDefinition3.tree = NULL;

    variableDeclarations4.tree = NULL;

    assignment5.tree = NULL;

    constraintInstantiation6.tree = NULL;

    classDeclaration7.tree = NULL;

    allocationStmt8.tree = NULL;

    rule9.tree = NULL;

    problemStmt10.tree = NULL;

    relation11.tree = NULL;

    methodInvocation12.tree = NULL;

    noopstatement13.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:99:5: ( typeDefinition | enumDefinition | variableDeclarations | assignment | constraintInstantiation | classDeclaration | allocationStmt | rule | problemStmt | relation | methodInvocation | noopstatement )
            
            ANTLR3_UINT32 alt2;

            alt2=12;

            alt2 = cdfa2.predict(ctx, RECOGNIZER, ISTREAM, &cdfa2);
            if  (HASEXCEPTION())
            {
                goto rulenddlStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt2) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:99:9: typeDefinition
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_typeDefinition_in_nddlStatement221);
        	        typeDefinition2=typeDefinition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, typeDefinition2.tree);

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:100:9: enumDefinition
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_enumDefinition_in_nddlStatement231);
        	        enumDefinition3=enumDefinition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enumDefinition3.tree);

        	    }
        	    break;
        	case 3:
        	    // NDDL/base/antlr/NDDL3.g:101:9: variableDeclarations
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableDeclarations_in_nddlStatement241);
        	        variableDeclarations4=variableDeclarations(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableDeclarations4.tree);

        	    }
        	    break;
        	case 4:
        	    // NDDL/base/antlr/NDDL3.g:102:9: assignment
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_assignment_in_nddlStatement251);
        	        assignment5=assignment(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, assignment5.tree);

        	    }
        	    break;
        	case 5:
        	    // NDDL/base/antlr/NDDL3.g:103:9: constraintInstantiation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constraintInstantiation_in_nddlStatement261);
        	        constraintInstantiation6=constraintInstantiation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constraintInstantiation6.tree);

        	    }
        	    break;
        	case 6:
        	    // NDDL/base/antlr/NDDL3.g:104:9: classDeclaration
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_classDeclaration_in_nddlStatement271);
        	        classDeclaration7=classDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, classDeclaration7.tree);

        	    }
        	    break;
        	case 7:
        	    // NDDL/base/antlr/NDDL3.g:105:9: allocationStmt
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_allocationStmt_in_nddlStatement281);
        	        allocationStmt8=allocationStmt(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, allocationStmt8.tree);

        	    }
        	    break;
        	case 8:
        	    // NDDL/base/antlr/NDDL3.g:106:9: rule
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_rule_in_nddlStatement291);
        	        rule9=rule(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, rule9.tree);

        	    }
        	    break;
        	case 9:
        	    // NDDL/base/antlr/NDDL3.g:107:9: problemStmt
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_problemStmt_in_nddlStatement301);
        	        problemStmt10=problemStmt(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, problemStmt10.tree);

        	    }
        	    break;
        	case 10:
        	    // NDDL/base/antlr/NDDL3.g:108:9: relation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_relation_in_nddlStatement311);
        	        relation11=relation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, relation11.tree);

        	    }
        	    break;
        	case 11:
        	    // NDDL/base/antlr/NDDL3.g:109:9: methodInvocation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_methodInvocation_in_nddlStatement321);
        	        methodInvocation12=methodInvocation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, methodInvocation12.tree);

        	    }
        	    break;
        	case 12:
        	    // NDDL/base/antlr/NDDL3.g:110:9: noopstatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noopstatement_in_nddlStatement331);
        	        noopstatement13=noopstatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, noopstatement13.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenddlStatementEx; /* Prevent compiler warnings */
    rulenddlStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end nddlStatement */

/** 
 * $ANTLR start enumDefinition
 * NDDL/base/antlr/NDDL3.g:113:1: enumDefinition : 'enum' IDENT enumValues ;
 */
static NDDL3Parser_enumDefinition_return
enumDefinition(pNDDL3Parser ctx)
{   
    NDDL3Parser_enumDefinition_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal14;
    pANTLR3_COMMON_TOKEN    IDENT15;
    NDDL3Parser_enumValues_return enumValues16;
    #undef	RETURN_TYPE_enumValues16
    #define	RETURN_TYPE_enumValues16 NDDL3Parser_enumValues_return

    pANTLR3_BASE_TREE string_literal14_tree;
    pANTLR3_BASE_TREE IDENT15_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal14       = NULL;
    IDENT15       = NULL;
    enumValues16.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal14_tree   = NULL;
    IDENT15_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:114:5: ( 'enum' IDENT enumValues )
        // NDDL/base/antlr/NDDL3.g:114:7: 'enum' IDENT enumValues
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            string_literal14 = (pANTLR3_COMMON_TOKEN) MATCHT(32, &FOLLOW_32_in_enumDefinition348); 
            if  (HASEXCEPTION())
            {
                goto ruleenumDefinitionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            string_literal14_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal14));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal14_tree, root_0));
            }
            IDENT15 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_enumDefinition351); 
            if  (HASEXCEPTION())
            {
                goto ruleenumDefinitionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            IDENT15_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT15));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT15_tree);
            }
            FOLLOWPUSH(FOLLOW_enumValues_in_enumDefinition353);
            enumValues16=enumValues(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleenumDefinitionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enumValues16.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenumDefinitionEx; /* Prevent compiler warnings */
    ruleenumDefinitionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enumDefinition */

/** 
 * $ANTLR start enumValues
 * NDDL/base/antlr/NDDL3.g:117:1: enumValues : '{' IDENT ( ',' IDENT )* '}' ;
 */
static NDDL3Parser_enumValues_return
enumValues(pNDDL3Parser ctx)
{   
    NDDL3Parser_enumValues_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal17;
    pANTLR3_COMMON_TOKEN    IDENT18;
    pANTLR3_COMMON_TOKEN    char_literal19;
    pANTLR3_COMMON_TOKEN    IDENT20;
    pANTLR3_COMMON_TOKEN    char_literal21;

    pANTLR3_BASE_TREE char_literal17_tree;
    pANTLR3_BASE_TREE IDENT18_tree;
    pANTLR3_BASE_TREE char_literal19_tree;
    pANTLR3_BASE_TREE IDENT20_tree;
    pANTLR3_BASE_TREE char_literal21_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal17       = NULL;
    IDENT18       = NULL;
    char_literal19       = NULL;
    IDENT20       = NULL;
    char_literal21       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal17_tree   = NULL;
    IDENT18_tree   = NULL;
    char_literal19_tree   = NULL;
    IDENT20_tree   = NULL;
    char_literal21_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:118:5: ( '{' IDENT ( ',' IDENT )* '}' )
        // NDDL/base/antlr/NDDL3.g:118:7: '{' IDENT ( ',' IDENT )* '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal17 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_enumValues373); 
            if  (HASEXCEPTION())
            {
                goto ruleenumValuesEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal17_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal17));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal17_tree, root_0));
            }
            IDENT18 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_enumValues376); 
            if  (HASEXCEPTION())
            {
                goto ruleenumValuesEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            IDENT18_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT18));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT18_tree);
            }

            // NDDL/base/antlr/NDDL3.g:118:18: ( ',' IDENT )*

            for (;;)
            {
                int alt3=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA3_0 = LA(1);
                    if ( (LA3_0 == 34) ) 
                    {
                        alt3=1;
                    }

                }
                switch (alt3) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:118:19: ',' IDENT
            	    {
            	        char_literal19 = (pANTLR3_COMMON_TOKEN) MATCHT(34, &FOLLOW_34_in_enumValues379); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenumValuesEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        IDENT20 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_enumValues382); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenumValuesEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        IDENT20_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT20));
            	        ADAPTOR->addChild(ADAPTOR, root_0, IDENT20_tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */

            char_literal21 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_enumValues386); 
            if  (HASEXCEPTION())
            {
                goto ruleenumValuesEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenumValuesEx; /* Prevent compiler warnings */
    ruleenumValuesEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enumValues */

/** 
 * $ANTLR start typeDefinition
 * NDDL/base/antlr/NDDL3.g:121:1: typeDefinition : 'typedef' type baseDomain IDENT ';' -> ^( 'typedef' IDENT type baseDomain ) ;
 */
static NDDL3Parser_typeDefinition_return
typeDefinition(pNDDL3Parser ctx)
{   
    NDDL3Parser_typeDefinition_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal22;
    pANTLR3_COMMON_TOKEN    IDENT25;
    pANTLR3_COMMON_TOKEN    char_literal26;
    NDDL3Parser_type_return type23;
    #undef	RETURN_TYPE_type23
    #define	RETURN_TYPE_type23 NDDL3Parser_type_return

    NDDL3Parser_baseDomain_return baseDomain24;
    #undef	RETURN_TYPE_baseDomain24
    #define	RETURN_TYPE_baseDomain24 NDDL3Parser_baseDomain_return

    pANTLR3_BASE_TREE string_literal22_tree;
    pANTLR3_BASE_TREE IDENT25_tree;
    pANTLR3_BASE_TREE char_literal26_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_36;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_37;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_baseDomain;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal22       = NULL;
    IDENT25       = NULL;
    char_literal26       = NULL;
    type23.tree = NULL;

    baseDomain24.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal22_tree   = NULL;
    IDENT25_tree   = NULL;
    char_literal26_tree   = NULL;

    stream_IDENT   = NULL;
    #define CREATE_stream_IDENT  if (stream_IDENT == NULL) {stream_IDENT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); } 
    stream_36   = NULL;
    #define CREATE_stream_36  if (stream_36 == NULL) {stream_36 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 36"); } 
    stream_37   = NULL;
    #define CREATE_stream_37  if (stream_37 == NULL) {stream_37 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 37"); } 
    stream_baseDomain   = NULL;
    #define CREATE_stream_baseDomain  if (stream_baseDomain == NULL) {stream_baseDomain = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule baseDomain"); }
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:122:2: ( 'typedef' type baseDomain IDENT ';' -> ^( 'typedef' IDENT type baseDomain ) )
        // NDDL/base/antlr/NDDL3.g:122:4: 'typedef' type baseDomain IDENT ';'
        {
            string_literal22 = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_typeDefinition417); 
            if  (HASEXCEPTION())
            {
                goto ruletypeDefinitionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_36; stream_36->add(stream_36, string_literal22, NULL); }

            FOLLOWPUSH(FOLLOW_type_in_typeDefinition419);
            type23=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletypeDefinitionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_type; stream_type->add(stream_type, type23.tree, NULL); }
            FOLLOWPUSH(FOLLOW_baseDomain_in_typeDefinition421);
            baseDomain24=baseDomain(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletypeDefinitionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_baseDomain; stream_baseDomain->add(stream_baseDomain, baseDomain24.tree, NULL); }
            IDENT25 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_typeDefinition423); 
            if  (HASEXCEPTION())
            {
                goto ruletypeDefinitionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_IDENT; stream_IDENT->add(stream_IDENT, IDENT25, NULL); }

            char_literal26 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_typeDefinition425); 
            if  (HASEXCEPTION())
            {
                goto ruletypeDefinitionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_37; stream_37->add(stream_37, char_literal26, NULL); }


             
            /* AST REWRITE
             * elements          : 36, IDENT, type, baseDomain
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 123:9: -> ^( 'typedef' IDENT type baseDomain )
            	{
            	    // NDDL/base/antlr/NDDL3.g:123:12: ^( 'typedef' IDENT type baseDomain )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_36 == NULL ? NULL : stream_36->nextNode(stream_36), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT == NULL ? NULL : stream_IDENT->nextNode(stream_IDENT));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_baseDomain == NULL ? NULL : stream_baseDomain->nextTree(stream_baseDomain));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeDefinitionEx; /* Prevent compiler warnings */
    ruletypeDefinitionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENT != NULL) stream_IDENT->free(stream_IDENT);
        if (stream_36 != NULL) stream_36->free(stream_36);
        if (stream_37 != NULL) stream_37->free(stream_37);
        if (stream_baseDomain != NULL) stream_baseDomain->free(stream_baseDomain);
        if (stream_type != NULL) stream_type->free(stream_type);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end typeDefinition */

/** 
 * $ANTLR start baseDomain
 * NDDL/base/antlr/NDDL3.g:126:1: baseDomain : ( intervalBaseDomain | enumeratedBaseDomain );
 */
static NDDL3Parser_baseDomain_return
baseDomain(pNDDL3Parser ctx)
{   
    NDDL3Parser_baseDomain_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_intervalBaseDomain_return intervalBaseDomain27;
    #undef	RETURN_TYPE_intervalBaseDomain27
    #define	RETURN_TYPE_intervalBaseDomain27 NDDL3Parser_intervalBaseDomain_return

    NDDL3Parser_enumeratedBaseDomain_return enumeratedBaseDomain28;
    #undef	RETURN_TYPE_enumeratedBaseDomain28
    #define	RETURN_TYPE_enumeratedBaseDomain28 NDDL3Parser_enumeratedBaseDomain_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    intervalBaseDomain27.tree = NULL;

    enumeratedBaseDomain28.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:127:5: ( intervalBaseDomain | enumeratedBaseDomain )
            
            ANTLR3_UINT32 alt4;

            alt4=2;


            {
                int LA4_0 = LA(1);
                if ( (LA4_0 == 38) ) 
                {
                    alt4=1;
                }
                else if ( (LA4_0 == 33) ) 
                {
                    alt4=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 4;
                    EXCEPTION->state        = 0;


                    goto rulebaseDomainEx;
                }
            }
            switch (alt4) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:127:9: intervalBaseDomain
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_intervalBaseDomain_in_baseDomain463);
        	        intervalBaseDomain27=intervalBaseDomain(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebaseDomainEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, intervalBaseDomain27.tree);

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:128:9: enumeratedBaseDomain
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_enumeratedBaseDomain_in_baseDomain473);
        	        enumeratedBaseDomain28=enumeratedBaseDomain(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebaseDomainEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enumeratedBaseDomain28.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebaseDomainEx; /* Prevent compiler warnings */
    rulebaseDomainEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end baseDomain */

/** 
 * $ANTLR start intervalBaseDomain
 * NDDL/base/antlr/NDDL3.g:131:1: intervalBaseDomain : '[' numericLiteral ( ',' )? numericLiteral ']' ;
 */
static NDDL3Parser_intervalBaseDomain_return
intervalBaseDomain(pNDDL3Parser ctx)
{   
    NDDL3Parser_intervalBaseDomain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal29;
    pANTLR3_COMMON_TOKEN    char_literal31;
    pANTLR3_COMMON_TOKEN    char_literal33;
    NDDL3Parser_numericLiteral_return numericLiteral30;
    #undef	RETURN_TYPE_numericLiteral30
    #define	RETURN_TYPE_numericLiteral30 NDDL3Parser_numericLiteral_return

    NDDL3Parser_numericLiteral_return numericLiteral32;
    #undef	RETURN_TYPE_numericLiteral32
    #define	RETURN_TYPE_numericLiteral32 NDDL3Parser_numericLiteral_return

    pANTLR3_BASE_TREE char_literal29_tree;
    pANTLR3_BASE_TREE char_literal31_tree;
    pANTLR3_BASE_TREE char_literal33_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal29       = NULL;
    char_literal31       = NULL;
    char_literal33       = NULL;
    numericLiteral30.tree = NULL;

    numericLiteral32.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal29_tree   = NULL;
    char_literal31_tree   = NULL;
    char_literal33_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:132:5: ( '[' numericLiteral ( ',' )? numericLiteral ']' )
        // NDDL/base/antlr/NDDL3.g:132:9: '[' numericLiteral ( ',' )? numericLiteral ']'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal29 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_intervalBaseDomain492); 
            if  (HASEXCEPTION())
            {
                goto ruleintervalBaseDomainEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal29_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal29));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal29_tree, root_0));
            }
            FOLLOWPUSH(FOLLOW_numericLiteral_in_intervalBaseDomain495);
            numericLiteral30=numericLiteral(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleintervalBaseDomainEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, numericLiteral30.tree);

            // NDDL/base/antlr/NDDL3.g:132:29: ( ',' )?
            {
                int alt5=2;
                {
                    int LA5_0 = LA(1);
                    if ( (LA5_0 == 34) ) 
                    {
                        alt5=1;
                    }
                }
                switch (alt5) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:132:30: ','
            	    {
            	        char_literal31 = (pANTLR3_COMMON_TOKEN) MATCHT(34, &FOLLOW_34_in_intervalBaseDomain498); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleintervalBaseDomainEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_numericLiteral_in_intervalBaseDomain503);
            numericLiteral32=numericLiteral(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleintervalBaseDomainEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, numericLiteral32.tree);
            char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_intervalBaseDomain505); 
            if  (HASEXCEPTION())
            {
                goto ruleintervalBaseDomainEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleintervalBaseDomainEx; /* Prevent compiler warnings */
    ruleintervalBaseDomainEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end intervalBaseDomain */

/** 
 * $ANTLR start enumeratedBaseDomain
 * NDDL/base/antlr/NDDL3.g:135:1: enumeratedBaseDomain : '{' baseDomainValue ( ',' baseDomainValue )* '}' ;
 */
static NDDL3Parser_enumeratedBaseDomain_return
enumeratedBaseDomain(pNDDL3Parser ctx)
{   
    NDDL3Parser_enumeratedBaseDomain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal34;
    pANTLR3_COMMON_TOKEN    char_literal36;
    pANTLR3_COMMON_TOKEN    char_literal38;
    NDDL3Parser_baseDomainValue_return baseDomainValue35;
    #undef	RETURN_TYPE_baseDomainValue35
    #define	RETURN_TYPE_baseDomainValue35 NDDL3Parser_baseDomainValue_return

    NDDL3Parser_baseDomainValue_return baseDomainValue37;
    #undef	RETURN_TYPE_baseDomainValue37
    #define	RETURN_TYPE_baseDomainValue37 NDDL3Parser_baseDomainValue_return

    pANTLR3_BASE_TREE char_literal34_tree;
    pANTLR3_BASE_TREE char_literal36_tree;
    pANTLR3_BASE_TREE char_literal38_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal34       = NULL;
    char_literal36       = NULL;
    char_literal38       = NULL;
    baseDomainValue35.tree = NULL;

    baseDomainValue37.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal34_tree   = NULL;
    char_literal36_tree   = NULL;
    char_literal38_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:136:5: ( '{' baseDomainValue ( ',' baseDomainValue )* '}' )
        // NDDL/base/antlr/NDDL3.g:136:9: '{' baseDomainValue ( ',' baseDomainValue )* '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_enumeratedBaseDomain525); 
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedBaseDomainEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal34_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal34));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal34_tree, root_0));
            }
            FOLLOWPUSH(FOLLOW_baseDomainValue_in_enumeratedBaseDomain528);
            baseDomainValue35=baseDomainValue(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedBaseDomainEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, baseDomainValue35.tree);

            // NDDL/base/antlr/NDDL3.g:136:30: ( ',' baseDomainValue )*

            for (;;)
            {
                int alt6=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == 34) ) 
                    {
                        alt6=1;
                    }

                }
                switch (alt6) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:136:31: ',' baseDomainValue
            	    {
            	        char_literal36 = (pANTLR3_COMMON_TOKEN) MATCHT(34, &FOLLOW_34_in_enumeratedBaseDomain531); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenumeratedBaseDomainEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_baseDomainValue_in_enumeratedBaseDomain534);
            	        baseDomainValue37=baseDomainValue(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenumeratedBaseDomainEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, baseDomainValue37.tree);

            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */

            char_literal38 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_enumeratedBaseDomain538); 
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedBaseDomainEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenumeratedBaseDomainEx; /* Prevent compiler warnings */
    ruleenumeratedBaseDomainEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enumeratedBaseDomain */

/** 
 * $ANTLR start baseDomainValue
 * NDDL/base/antlr/NDDL3.g:139:1: baseDomainValue : ( literalValue | qualified );
 */
static NDDL3Parser_baseDomainValue_return
baseDomainValue(pNDDL3Parser ctx)
{   
    NDDL3Parser_baseDomainValue_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_literalValue_return literalValue39;
    #undef	RETURN_TYPE_literalValue39
    #define	RETURN_TYPE_literalValue39 NDDL3Parser_literalValue_return

    NDDL3Parser_qualified_return qualified40;
    #undef	RETURN_TYPE_qualified40
    #define	RETURN_TYPE_qualified40 NDDL3Parser_qualified_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    literalValue39.tree = NULL;

    qualified40.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:140:5: ( literalValue | qualified )
            
            ANTLR3_UINT32 alt7;

            alt7=2;


            {
                int LA7_0 = LA(1);
                if ( (((LA7_0 >= INT) && (LA7_0 <= STRING)) || LA7_0 == 72 || ((LA7_0 >= 102) && (LA7_0 <= 107))) ) 
                {
                    alt7=1;
                }
                else if ( (LA7_0 == IDENT || LA7_0 == 45) ) 
                {
                    alt7=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 7;
                    EXCEPTION->state        = 0;


                    goto rulebaseDomainValueEx;
                }
            }
            switch (alt7) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:140:7: literalValue
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literalValue_in_baseDomainValue563);
        	        literalValue39=literalValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebaseDomainValueEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literalValue39.tree);

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:141:7: qualified
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_qualified_in_baseDomainValue571);
        	        qualified40=qualified(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebaseDomainValueEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, qualified40.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebaseDomainValueEx; /* Prevent compiler warnings */
    rulebaseDomainValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end baseDomainValue */

/** 
 * $ANTLR start variableDeclarations
 * NDDL/base/antlr/NDDL3.g:144:1: variableDeclarations : ( 'filter' )? type nameWithBaseDomain ( ',' nameWithBaseDomain )* ';' -> ^( VARIABLE type nameWithBaseDomain ( nameWithBaseDomain )* ) ;
 */
static NDDL3Parser_variableDeclarations_return
variableDeclarations(pNDDL3Parser ctx)
{   
    NDDL3Parser_variableDeclarations_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal41;
    pANTLR3_COMMON_TOKEN    char_literal44;
    pANTLR3_COMMON_TOKEN    char_literal46;
    NDDL3Parser_type_return type42;
    #undef	RETURN_TYPE_type42
    #define	RETURN_TYPE_type42 NDDL3Parser_type_return

    NDDL3Parser_nameWithBaseDomain_return nameWithBaseDomain43;
    #undef	RETURN_TYPE_nameWithBaseDomain43
    #define	RETURN_TYPE_nameWithBaseDomain43 NDDL3Parser_nameWithBaseDomain_return

    NDDL3Parser_nameWithBaseDomain_return nameWithBaseDomain45;
    #undef	RETURN_TYPE_nameWithBaseDomain45
    #define	RETURN_TYPE_nameWithBaseDomain45 NDDL3Parser_nameWithBaseDomain_return

    pANTLR3_BASE_TREE string_literal41_tree;
    pANTLR3_BASE_TREE char_literal44_tree;
    pANTLR3_BASE_TREE char_literal46_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_40;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_34;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_37;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_nameWithBaseDomain;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal41       = NULL;
    char_literal44       = NULL;
    char_literal46       = NULL;
    type42.tree = NULL;

    nameWithBaseDomain43.tree = NULL;

    nameWithBaseDomain45.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal41_tree   = NULL;
    char_literal44_tree   = NULL;
    char_literal46_tree   = NULL;

    stream_40   = NULL;
    #define CREATE_stream_40  if (stream_40 == NULL) {stream_40 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 40"); } 
    stream_34   = NULL;
    #define CREATE_stream_34  if (stream_34 == NULL) {stream_34 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 34"); } 
    stream_37   = NULL;
    #define CREATE_stream_37  if (stream_37 == NULL) {stream_37 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 37"); } 
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }
    stream_nameWithBaseDomain   = NULL;
    #define CREATE_stream_nameWithBaseDomain  if (stream_nameWithBaseDomain == NULL) {stream_nameWithBaseDomain = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule nameWithBaseDomain"); }

    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:145:5: ( ( 'filter' )? type nameWithBaseDomain ( ',' nameWithBaseDomain )* ';' -> ^( VARIABLE type nameWithBaseDomain ( nameWithBaseDomain )* ) )
        // NDDL/base/antlr/NDDL3.g:145:9: ( 'filter' )? type nameWithBaseDomain ( ',' nameWithBaseDomain )* ';'
        {

            // NDDL/base/antlr/NDDL3.g:145:9: ( 'filter' )?
            {
                int alt8=2;
                {
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == 40) ) 
                    {
                        alt8=1;
                    }
                }
                switch (alt8) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:145:10: 'filter'
            	    {
            	        string_literal41 = (pANTLR3_COMMON_TOKEN) MATCHT(40, &FOLLOW_40_in_variableDeclarations609); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_40; stream_40->add(stream_40, string_literal41, NULL); }


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_type_in_variableDeclarations613);
            type42=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_type; stream_type->add(stream_type, type42.tree, NULL); }
            FOLLOWPUSH(FOLLOW_nameWithBaseDomain_in_variableDeclarations615);
            nameWithBaseDomain43=nameWithBaseDomain(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_nameWithBaseDomain; stream_nameWithBaseDomain->add(stream_nameWithBaseDomain, nameWithBaseDomain43.tree, NULL); }

            // NDDL/base/antlr/NDDL3.g:145:45: ( ',' nameWithBaseDomain )*

            for (;;)
            {
                int alt9=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == 34) ) 
                    {
                        alt9=1;
                    }

                }
                switch (alt9) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:145:46: ',' nameWithBaseDomain
            	    {
            	        char_literal44 = (pANTLR3_COMMON_TOKEN) MATCHT(34, &FOLLOW_34_in_variableDeclarations618); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_34; stream_34->add(stream_34, char_literal44, NULL); }

            	        FOLLOWPUSH(FOLLOW_nameWithBaseDomain_in_variableDeclarations620);
            	        nameWithBaseDomain45=nameWithBaseDomain(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_nameWithBaseDomain; stream_nameWithBaseDomain->add(stream_nameWithBaseDomain, nameWithBaseDomain45.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */

            char_literal46 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_variableDeclarations624); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_37; stream_37->add(stream_37, char_literal46, NULL); }


             
            /* AST REWRITE
             * elements          : type, nameWithBaseDomain, nameWithBaseDomain
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 146:13: -> ^( VARIABLE type nameWithBaseDomain ( nameWithBaseDomain )* )
            	{
            	    // NDDL/base/antlr/NDDL3.g:146:16: ^( VARIABLE type nameWithBaseDomain ( nameWithBaseDomain )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARIABLE, (pANTLR3_UINT8)"VARIABLE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_nameWithBaseDomain == NULL ? NULL : stream_nameWithBaseDomain->nextTree(stream_nameWithBaseDomain));
            	        // NDDL/base/antlr/NDDL3.g:146:51: ( nameWithBaseDomain )*
            	        {
            	        	while ( (stream_nameWithBaseDomain != NULL && stream_nameWithBaseDomain->hasNext(stream_nameWithBaseDomain))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_nameWithBaseDomain == NULL ? NULL : stream_nameWithBaseDomain->nextTree(stream_nameWithBaseDomain));

            	        	}
            	        	if ( stream_nameWithBaseDomain != NULL) stream_nameWithBaseDomain->reset(stream_nameWithBaseDomain);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationsEx; /* Prevent compiler warnings */
    rulevariableDeclarationsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_40 != NULL) stream_40->free(stream_40);
        if (stream_34 != NULL) stream_34->free(stream_34);
        if (stream_37 != NULL) stream_37->free(stream_37);
        if (stream_type != NULL) stream_type->free(stream_type);
        if (stream_nameWithBaseDomain != NULL) stream_nameWithBaseDomain->free(stream_nameWithBaseDomain);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end variableDeclarations */

/** 
 * $ANTLR start nameWithBaseDomain
 * NDDL/base/antlr/NDDL3.g:149:1: nameWithBaseDomain : (variable= IDENT ( '(' value= initializer ')' )? | variable= IDENT '=' value= initializer ) ;
 */
static NDDL3Parser_nameWithBaseDomain_return
nameWithBaseDomain(pNDDL3Parser ctx)
{   
    NDDL3Parser_nameWithBaseDomain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    variable;
    pANTLR3_COMMON_TOKEN    char_literal47;
    pANTLR3_COMMON_TOKEN    char_literal48;
    pANTLR3_COMMON_TOKEN    char_literal49;
    NDDL3Parser_initializer_return value;
    #undef	RETURN_TYPE_value
    #define	RETURN_TYPE_value NDDL3Parser_initializer_return

    pANTLR3_BASE_TREE variable_tree;
    pANTLR3_BASE_TREE char_literal47_tree;
    pANTLR3_BASE_TREE char_literal48_tree;
    pANTLR3_BASE_TREE char_literal49_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    variable       = NULL;
    char_literal47       = NULL;
    char_literal48       = NULL;
    char_literal49       = NULL;
    value.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    variable_tree   = NULL;
    char_literal47_tree   = NULL;
    char_literal48_tree   = NULL;
    char_literal49_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:150:5: ( (variable= IDENT ( '(' value= initializer ')' )? | variable= IDENT '=' value= initializer ) )
        // NDDL/base/antlr/NDDL3.g:150:9: (variable= IDENT ( '(' value= initializer ')' )? | variable= IDENT '=' value= initializer )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // NDDL/base/antlr/NDDL3.g:150:9: (variable= IDENT ( '(' value= initializer ')' )? | variable= IDENT '=' value= initializer )
            {
                int alt11=2;

                {
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == IDENT) ) 
                    {

                        {
                            int LA11_1 = LA(2);
                            if ( (LA11_1 == 43) ) 
                            {
                                alt11=2;
                            }
                            else if ( (LA11_1 == 34 || LA11_1 == 37 || LA11_1 == 41) ) 
                            {
                                alt11=1;
                            }
                            else 
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE; 
                                    return retval;
                                }
                            
                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 11;
                                EXCEPTION->state        = 1;


                                goto rulenameWithBaseDomainEx;
                            }
                        }
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 11;
                        EXCEPTION->state        = 0;


                        goto rulenameWithBaseDomainEx;
                    }
                }
                switch (alt11) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:150:13: variable= IDENT ( '(' value= initializer ')' )?
            	    {
            	        variable = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_nameWithBaseDomain676); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameWithBaseDomainEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        variable_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, variable));
            	        ADAPTOR->addChild(ADAPTOR, root_0, variable_tree);
            	        }

            	        // NDDL/base/antlr/NDDL3.g:150:28: ( '(' value= initializer ')' )?
            	        {
            	            int alt10=2;
            	            {
            	                int LA10_0 = LA(1);
            	                if ( (LA10_0 == 41) ) 
            	                {
            	                    alt10=1;
            	                }
            	            }
            	            switch (alt10) 
            	            {
            	        	case 1:
            	        	    // NDDL/base/antlr/NDDL3.g:150:29: '(' value= initializer ')'
            	        	    {
            	        	        char_literal47 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_nameWithBaseDomain679); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulenameWithBaseDomainEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) {
            	        	        char_literal47_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal47));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal47_tree, root_0));
            	        	        }
            	        	        FOLLOWPUSH(FOLLOW_initializer_in_nameWithBaseDomain684);
            	        	        value=initializer(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulenameWithBaseDomainEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, value.tree);
            	        	        char_literal48 = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_nameWithBaseDomain686); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulenameWithBaseDomainEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // NDDL/base/antlr/NDDL3.g:151:13: variable= IDENT '=' value= initializer
            	    {
            	        variable = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_nameWithBaseDomain706); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameWithBaseDomainEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        variable_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, variable));
            	        ADAPTOR->addChild(ADAPTOR, root_0, variable_tree);
            	        }
            	        char_literal49 = (pANTLR3_COMMON_TOKEN) MATCHT(43, &FOLLOW_43_in_nameWithBaseDomain708); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameWithBaseDomainEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        char_literal49_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal49));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal49_tree, root_0));
            	        }
            	        FOLLOWPUSH(FOLLOW_initializer_in_nameWithBaseDomain713);
            	        value=initializer(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameWithBaseDomainEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, value.tree);

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenameWithBaseDomainEx; /* Prevent compiler warnings */
    rulenameWithBaseDomainEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end nameWithBaseDomain */

/** 
 * $ANTLR start anyValue
 * NDDL/base/antlr/NDDL3.g:155:1: anyValue : ( literalValue | baseDomain | qualified );
 */
static NDDL3Parser_anyValue_return
anyValue(pNDDL3Parser ctx)
{   
    NDDL3Parser_anyValue_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_literalValue_return literalValue50;
    #undef	RETURN_TYPE_literalValue50
    #define	RETURN_TYPE_literalValue50 NDDL3Parser_literalValue_return

    NDDL3Parser_baseDomain_return baseDomain51;
    #undef	RETURN_TYPE_baseDomain51
    #define	RETURN_TYPE_baseDomain51 NDDL3Parser_baseDomain_return

    NDDL3Parser_qualified_return qualified52;
    #undef	RETURN_TYPE_qualified52
    #define	RETURN_TYPE_qualified52 NDDL3Parser_qualified_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    literalValue50.tree = NULL;

    baseDomain51.tree = NULL;

    qualified52.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:156:5: ( literalValue | baseDomain | qualified )
            
            ANTLR3_UINT32 alt12;

            alt12=3;

            switch ( LA(1) ) 
            {
            case INT:
            case FLOAT:
            case STRING:
            case 72:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            	{
            		alt12=1;
            	}
                break;
            case 33:
            case 38:
            	{
            		alt12=2;
            	}
                break;
            case IDENT:
            case 45:
            	{
            		alt12=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 12;
                EXCEPTION->state        = 0;


                goto ruleanyValueEx;
            }

            switch (alt12) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:156:9: literalValue
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literalValue_in_anyValue742);
        	        literalValue50=literalValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleanyValueEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literalValue50.tree);

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:157:9: baseDomain
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_baseDomain_in_anyValue752);
        	        baseDomain51=baseDomain(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleanyValueEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, baseDomain51.tree);

        	    }
        	    break;
        	case 3:
        	    // NDDL/base/antlr/NDDL3.g:158:9: qualified
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_qualified_in_anyValue762);
        	        qualified52=qualified(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleanyValueEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, qualified52.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleanyValueEx; /* Prevent compiler warnings */
    ruleanyValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end anyValue */

/** 
 * $ANTLR start allocation
 * NDDL/base/antlr/NDDL3.g:161:1: allocation : 'new' constructorInvocation ;
 */
static NDDL3Parser_allocation_return
allocation(pNDDL3Parser ctx)
{   
    NDDL3Parser_allocation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal53;
    NDDL3Parser_constructorInvocation_return constructorInvocation54;
    #undef	RETURN_TYPE_constructorInvocation54
    #define	RETURN_TYPE_constructorInvocation54 NDDL3Parser_constructorInvocation_return

    pANTLR3_BASE_TREE string_literal53_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal53       = NULL;
    constructorInvocation54.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal53_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:162:5: ( 'new' constructorInvocation )
        // NDDL/base/antlr/NDDL3.g:162:9: 'new' constructorInvocation
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            string_literal53 = (pANTLR3_COMMON_TOKEN) MATCHT(44, &FOLLOW_44_in_allocation781); 
            if  (HASEXCEPTION())
            {
                goto ruleallocationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_constructorInvocation_in_allocation784);
            constructorInvocation54=constructorInvocation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleallocationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructorInvocation54.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleallocationEx; /* Prevent compiler warnings */
    ruleallocationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end allocation */

/** 
 * $ANTLR start constructorInvocation
 * NDDL/base/antlr/NDDL3.g:165:1: constructorInvocation : IDENT variableArgumentList -> ^( CONSTRUCTOR_INVOCATION IDENT variableArgumentList ) ;
 */
static NDDL3Parser_constructorInvocation_return
constructorInvocation(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorInvocation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT55;
    NDDL3Parser_variableArgumentList_return variableArgumentList56;
    #undef	RETURN_TYPE_variableArgumentList56
    #define	RETURN_TYPE_variableArgumentList56 NDDL3Parser_variableArgumentList_return

    pANTLR3_BASE_TREE IDENT55_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableArgumentList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT55       = NULL;
    variableArgumentList56.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENT55_tree   = NULL;

    stream_IDENT   = NULL;
    #define CREATE_stream_IDENT  if (stream_IDENT == NULL) {stream_IDENT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); } 
    stream_variableArgumentList   = NULL;
    #define CREATE_stream_variableArgumentList  if (stream_variableArgumentList == NULL) {stream_variableArgumentList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableArgumentList"); }

    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:166:5: ( IDENT variableArgumentList -> ^( CONSTRUCTOR_INVOCATION IDENT variableArgumentList ) )
        // NDDL/base/antlr/NDDL3.g:166:9: IDENT variableArgumentList
        {
            IDENT55 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_constructorInvocation803); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorInvocationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_IDENT; stream_IDENT->add(stream_IDENT, IDENT55, NULL); }

            FOLLOWPUSH(FOLLOW_variableArgumentList_in_constructorInvocation805);
            variableArgumentList56=variableArgumentList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstructorInvocationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableArgumentList; stream_variableArgumentList->add(stream_variableArgumentList, variableArgumentList56.tree, NULL); }

             
            /* AST REWRITE
             * elements          : IDENT, variableArgumentList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 167:13: -> ^( CONSTRUCTOR_INVOCATION IDENT variableArgumentList )
            	{
            	    // NDDL/base/antlr/NDDL3.g:167:16: ^( CONSTRUCTOR_INVOCATION IDENT variableArgumentList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONSTRUCTOR_INVOCATION, (pANTLR3_UINT8)"CONSTRUCTOR_INVOCATION"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT == NULL ? NULL : stream_IDENT->nextNode(stream_IDENT));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableArgumentList == NULL ? NULL : stream_variableArgumentList->nextTree(stream_variableArgumentList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorInvocationEx; /* Prevent compiler warnings */
    ruleconstructorInvocationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENT != NULL) stream_IDENT->free(stream_IDENT);
        if (stream_variableArgumentList != NULL) stream_variableArgumentList->free(stream_variableArgumentList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorInvocation */

/** 
 * $ANTLR start qualified
 * NDDL/base/antlr/NDDL3.g:170:1: qualified : ( 'this' | IDENT ) ( '.' IDENT )* ;
 */
static NDDL3Parser_qualified_return
qualified(pNDDL3Parser ctx)
{   
    NDDL3Parser_qualified_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set57;
    pANTLR3_COMMON_TOKEN    char_literal58;
    pANTLR3_COMMON_TOKEN    IDENT59;

    pANTLR3_BASE_TREE set57_tree;
    pANTLR3_BASE_TREE char_literal58_tree;
    pANTLR3_BASE_TREE IDENT59_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set57       = NULL;
    char_literal58       = NULL;
    IDENT59       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set57_tree   = NULL;
    char_literal58_tree   = NULL;
    IDENT59_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:171:5: ( ( 'this' | IDENT ) ( '.' IDENT )* )
        // NDDL/base/antlr/NDDL3.g:171:9: ( 'this' | IDENT ) ( '.' IDENT )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set57=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == IDENT || LA(1) == 45 )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set57)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_qualified846;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_qualified846);    goto rulequalifiedEx;
            }


            // NDDL/base/antlr/NDDL3.g:171:26: ( '.' IDENT )*

            for (;;)
            {
                int alt13=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA13_0 = LA(1);
                    if ( (LA13_0 == 46) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA13_2 = LA(2);
                            if ( (LA13_2 == IDENT) ) 
                            {
                                {
                                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                                    */
                                    int LA13_3 = LA(3);
                                    if ( (LA13_3 == IDENT || ((LA13_3 >= 34) && (LA13_3 <= 35)) || LA13_3 == 37 || ((LA13_3 >= 42) && (LA13_3 <= 43)) || ((LA13_3 >= 46) && (LA13_3 <= 47)) || LA13_3 == 62 || ((LA13_3 >= 64) && (LA13_3 <= 74))) ) 
                                    {
                                        alt13=1;
                                    }

                                }
                            }

                        }
                    }

                }
                switch (alt13) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:171:27: '.' IDENT
            	    {
            	        char_literal58 = (pANTLR3_COMMON_TOKEN) MATCHT(46, &FOLLOW_46_in_qualified855); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalifiedEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        char_literal58_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal58));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal58_tree, root_0));
            	        }
            	        IDENT59 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_qualified858); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalifiedEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        IDENT59_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT59));
            	        ADAPTOR->addChild(ADAPTOR, root_0, IDENT59_tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulequalifiedEx; /* Prevent compiler warnings */
    rulequalifiedEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end qualified */

/** 
 * $ANTLR start assignment
 * NDDL/base/antlr/NDDL3.g:174:1: assignment : qualified ( 'in' | '=' ) initializer ';' -> ^( '=' qualified initializer ) ;
 */
static NDDL3Parser_assignment_return
assignment(pNDDL3Parser ctx)
{   
    NDDL3Parser_assignment_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal61;
    pANTLR3_COMMON_TOKEN    char_literal62;
    pANTLR3_COMMON_TOKEN    char_literal64;
    NDDL3Parser_qualified_return qualified60;
    #undef	RETURN_TYPE_qualified60
    #define	RETURN_TYPE_qualified60 NDDL3Parser_qualified_return

    NDDL3Parser_initializer_return initializer63;
    #undef	RETURN_TYPE_initializer63
    #define	RETURN_TYPE_initializer63 NDDL3Parser_initializer_return

    pANTLR3_BASE_TREE string_literal61_tree;
    pANTLR3_BASE_TREE char_literal62_tree;
    pANTLR3_BASE_TREE char_literal64_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_43;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_47;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_37;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_qualified;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initializer;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal61       = NULL;
    char_literal62       = NULL;
    char_literal64       = NULL;
    qualified60.tree = NULL;

    initializer63.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal61_tree   = NULL;
    char_literal62_tree   = NULL;
    char_literal64_tree   = NULL;

    stream_43   = NULL;
    #define CREATE_stream_43  if (stream_43 == NULL) {stream_43 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 43"); } 
    stream_47   = NULL;
    #define CREATE_stream_47  if (stream_47 == NULL) {stream_47 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 47"); } 
    stream_37   = NULL;
    #define CREATE_stream_37  if (stream_37 == NULL) {stream_37 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 37"); } 
    stream_qualified   = NULL;
    #define CREATE_stream_qualified  if (stream_qualified == NULL) {stream_qualified = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule qualified"); }
    stream_initializer   = NULL;
    #define CREATE_stream_initializer  if (stream_initializer == NULL) {stream_initializer = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initializer"); }

    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:175:5: ( qualified ( 'in' | '=' ) initializer ';' -> ^( '=' qualified initializer ) )
        // NDDL/base/antlr/NDDL3.g:175:9: qualified ( 'in' | '=' ) initializer ';'
        {
            FOLLOWPUSH(FOLLOW_qualified_in_assignment879);
            qualified60=qualified(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_qualified; stream_qualified->add(stream_qualified, qualified60.tree, NULL); }

            // NDDL/base/antlr/NDDL3.g:175:19: ( 'in' | '=' )
            {
                int alt14=2;

                {
                    int LA14_0 = LA(1);
                    if ( (LA14_0 == 47) ) 
                    {
                        alt14=1;
                    }
                    else if ( (LA14_0 == 43) ) 
                    {
                        alt14=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 14;
                        EXCEPTION->state        = 0;


                        goto ruleassignmentEx;
                    }
                }
                switch (alt14) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:175:20: 'in'
            	    {
            	        string_literal61 = (pANTLR3_COMMON_TOKEN) MATCHT(47, &FOLLOW_47_in_assignment882); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_47; stream_47->add(stream_47, string_literal61, NULL); }


            	    }
            	    break;
            	case 2:
            	    // NDDL/base/antlr/NDDL3.g:175:27: '='
            	    {
            	        char_literal62 = (pANTLR3_COMMON_TOKEN) MATCHT(43, &FOLLOW_43_in_assignment886); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_43; stream_43->add(stream_43, char_literal62, NULL); }


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_initializer_in_assignment889);
            initializer63=initializer(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_initializer; stream_initializer->add(stream_initializer, initializer63.tree, NULL); }
            char_literal64 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_assignment891); 
            if  (HASEXCEPTION())
            {
                goto ruleassignmentEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_37; stream_37->add(stream_37, char_literal64, NULL); }


             
            /* AST REWRITE
             * elements          : 43, qualified, initializer
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 175:48: -> ^( '=' qualified initializer )
            	{
            	    // NDDL/base/antlr/NDDL3.g:175:51: ^( '=' qualified initializer )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_43 == NULL ? NULL : stream_43->nextNode(stream_43), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_qualified == NULL ? NULL : stream_qualified->nextTree(stream_qualified));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_initializer == NULL ? NULL : stream_initializer->nextTree(stream_initializer));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_43 != NULL) stream_43->free(stream_43);
        if (stream_47 != NULL) stream_47->free(stream_47);
        if (stream_37 != NULL) stream_37->free(stream_37);
        if (stream_qualified != NULL) stream_qualified->free(stream_qualified);
        if (stream_initializer != NULL) stream_initializer->free(stream_initializer);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end assignment */

/** 
 * $ANTLR start initializer
 * NDDL/base/antlr/NDDL3.g:178:1: initializer : ( anyValue | allocation );
 */
static NDDL3Parser_initializer_return
initializer(pNDDL3Parser ctx)
{   
    NDDL3Parser_initializer_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_anyValue_return anyValue65;
    #undef	RETURN_TYPE_anyValue65
    #define	RETURN_TYPE_anyValue65 NDDL3Parser_anyValue_return

    NDDL3Parser_allocation_return allocation66;
    #undef	RETURN_TYPE_allocation66
    #define	RETURN_TYPE_allocation66 NDDL3Parser_allocation_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    anyValue65.tree = NULL;

    allocation66.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:179:5: ( anyValue | allocation )
            
            ANTLR3_UINT32 alt15;

            alt15=2;


            {
                int LA15_0 = LA(1);
                if ( (((LA15_0 >= IDENT) && (LA15_0 <= STRING)) || LA15_0 == 33 || LA15_0 == 38 || LA15_0 == 45 || LA15_0 == 72 || ((LA15_0 >= 102) && (LA15_0 <= 107))) ) 
                {
                    alt15=1;
                }
                else if ( (LA15_0 == 44) ) 
                {
                    alt15=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 15;
                    EXCEPTION->state        = 0;


                    goto ruleinitializerEx;
                }
            }
            switch (alt15) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:179:9: anyValue
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_anyValue_in_initializer924);
        	        anyValue65=anyValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitializerEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, anyValue65.tree);

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:180:9: allocation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_allocation_in_initializer934);
        	        allocation66=allocation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleinitializerEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, allocation66.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitializerEx; /* Prevent compiler warnings */
    ruleinitializerEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end initializer */

/** 
 * $ANTLR start classDeclaration
 * NDDL/base/antlr/NDDL3.g:183:1: classDeclaration : 'class' c= IDENT ( ( ( 'extends' x= IDENT )? classBlock ) -> ^( 'class' $c ( ^( 'extends' $x) )? classBlock ) | ';' -> ^( 'class' $c ';' ) ) ;
 */
static NDDL3Parser_classDeclaration_return
classDeclaration(pNDDL3Parser ctx)
{   
    NDDL3Parser_classDeclaration_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    c;
    pANTLR3_COMMON_TOKEN    x;
    pANTLR3_COMMON_TOKEN    string_literal67;
    pANTLR3_COMMON_TOKEN    string_literal68;
    pANTLR3_COMMON_TOKEN    char_literal70;
    NDDL3Parser_classBlock_return classBlock69;
    #undef	RETURN_TYPE_classBlock69
    #define	RETURN_TYPE_classBlock69 NDDL3Parser_classBlock_return

    pANTLR3_BASE_TREE c_tree;
    pANTLR3_BASE_TREE x_tree;
    pANTLR3_BASE_TREE string_literal67_tree;
    pANTLR3_BASE_TREE string_literal68_tree;
    pANTLR3_BASE_TREE char_literal70_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_49;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_48;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_37;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_classBlock;
    /* Initialize rule variables
     */


    root_0 = NULL;

    c       = NULL;
    x       = NULL;
    string_literal67       = NULL;
    string_literal68       = NULL;
    char_literal70       = NULL;
    classBlock69.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    c_tree   = NULL;
    x_tree   = NULL;
    string_literal67_tree   = NULL;
    string_literal68_tree   = NULL;
    char_literal70_tree   = NULL;

    stream_49   = NULL;
    #define CREATE_stream_49  if (stream_49 == NULL) {stream_49 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 49"); } 
    stream_48   = NULL;
    #define CREATE_stream_48  if (stream_48 == NULL) {stream_48 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 48"); } 
    stream_IDENT   = NULL;
    #define CREATE_stream_IDENT  if (stream_IDENT == NULL) {stream_IDENT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); } 
    stream_37   = NULL;
    #define CREATE_stream_37  if (stream_37 == NULL) {stream_37 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 37"); } 
    stream_classBlock   = NULL;
    #define CREATE_stream_classBlock  if (stream_classBlock == NULL) {stream_classBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule classBlock"); }

    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:184:2: ( 'class' c= IDENT ( ( ( 'extends' x= IDENT )? classBlock ) -> ^( 'class' $c ( ^( 'extends' $x) )? classBlock ) | ';' -> ^( 'class' $c ';' ) ) )
        // NDDL/base/antlr/NDDL3.g:184:4: 'class' c= IDENT ( ( ( 'extends' x= IDENT )? classBlock ) -> ^( 'class' $c ( ^( 'extends' $x) )? classBlock ) | ';' -> ^( 'class' $c ';' ) )
        {
            string_literal67 = (pANTLR3_COMMON_TOKEN) MATCHT(48, &FOLLOW_48_in_classDeclaration956); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_48; stream_48->add(stream_48, string_literal67, NULL); }

            c = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_classDeclaration960); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_IDENT; stream_IDENT->add(stream_IDENT, c, NULL); }


            // NDDL/base/antlr/NDDL3.g:185:3: ( ( ( 'extends' x= IDENT )? classBlock ) -> ^( 'class' $c ( ^( 'extends' $x) )? classBlock ) | ';' -> ^( 'class' $c ';' ) )
            {
                int alt17=2;

                {
                    int LA17_0 = LA(1);
                    if ( (LA17_0 == 33 || LA17_0 == 49) ) 
                    {
                        alt17=1;
                    }
                    else if ( (LA17_0 == 37) ) 
                    {
                        alt17=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 17;
                        EXCEPTION->state        = 0;


                        goto ruleclassDeclarationEx;
                    }
                }
                switch (alt17) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:185:5: ( ( 'extends' x= IDENT )? classBlock )
            	    {
            	        // NDDL/base/antlr/NDDL3.g:185:5: ( ( 'extends' x= IDENT )? classBlock )
            	        // NDDL/base/antlr/NDDL3.g:185:6: ( 'extends' x= IDENT )? classBlock
            	        {

            	            // NDDL/base/antlr/NDDL3.g:185:6: ( 'extends' x= IDENT )?
            	            {
            	                int alt16=2;
            	                {
            	                    int LA16_0 = LA(1);
            	                    if ( (LA16_0 == 49) ) 
            	                    {
            	                        alt16=1;
            	                    }
            	                }
            	                switch (alt16) 
            	                {
            	            	case 1:
            	            	    // NDDL/base/antlr/NDDL3.g:185:7: 'extends' x= IDENT
            	            	    {
            	            	        string_literal68 = (pANTLR3_COMMON_TOKEN) MATCHT(49, &FOLLOW_49_in_classDeclaration968); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruleclassDeclarationEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        } 
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_49; stream_49->add(stream_49, string_literal68, NULL); }

            	            	        x = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_classDeclaration972); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruleclassDeclarationEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        } 
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENT; stream_IDENT->add(stream_IDENT, x, NULL); }


            	            	    }
            	            	    break;

            	                }
            	            }
            	            FOLLOWPUSH(FOLLOW_classBlock_in_classDeclaration976);
            	            classBlock69=classBlock(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleclassDeclarationEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_classBlock; stream_classBlock->add(stream_classBlock, classBlock69.tree, NULL); }

            	        }


            	         
            	        /* AST REWRITE
            	         * elements          : 48, 49, x, classBlock, c
            	         * token labels      : c, x
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_c;
            	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_x;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_c=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", c);
            	        	stream_x=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token x", x);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 186:11: -> ^( 'class' $c ( ^( 'extends' $x) )? classBlock )
            	        	{
            	        	    // NDDL/base/antlr/NDDL3.g:186:14: ^( 'class' $c ( ^( 'extends' $x) )? classBlock )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_48 == NULL ? NULL : stream_48->nextNode(stream_48), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_c == NULL ? NULL : stream_c->nextNode(stream_c));
            	        	        // NDDL/base/antlr/NDDL3.g:186:27: ( ^( 'extends' $x) )?
            	        	        {
            	        	        	if ( (stream_49 != NULL && stream_49->hasNext(stream_49)) ||(stream_x != NULL && stream_x->hasNext(stream_x))  )
            	        	        	{
            	        	        		// NDDL/base/antlr/NDDL3.g:186:27: ^( 'extends' $x)
            	        	        		{
            	        	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_49 == NULL ? NULL : stream_49->nextNode(stream_49), root_2));

            	        	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_x == NULL ? NULL : stream_x->nextNode(stream_x));

            	        	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        	        		}

            	        	        	}
            	        	        	if ( stream_49 != NULL) stream_49->reset(stream_49);
            	        	        	if ( stream_x != NULL) stream_x->reset(stream_x);

            	        	        }
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_classBlock == NULL ? NULL : stream_classBlock->nextTree(stream_classBlock));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_c != NULL) stream_c->free(stream_c); 
            	        	if (stream_x != NULL) stream_x->free(stream_x); 
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // NDDL/base/antlr/NDDL3.g:187:5: ';'
            	    {
            	        char_literal70 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_classDeclaration1012); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclassDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_37; stream_37->add(stream_37, char_literal70, NULL); }


            	         
            	        /* AST REWRITE
            	         * elements          : 37, 48, c
            	         * token labels      : c
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_c;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_c=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", c);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 188:17: -> ^( 'class' $c ';' )
            	        	{
            	        	    // NDDL/base/antlr/NDDL3.g:188:20: ^( 'class' $c ';' )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_48 == NULL ? NULL : stream_48->nextNode(stream_48), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_c == NULL ? NULL : stream_c->nextNode(stream_c));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_37 == NULL ? NULL : stream_37->nextNode(stream_37));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_c != NULL) stream_c->free(stream_c); 
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleclassDeclarationEx; /* Prevent compiler warnings */
    ruleclassDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_49 != NULL) stream_49->free(stream_49);
        if (stream_48 != NULL) stream_48->free(stream_48);
        if (stream_IDENT != NULL) stream_IDENT->free(stream_IDENT);
        if (stream_37 != NULL) stream_37->free(stream_37);
        if (stream_classBlock != NULL) stream_classBlock->free(stream_classBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end classDeclaration */

/** 
 * $ANTLR start classBlock
 * NDDL/base/antlr/NDDL3.g:192:1: classBlock : '{' ( classStatement )* '}' ;
 */
static NDDL3Parser_classBlock_return
classBlock(pNDDL3Parser ctx)
{   
    NDDL3Parser_classBlock_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal71;
    pANTLR3_COMMON_TOKEN    char_literal73;
    NDDL3Parser_classStatement_return classStatement72;
    #undef	RETURN_TYPE_classStatement72
    #define	RETURN_TYPE_classStatement72 NDDL3Parser_classStatement_return

    pANTLR3_BASE_TREE char_literal71_tree;
    pANTLR3_BASE_TREE char_literal73_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal71       = NULL;
    char_literal73       = NULL;
    classStatement72.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal71_tree   = NULL;
    char_literal73_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:193:2: ( '{' ( classStatement )* '}' )
        // NDDL/base/antlr/NDDL3.g:193:4: '{' ( classStatement )* '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal71 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_classBlock1055); 
            if  (HASEXCEPTION())
            {
                goto ruleclassBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal71_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal71));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal71_tree, root_0));
            }

            // NDDL/base/antlr/NDDL3.g:193:9: ( classStatement )*

            for (;;)
            {
                int alt18=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA18_0 = LA(1);
                    if ( (LA18_0 == IDENT || LA18_0 == 37 || LA18_0 == 40 || ((LA18_0 >= 50) && (LA18_0 <= 51)) || ((LA18_0 >= 53) && (LA18_0 <= 56))) ) 
                    {
                        alt18=1;
                    }

                }
                switch (alt18) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:193:9: classStatement
            	    {
            	        FOLLOWPUSH(FOLLOW_classStatement_in_classBlock1058);
            	        classStatement72=classStatement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclassBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, classStatement72.tree);

            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */

            char_literal73 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_classBlock1061); 
            if  (HASEXCEPTION())
            {
                goto ruleclassBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleclassBlockEx; /* Prevent compiler warnings */
    ruleclassBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end classBlock */

/** 
 * $ANTLR start classStatement
 * NDDL/base/antlr/NDDL3.g:196:1: classStatement : ( variableDeclarations | constructor | tokenType | noopstatement );
 */
static NDDL3Parser_classStatement_return
classStatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_classStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_variableDeclarations_return variableDeclarations74;
    #undef	RETURN_TYPE_variableDeclarations74
    #define	RETURN_TYPE_variableDeclarations74 NDDL3Parser_variableDeclarations_return

    NDDL3Parser_constructor_return constructor75;
    #undef	RETURN_TYPE_constructor75
    #define	RETURN_TYPE_constructor75 NDDL3Parser_constructor_return

    NDDL3Parser_tokenType_return tokenType76;
    #undef	RETURN_TYPE_tokenType76
    #define	RETURN_TYPE_tokenType76 NDDL3Parser_tokenType_return

    NDDL3Parser_noopstatement_return noopstatement77;
    #undef	RETURN_TYPE_noopstatement77
    #define	RETURN_TYPE_noopstatement77 NDDL3Parser_noopstatement_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    variableDeclarations74.tree = NULL;

    constructor75.tree = NULL;

    tokenType76.tree = NULL;

    noopstatement77.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:197:2: ( variableDeclarations | constructor | tokenType | noopstatement )
            
            ANTLR3_UINT32 alt19;

            alt19=4;

            switch ( LA(1) ) 
            {
            case 40:
            case 53:
            case 54:
            case 55:
            case 56:
            	{
            		alt19=1;
            	}
                break;
            case IDENT:
            	{

            		{
            		    int LA19_2 = LA(2);
            		    if ( (LA19_2 == IDENT) ) 
            		    {
            		        alt19=1;
            		    }
            		    else if ( (LA19_2 == 41) ) 
            		    {
            		        alt19=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 19;
            		        EXCEPTION->state        = 2;


            		        goto ruleclassStatementEx;
            		    }
            		}
            	}
                break;
            case 50:
            case 51:
            	{
            		alt19=3;
            	}
                break;
            case 37:
            	{
            		alt19=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 19;
                EXCEPTION->state        = 0;


                goto ruleclassStatementEx;
            }

            switch (alt19) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:197:4: variableDeclarations
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableDeclarations_in_classStatement1073);
        	        variableDeclarations74=variableDeclarations(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleclassStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableDeclarations74.tree);

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:198:4: constructor
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constructor_in_classStatement1078);
        	        constructor75=constructor(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleclassStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructor75.tree);

        	    }
        	    break;
        	case 3:
        	    // NDDL/base/antlr/NDDL3.g:199:4: tokenType
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_tokenType_in_classStatement1083);
        	        tokenType76=tokenType(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleclassStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tokenType76.tree);

        	    }
        	    break;
        	case 4:
        	    // NDDL/base/antlr/NDDL3.g:200:4: noopstatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noopstatement_in_classStatement1088);
        	        noopstatement77=noopstatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleclassStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, noopstatement77.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleclassStatementEx; /* Prevent compiler warnings */
    ruleclassStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end classStatement */

/** 
 * $ANTLR start constructor
 * NDDL/base/antlr/NDDL3.g:203:1: constructor : IDENT constructorParameterList constructorBlock -> ^( CONSTRUCTOR IDENT constructorParameterList constructorBlock ) ;
 */
static NDDL3Parser_constructor_return
constructor(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructor_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT78;
    NDDL3Parser_constructorParameterList_return constructorParameterList79;
    #undef	RETURN_TYPE_constructorParameterList79
    #define	RETURN_TYPE_constructorParameterList79 NDDL3Parser_constructorParameterList_return

    NDDL3Parser_constructorBlock_return constructorBlock80;
    #undef	RETURN_TYPE_constructorBlock80
    #define	RETURN_TYPE_constructorBlock80 NDDL3Parser_constructorBlock_return

    pANTLR3_BASE_TREE IDENT78_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_constructorParameterList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_constructorBlock;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT78       = NULL;
    constructorParameterList79.tree = NULL;

    constructorBlock80.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENT78_tree   = NULL;

    stream_IDENT   = NULL;
    #define CREATE_stream_IDENT  if (stream_IDENT == NULL) {stream_IDENT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); } 
    stream_constructorParameterList   = NULL;
    #define CREATE_stream_constructorParameterList  if (stream_constructorParameterList == NULL) {stream_constructorParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule constructorParameterList"); }
    stream_constructorBlock   = NULL;
    #define CREATE_stream_constructorBlock  if (stream_constructorBlock == NULL) {stream_constructorBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule constructorBlock"); }

    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:204:2: ( IDENT constructorParameterList constructorBlock -> ^( CONSTRUCTOR IDENT constructorParameterList constructorBlock ) )
        // NDDL/base/antlr/NDDL3.g:204:4: IDENT constructorParameterList constructorBlock
        {
            IDENT78 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_constructor1099); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_IDENT; stream_IDENT->add(stream_IDENT, IDENT78, NULL); }

            FOLLOWPUSH(FOLLOW_constructorParameterList_in_constructor1101);
            constructorParameterList79=constructorParameterList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstructorEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_constructorParameterList; stream_constructorParameterList->add(stream_constructorParameterList, constructorParameterList79.tree, NULL); }
            FOLLOWPUSH(FOLLOW_constructorBlock_in_constructor1103);
            constructorBlock80=constructorBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstructorEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_constructorBlock; stream_constructorBlock->add(stream_constructorBlock, constructorBlock80.tree, NULL); }

             
            /* AST REWRITE
             * elements          : IDENT, constructorBlock, constructorParameterList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 205:4: -> ^( CONSTRUCTOR IDENT constructorParameterList constructorBlock )
            	{
            	    // NDDL/base/antlr/NDDL3.g:205:7: ^( CONSTRUCTOR IDENT constructorParameterList constructorBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONSTRUCTOR, (pANTLR3_UINT8)"CONSTRUCTOR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT == NULL ? NULL : stream_IDENT->nextNode(stream_IDENT));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_constructorParameterList == NULL ? NULL : stream_constructorParameterList->nextTree(stream_constructorParameterList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_constructorBlock == NULL ? NULL : stream_constructorBlock->nextTree(stream_constructorBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorEx; /* Prevent compiler warnings */
    ruleconstructorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENT != NULL) stream_IDENT->free(stream_IDENT);
        if (stream_constructorParameterList != NULL) stream_constructorParameterList->free(stream_constructorParameterList);
        if (stream_constructorBlock != NULL) stream_constructorBlock->free(stream_constructorBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructor */

/** 
 * $ANTLR start constructorBlock
 * NDDL/base/antlr/NDDL3.g:208:1: constructorBlock : '{' ( constructorStatement )* '}' ;
 */
static NDDL3Parser_constructorBlock_return
constructorBlock(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorBlock_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal81;
    pANTLR3_COMMON_TOKEN    char_literal83;
    NDDL3Parser_constructorStatement_return constructorStatement82;
    #undef	RETURN_TYPE_constructorStatement82
    #define	RETURN_TYPE_constructorStatement82 NDDL3Parser_constructorStatement_return

    pANTLR3_BASE_TREE char_literal81_tree;
    pANTLR3_BASE_TREE char_literal83_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal81       = NULL;
    char_literal83       = NULL;
    constructorStatement82.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal81_tree   = NULL;
    char_literal83_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:209:2: ( '{' ( constructorStatement )* '}' )
        // NDDL/base/antlr/NDDL3.g:209:4: '{' ( constructorStatement )* '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal81 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_constructorBlock1129); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal81_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal81));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal81_tree, root_0));
            }

            // NDDL/base/antlr/NDDL3.g:209:9: ( constructorStatement )*

            for (;;)
            {
                int alt20=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA20_0 = LA(1);
                    if ( (LA20_0 == IDENT || LA20_0 == 37 || LA20_0 == 45 || LA20_0 == 75) ) 
                    {
                        alt20=1;
                    }

                }
                switch (alt20) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:209:9: constructorStatement
            	    {
            	        FOLLOWPUSH(FOLLOW_constructorStatement_in_constructorBlock1132);
            	        constructorStatement82=constructorStatement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstructorBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructorStatement82.tree);

            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */

            char_literal83 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_constructorBlock1135); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorBlockEx; /* Prevent compiler warnings */
    ruleconstructorBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorBlock */

/** 
 * $ANTLR start constructorStatement
 * NDDL/base/antlr/NDDL3.g:212:1: constructorStatement : ( assignment | superInvocation | noopstatement );
 */
static NDDL3Parser_constructorStatement_return
constructorStatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_assignment_return assignment84;
    #undef	RETURN_TYPE_assignment84
    #define	RETURN_TYPE_assignment84 NDDL3Parser_assignment_return

    NDDL3Parser_superInvocation_return superInvocation85;
    #undef	RETURN_TYPE_superInvocation85
    #define	RETURN_TYPE_superInvocation85 NDDL3Parser_superInvocation_return

    NDDL3Parser_noopstatement_return noopstatement86;
    #undef	RETURN_TYPE_noopstatement86
    #define	RETURN_TYPE_noopstatement86 NDDL3Parser_noopstatement_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    assignment84.tree = NULL;

    superInvocation85.tree = NULL;

    noopstatement86.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:213:2: ( assignment | superInvocation | noopstatement )
            
            ANTLR3_UINT32 alt21;

            alt21=3;

            switch ( LA(1) ) 
            {
            case IDENT:
            case 45:
            	{
            		alt21=1;
            	}
                break;
            case 75:
            	{
            		alt21=2;
            	}
                break;
            case 37:
            	{
            		alt21=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 21;
                EXCEPTION->state        = 0;


                goto ruleconstructorStatementEx;
            }

            switch (alt21) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:213:4: assignment
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_assignment_in_constructorStatement1147);
        	        assignment84=assignment(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstructorStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, assignment84.tree);

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:214:4: superInvocation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_superInvocation_in_constructorStatement1152);
        	        superInvocation85=superInvocation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstructorStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, superInvocation85.tree);

        	    }
        	    break;
        	case 3:
        	    // NDDL/base/antlr/NDDL3.g:215:4: noopstatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noopstatement_in_constructorStatement1157);
        	        noopstatement86=noopstatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstructorStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, noopstatement86.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorStatementEx; /* Prevent compiler warnings */
    ruleconstructorStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorStatement */

/** 
 * $ANTLR start constructorParameterList
 * NDDL/base/antlr/NDDL3.g:218:1: constructorParameterList : '(' ( constructorParameters )? ')' ;
 */
static NDDL3Parser_constructorParameterList_return
constructorParameterList(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorParameterList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal87;
    pANTLR3_COMMON_TOKEN    char_literal89;
    NDDL3Parser_constructorParameters_return constructorParameters88;
    #undef	RETURN_TYPE_constructorParameters88
    #define	RETURN_TYPE_constructorParameters88 NDDL3Parser_constructorParameters_return

    pANTLR3_BASE_TREE char_literal87_tree;
    pANTLR3_BASE_TREE char_literal89_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal87       = NULL;
    char_literal89       = NULL;
    constructorParameters88.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal87_tree   = NULL;
    char_literal89_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:219:2: ( '(' ( constructorParameters )? ')' )
        // NDDL/base/antlr/NDDL3.g:219:4: '(' ( constructorParameters )? ')'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal87 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_constructorParameterList1168); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal87_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal87));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal87_tree, root_0));
            }

            // NDDL/base/antlr/NDDL3.g:219:9: ( constructorParameters )?
            {
                int alt22=2;
                {
                    int LA22_0 = LA(1);
                    if ( (LA22_0 == IDENT || ((LA22_0 >= 53) && (LA22_0 <= 56))) ) 
                    {
                        alt22=1;
                    }
                }
                switch (alt22) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:219:9: constructorParameters
            	    {
            	        FOLLOWPUSH(FOLLOW_constructorParameters_in_constructorParameterList1171);
            	        constructorParameters88=constructorParameters(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstructorParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructorParameters88.tree);

            	    }
            	    break;

                }
            }
            char_literal89 = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_constructorParameterList1174); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorParameterListEx; /* Prevent compiler warnings */
    ruleconstructorParameterListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorParameterList */

/** 
 * $ANTLR start constructorParameters
 * NDDL/base/antlr/NDDL3.g:222:1: constructorParameters : constructorParameter ( ',' constructorParameters )? ;
 */
static NDDL3Parser_constructorParameters_return
constructorParameters(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorParameters_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal91;
    NDDL3Parser_constructorParameter_return constructorParameter90;
    #undef	RETURN_TYPE_constructorParameter90
    #define	RETURN_TYPE_constructorParameter90 NDDL3Parser_constructorParameter_return

    NDDL3Parser_constructorParameters_return constructorParameters92;
    #undef	RETURN_TYPE_constructorParameters92
    #define	RETURN_TYPE_constructorParameters92 NDDL3Parser_constructorParameters_return

    pANTLR3_BASE_TREE char_literal91_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal91       = NULL;
    constructorParameter90.tree = NULL;

    constructorParameters92.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal91_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:223:2: ( constructorParameter ( ',' constructorParameters )? )
        // NDDL/base/antlr/NDDL3.g:223:4: constructorParameter ( ',' constructorParameters )?
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_constructorParameter_in_constructorParameters1186);
            constructorParameter90=constructorParameter(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstructorParametersEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructorParameter90.tree);

            // NDDL/base/antlr/NDDL3.g:223:26: ( ',' constructorParameters )?
            {
                int alt23=2;
                {
                    int LA23_0 = LA(1);
                    if ( (LA23_0 == 34) ) 
                    {
                        alt23=1;
                    }
                }
                switch (alt23) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:223:27: ',' constructorParameters
            	    {
            	        char_literal91 = (pANTLR3_COMMON_TOKEN) MATCHT(34, &FOLLOW_34_in_constructorParameters1190); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstructorParametersEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_constructorParameters_in_constructorParameters1193);
            	        constructorParameters92=constructorParameters(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstructorParametersEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constructorParameters92.tree);

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorParametersEx; /* Prevent compiler warnings */
    ruleconstructorParametersEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorParameters */

/** 
 * $ANTLR start constructorParameter
 * NDDL/base/antlr/NDDL3.g:226:1: constructorParameter : type IDENT -> ^( VARIABLE IDENT type ) ;
 */
static NDDL3Parser_constructorParameter_return
constructorParameter(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorParameter_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT94;
    NDDL3Parser_type_return type93;
    #undef	RETURN_TYPE_type93
    #define	RETURN_TYPE_type93 NDDL3Parser_type_return

    pANTLR3_BASE_TREE IDENT94_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT94       = NULL;
    type93.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENT94_tree   = NULL;

    stream_IDENT   = NULL;
    #define CREATE_stream_IDENT  if (stream_IDENT == NULL) {stream_IDENT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); } 
    stream_type   = NULL;
    #define CREATE_stream_type  if (stream_type == NULL) {stream_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type"); }

    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:227:2: ( type IDENT -> ^( VARIABLE IDENT type ) )
        // NDDL/base/antlr/NDDL3.g:227:4: type IDENT
        {
            FOLLOWPUSH(FOLLOW_type_in_constructorParameter1206);
            type93=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstructorParameterEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_type; stream_type->add(stream_type, type93.tree, NULL); }
            IDENT94 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_constructorParameter1208); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorParameterEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_IDENT; stream_IDENT->add(stream_IDENT, IDENT94, NULL); }


             
            /* AST REWRITE
             * elements          : type, IDENT
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 228:4: -> ^( VARIABLE IDENT type )
            	{
            	    // NDDL/base/antlr/NDDL3.g:228:7: ^( VARIABLE IDENT type )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARIABLE, (pANTLR3_UINT8)"VARIABLE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT == NULL ? NULL : stream_IDENT->nextNode(stream_IDENT));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextTree(stream_type));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorParameterEx; /* Prevent compiler warnings */
    ruleconstructorParameterEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENT != NULL) stream_IDENT->free(stream_IDENT);
        if (stream_type != NULL) stream_type->free(stream_type);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorParameter */

/** 
 * $ANTLR start tokenType
 * NDDL/base/antlr/NDDL3.g:231:1: tokenType : ( 'predicate' | 'action' ) IDENT tokenBlock ;
 */
static NDDL3Parser_tokenType_return
tokenType(pNDDL3Parser ctx)
{   
    NDDL3Parser_tokenType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set95;
    pANTLR3_COMMON_TOKEN    IDENT96;
    NDDL3Parser_tokenBlock_return tokenBlock97;
    #undef	RETURN_TYPE_tokenBlock97
    #define	RETURN_TYPE_tokenBlock97 NDDL3Parser_tokenBlock_return

    pANTLR3_BASE_TREE set95_tree;
    pANTLR3_BASE_TREE IDENT96_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set95       = NULL;
    IDENT96       = NULL;
    tokenBlock97.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    set95_tree   = NULL;
    IDENT96_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:232:2: ( ( 'predicate' | 'action' ) IDENT tokenBlock )
        // NDDL/base/antlr/NDDL3.g:232:4: ( 'predicate' | 'action' ) IDENT tokenBlock
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set95=(pANTLR3_COMMON_TOKEN)LT(1);
            set95=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= 50) && (LA(1) <= 51)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set95)), root_0));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_tokenType1232;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_tokenType1232);    goto ruletokenTypeEx;
            }

            IDENT96 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_tokenType1241); 
            if  (HASEXCEPTION())
            {
                goto ruletokenTypeEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            IDENT96_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT96));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT96_tree);
            }
            FOLLOWPUSH(FOLLOW_tokenBlock_in_tokenType1243);
            tokenBlock97=tokenBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletokenTypeEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tokenBlock97.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletokenTypeEx; /* Prevent compiler warnings */
    ruletokenTypeEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end tokenType */

/** 
 * $ANTLR start tokenBlock
 * NDDL/base/antlr/NDDL3.g:235:1: tokenBlock : '{' ( tokenStatement )* '}' ;
 */
static NDDL3Parser_tokenBlock_return
tokenBlock(pNDDL3Parser ctx)
{   
    NDDL3Parser_tokenBlock_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal98;
    pANTLR3_COMMON_TOKEN    char_literal100;
    NDDL3Parser_tokenStatement_return tokenStatement99;
    #undef	RETURN_TYPE_tokenStatement99
    #define	RETURN_TYPE_tokenStatement99 NDDL3Parser_tokenStatement_return

    pANTLR3_BASE_TREE char_literal98_tree;
    pANTLR3_BASE_TREE char_literal100_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal98       = NULL;
    char_literal100       = NULL;
    tokenStatement99.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal98_tree   = NULL;
    char_literal100_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:236:2: ( '{' ( tokenStatement )* '}' )
        // NDDL/base/antlr/NDDL3.g:236:4: '{' ( tokenStatement )* '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal98 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_tokenBlock1255); 
            if  (HASEXCEPTION())
            {
                goto ruletokenBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal98_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal98));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal98_tree, root_0));
            }

            // NDDL/base/antlr/NDDL3.g:236:9: ( tokenStatement )*

            for (;;)
            {
                int alt24=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA24_0 = LA(1);
                    if ( (((LA24_0 >= IDENT) && (LA24_0 <= STRING)) || LA24_0 == 33 || LA24_0 == 38 || ((LA24_0 >= 40) && (LA24_0 <= 41)) || LA24_0 == 45 || ((LA24_0 >= 53) && (LA24_0 <= 56)) || LA24_0 == 63 || LA24_0 == 72 || ((LA24_0 >= 102) && (LA24_0 <= 107))) ) 
                    {
                        alt24=1;
                    }

                }
                switch (alt24) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:236:9: tokenStatement
            	    {
            	        FOLLOWPUSH(FOLLOW_tokenStatement_in_tokenBlock1258);
            	        tokenStatement99=tokenStatement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletokenBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tokenStatement99.tree);

            	    }
            	    break;

            	default:
            	    goto loop24;	/* break out of the loop */
            	    break;
                }
            }
            loop24: ; /* Jump out to here if this rule does not match */

            char_literal100 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_tokenBlock1261); 
            if  (HASEXCEPTION())
            {
                goto ruletokenBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletokenBlockEx; /* Prevent compiler warnings */
    ruletokenBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end tokenBlock */

/** 
 * $ANTLR start tokenStatement
 * NDDL/base/antlr/NDDL3.g:240:1: tokenStatement : ( variableDeclarations | constraintInstantiation | assignment );
 */
static NDDL3Parser_tokenStatement_return
tokenStatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_tokenStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_variableDeclarations_return variableDeclarations101;
    #undef	RETURN_TYPE_variableDeclarations101
    #define	RETURN_TYPE_variableDeclarations101 NDDL3Parser_variableDeclarations_return

    NDDL3Parser_constraintInstantiation_return constraintInstantiation102;
    #undef	RETURN_TYPE_constraintInstantiation102
    #define	RETURN_TYPE_constraintInstantiation102 NDDL3Parser_constraintInstantiation_return

    NDDL3Parser_assignment_return assignment103;
    #undef	RETURN_TYPE_assignment103
    #define	RETURN_TYPE_assignment103 NDDL3Parser_assignment_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    variableDeclarations101.tree = NULL;

    constraintInstantiation102.tree = NULL;

    assignment103.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:241:2: ( variableDeclarations | constraintInstantiation | assignment )
            
            ANTLR3_UINT32 alt25;

            alt25=3;

            alt25 = cdfa25.predict(ctx, RECOGNIZER, ISTREAM, &cdfa25);
            if  (HASEXCEPTION())
            {
                goto ruletokenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt25) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:241:4: variableDeclarations
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableDeclarations_in_tokenStatement1274);
        	        variableDeclarations101=variableDeclarations(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletokenStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableDeclarations101.tree);

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:242:4: constraintInstantiation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constraintInstantiation_in_tokenStatement1279);
        	        constraintInstantiation102=constraintInstantiation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletokenStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constraintInstantiation102.tree);

        	    }
        	    break;
        	case 3:
        	    // NDDL/base/antlr/NDDL3.g:243:4: assignment
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_assignment_in_tokenStatement1284);
        	        assignment103=assignment(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletokenStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, assignment103.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruletokenStatementEx; /* Prevent compiler warnings */
    ruletokenStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end tokenStatement */

/** 
 * $ANTLR start rule
 * NDDL/base/antlr/NDDL3.g:246:1: rule : IDENT '::' IDENT ruleBlock ;
 */
static NDDL3Parser_rule_return
rule(pNDDL3Parser ctx)
{   
    NDDL3Parser_rule_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT104;
    pANTLR3_COMMON_TOKEN    string_literal105;
    pANTLR3_COMMON_TOKEN    IDENT106;
    NDDL3Parser_ruleBlock_return ruleBlock107;
    #undef	RETURN_TYPE_ruleBlock107
    #define	RETURN_TYPE_ruleBlock107 NDDL3Parser_ruleBlock_return

    pANTLR3_BASE_TREE IDENT104_tree;
    pANTLR3_BASE_TREE string_literal105_tree;
    pANTLR3_BASE_TREE IDENT106_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT104       = NULL;
    string_literal105       = NULL;
    IDENT106       = NULL;
    ruleBlock107.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENT104_tree   = NULL;
    string_literal105_tree   = NULL;
    IDENT106_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:247:5: ( IDENT '::' IDENT ruleBlock )
        // NDDL/base/antlr/NDDL3.g:247:7: IDENT '::' IDENT ruleBlock
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            IDENT104 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_rule1298); 
            if  (HASEXCEPTION())
            {
                goto ruleruleEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            IDENT104_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT104));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT104_tree);
            }
            string_literal105 = (pANTLR3_COMMON_TOKEN) MATCHT(52, &FOLLOW_52_in_rule1300); 
            if  (HASEXCEPTION())
            {
                goto ruleruleEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            string_literal105_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal105));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal105_tree, root_0));
            }
            IDENT106 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_rule1303); 
            if  (HASEXCEPTION())
            {
                goto ruleruleEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            IDENT106_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT106));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT106_tree);
            }
            FOLLOWPUSH(FOLLOW_ruleBlock_in_rule1305);
            ruleBlock107=ruleBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleruleEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ruleBlock107.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleruleEx; /* Prevent compiler warnings */
    ruleruleEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end rule */

/** 
 * $ANTLR start ruleBlock
 * NDDL/base/antlr/NDDL3.g:250:1: ruleBlock : ( '{' ( ruleStatement )* '}' | ruleStatement -> ^( '{' ruleStatement ) );
 */
static NDDL3Parser_ruleBlock_return
ruleBlock(pNDDL3Parser ctx)
{   
    NDDL3Parser_ruleBlock_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal108;
    pANTLR3_COMMON_TOKEN    char_literal110;
    NDDL3Parser_ruleStatement_return ruleStatement109;
    #undef	RETURN_TYPE_ruleStatement109
    #define	RETURN_TYPE_ruleStatement109 NDDL3Parser_ruleStatement_return

    NDDL3Parser_ruleStatement_return ruleStatement111;
    #undef	RETURN_TYPE_ruleStatement111
    #define	RETURN_TYPE_ruleStatement111 NDDL3Parser_ruleStatement_return

    pANTLR3_BASE_TREE char_literal108_tree;
    pANTLR3_BASE_TREE char_literal110_tree;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ruleStatement;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal108       = NULL;
    char_literal110       = NULL;
    ruleStatement109.tree = NULL;

    ruleStatement111.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal108_tree   = NULL;
    char_literal110_tree   = NULL;

    stream_ruleStatement   = NULL;
    #define CREATE_stream_ruleStatement  if (stream_ruleStatement == NULL) {stream_ruleStatement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ruleStatement"); }

    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:251:2: ( '{' ( ruleStatement )* '}' | ruleStatement -> ^( '{' ruleStatement ) )
            
            ANTLR3_UINT32 alt27;

            alt27=2;

            alt27 = cdfa27.predict(ctx, RECOGNIZER, ISTREAM, &cdfa27);
            if  (HASEXCEPTION())
            {
                goto ruleruleBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt27) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:251:4: '{' ( ruleStatement )* '}'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal108 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_ruleBlock1316); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal108_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal108));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal108_tree, root_0));
        	        }

        	        // NDDL/base/antlr/NDDL3.g:251:9: ( ruleStatement )*

        	        for (;;)
        	        {
        	            int alt26=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA26_0 = LA(1);
        	                if ( (((LA26_0 >= IDENT) && (LA26_0 <= STRING)) || LA26_0 == 33 || ((LA26_0 >= 37) && (LA26_0 <= 38)) || ((LA26_0 >= 40) && (LA26_0 <= 41)) || LA26_0 == 45 || ((LA26_0 >= 53) && (LA26_0 <= 56)) || LA26_0 == 63 || LA26_0 == 72 || LA26_0 == 76 || ((LA26_0 >= 78) && (LA26_0 <= 107))) ) 
        	                {
        	                    alt26=1;
        	                }

        	            }
        	            switch (alt26) 
        	            {
        	        	case 1:
        	        	    // NDDL/base/antlr/NDDL3.g:251:9: ruleStatement
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_ruleStatement_in_ruleBlock1319);
        	        	        ruleStatement109=ruleStatement(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleruleBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ruleStatement109.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */

        	        char_literal110 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_ruleBlock1322); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:252:4: ruleStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_ruleStatement_in_ruleBlock1328);
        	        ruleStatement111=ruleStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ruleStatement; stream_ruleStatement->add(stream_ruleStatement, ruleStatement111.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : ruleStatement, 33
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 252:18: -> ^( '{' ruleStatement )
        	        	{
        	        	    // NDDL/base/antlr/NDDL3.g:252:21: ^( '{' ruleStatement )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, 33, (pANTLR3_UINT8)"33"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ruleStatement == NULL ? NULL : stream_ruleStatement->nextTree(stream_ruleStatement));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleruleBlockEx; /* Prevent compiler warnings */
    ruleruleBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ruleStatement != NULL) stream_ruleStatement->free(stream_ruleStatement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end ruleBlock */

/** 
 * $ANTLR start ruleStatement
 * NDDL/base/antlr/NDDL3.g:255:1: ruleStatement : ( relation | variableDeclarations | constraintInstantiation | flowControl | noopstatement );
 */
static NDDL3Parser_ruleStatement_return
ruleStatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_ruleStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_relation_return relation112;
    #undef	RETURN_TYPE_relation112
    #define	RETURN_TYPE_relation112 NDDL3Parser_relation_return

    NDDL3Parser_variableDeclarations_return variableDeclarations113;
    #undef	RETURN_TYPE_variableDeclarations113
    #define	RETURN_TYPE_variableDeclarations113 NDDL3Parser_variableDeclarations_return

    NDDL3Parser_constraintInstantiation_return constraintInstantiation114;
    #undef	RETURN_TYPE_constraintInstantiation114
    #define	RETURN_TYPE_constraintInstantiation114 NDDL3Parser_constraintInstantiation_return

    NDDL3Parser_flowControl_return flowControl115;
    #undef	RETURN_TYPE_flowControl115
    #define	RETURN_TYPE_flowControl115 NDDL3Parser_flowControl_return

    NDDL3Parser_noopstatement_return noopstatement116;
    #undef	RETURN_TYPE_noopstatement116
    #define	RETURN_TYPE_noopstatement116 NDDL3Parser_noopstatement_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    relation112.tree = NULL;

    variableDeclarations113.tree = NULL;

    constraintInstantiation114.tree = NULL;

    flowControl115.tree = NULL;

    noopstatement116.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:256:2: ( relation | variableDeclarations | constraintInstantiation | flowControl | noopstatement )
            
            ANTLR3_UINT32 alt28;

            alt28=5;

            switch ( LA(1) ) 
            {
            case IDENT:
            	{
            		switch ( LA(2) ) 
            		{
            		case 37:
            		case 41:
            		case 46:
            		case 62:
            		case 64:
            		case 65:
            		case 66:
            		case 67:
            		case 68:
            		case 69:
            		case 70:
            		case 71:
            		case 72:
            		case 73:
            		case 74:
            			{
            				alt28=3;
            			}
            		    break;
            		case IDENT:
            			{
            				alt28=2;
            			}
            		    break;
            		case 79:
            		case 80:
            		case 81:
            		case 82:
            		case 83:
            		case 84:
            		case 85:
            		case 86:
            		case 87:
            		case 88:
            		case 89:
            		case 90:
            		case 91:
            		case 92:
            		case 93:
            		case 94:
            		case 95:
            		case 96:
            		case 97:
            		case 98:
            		case 99:
            		case 100:
            		case 101:
            			{
            				alt28=1;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE; 
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 28;
            		    EXCEPTION->state        = 1;


            		    goto ruleruleStatementEx;
            		}

            	}
                break;
            case 45:
            	{

            		{
            		    int LA28_2 = LA(2);
            		    if ( (((LA28_2 >= 79) && (LA28_2 <= 101))) ) 
            		    {
            		        alt28=1;
            		    }
            		    else if ( (LA28_2 == 37 || LA28_2 == 46 || LA28_2 == 62 || ((LA28_2 >= 64) && (LA28_2 <= 74))) ) 
            		    {
            		        alt28=3;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 28;
            		        EXCEPTION->state        = 2;


            		        goto ruleruleStatementEx;
            		    }
            		}
            	}
                break;
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            	{
            		alt28=1;
            	}
                break;
            case 40:
            case 53:
            case 54:
            case 55:
            case 56:
            	{
            		alt28=2;
            	}
                break;
            case INT:
            case FLOAT:
            case STRING:
            case 33:
            case 38:
            case 41:
            case 63:
            case 72:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            	{
            		alt28=3;
            	}
                break;
            case 76:
            case 78:
            	{
            		alt28=4;
            	}
                break;
            case 37:
            	{
            		alt28=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 28;
                EXCEPTION->state        = 0;


                goto ruleruleStatementEx;
            }

            switch (alt28) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:256:4: relation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_relation_in_ruleStatement1347);
        	        relation112=relation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, relation112.tree);

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:257:4: variableDeclarations
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableDeclarations_in_ruleStatement1352);
        	        variableDeclarations113=variableDeclarations(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableDeclarations113.tree);

        	    }
        	    break;
        	case 3:
        	    // NDDL/base/antlr/NDDL3.g:258:4: constraintInstantiation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constraintInstantiation_in_ruleStatement1357);
        	        constraintInstantiation114=constraintInstantiation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constraintInstantiation114.tree);

        	    }
        	    break;
        	case 4:
        	    // NDDL/base/antlr/NDDL3.g:259:4: flowControl
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_flowControl_in_ruleStatement1362);
        	        flowControl115=flowControl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, flowControl115.tree);

        	    }
        	    break;
        	case 5:
        	    // NDDL/base/antlr/NDDL3.g:260:4: noopstatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noopstatement_in_ruleStatement1367);
        	        noopstatement116=noopstatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, noopstatement116.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleruleStatementEx; /* Prevent compiler warnings */
    ruleruleStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end ruleStatement */

/** 
 * $ANTLR start type
 * NDDL/base/antlr/NDDL3.g:263:1: type : ( 'int' | 'float' | 'bool' | 'string' | IDENT );
 */
static NDDL3Parser_type_return
type(pNDDL3Parser ctx)
{   
    NDDL3Parser_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set117;

    pANTLR3_BASE_TREE set117_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set117       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set117_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:264:5: ( 'int' | 'float' | 'bool' | 'string' | IDENT )
        // NDDL/base/antlr/NDDL3.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set117=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == IDENT || ((LA(1) >= 53) && (LA(1) <= 56)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set117)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_type0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_type0);    goto ruletypeEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end type */

/** 
 * $ANTLR start relation
 * NDDL/base/antlr/NDDL3.g:271:1: relation : (token= IDENT | token= 'this' )? temporalRelation tokenInstanceList ';' -> ^( TOKEN_RELATION ( $token)? temporalRelation tokenInstanceList ) ;
 */
static NDDL3Parser_relation_return
relation(pNDDL3Parser ctx)
{   
    NDDL3Parser_relation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    token;
    pANTLR3_COMMON_TOKEN    char_literal120;
    NDDL3Parser_temporalRelation_return temporalRelation118;
    #undef	RETURN_TYPE_temporalRelation118
    #define	RETURN_TYPE_temporalRelation118 NDDL3Parser_temporalRelation_return

    NDDL3Parser_tokenInstanceList_return tokenInstanceList119;
    #undef	RETURN_TYPE_tokenInstanceList119
    #define	RETURN_TYPE_tokenInstanceList119 NDDL3Parser_tokenInstanceList_return

    pANTLR3_BASE_TREE token_tree;
    pANTLR3_BASE_TREE char_literal120_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_45;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_37;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_temporalRelation;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_tokenInstanceList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    token       = NULL;
    char_literal120       = NULL;
    temporalRelation118.tree = NULL;

    tokenInstanceList119.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    token_tree   = NULL;
    char_literal120_tree   = NULL;

    stream_IDENT   = NULL;
    #define CREATE_stream_IDENT  if (stream_IDENT == NULL) {stream_IDENT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); } 
    stream_45   = NULL;
    #define CREATE_stream_45  if (stream_45 == NULL) {stream_45 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 45"); } 
    stream_37   = NULL;
    #define CREATE_stream_37  if (stream_37 == NULL) {stream_37 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 37"); } 
    stream_temporalRelation   = NULL;
    #define CREATE_stream_temporalRelation  if (stream_temporalRelation == NULL) {stream_temporalRelation = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule temporalRelation"); }
    stream_tokenInstanceList   = NULL;
    #define CREATE_stream_tokenInstanceList  if (stream_tokenInstanceList == NULL) {stream_tokenInstanceList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule tokenInstanceList"); }

    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:272:5: ( (token= IDENT | token= 'this' )? temporalRelation tokenInstanceList ';' -> ^( TOKEN_RELATION ( $token)? temporalRelation tokenInstanceList ) )
        // NDDL/base/antlr/NDDL3.g:272:7: (token= IDENT | token= 'this' )? temporalRelation tokenInstanceList ';'
        {

            // NDDL/base/antlr/NDDL3.g:272:7: (token= IDENT | token= 'this' )?
            {
                int alt29=3;
                {
                    int LA29_0 = LA(1);
                    if ( (LA29_0 == IDENT) ) 
                    {
                        alt29=1;
                    }
                    else if ( (LA29_0 == 45) ) 
                    {
                        alt29=2;
                    }
                }
                switch (alt29) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:272:8: token= IDENT
            	    {
            	        token = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_relation1419); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENT; stream_IDENT->add(stream_IDENT, token, NULL); }


            	    }
            	    break;
            	case 2:
            	    // NDDL/base/antlr/NDDL3.g:272:22: token= 'this'
            	    {
            	        token = (pANTLR3_COMMON_TOKEN) MATCHT(45, &FOLLOW_45_in_relation1425); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_45; stream_45->add(stream_45, token, NULL); }


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_temporalRelation_in_relation1429);
            temporalRelation118=temporalRelation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerelationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_temporalRelation; stream_temporalRelation->add(stream_temporalRelation, temporalRelation118.tree, NULL); }
            FOLLOWPUSH(FOLLOW_tokenInstanceList_in_relation1431);
            tokenInstanceList119=tokenInstanceList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerelationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_tokenInstanceList; stream_tokenInstanceList->add(stream_tokenInstanceList, tokenInstanceList119.tree, NULL); }
            char_literal120 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_relation1433); 
            if  (HASEXCEPTION())
            {
                goto rulerelationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_37; stream_37->add(stream_37, char_literal120, NULL); }


             
            /* AST REWRITE
             * elements          : tokenInstanceList, temporalRelation, token
             * token labels      : token
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_token;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_token=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token token", token);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 273:4: -> ^( TOKEN_RELATION ( $token)? temporalRelation tokenInstanceList )
            	{
            	    // NDDL/base/antlr/NDDL3.g:273:7: ^( TOKEN_RELATION ( $token)? temporalRelation tokenInstanceList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TOKEN_RELATION, (pANTLR3_UINT8)"TOKEN_RELATION"), root_1));

            	        // NDDL/base/antlr/NDDL3.g:273:24: ( $token)?
            	        {
            	        	if ( (stream_token != NULL && stream_token->hasNext(stream_token))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_token == NULL ? NULL : stream_token->nextNode(stream_token));

            	        	}
            	        	if ( stream_token != NULL) stream_token->reset(stream_token);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_temporalRelation == NULL ? NULL : stream_temporalRelation->nextTree(stream_temporalRelation));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_tokenInstanceList == NULL ? NULL : stream_tokenInstanceList->nextTree(stream_tokenInstanceList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_token != NULL) stream_token->free(stream_token); 
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationEx; /* Prevent compiler warnings */
    rulerelationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENT != NULL) stream_IDENT->free(stream_IDENT);
        if (stream_45 != NULL) stream_45->free(stream_45);
        if (stream_37 != NULL) stream_37->free(stream_37);
        if (stream_temporalRelation != NULL) stream_temporalRelation->free(stream_temporalRelation);
        if (stream_tokenInstanceList != NULL) stream_tokenInstanceList->free(stream_tokenInstanceList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end relation */

/** 
 * $ANTLR start problemStmt
 * NDDL/base/antlr/NDDL3.g:276:1: problemStmt : ( 'rejectable' | 'goal' | 'fact' ) tokenInstanceList ';' ;
 */
static NDDL3Parser_problemStmt_return
problemStmt(pNDDL3Parser ctx)
{   
    NDDL3Parser_problemStmt_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal121;
    pANTLR3_COMMON_TOKEN    string_literal122;
    pANTLR3_COMMON_TOKEN    string_literal123;
    pANTLR3_COMMON_TOKEN    char_literal125;
    NDDL3Parser_tokenInstanceList_return tokenInstanceList124;
    #undef	RETURN_TYPE_tokenInstanceList124
    #define	RETURN_TYPE_tokenInstanceList124 NDDL3Parser_tokenInstanceList_return

    pANTLR3_BASE_TREE string_literal121_tree;
    pANTLR3_BASE_TREE string_literal122_tree;
    pANTLR3_BASE_TREE string_literal123_tree;
    pANTLR3_BASE_TREE char_literal125_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal121       = NULL;
    string_literal122       = NULL;
    string_literal123       = NULL;
    char_literal125       = NULL;
    tokenInstanceList124.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal121_tree   = NULL;
    string_literal122_tree   = NULL;
    string_literal123_tree   = NULL;
    char_literal125_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:277:5: ( ( 'rejectable' | 'goal' | 'fact' ) tokenInstanceList ';' )
        // NDDL/base/antlr/NDDL3.g:277:7: ( 'rejectable' | 'goal' | 'fact' ) tokenInstanceList ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // NDDL/base/antlr/NDDL3.g:277:7: ( 'rejectable' | 'goal' | 'fact' )
            {
                int alt30=3;
                switch ( LA(1) ) 
                {
                case 57:
                	{
                		alt30=1;
                	}
                    break;
                case 58:
                	{
                		alt30=2;
                	}
                    break;
                case 59:
                	{
                		alt30=3;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 30;
                    EXCEPTION->state        = 0;


                    goto ruleproblemStmtEx;
                }

                switch (alt30) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:277:8: 'rejectable'
            	    {
            	        string_literal121 = (pANTLR3_COMMON_TOKEN) MATCHT(57, &FOLLOW_57_in_problemStmt1468); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleproblemStmtEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        string_literal121_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal121));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal121_tree, root_0));
            	        }

            	    }
            	    break;
            	case 2:
            	    // NDDL/base/antlr/NDDL3.g:277:24: 'goal'
            	    {
            	        string_literal122 = (pANTLR3_COMMON_TOKEN) MATCHT(58, &FOLLOW_58_in_problemStmt1473); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleproblemStmtEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        string_literal122_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal122));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal122_tree, root_0));
            	        }

            	    }
            	    break;
            	case 3:
            	    // NDDL/base/antlr/NDDL3.g:277:34: 'fact'
            	    {
            	        string_literal123 = (pANTLR3_COMMON_TOKEN) MATCHT(59, &FOLLOW_59_in_problemStmt1478); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleproblemStmtEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        string_literal123_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal123));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal123_tree, root_0));
            	        }

            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_tokenInstanceList_in_problemStmt1482);
            tokenInstanceList124=tokenInstanceList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleproblemStmtEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tokenInstanceList124.tree);
            char_literal125 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_problemStmt1484); 
            if  (HASEXCEPTION())
            {
                goto ruleproblemStmtEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleproblemStmtEx; /* Prevent compiler warnings */
    ruleproblemStmtEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end problemStmt */

/** 
 * $ANTLR start tokenInstanceList
 * NDDL/base/antlr/NDDL3.g:280:1: tokenInstanceList : ( IDENT | '(' ( tokenInstances )? ')' );
 */
static NDDL3Parser_tokenInstanceList_return
tokenInstanceList(pNDDL3Parser ctx)
{   
    NDDL3Parser_tokenInstanceList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT126;
    pANTLR3_COMMON_TOKEN    char_literal127;
    pANTLR3_COMMON_TOKEN    char_literal129;
    NDDL3Parser_tokenInstances_return tokenInstances128;
    #undef	RETURN_TYPE_tokenInstances128
    #define	RETURN_TYPE_tokenInstances128 NDDL3Parser_tokenInstances_return

    pANTLR3_BASE_TREE IDENT126_tree;
    pANTLR3_BASE_TREE char_literal127_tree;
    pANTLR3_BASE_TREE char_literal129_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT126       = NULL;
    char_literal127       = NULL;
    char_literal129       = NULL;
    tokenInstances128.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENT126_tree   = NULL;
    char_literal127_tree   = NULL;
    char_literal129_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:281:2: ( IDENT | '(' ( tokenInstances )? ')' )
            
            ANTLR3_UINT32 alt32;

            alt32=2;


            {
                int LA32_0 = LA(1);
                if ( (LA32_0 == IDENT) ) 
                {
                    alt32=1;
                }
                else if ( (LA32_0 == 41) ) 
                {
                    alt32=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 32;
                    EXCEPTION->state        = 0;


                    goto ruletokenInstanceListEx;
                }
            }
            switch (alt32) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:281:4: IDENT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        IDENT126 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_tokenInstanceList1504); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletokenInstanceListEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        IDENT126_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT126));
        	        ADAPTOR->addChild(ADAPTOR, root_0, IDENT126_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:282:4: '(' ( tokenInstances )? ')'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal127 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_tokenInstanceList1509); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletokenInstanceListEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal127_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal127));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal127_tree, root_0));
        	        }

        	        // NDDL/base/antlr/NDDL3.g:282:9: ( tokenInstances )?
        	        {
        	            int alt31=2;
        	            {
        	                int LA31_0 = LA(1);
        	                if ( (LA31_0 == IDENT || LA31_0 == 45 || ((LA31_0 >= 60) && (LA31_0 <= 61))) ) 
        	                {
        	                    alt31=1;
        	                }
        	            }
        	            switch (alt31) 
        	            {
        	        	case 1:
        	        	    // NDDL/base/antlr/NDDL3.g:282:9: tokenInstances
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_tokenInstances_in_tokenInstanceList1512);
        	        	        tokenInstances128=tokenInstances(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruletokenInstanceListEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tokenInstances128.tree);

        	        	    }
        	        	    break;

        	            }
        	        }
        	        char_literal129 = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_tokenInstanceList1515); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletokenInstanceListEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruletokenInstanceListEx; /* Prevent compiler warnings */
    ruletokenInstanceListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end tokenInstanceList */

/** 
 * $ANTLR start tokenInstances
 * NDDL/base/antlr/NDDL3.g:285:1: tokenInstances : tokenInstance ( ',' tokenInstance )* ;
 */
static NDDL3Parser_tokenInstances_return
tokenInstances(pNDDL3Parser ctx)
{   
    NDDL3Parser_tokenInstances_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal131;
    NDDL3Parser_tokenInstance_return tokenInstance130;
    #undef	RETURN_TYPE_tokenInstance130
    #define	RETURN_TYPE_tokenInstance130 NDDL3Parser_tokenInstance_return

    NDDL3Parser_tokenInstance_return tokenInstance132;
    #undef	RETURN_TYPE_tokenInstance132
    #define	RETURN_TYPE_tokenInstance132 NDDL3Parser_tokenInstance_return

    pANTLR3_BASE_TREE char_literal131_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal131       = NULL;
    tokenInstance130.tree = NULL;

    tokenInstance132.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal131_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:286:2: ( tokenInstance ( ',' tokenInstance )* )
        // NDDL/base/antlr/NDDL3.g:286:4: tokenInstance ( ',' tokenInstance )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_tokenInstance_in_tokenInstances1527);
            tokenInstance130=tokenInstance(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletokenInstancesEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tokenInstance130.tree);

            // NDDL/base/antlr/NDDL3.g:286:18: ( ',' tokenInstance )*

            for (;;)
            {
                int alt33=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA33_0 = LA(1);
                    if ( (LA33_0 == 34) ) 
                    {
                        alt33=1;
                    }

                }
                switch (alt33) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:286:19: ',' tokenInstance
            	    {
            	        char_literal131 = (pANTLR3_COMMON_TOKEN) MATCHT(34, &FOLLOW_34_in_tokenInstances1530); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletokenInstancesEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_tokenInstance_in_tokenInstances1533);
            	        tokenInstance132=tokenInstance(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletokenInstancesEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tokenInstance132.tree);

            	    }
            	    break;

            	default:
            	    goto loop33;	/* break out of the loop */
            	    break;
                }
            }
            loop33: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletokenInstancesEx; /* Prevent compiler warnings */
    ruletokenInstancesEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end tokenInstances */

/** 
 * $ANTLR start tokenInstance
 * NDDL/base/antlr/NDDL3.g:289:1: tokenInstance : ( tokenAnnotation )? qualified ( IDENT )? -> ^( PREDICATE_INSTANCE qualified ( IDENT )? ( tokenAnnotation )? ) ;
 */
static NDDL3Parser_tokenInstance_return
tokenInstance(pNDDL3Parser ctx)
{   
    NDDL3Parser_tokenInstance_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT135;
    NDDL3Parser_tokenAnnotation_return tokenAnnotation133;
    #undef	RETURN_TYPE_tokenAnnotation133
    #define	RETURN_TYPE_tokenAnnotation133 NDDL3Parser_tokenAnnotation_return

    NDDL3Parser_qualified_return qualified134;
    #undef	RETURN_TYPE_qualified134
    #define	RETURN_TYPE_qualified134 NDDL3Parser_qualified_return

    pANTLR3_BASE_TREE IDENT135_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_tokenAnnotation;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_qualified;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT135       = NULL;
    tokenAnnotation133.tree = NULL;

    qualified134.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENT135_tree   = NULL;

    stream_IDENT   = NULL;
    #define CREATE_stream_IDENT  if (stream_IDENT == NULL) {stream_IDENT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); } 
    stream_tokenAnnotation   = NULL;
    #define CREATE_stream_tokenAnnotation  if (stream_tokenAnnotation == NULL) {stream_tokenAnnotation = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule tokenAnnotation"); }
    stream_qualified   = NULL;
    #define CREATE_stream_qualified  if (stream_qualified == NULL) {stream_qualified = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule qualified"); }

    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:290:2: ( ( tokenAnnotation )? qualified ( IDENT )? -> ^( PREDICATE_INSTANCE qualified ( IDENT )? ( tokenAnnotation )? ) )
        // NDDL/base/antlr/NDDL3.g:290:4: ( tokenAnnotation )? qualified ( IDENT )?
        {

            // NDDL/base/antlr/NDDL3.g:290:4: ( tokenAnnotation )?
            {
                int alt34=2;
                {
                    int LA34_0 = LA(1);
                    if ( (((LA34_0 >= 60) && (LA34_0 <= 61))) ) 
                    {
                        alt34=1;
                    }
                }
                switch (alt34) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:290:4: tokenAnnotation
            	    {
            	        FOLLOWPUSH(FOLLOW_tokenAnnotation_in_tokenInstance1546);
            	        tokenAnnotation133=tokenAnnotation(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletokenInstanceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_tokenAnnotation; stream_tokenAnnotation->add(stream_tokenAnnotation, tokenAnnotation133.tree, NULL); }

            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_qualified_in_tokenInstance1549);
            qualified134=qualified(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletokenInstanceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_qualified; stream_qualified->add(stream_qualified, qualified134.tree, NULL); }

            // NDDL/base/antlr/NDDL3.g:290:31: ( IDENT )?
            {
                int alt35=2;
                {
                    int LA35_0 = LA(1);
                    if ( (LA35_0 == IDENT) ) 
                    {
                        alt35=1;
                    }
                }
                switch (alt35) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:290:31: IDENT
            	    {
            	        IDENT135 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_tokenInstance1551); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletokenInstanceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENT; stream_IDENT->add(stream_IDENT, IDENT135, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : IDENT, tokenAnnotation, qualified
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 291:10: -> ^( PREDICATE_INSTANCE qualified ( IDENT )? ( tokenAnnotation )? )
            	{
            	    // NDDL/base/antlr/NDDL3.g:291:13: ^( PREDICATE_INSTANCE qualified ( IDENT )? ( tokenAnnotation )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PREDICATE_INSTANCE, (pANTLR3_UINT8)"PREDICATE_INSTANCE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_qualified == NULL ? NULL : stream_qualified->nextTree(stream_qualified));
            	        // NDDL/base/antlr/NDDL3.g:291:44: ( IDENT )?
            	        {
            	        	if ( (stream_IDENT != NULL && stream_IDENT->hasNext(stream_IDENT))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT == NULL ? NULL : stream_IDENT->nextNode(stream_IDENT));

            	        	}
            	        	if ( stream_IDENT != NULL) stream_IDENT->reset(stream_IDENT);

            	        }
            	        // NDDL/base/antlr/NDDL3.g:291:51: ( tokenAnnotation )?
            	        {
            	        	if ( (stream_tokenAnnotation != NULL && stream_tokenAnnotation->hasNext(stream_tokenAnnotation))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_tokenAnnotation == NULL ? NULL : stream_tokenAnnotation->nextTree(stream_tokenAnnotation));

            	        	}
            	        	if ( stream_tokenAnnotation != NULL) stream_tokenAnnotation->reset(stream_tokenAnnotation);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletokenInstanceEx; /* Prevent compiler warnings */
    ruletokenInstanceEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENT != NULL) stream_IDENT->free(stream_IDENT);
        if (stream_tokenAnnotation != NULL) stream_tokenAnnotation->free(stream_tokenAnnotation);
        if (stream_qualified != NULL) stream_qualified->free(stream_qualified);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end tokenInstance */

/** 
 * $ANTLR start tokenAnnotation
 * NDDL/base/antlr/NDDL3.g:294:1: tokenAnnotation : ( 'condition' | 'effect' );
 */
static NDDL3Parser_tokenAnnotation_return
tokenAnnotation(pNDDL3Parser ctx)
{   
    NDDL3Parser_tokenAnnotation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set136;

    pANTLR3_BASE_TREE set136_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set136       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set136_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:295:2: ( 'condition' | 'effect' )
        // NDDL/base/antlr/NDDL3.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set136=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= 60) && (LA(1) <= 61)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set136)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_tokenAnnotation0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_tokenAnnotation0);    goto ruletokenAnnotationEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletokenAnnotationEx; /* Prevent compiler warnings */
    ruletokenAnnotationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end tokenAnnotation */

/** 
 * $ANTLR start constraintInstantiation
 * NDDL/base/antlr/NDDL3.g:298:1: constraintInstantiation : ( ( ( IDENT variableArgumentList ( ':' violationMsg )? ';' )=> IDENT variableArgumentList ( ':' violationMsg )? ';' ) -> ^( CONSTRAINT_INSTANTIATION IDENT variableArgumentList ( violationMsg )? ) | enforceStatement );
 */
static NDDL3Parser_constraintInstantiation_return
constraintInstantiation(pNDDL3Parser ctx)
{   
    NDDL3Parser_constraintInstantiation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT137;
    pANTLR3_COMMON_TOKEN    char_literal139;
    pANTLR3_COMMON_TOKEN    char_literal141;
    NDDL3Parser_variableArgumentList_return variableArgumentList138;
    #undef	RETURN_TYPE_variableArgumentList138
    #define	RETURN_TYPE_variableArgumentList138 NDDL3Parser_variableArgumentList_return

    NDDL3Parser_violationMsg_return violationMsg140;
    #undef	RETURN_TYPE_violationMsg140
    #define	RETURN_TYPE_violationMsg140 NDDL3Parser_violationMsg_return

    NDDL3Parser_enforceStatement_return enforceStatement142;
    #undef	RETURN_TYPE_enforceStatement142
    #define	RETURN_TYPE_enforceStatement142 NDDL3Parser_enforceStatement_return

    pANTLR3_BASE_TREE IDENT137_tree;
    pANTLR3_BASE_TREE char_literal139_tree;
    pANTLR3_BASE_TREE char_literal141_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_62;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_37;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_violationMsg;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableArgumentList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT137       = NULL;
    char_literal139       = NULL;
    char_literal141       = NULL;
    variableArgumentList138.tree = NULL;

    violationMsg140.tree = NULL;

    enforceStatement142.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENT137_tree   = NULL;
    char_literal139_tree   = NULL;
    char_literal141_tree   = NULL;

    stream_IDENT   = NULL;
    #define CREATE_stream_IDENT  if (stream_IDENT == NULL) {stream_IDENT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); } 
    stream_62   = NULL;
    #define CREATE_stream_62  if (stream_62 == NULL) {stream_62 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 62"); } 
    stream_37   = NULL;
    #define CREATE_stream_37  if (stream_37 == NULL) {stream_37 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 37"); } 
    stream_violationMsg   = NULL;
    #define CREATE_stream_violationMsg  if (stream_violationMsg == NULL) {stream_violationMsg = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule violationMsg"); }
    stream_variableArgumentList   = NULL;
    #define CREATE_stream_variableArgumentList  if (stream_variableArgumentList == NULL) {stream_variableArgumentList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableArgumentList"); }

    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:299:2: ( ( ( IDENT variableArgumentList ( ':' violationMsg )? ';' )=> IDENT variableArgumentList ( ':' violationMsg )? ';' ) -> ^( CONSTRAINT_INSTANTIATION IDENT variableArgumentList ( violationMsg )? ) | enforceStatement )
            
            ANTLR3_UINT32 alt37;

            alt37=2;

            alt37 = cdfa37.predict(ctx, RECOGNIZER, ISTREAM, &cdfa37);
            if  (HASEXCEPTION())
            {
                goto ruleconstraintInstantiationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt37) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:299:4: ( ( IDENT variableArgumentList ( ':' violationMsg )? ';' )=> IDENT variableArgumentList ( ':' violationMsg )? ';' )
        	    {
        	        // NDDL/base/antlr/NDDL3.g:299:4: ( ( IDENT variableArgumentList ( ':' violationMsg )? ';' )=> IDENT variableArgumentList ( ':' violationMsg )? ';' )
        	        // NDDL/base/antlr/NDDL3.g:299:5: ( IDENT variableArgumentList ( ':' violationMsg )? ';' )=> IDENT variableArgumentList ( ':' violationMsg )? ';'
        	        {
        	            IDENT137 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_constraintInstantiation1617); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleconstraintInstantiationEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            } 
        	            if ( BACKTRACKING==0 ) { CREATE_stream_IDENT; stream_IDENT->add(stream_IDENT, IDENT137, NULL); }

        	            FOLLOWPUSH(FOLLOW_variableArgumentList_in_constraintInstantiation1619);
        	            variableArgumentList138=variableArgumentList(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleconstraintInstantiationEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_variableArgumentList; stream_variableArgumentList->add(stream_variableArgumentList, variableArgumentList138.tree, NULL); }

        	            // NDDL/base/antlr/NDDL3.g:299:86: ( ':' violationMsg )?
        	            {
        	                int alt36=2;
        	                {
        	                    int LA36_0 = LA(1);
        	                    if ( (LA36_0 == 62) ) 
        	                    {
        	                        alt36=1;
        	                    }
        	                }
        	                switch (alt36) 
        	                {
        	            	case 1:
        	            	    // NDDL/base/antlr/NDDL3.g:299:87: ':' violationMsg
        	            	    {
        	            	        char_literal139 = (pANTLR3_COMMON_TOKEN) MATCHT(62, &FOLLOW_62_in_constraintInstantiation1622); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto ruleconstraintInstantiationEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_62; stream_62->add(stream_62, char_literal139, NULL); }

        	            	        FOLLOWPUSH(FOLLOW_violationMsg_in_constraintInstantiation1624);
        	            	        violationMsg140=violationMsg(ctx);

        	            	        FOLLOWPOP();
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto ruleconstraintInstantiationEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        }
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_violationMsg; stream_violationMsg->add(stream_violationMsg, violationMsg140.tree, NULL); }

        	            	    }
        	            	    break;

        	                }
        	            }
        	            char_literal141 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_constraintInstantiation1628); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleconstraintInstantiationEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            } 
        	            if ( BACKTRACKING==0 ) { CREATE_stream_37; stream_37->add(stream_37, char_literal141, NULL); }


        	        }


        	         
        	        /* AST REWRITE
        	         * elements          : IDENT, violationMsg, variableArgumentList
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 300:4: -> ^( CONSTRAINT_INSTANTIATION IDENT variableArgumentList ( violationMsg )? )
        	        	{
        	        	    // NDDL/base/antlr/NDDL3.g:300:7: ^( CONSTRAINT_INSTANTIATION IDENT variableArgumentList ( violationMsg )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONSTRAINT_INSTANTIATION, (pANTLR3_UINT8)"CONSTRAINT_INSTANTIATION"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT == NULL ? NULL : stream_IDENT->nextNode(stream_IDENT));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableArgumentList == NULL ? NULL : stream_variableArgumentList->nextTree(stream_variableArgumentList));
        	        	        // NDDL/base/antlr/NDDL3.g:300:61: ( violationMsg )?
        	        	        {
        	        	        	if ( (stream_violationMsg != NULL && stream_violationMsg->hasNext(stream_violationMsg))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_violationMsg == NULL ? NULL : stream_violationMsg->nextTree(stream_violationMsg));

        	        	        	}
        	        	        	if ( stream_violationMsg != NULL) stream_violationMsg->reset(stream_violationMsg);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:301:5: enforceStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_enforceStatement_in_constraintInstantiation1651);
        	        enforceStatement142=enforceStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstraintInstantiationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, enforceStatement142.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstraintInstantiationEx; /* Prevent compiler warnings */
    ruleconstraintInstantiationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENT != NULL) stream_IDENT->free(stream_IDENT);
        if (stream_62 != NULL) stream_62->free(stream_62);
        if (stream_37 != NULL) stream_37->free(stream_37);
        if (stream_violationMsg != NULL) stream_violationMsg->free(stream_violationMsg);
        if (stream_variableArgumentList != NULL) stream_variableArgumentList->free(stream_variableArgumentList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constraintInstantiation */

/** 
 * $ANTLR start enforceStatement
 * NDDL/base/antlr/NDDL3.g:304:1: enforceStatement : ( 'enforce' )? result= cexpression ( ':' vm= violationMsg )? ';' -> ^( EXPRESSION_ENFORCE $result ( $vm)? ) ;
 */
static NDDL3Parser_enforceStatement_return
enforceStatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_enforceStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal143;
    pANTLR3_COMMON_TOKEN    char_literal144;
    pANTLR3_COMMON_TOKEN    char_literal145;
    NDDL3Parser_cexpression_return result;
    #undef	RETURN_TYPE_result
    #define	RETURN_TYPE_result NDDL3Parser_cexpression_return

    NDDL3Parser_violationMsg_return vm;
    #undef	RETURN_TYPE_vm
    #define	RETURN_TYPE_vm NDDL3Parser_violationMsg_return

    pANTLR3_BASE_TREE string_literal143_tree;
    pANTLR3_BASE_TREE char_literal144_tree;
    pANTLR3_BASE_TREE char_literal145_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_62;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_63;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_37;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_violationMsg;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cexpression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal143       = NULL;
    char_literal144       = NULL;
    char_literal145       = NULL;
    result.tree = NULL;

    vm.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal143_tree   = NULL;
    char_literal144_tree   = NULL;
    char_literal145_tree   = NULL;

    stream_62   = NULL;
    #define CREATE_stream_62  if (stream_62 == NULL) {stream_62 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 62"); } 
    stream_63   = NULL;
    #define CREATE_stream_63  if (stream_63 == NULL) {stream_63 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 63"); } 
    stream_37   = NULL;
    #define CREATE_stream_37  if (stream_37 == NULL) {stream_37 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 37"); } 
    stream_violationMsg   = NULL;
    #define CREATE_stream_violationMsg  if (stream_violationMsg == NULL) {stream_violationMsg = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule violationMsg"); }
    stream_cexpression   = NULL;
    #define CREATE_stream_cexpression  if (stream_cexpression == NULL) {stream_cexpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule cexpression"); }

    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:305:5: ( ( 'enforce' )? result= cexpression ( ':' vm= violationMsg )? ';' -> ^( EXPRESSION_ENFORCE $result ( $vm)? ) )
        // NDDL/base/antlr/NDDL3.g:305:7: ( 'enforce' )? result= cexpression ( ':' vm= violationMsg )? ';'
        {

            // NDDL/base/antlr/NDDL3.g:305:7: ( 'enforce' )?
            {
                int alt38=2;
                {
                    int LA38_0 = LA(1);
                    if ( (LA38_0 == 63) ) 
                    {
                        alt38=1;
                    }
                }
                switch (alt38) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:305:7: 'enforce'
            	    {
            	        string_literal143 = (pANTLR3_COMMON_TOKEN) MATCHT(63, &FOLLOW_63_in_enforceStatement1666); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenforceStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_63; stream_63->add(stream_63, string_literal143, NULL); }


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_cexpression_in_enforceStatement1671);
            result=cexpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleenforceStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_cexpression; stream_cexpression->add(stream_cexpression, result.tree, NULL); }

            // NDDL/base/antlr/NDDL3.g:305:37: ( ':' vm= violationMsg )?
            {
                int alt39=2;
                {
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == 62) ) 
                    {
                        alt39=1;
                    }
                }
                switch (alt39) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:305:38: ':' vm= violationMsg
            	    {
            	        char_literal144 = (pANTLR3_COMMON_TOKEN) MATCHT(62, &FOLLOW_62_in_enforceStatement1674); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenforceStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_62; stream_62->add(stream_62, char_literal144, NULL); }

            	        FOLLOWPUSH(FOLLOW_violationMsg_in_enforceStatement1678);
            	        vm=violationMsg(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleenforceStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_violationMsg; stream_violationMsg->add(stream_violationMsg, vm.tree, NULL); }

            	    }
            	    break;

                }
            }
            char_literal145 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_enforceStatement1682); 
            if  (HASEXCEPTION())
            {
                goto ruleenforceStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_37; stream_37->add(stream_37, char_literal145, NULL); }


             
            /* AST REWRITE
             * elements          : result, vm
             * token labels      : 
             * rule labels       : vm, result, retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_vm;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_result;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_vm=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token vm", vm.tree != NULL ? vm.tree : NULL);
            	stream_result=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token result", result.tree != NULL ? result.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 306:6: -> ^( EXPRESSION_ENFORCE $result ( $vm)? )
            	{
            	    // NDDL/base/antlr/NDDL3.g:306:9: ^( EXPRESSION_ENFORCE $result ( $vm)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPRESSION_ENFORCE, (pANTLR3_UINT8)"EXPRESSION_ENFORCE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_result == NULL ? NULL : stream_result->nextTree(stream_result));
            	        // NDDL/base/antlr/NDDL3.g:306:38: ( $vm)?
            	        {
            	        	if ( (stream_vm != NULL && stream_vm->hasNext(stream_vm))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_vm == NULL ? NULL : stream_vm->nextTree(stream_vm));

            	        	}
            	        	if ( stream_vm != NULL) stream_vm->reset(stream_vm);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_vm != NULL) stream_vm->free(stream_vm);
            	if (stream_result != NULL) stream_result->free(stream_result);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenforceStatementEx; /* Prevent compiler warnings */
    ruleenforceStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_62 != NULL) stream_62->free(stream_62);
        if (stream_63 != NULL) stream_63->free(stream_63);
        if (stream_37 != NULL) stream_37->free(stream_37);
        if (stream_violationMsg != NULL) stream_violationMsg->free(stream_violationMsg);
        if (stream_cexpression != NULL) stream_cexpression->free(stream_cexpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enforceStatement */

/** 
 * $ANTLR start violationMsg
 * NDDL/base/antlr/NDDL3.g:309:1: violationMsg : stringLiteral ;
 */
static NDDL3Parser_violationMsg_return
violationMsg(pNDDL3Parser ctx)
{   
    NDDL3Parser_violationMsg_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_stringLiteral_return stringLiteral146;
    #undef	RETURN_TYPE_stringLiteral146
    #define	RETURN_TYPE_stringLiteral146 NDDL3Parser_stringLiteral_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    stringLiteral146.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:310:2: ( stringLiteral )
        // NDDL/base/antlr/NDDL3.g:310:4: stringLiteral
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_stringLiteral_in_violationMsg1712);
            stringLiteral146=stringLiteral(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleviolationMsgEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stringLiteral146.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleviolationMsgEx; /* Prevent compiler warnings */
    ruleviolationMsgEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end violationMsg */

/** 
 * $ANTLR start cexpression
 * NDDL/base/antlr/NDDL3.g:313:1: cexpression : cbooleanOrExpression ;
 */
static NDDL3Parser_cexpression_return
cexpression(pNDDL3Parser ctx)
{   
    NDDL3Parser_cexpression_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_cbooleanOrExpression_return cbooleanOrExpression147;
    #undef	RETURN_TYPE_cbooleanOrExpression147
    #define	RETURN_TYPE_cbooleanOrExpression147 NDDL3Parser_cbooleanOrExpression_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    cbooleanOrExpression147.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:314:2: ( cbooleanOrExpression )
        // NDDL/base/antlr/NDDL3.g:314:4: cbooleanOrExpression
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_cbooleanOrExpression_in_cexpression1725);
            cbooleanOrExpression147=cbooleanOrExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecexpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cbooleanOrExpression147.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecexpressionEx; /* Prevent compiler warnings */
    rulecexpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end cexpression */

/** 
 * $ANTLR start cbooleanOrExpression
 * NDDL/base/antlr/NDDL3.g:317:1: cbooleanOrExpression : cbooleanAndExpression ( '||' cbooleanAndExpression )* ;
 */
static NDDL3Parser_cbooleanOrExpression_return
cbooleanOrExpression(pNDDL3Parser ctx)
{   
    NDDL3Parser_cbooleanOrExpression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal149;
    NDDL3Parser_cbooleanAndExpression_return cbooleanAndExpression148;
    #undef	RETURN_TYPE_cbooleanAndExpression148
    #define	RETURN_TYPE_cbooleanAndExpression148 NDDL3Parser_cbooleanAndExpression_return

    NDDL3Parser_cbooleanAndExpression_return cbooleanAndExpression150;
    #undef	RETURN_TYPE_cbooleanAndExpression150
    #define	RETURN_TYPE_cbooleanAndExpression150 NDDL3Parser_cbooleanAndExpression_return

    pANTLR3_BASE_TREE string_literal149_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal149       = NULL;
    cbooleanAndExpression148.tree = NULL;

    cbooleanAndExpression150.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal149_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:318:2: ( cbooleanAndExpression ( '||' cbooleanAndExpression )* )
        // NDDL/base/antlr/NDDL3.g:318:4: cbooleanAndExpression ( '||' cbooleanAndExpression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_cbooleanAndExpression_in_cbooleanOrExpression1737);
            cbooleanAndExpression148=cbooleanAndExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecbooleanOrExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cbooleanAndExpression148.tree);

            // NDDL/base/antlr/NDDL3.g:318:26: ( '||' cbooleanAndExpression )*

            for (;;)
            {
                int alt40=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA40_0 = LA(1);
                    if ( (LA40_0 == 64) ) 
                    {
                        alt40=1;
                    }

                }
                switch (alt40) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:318:27: '||' cbooleanAndExpression
            	    {
            	        string_literal149 = (pANTLR3_COMMON_TOKEN) MATCHT(64, &FOLLOW_64_in_cbooleanOrExpression1740); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecbooleanOrExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        string_literal149_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal149));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal149_tree, root_0));
            	        }
            	        FOLLOWPUSH(FOLLOW_cbooleanAndExpression_in_cbooleanOrExpression1743);
            	        cbooleanAndExpression150=cbooleanAndExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecbooleanOrExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cbooleanAndExpression150.tree);

            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecbooleanOrExpressionEx; /* Prevent compiler warnings */
    rulecbooleanOrExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end cbooleanOrExpression */

/** 
 * $ANTLR start cbooleanAndExpression
 * NDDL/base/antlr/NDDL3.g:321:1: cbooleanAndExpression : a= crelationalExpression ( '&&' b= crelationalExpression )* ;
 */
static NDDL3Parser_cbooleanAndExpression_return
cbooleanAndExpression(pNDDL3Parser ctx)
{   
    NDDL3Parser_cbooleanAndExpression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal151;
    NDDL3Parser_crelationalExpression_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a NDDL3Parser_crelationalExpression_return

    NDDL3Parser_crelationalExpression_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b NDDL3Parser_crelationalExpression_return

    pANTLR3_BASE_TREE string_literal151_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal151       = NULL;
    a.tree = NULL;

    b.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal151_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:322:2: (a= crelationalExpression ( '&&' b= crelationalExpression )* )
        // NDDL/base/antlr/NDDL3.g:322:4: a= crelationalExpression ( '&&' b= crelationalExpression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_crelationalExpression_in_cbooleanAndExpression1759);
            a=crelationalExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecbooleanAndExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, a.tree);

            // NDDL/base/antlr/NDDL3.g:322:28: ( '&&' b= crelationalExpression )*

            for (;;)
            {
                int alt41=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA41_0 = LA(1);
                    if ( (LA41_0 == 65) ) 
                    {
                        alt41=1;
                    }

                }
                switch (alt41) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:322:29: '&&' b= crelationalExpression
            	    {
            	        string_literal151 = (pANTLR3_COMMON_TOKEN) MATCHT(65, &FOLLOW_65_in_cbooleanAndExpression1762); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecbooleanAndExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        string_literal151_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal151));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal151_tree, root_0));
            	        }
            	        FOLLOWPUSH(FOLLOW_crelationalExpression_in_cbooleanAndExpression1767);
            	        b=crelationalExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecbooleanAndExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, b.tree);

            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecbooleanAndExpressionEx; /* Prevent compiler warnings */
    rulecbooleanAndExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end cbooleanAndExpression */

/** 
 * $ANTLR start crelationalExpression
 * NDDL/base/antlr/NDDL3.g:325:1: crelationalExpression : a= cadditiveExpression ( ( '==' | '!=' | '<' | '>' | '>=' | '<=' ) cadditiveExpression )* ;
 */
static NDDL3Parser_crelationalExpression_return
crelationalExpression(pNDDL3Parser ctx)
{   
    NDDL3Parser_crelationalExpression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set152;
    NDDL3Parser_cadditiveExpression_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a NDDL3Parser_cadditiveExpression_return

    NDDL3Parser_cadditiveExpression_return cadditiveExpression153;
    #undef	RETURN_TYPE_cadditiveExpression153
    #define	RETURN_TYPE_cadditiveExpression153 NDDL3Parser_cadditiveExpression_return

    pANTLR3_BASE_TREE set152_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set152       = NULL;
    a.tree = NULL;

    cadditiveExpression153.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    set152_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:326:2: (a= cadditiveExpression ( ( '==' | '!=' | '<' | '>' | '>=' | '<=' ) cadditiveExpression )* )
        // NDDL/base/antlr/NDDL3.g:326:4: a= cadditiveExpression ( ( '==' | '!=' | '<' | '>' | '>=' | '<=' ) cadditiveExpression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_cadditiveExpression_in_crelationalExpression1791);
            a=cadditiveExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecrelationalExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, a.tree);

            // NDDL/base/antlr/NDDL3.g:326:26: ( ( '==' | '!=' | '<' | '>' | '>=' | '<=' ) cadditiveExpression )*

            for (;;)
            {
                int alt42=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA42_0 = LA(1);
                    if ( (((LA42_0 >= 66) && (LA42_0 <= 71))) ) 
                    {
                        alt42=1;
                    }

                }
                switch (alt42) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:326:27: ( '==' | '!=' | '<' | '>' | '>=' | '<=' ) cadditiveExpression
            	    {
            	        set152=(pANTLR3_COMMON_TOKEN)LT(1);
            	        set152=(pANTLR3_COMMON_TOKEN)LT(1);
            	        if ( ((LA(1) >= 66) && (LA(1) <= 71)) )
            	        {
            	            CONSUME();
            	            if ( BACKTRACKING==0 ) root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set152)), root_0));
            	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else 
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE; 
            	                return retval;
            	            }
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = &FOLLOW_set_in_crelationalExpression1794;
            	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_crelationalExpression1794);    goto rulecrelationalExpressionEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_cadditiveExpression_in_crelationalExpression1819);
            	        cadditiveExpression153=cadditiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecrelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cadditiveExpression153.tree);

            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecrelationalExpressionEx; /* Prevent compiler warnings */
    rulecrelationalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end crelationalExpression */

/** 
 * $ANTLR start cadditiveExpression
 * NDDL/base/antlr/NDDL3.g:329:1: cadditiveExpression : cmultiplicativeExpression ( ( '+' | '-' ) cmultiplicativeExpression )* ;
 */
static NDDL3Parser_cadditiveExpression_return
cadditiveExpression(pNDDL3Parser ctx)
{   
    NDDL3Parser_cadditiveExpression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set155;
    NDDL3Parser_cmultiplicativeExpression_return cmultiplicativeExpression154;
    #undef	RETURN_TYPE_cmultiplicativeExpression154
    #define	RETURN_TYPE_cmultiplicativeExpression154 NDDL3Parser_cmultiplicativeExpression_return

    NDDL3Parser_cmultiplicativeExpression_return cmultiplicativeExpression156;
    #undef	RETURN_TYPE_cmultiplicativeExpression156
    #define	RETURN_TYPE_cmultiplicativeExpression156 NDDL3Parser_cmultiplicativeExpression_return

    pANTLR3_BASE_TREE set155_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set155       = NULL;
    cmultiplicativeExpression154.tree = NULL;

    cmultiplicativeExpression156.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    set155_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:330:2: ( cmultiplicativeExpression ( ( '+' | '-' ) cmultiplicativeExpression )* )
        // NDDL/base/antlr/NDDL3.g:330:4: cmultiplicativeExpression ( ( '+' | '-' ) cmultiplicativeExpression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_cmultiplicativeExpression_in_cadditiveExpression1842);
            cmultiplicativeExpression154=cmultiplicativeExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecadditiveExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cmultiplicativeExpression154.tree);

            // NDDL/base/antlr/NDDL3.g:330:30: ( ( '+' | '-' ) cmultiplicativeExpression )*

            for (;;)
            {
                int alt43=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA43_0 = LA(1);
                    if ( (((LA43_0 >= 72) && (LA43_0 <= 73))) ) 
                    {
                        alt43=1;
                    }

                }
                switch (alt43) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:330:31: ( '+' | '-' ) cmultiplicativeExpression
            	    {
            	        set155=(pANTLR3_COMMON_TOKEN)LT(1);
            	        set155=(pANTLR3_COMMON_TOKEN)LT(1);
            	        if ( ((LA(1) >= 72) && (LA(1) <= 73)) )
            	        {
            	            CONSUME();
            	            if ( BACKTRACKING==0 ) root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set155)), root_0));
            	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else 
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE; 
            	                return retval;
            	            }
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = &FOLLOW_set_in_cadditiveExpression1845;
            	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_cadditiveExpression1845);    goto rulecadditiveExpressionEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_cmultiplicativeExpression_in_cadditiveExpression1854);
            	        cmultiplicativeExpression156=cmultiplicativeExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cmultiplicativeExpression156.tree);

            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecadditiveExpressionEx; /* Prevent compiler warnings */
    rulecadditiveExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end cadditiveExpression */

/** 
 * $ANTLR start cmultiplicativeExpression
 * NDDL/base/antlr/NDDL3.g:333:1: cmultiplicativeExpression : cprimary ( '*' cprimary )* ;
 */
static NDDL3Parser_cmultiplicativeExpression_return
cmultiplicativeExpression(pNDDL3Parser ctx)
{   
    NDDL3Parser_cmultiplicativeExpression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal158;
    NDDL3Parser_cprimary_return cprimary157;
    #undef	RETURN_TYPE_cprimary157
    #define	RETURN_TYPE_cprimary157 NDDL3Parser_cprimary_return

    NDDL3Parser_cprimary_return cprimary159;
    #undef	RETURN_TYPE_cprimary159
    #define	RETURN_TYPE_cprimary159 NDDL3Parser_cprimary_return

    pANTLR3_BASE_TREE char_literal158_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal158       = NULL;
    cprimary157.tree = NULL;

    cprimary159.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal158_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:334:2: ( cprimary ( '*' cprimary )* )
        // NDDL/base/antlr/NDDL3.g:334:4: cprimary ( '*' cprimary )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_cprimary_in_cmultiplicativeExpression1871);
            cprimary157=cprimary(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecmultiplicativeExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cprimary157.tree);

            // NDDL/base/antlr/NDDL3.g:334:13: ( '*' cprimary )*

            for (;;)
            {
                int alt44=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA44_0 = LA(1);
                    if ( (LA44_0 == 74) ) 
                    {
                        alt44=1;
                    }

                }
                switch (alt44) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:334:14: '*' cprimary
            	    {
            	        char_literal158 = (pANTLR3_COMMON_TOKEN) MATCHT(74, &FOLLOW_74_in_cmultiplicativeExpression1874); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecmultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        char_literal158_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal158));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal158_tree, root_0));
            	        }
            	        FOLLOWPUSH(FOLLOW_cprimary_in_cmultiplicativeExpression1877);
            	        cprimary159=cprimary(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecmultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cprimary159.tree);

            	    }
            	    break;

            	default:
            	    goto loop44;	/* break out of the loop */
            	    break;
                }
            }
            loop44: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecmultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulecmultiplicativeExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end cmultiplicativeExpression */

/** 
 * $ANTLR start cprimary
 * NDDL/base/antlr/NDDL3.g:337:1: cprimary : ( anyValue | name= IDENT '(' ex= cexpressionList ')' -> ^( FUNCTION_CALL $name ^( '(' cexpressionList ) ) | '(' cbooleanOrExpression ')' );
 */
static NDDL3Parser_cprimary_return
cprimary(pNDDL3Parser ctx)
{   
    NDDL3Parser_cprimary_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    name;
    pANTLR3_COMMON_TOKEN    char_literal161;
    pANTLR3_COMMON_TOKEN    char_literal162;
    pANTLR3_COMMON_TOKEN    char_literal163;
    pANTLR3_COMMON_TOKEN    char_literal165;
    NDDL3Parser_cexpressionList_return ex;
    #undef	RETURN_TYPE_ex
    #define	RETURN_TYPE_ex NDDL3Parser_cexpressionList_return

    NDDL3Parser_anyValue_return anyValue160;
    #undef	RETURN_TYPE_anyValue160
    #define	RETURN_TYPE_anyValue160 NDDL3Parser_anyValue_return

    NDDL3Parser_cbooleanOrExpression_return cbooleanOrExpression164;
    #undef	RETURN_TYPE_cbooleanOrExpression164
    #define	RETURN_TYPE_cbooleanOrExpression164 NDDL3Parser_cbooleanOrExpression_return

    pANTLR3_BASE_TREE name_tree;
    pANTLR3_BASE_TREE char_literal161_tree;
    pANTLR3_BASE_TREE char_literal162_tree;
    pANTLR3_BASE_TREE char_literal163_tree;
    pANTLR3_BASE_TREE char_literal165_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_42;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_41;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cexpressionList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    name       = NULL;
    char_literal161       = NULL;
    char_literal162       = NULL;
    char_literal163       = NULL;
    char_literal165       = NULL;
    ex.tree = NULL;

    anyValue160.tree = NULL;

    cbooleanOrExpression164.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    name_tree   = NULL;
    char_literal161_tree   = NULL;
    char_literal162_tree   = NULL;
    char_literal163_tree   = NULL;
    char_literal165_tree   = NULL;

    stream_IDENT   = NULL;
    #define CREATE_stream_IDENT  if (stream_IDENT == NULL) {stream_IDENT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); } 
    stream_42   = NULL;
    #define CREATE_stream_42  if (stream_42 == NULL) {stream_42 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 42"); } 
    stream_41   = NULL;
    #define CREATE_stream_41  if (stream_41 == NULL) {stream_41 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 41"); } 
    stream_cexpressionList   = NULL;
    #define CREATE_stream_cexpressionList  if (stream_cexpressionList == NULL) {stream_cexpressionList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule cexpressionList"); }

    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:338:2: ( anyValue | name= IDENT '(' ex= cexpressionList ')' -> ^( FUNCTION_CALL $name ^( '(' cexpressionList ) ) | '(' cbooleanOrExpression ')' )
            
            ANTLR3_UINT32 alt45;

            alt45=3;

            switch ( LA(1) ) 
            {
            case INT:
            case FLOAT:
            case STRING:
            case 33:
            case 38:
            case 45:
            case 72:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            	{
            		alt45=1;
            	}
                break;
            case IDENT:
            	{

            		{
            		    int LA45_2 = LA(2);
            		    if ( (LA45_2 == 41) ) 
            		    {
            		        alt45=2;
            		    }
            		    else if ( (LA45_2 == 34 || LA45_2 == 37 || LA45_2 == 42 || LA45_2 == 46 || LA45_2 == 62 || ((LA45_2 >= 64) && (LA45_2 <= 74))) ) 
            		    {
            		        alt45=1;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 45;
            		        EXCEPTION->state        = 2;


            		        goto rulecprimaryEx;
            		    }
            		}
            	}
                break;
            case 41:
            	{
            		alt45=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 45;
                EXCEPTION->state        = 0;


                goto rulecprimaryEx;
            }

            switch (alt45) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:338:4: anyValue
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_anyValue_in_cprimary1891);
        	        anyValue160=anyValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, anyValue160.tree);

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:339:4: name= IDENT '(' ex= cexpressionList ')'
        	    {
        	        name = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_cprimary1899); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENT; stream_IDENT->add(stream_IDENT, name, NULL); }

        	        char_literal161 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_cprimary1901); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_41; stream_41->add(stream_41, char_literal161, NULL); }

        	        FOLLOWPUSH(FOLLOW_cexpressionList_in_cprimary1905);
        	        ex=cexpressionList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_cexpressionList; stream_cexpressionList->add(stream_cexpressionList, ex.tree, NULL); }
        	        char_literal162 = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_cprimary1907); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_42; stream_42->add(stream_42, char_literal162, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 41, name, cexpressionList
        	         * token labels      : name
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_name;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_name=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token name", name);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 339:42: -> ^( FUNCTION_CALL $name ^( '(' cexpressionList ) )
        	        	{
        	        	    // NDDL/base/antlr/NDDL3.g:339:45: ^( FUNCTION_CALL $name ^( '(' cexpressionList ) )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNCTION_CALL, (pANTLR3_UINT8)"FUNCTION_CALL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_name == NULL ? NULL : stream_name->nextNode(stream_name));
        	        	        // NDDL/base/antlr/NDDL3.g:339:67: ^( '(' cexpressionList )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_41 == NULL ? NULL : stream_41->nextNode(stream_41), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_cexpressionList == NULL ? NULL : stream_cexpressionList->nextTree(stream_cexpressionList));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_name != NULL) stream_name->free(stream_name); 
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // NDDL/base/antlr/NDDL3.g:340:4: '(' cbooleanOrExpression ')'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal163 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_cprimary1927); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        FOLLOWPUSH(FOLLOW_cbooleanOrExpression_in_cprimary1930);
        	        cbooleanOrExpression164=cbooleanOrExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cbooleanOrExpression164.tree);
        	        char_literal165 = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_cprimary1932); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecprimaryEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecprimaryEx; /* Prevent compiler warnings */
    rulecprimaryEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENT != NULL) stream_IDENT->free(stream_IDENT);
        if (stream_42 != NULL) stream_42->free(stream_42);
        if (stream_41 != NULL) stream_41->free(stream_41);
        if (stream_cexpressionList != NULL) stream_cexpressionList->free(stream_cexpressionList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end cprimary */

/** 
 * $ANTLR start cexpressionList
 * NDDL/base/antlr/NDDL3.g:343:1: cexpressionList : cexpression ( ',' cexpression )* ;
 */
static NDDL3Parser_cexpressionList_return
cexpressionList(pNDDL3Parser ctx)
{   
    NDDL3Parser_cexpressionList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal167;
    NDDL3Parser_cexpression_return cexpression166;
    #undef	RETURN_TYPE_cexpression166
    #define	RETURN_TYPE_cexpression166 NDDL3Parser_cexpression_return

    NDDL3Parser_cexpression_return cexpression168;
    #undef	RETURN_TYPE_cexpression168
    #define	RETURN_TYPE_cexpression168 NDDL3Parser_cexpression_return

    pANTLR3_BASE_TREE char_literal167_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal167       = NULL;
    cexpression166.tree = NULL;

    cexpression168.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal167_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:344:2: ( cexpression ( ',' cexpression )* )
        // NDDL/base/antlr/NDDL3.g:344:4: cexpression ( ',' cexpression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_cexpression_in_cexpressionList1945);
            cexpression166=cexpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecexpressionListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cexpression166.tree);

            // NDDL/base/antlr/NDDL3.g:344:16: ( ',' cexpression )*

            for (;;)
            {
                int alt46=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA46_0 = LA(1);
                    if ( (LA46_0 == 34) ) 
                    {
                        alt46=1;
                    }

                }
                switch (alt46) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:344:17: ',' cexpression
            	    {
            	        char_literal167 = (pANTLR3_COMMON_TOKEN) MATCHT(34, &FOLLOW_34_in_cexpressionList1948); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecexpressionListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_cexpression_in_cexpressionList1951);
            	        cexpression168=cexpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecexpressionListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, cexpression168.tree);

            	    }
            	    break;

            	default:
            	    goto loop46;	/* break out of the loop */
            	    break;
                }
            }
            loop46: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecexpressionListEx; /* Prevent compiler warnings */
    rulecexpressionListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end cexpressionList */

/** 
 * $ANTLR start superInvocation
 * NDDL/base/antlr/NDDL3.g:347:1: superInvocation : 'super' variableArgumentList ';' ;
 */
static NDDL3Parser_superInvocation_return
superInvocation(pNDDL3Parser ctx)
{   
    NDDL3Parser_superInvocation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal169;
    pANTLR3_COMMON_TOKEN    char_literal171;
    NDDL3Parser_variableArgumentList_return variableArgumentList170;
    #undef	RETURN_TYPE_variableArgumentList170
    #define	RETURN_TYPE_variableArgumentList170 NDDL3Parser_variableArgumentList_return

    pANTLR3_BASE_TREE string_literal169_tree;
    pANTLR3_BASE_TREE char_literal171_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal169       = NULL;
    char_literal171       = NULL;
    variableArgumentList170.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal169_tree   = NULL;
    char_literal171_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:348:2: ( 'super' variableArgumentList ';' )
        // NDDL/base/antlr/NDDL3.g:348:4: 'super' variableArgumentList ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            string_literal169 = (pANTLR3_COMMON_TOKEN) MATCHT(75, &FOLLOW_75_in_superInvocation1966); 
            if  (HASEXCEPTION())
            {
                goto rulesuperInvocationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            string_literal169_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal169));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal169_tree, root_0));
            }
            FOLLOWPUSH(FOLLOW_variableArgumentList_in_superInvocation1969);
            variableArgumentList170=variableArgumentList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesuperInvocationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableArgumentList170.tree);
            char_literal171 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_superInvocation1971); 
            if  (HASEXCEPTION())
            {
                goto rulesuperInvocationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesuperInvocationEx; /* Prevent compiler warnings */
    rulesuperInvocationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end superInvocation */

/** 
 * $ANTLR start variableArgumentList
 * NDDL/base/antlr/NDDL3.g:351:1: variableArgumentList : '(' ( variableArguments )? ')' ;
 */
static NDDL3Parser_variableArgumentList_return
variableArgumentList(pNDDL3Parser ctx)
{   
    NDDL3Parser_variableArgumentList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal172;
    pANTLR3_COMMON_TOKEN    char_literal174;
    NDDL3Parser_variableArguments_return variableArguments173;
    #undef	RETURN_TYPE_variableArguments173
    #define	RETURN_TYPE_variableArguments173 NDDL3Parser_variableArguments_return

    pANTLR3_BASE_TREE char_literal172_tree;
    pANTLR3_BASE_TREE char_literal174_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal172       = NULL;
    char_literal174       = NULL;
    variableArguments173.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal172_tree   = NULL;
    char_literal174_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:352:2: ( '(' ( variableArguments )? ')' )
        // NDDL/base/antlr/NDDL3.g:352:4: '(' ( variableArguments )? ')'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal172 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_variableArgumentList1983); 
            if  (HASEXCEPTION())
            {
                goto rulevariableArgumentListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal172_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal172));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal172_tree, root_0));
            }

            // NDDL/base/antlr/NDDL3.g:352:9: ( variableArguments )?
            {
                int alt47=2;
                {
                    int LA47_0 = LA(1);
                    if ( (((LA47_0 >= IDENT) && (LA47_0 <= STRING)) || LA47_0 == 33 || LA47_0 == 38 || LA47_0 == 45 || LA47_0 == 72 || ((LA47_0 >= 102) && (LA47_0 <= 107))) ) 
                    {
                        alt47=1;
                    }
                }
                switch (alt47) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:352:9: variableArguments
            	    {
            	        FOLLOWPUSH(FOLLOW_variableArguments_in_variableArgumentList1986);
            	        variableArguments173=variableArguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableArgumentListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableArguments173.tree);

            	    }
            	    break;

                }
            }
            char_literal174 = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_variableArgumentList1989); 
            if  (HASEXCEPTION())
            {
                goto rulevariableArgumentListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableArgumentListEx; /* Prevent compiler warnings */
    rulevariableArgumentListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end variableArgumentList */

/** 
 * $ANTLR start variableArguments
 * NDDL/base/antlr/NDDL3.g:355:1: variableArguments : variableArgument ( ',' variableArgument )* ;
 */
static NDDL3Parser_variableArguments_return
variableArguments(pNDDL3Parser ctx)
{   
    NDDL3Parser_variableArguments_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal176;
    NDDL3Parser_variableArgument_return variableArgument175;
    #undef	RETURN_TYPE_variableArgument175
    #define	RETURN_TYPE_variableArgument175 NDDL3Parser_variableArgument_return

    NDDL3Parser_variableArgument_return variableArgument177;
    #undef	RETURN_TYPE_variableArgument177
    #define	RETURN_TYPE_variableArgument177 NDDL3Parser_variableArgument_return

    pANTLR3_BASE_TREE char_literal176_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal176       = NULL;
    variableArgument175.tree = NULL;

    variableArgument177.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal176_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:356:2: ( variableArgument ( ',' variableArgument )* )
        // NDDL/base/antlr/NDDL3.g:356:4: variableArgument ( ',' variableArgument )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_variableArgument_in_variableArguments2001);
            variableArgument175=variableArgument(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableArgumentsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableArgument175.tree);

            // NDDL/base/antlr/NDDL3.g:356:21: ( ',' variableArgument )*

            for (;;)
            {
                int alt48=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA48_0 = LA(1);
                    if ( (LA48_0 == 34) ) 
                    {
                        alt48=1;
                    }

                }
                switch (alt48) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:356:22: ',' variableArgument
            	    {
            	        char_literal176 = (pANTLR3_COMMON_TOKEN) MATCHT(34, &FOLLOW_34_in_variableArguments2004); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableArgumentsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_variableArgument_in_variableArguments2007);
            	        variableArgument177=variableArgument(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableArgumentsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableArgument177.tree);

            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableArgumentsEx; /* Prevent compiler warnings */
    rulevariableArgumentsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end variableArguments */

/** 
 * $ANTLR start variableArgument
 * NDDL/base/antlr/NDDL3.g:359:1: variableArgument : anyValue ;
 */
static NDDL3Parser_variableArgument_return
variableArgument(pNDDL3Parser ctx)
{   
    NDDL3Parser_variableArgument_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_anyValue_return anyValue178;
    #undef	RETURN_TYPE_anyValue178
    #define	RETURN_TYPE_anyValue178 NDDL3Parser_anyValue_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    anyValue178.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:360:2: ( anyValue )
        // NDDL/base/antlr/NDDL3.g:360:4: anyValue
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_anyValue_in_variableArgument2020);
            anyValue178=anyValue(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableArgumentEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, anyValue178.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableArgumentEx; /* Prevent compiler warnings */
    rulevariableArgumentEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end variableArgument */

/** 
 * $ANTLR start typeArgumentList
 * NDDL/base/antlr/NDDL3.g:363:1: typeArgumentList : '(' ( typeArguments )? ')' ;
 */
static NDDL3Parser_typeArgumentList_return
typeArgumentList(pNDDL3Parser ctx)
{   
    NDDL3Parser_typeArgumentList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal179;
    pANTLR3_COMMON_TOKEN    char_literal181;
    NDDL3Parser_typeArguments_return typeArguments180;
    #undef	RETURN_TYPE_typeArguments180
    #define	RETURN_TYPE_typeArguments180 NDDL3Parser_typeArguments_return

    pANTLR3_BASE_TREE char_literal179_tree;
    pANTLR3_BASE_TREE char_literal181_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal179       = NULL;
    char_literal181       = NULL;
    typeArguments180.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal179_tree   = NULL;
    char_literal181_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:364:2: ( '(' ( typeArguments )? ')' )
        // NDDL/base/antlr/NDDL3.g:364:4: '(' ( typeArguments )? ')'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal179 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_typeArgumentList2031); 
            if  (HASEXCEPTION())
            {
                goto ruletypeArgumentListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal179_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal179));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal179_tree, root_0));
            }

            // NDDL/base/antlr/NDDL3.g:364:9: ( typeArguments )?
            {
                int alt49=2;
                {
                    int LA49_0 = LA(1);
                    if ( (LA49_0 == IDENT) ) 
                    {
                        alt49=1;
                    }
                }
                switch (alt49) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:364:9: typeArguments
            	    {
            	        FOLLOWPUSH(FOLLOW_typeArguments_in_typeArgumentList2034);
            	        typeArguments180=typeArguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletypeArgumentListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, typeArguments180.tree);

            	    }
            	    break;

                }
            }
            char_literal181 = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_typeArgumentList2037); 
            if  (HASEXCEPTION())
            {
                goto ruletypeArgumentListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeArgumentListEx; /* Prevent compiler warnings */
    ruletypeArgumentListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end typeArgumentList */

/** 
 * $ANTLR start typeArguments
 * NDDL/base/antlr/NDDL3.g:367:1: typeArguments : typeArgument ( ',' typeArgument )* ;
 */
static NDDL3Parser_typeArguments_return
typeArguments(pNDDL3Parser ctx)
{   
    NDDL3Parser_typeArguments_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal183;
    NDDL3Parser_typeArgument_return typeArgument182;
    #undef	RETURN_TYPE_typeArgument182
    #define	RETURN_TYPE_typeArgument182 NDDL3Parser_typeArgument_return

    NDDL3Parser_typeArgument_return typeArgument184;
    #undef	RETURN_TYPE_typeArgument184
    #define	RETURN_TYPE_typeArgument184 NDDL3Parser_typeArgument_return

    pANTLR3_BASE_TREE char_literal183_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal183       = NULL;
    typeArgument182.tree = NULL;

    typeArgument184.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal183_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:368:2: ( typeArgument ( ',' typeArgument )* )
        // NDDL/base/antlr/NDDL3.g:368:4: typeArgument ( ',' typeArgument )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_typeArgument_in_typeArguments2049);
            typeArgument182=typeArgument(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletypeArgumentsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, typeArgument182.tree);

            // NDDL/base/antlr/NDDL3.g:368:17: ( ',' typeArgument )*

            for (;;)
            {
                int alt50=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA50_0 = LA(1);
                    if ( (LA50_0 == 34) ) 
                    {
                        alt50=1;
                    }

                }
                switch (alt50) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:368:18: ',' typeArgument
            	    {
            	        char_literal183 = (pANTLR3_COMMON_TOKEN) MATCHT(34, &FOLLOW_34_in_typeArguments2052); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletypeArgumentsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_typeArgument_in_typeArguments2055);
            	        typeArgument184=typeArgument(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletypeArgumentsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, typeArgument184.tree);

            	    }
            	    break;

            	default:
            	    goto loop50;	/* break out of the loop */
            	    break;
                }
            }
            loop50: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeArgumentsEx; /* Prevent compiler warnings */
    ruletypeArgumentsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end typeArguments */

/** 
 * $ANTLR start typeArgument
 * NDDL/base/antlr/NDDL3.g:371:1: typeArgument : IDENT ;
 */
static NDDL3Parser_typeArgument_return
typeArgument(pNDDL3Parser ctx)
{   
    NDDL3Parser_typeArgument_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT185;

    pANTLR3_BASE_TREE IDENT185_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT185       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    IDENT185_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:372:2: ( IDENT )
        // NDDL/base/antlr/NDDL3.g:372:4: IDENT
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            IDENT185 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_typeArgument2068); 
            if  (HASEXCEPTION())
            {
                goto ruletypeArgumentEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            IDENT185_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT185));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT185_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeArgumentEx; /* Prevent compiler warnings */
    ruletypeArgumentEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end typeArgument */

/** 
 * $ANTLR start flowControl
 * NDDL/base/antlr/NDDL3.g:375:1: flowControl : ( 'if' '(' result= cexpression ')' a= ruleBlock ( ( 'else' )=> 'else' b= ruleBlock | ) -> {hasElse == false}? ^( 'if' ^( EXPRESSION_RETURN $result) $a) -> ^( 'if' ^( EXPRESSION_RETURN $result) $a $b) | 'foreach' '(' IDENT 'in' qualified ')' ruleBlock );
 */
static NDDL3Parser_flowControl_return
flowControl(pNDDL3Parser ctx)
{   
    NDDL3Parser_flowControl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal186;
    pANTLR3_COMMON_TOKEN    char_literal187;
    pANTLR3_COMMON_TOKEN    char_literal188;
    pANTLR3_COMMON_TOKEN    string_literal189;
    pANTLR3_COMMON_TOKEN    string_literal190;
    pANTLR3_COMMON_TOKEN    char_literal191;
    pANTLR3_COMMON_TOKEN    IDENT192;
    pANTLR3_COMMON_TOKEN    string_literal193;
    pANTLR3_COMMON_TOKEN    char_literal195;
    NDDL3Parser_cexpression_return result;
    #undef	RETURN_TYPE_result
    #define	RETURN_TYPE_result NDDL3Parser_cexpression_return

    NDDL3Parser_ruleBlock_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a NDDL3Parser_ruleBlock_return

    NDDL3Parser_ruleBlock_return b;
    #undef	RETURN_TYPE_b
    #define	RETURN_TYPE_b NDDL3Parser_ruleBlock_return

    NDDL3Parser_qualified_return qualified194;
    #undef	RETURN_TYPE_qualified194
    #define	RETURN_TYPE_qualified194 NDDL3Parser_qualified_return

    NDDL3Parser_ruleBlock_return ruleBlock196;
    #undef	RETURN_TYPE_ruleBlock196
    #define	RETURN_TYPE_ruleBlock196 NDDL3Parser_ruleBlock_return

    pANTLR3_BASE_TREE string_literal186_tree;
    pANTLR3_BASE_TREE char_literal187_tree;
    pANTLR3_BASE_TREE char_literal188_tree;
    pANTLR3_BASE_TREE string_literal189_tree;
    pANTLR3_BASE_TREE string_literal190_tree;
    pANTLR3_BASE_TREE char_literal191_tree;
    pANTLR3_BASE_TREE IDENT192_tree;
    pANTLR3_BASE_TREE string_literal193_tree;
    pANTLR3_BASE_TREE char_literal195_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_42;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_41;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_76;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ruleBlock;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cexpression;
    /* Initialize rule variables
     */


    root_0 = NULL;


       bool hasElse = false;

    string_literal186       = NULL;
    char_literal187       = NULL;
    char_literal188       = NULL;
    string_literal189       = NULL;
    string_literal190       = NULL;
    char_literal191       = NULL;
    IDENT192       = NULL;
    string_literal193       = NULL;
    char_literal195       = NULL;
    result.tree = NULL;

    a.tree = NULL;

    b.tree = NULL;

    qualified194.tree = NULL;

    ruleBlock196.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal186_tree   = NULL;
    char_literal187_tree   = NULL;
    char_literal188_tree   = NULL;
    string_literal189_tree   = NULL;
    string_literal190_tree   = NULL;
    char_literal191_tree   = NULL;
    IDENT192_tree   = NULL;
    string_literal193_tree   = NULL;
    char_literal195_tree   = NULL;

    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_42   = NULL;
    #define CREATE_stream_42  if (stream_42 == NULL) {stream_42 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 42"); } 
    stream_41   = NULL;
    #define CREATE_stream_41  if (stream_41 == NULL) {stream_41 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 41"); } 
    stream_76   = NULL;
    #define CREATE_stream_76  if (stream_76 == NULL) {stream_76 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 76"); } 
    stream_ruleBlock   = NULL;
    #define CREATE_stream_ruleBlock  if (stream_ruleBlock == NULL) {stream_ruleBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ruleBlock"); }
    stream_cexpression   = NULL;
    #define CREATE_stream_cexpression  if (stream_cexpression == NULL) {stream_cexpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule cexpression"); }

    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:379:5: ( 'if' '(' result= cexpression ')' a= ruleBlock ( ( 'else' )=> 'else' b= ruleBlock | ) -> {hasElse == false}? ^( 'if' ^( EXPRESSION_RETURN $result) $a) -> ^( 'if' ^( EXPRESSION_RETURN $result) $a $b) | 'foreach' '(' IDENT 'in' qualified ')' ruleBlock )
            
            ANTLR3_UINT32 alt52;

            alt52=2;


            {
                int LA52_0 = LA(1);
                if ( (LA52_0 == 76) ) 
                {
                    alt52=1;
                }
                else if ( (LA52_0 == 78) ) 
                {
                    alt52=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 52;
                    EXCEPTION->state        = 0;


                    goto ruleflowControlEx;
                }
            }
            switch (alt52) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:379:7: 'if' '(' result= cexpression ')' a= ruleBlock ( ( 'else' )=> 'else' b= ruleBlock | )
        	    {
        	        string_literal186 = (pANTLR3_COMMON_TOKEN) MATCHT(76, &FOLLOW_76_in_flowControl2088); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_76; stream_76->add(stream_76, string_literal186, NULL); }

        	        char_literal187 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_flowControl2090); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_41; stream_41->add(stream_41, char_literal187, NULL); }

        	        FOLLOWPUSH(FOLLOW_cexpression_in_flowControl2094);
        	        result=cexpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_cexpression; stream_cexpression->add(stream_cexpression, result.tree, NULL); }
        	        char_literal188 = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_flowControl2096); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_42; stream_42->add(stream_42, char_literal188, NULL); }

        	        FOLLOWPUSH(FOLLOW_ruleBlock_in_flowControl2100);
        	        a=ruleBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ruleBlock; stream_ruleBlock->add(stream_ruleBlock, a.tree, NULL); }

        	        // NDDL/base/antlr/NDDL3.g:379:51: ( ( 'else' )=> 'else' b= ruleBlock | )
        	        {
        	            int alt51=2;

        	            {
        	                int LA51_0 = LA(1);
        	                if ( (LA51_0 == 77) ) 
        	                {

        	                    {
        	                        int LA51_1 = LA(2);
        	                        if ( (synpred2_NDDL3(ctx)) ) 
        	                        {
        	                            alt51=1;
        	                        }
        	                        else if ( (ANTLR3_TRUE) ) 
        	                        {
        	                            alt51=2;
        	                        }
        	                        else 
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE; 
        	                                return retval;
        	                            }
        	                        
        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 51;
        	                            EXCEPTION->state        = 1;


        	                            goto ruleflowControlEx;
        	                        }
        	                    }
        	                }
        	                else if ( (LA51_0 == EOF || ((LA51_0 >= IDENT) && (LA51_0 <= STRING)) || ((LA51_0 >= 32) && (LA51_0 <= 33)) || ((LA51_0 >= 35) && (LA51_0 <= 38)) || ((LA51_0 >= 40) && (LA51_0 <= 41)) || ((LA51_0 >= 44) && (LA51_0 <= 45)) || LA51_0 == 48 || ((LA51_0 >= 53) && (LA51_0 <= 59)) || LA51_0 == 63 || LA51_0 == 72 || LA51_0 == 76 || ((LA51_0 >= 78) && (LA51_0 <= 108))) ) 
        	                {
        	                    alt51=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 51;
        	                    EXCEPTION->state        = 0;


        	                    goto ruleflowControlEx;
        	                }
        	            }
        	            switch (alt51) 
        	            {
        	        	case 1:
        	        	    // NDDL/base/antlr/NDDL3.g:379:52: ( 'else' )=> 'else' b= ruleBlock
        	        	    {
        	        	        string_literal189 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_flowControl2108); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleflowControlEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, string_literal189, NULL); }

        	        	        FOLLOWPUSH(FOLLOW_ruleBlock_in_flowControl2112);
        	        	        b=ruleBlock(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleflowControlEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_ruleBlock; stream_ruleBlock->add(stream_ruleBlock, b.tree, NULL); }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	            hasElse = true;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // NDDL/base/antlr/NDDL3.g:379:100: 
        	        	    {
        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : result, result, b, a, 76, 76, a
        	         * token labels      : 
        	         * rule labels       : result, retval, b, a
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_result;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_b;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;

        	        	stream_result=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token result", result.tree != NULL ? result.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_b=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b.tree != NULL ? b.tree : NULL);
        	        	stream_a=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a.tree != NULL ? a.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 380:10: -> {hasElse == false}? ^( 'if' ^( EXPRESSION_RETURN $result) $a)
        	        	if (hasElse == false) 
        	        	{
        	        	    // NDDL/base/antlr/NDDL3.g:380:33: ^( 'if' ^( EXPRESSION_RETURN $result) $a)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_76 == NULL ? NULL : stream_76->nextNode(stream_76), root_1));

        	        	        // NDDL/base/antlr/NDDL3.g:380:40: ^( EXPRESSION_RETURN $result)
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPRESSION_RETURN, (pANTLR3_UINT8)"EXPRESSION_RETURN"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_result == NULL ? NULL : stream_result->nextTree(stream_result));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}
        	        	else // 381:10: -> ^( 'if' ^( EXPRESSION_RETURN $result) $a $b)
        	        	{
        	        	    // NDDL/base/antlr/NDDL3.g:381:13: ^( 'if' ^( EXPRESSION_RETURN $result) $a $b)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_76 == NULL ? NULL : stream_76->nextNode(stream_76), root_1));

        	        	        // NDDL/base/antlr/NDDL3.g:381:20: ^( EXPRESSION_RETURN $result)
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPRESSION_RETURN, (pANTLR3_UINT8)"EXPRESSION_RETURN"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_result == NULL ? NULL : stream_result->nextTree(stream_result));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextTree(stream_b));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_result != NULL) stream_result->free(stream_result);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_b != NULL) stream_b->free(stream_b);
        	        	if (stream_a != NULL) stream_a->free(stream_a);


        	        }
        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:382:4: 'foreach' '(' IDENT 'in' qualified ')' ruleBlock
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal190 = (pANTLR3_COMMON_TOKEN) MATCHT(78, &FOLLOW_78_in_flowControl2177); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal190_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal190));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal190_tree, root_0));
        	        }
        	        char_literal191 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_flowControl2180); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        IDENT192 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_flowControl2183); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        IDENT192_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT192));
        	        ADAPTOR->addChild(ADAPTOR, root_0, IDENT192_tree);
        	        }
        	        string_literal193 = (pANTLR3_COMMON_TOKEN) MATCHT(47, &FOLLOW_47_in_flowControl2185); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        FOLLOWPUSH(FOLLOW_qualified_in_flowControl2188);
        	        qualified194=qualified(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, qualified194.tree);
        	        char_literal195 = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_flowControl2190); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        FOLLOWPUSH(FOLLOW_ruleBlock_in_flowControl2193);
        	        ruleBlock196=ruleBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ruleBlock196.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleflowControlEx; /* Prevent compiler warnings */
    ruleflowControlEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_42 != NULL) stream_42->free(stream_42);
        if (stream_41 != NULL) stream_41->free(stream_41);
        if (stream_76 != NULL) stream_76->free(stream_76);
        if (stream_ruleBlock != NULL) stream_ruleBlock->free(stream_ruleBlock);
        if (stream_cexpression != NULL) stream_cexpression->free(stream_cexpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end flowControl */

/** 
 * $ANTLR start guardExpression
 * NDDL/base/antlr/NDDL3.g:385:1: guardExpression : '(' anyValue ( ( '==' | '!=' ) anyValue )? ')' ;
 */
static NDDL3Parser_guardExpression_return
guardExpression(pNDDL3Parser ctx)
{   
    NDDL3Parser_guardExpression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal197;
    pANTLR3_COMMON_TOKEN    string_literal199;
    pANTLR3_COMMON_TOKEN    string_literal200;
    pANTLR3_COMMON_TOKEN    char_literal202;
    NDDL3Parser_anyValue_return anyValue198;
    #undef	RETURN_TYPE_anyValue198
    #define	RETURN_TYPE_anyValue198 NDDL3Parser_anyValue_return

    NDDL3Parser_anyValue_return anyValue201;
    #undef	RETURN_TYPE_anyValue201
    #define	RETURN_TYPE_anyValue201 NDDL3Parser_anyValue_return

    pANTLR3_BASE_TREE char_literal197_tree;
    pANTLR3_BASE_TREE string_literal199_tree;
    pANTLR3_BASE_TREE string_literal200_tree;
    pANTLR3_BASE_TREE char_literal202_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal197       = NULL;
    string_literal199       = NULL;
    string_literal200       = NULL;
    char_literal202       = NULL;
    anyValue198.tree = NULL;

    anyValue201.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal197_tree   = NULL;
    string_literal199_tree   = NULL;
    string_literal200_tree   = NULL;
    char_literal202_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:386:2: ( '(' anyValue ( ( '==' | '!=' ) anyValue )? ')' )
        // NDDL/base/antlr/NDDL3.g:386:4: '(' anyValue ( ( '==' | '!=' ) anyValue )? ')'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal197 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_guardExpression2205); 
            if  (HASEXCEPTION())
            {
                goto ruleguardExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_anyValue_in_guardExpression2208);
            anyValue198=anyValue(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleguardExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, anyValue198.tree);

            // NDDL/base/antlr/NDDL3.g:386:18: ( ( '==' | '!=' ) anyValue )?
            {
                int alt54=2;
                {
                    int LA54_0 = LA(1);
                    if ( (((LA54_0 >= 66) && (LA54_0 <= 67))) ) 
                    {
                        alt54=1;
                    }
                }
                switch (alt54) 
                {
            	case 1:
            	    // NDDL/base/antlr/NDDL3.g:386:19: ( '==' | '!=' ) anyValue
            	    {

            	        // NDDL/base/antlr/NDDL3.g:386:19: ( '==' | '!=' )
            	        {
            	            int alt53=2;

            	            {
            	                int LA53_0 = LA(1);
            	                if ( (LA53_0 == 66) ) 
            	                {
            	                    alt53=1;
            	                }
            	                else if ( (LA53_0 == 67) ) 
            	                {
            	                    alt53=2;
            	                }
            	                else 
            	                {
            	                    if (BACKTRACKING>0)
            	                    {
            	                        FAILEDFLAG = ANTLR3_TRUE; 
            	                        return retval;
            	                    }
            	                
            	                    CONSTRUCTEX();
            	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                    EXCEPTION->message      = (void *)"";
            	                    EXCEPTION->decisionNum  = 53;
            	                    EXCEPTION->state        = 0;


            	                    goto ruleguardExpressionEx;
            	                }
            	            }
            	            switch (alt53) 
            	            {
            	        	case 1:
            	        	    // NDDL/base/antlr/NDDL3.g:386:20: '=='
            	        	    {
            	        	        string_literal199 = (pANTLR3_COMMON_TOKEN) MATCHT(66, &FOLLOW_66_in_guardExpression2212); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleguardExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) {
            	        	        string_literal199_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal199));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal199_tree, root_0));
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // NDDL/base/antlr/NDDL3.g:386:28: '!='
            	        	    {
            	        	        string_literal200 = (pANTLR3_COMMON_TOKEN) MATCHT(67, &FOLLOW_67_in_guardExpression2217); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleguardExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) {
            	        	        string_literal200_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal200));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal200_tree, root_0));
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }
            	        FOLLOWPUSH(FOLLOW_anyValue_in_guardExpression2221);
            	        anyValue201=anyValue(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleguardExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, anyValue201.tree);

            	    }
            	    break;

                }
            }
            char_literal202 = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_guardExpression2225); 
            if  (HASEXCEPTION())
            {
                goto ruleguardExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleguardExpressionEx; /* Prevent compiler warnings */
    ruleguardExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end guardExpression */

/** 
 * $ANTLR start allocationStmt
 * NDDL/base/antlr/NDDL3.g:389:1: allocationStmt : allocation ';' ;
 */
static NDDL3Parser_allocationStmt_return
allocationStmt(pNDDL3Parser ctx)
{   
    NDDL3Parser_allocationStmt_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal204;
    NDDL3Parser_allocation_return allocation203;
    #undef	RETURN_TYPE_allocation203
    #define	RETURN_TYPE_allocation203 NDDL3Parser_allocation_return

    pANTLR3_BASE_TREE char_literal204_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal204       = NULL;
    allocation203.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal204_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:390:2: ( allocation ';' )
        // NDDL/base/antlr/NDDL3.g:390:4: allocation ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_allocation_in_allocationStmt2247);
            allocation203=allocation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleallocationStmtEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, allocation203.tree);
            char_literal204 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_allocationStmt2249); 
            if  (HASEXCEPTION())
            {
                goto ruleallocationStmtEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleallocationStmtEx; /* Prevent compiler warnings */
    ruleallocationStmtEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end allocationStmt */

/** 
 * $ANTLR start temporalRelation
 * NDDL/base/antlr/NDDL3.g:393:1: temporalRelation : ( 'after' | 'any' | 'before' | 'contained_by' | 'contains' | 'contains_end' | 'contains_start' | 'ends' | 'ends_after' | 'ends_after_start' | 'ends_before' | 'ends_during' | 'equal' | 'equals' | 'meets' | 'met_by' | 'parallels' | 'paralleled_by' | 'starts' | 'starts_after' | 'starts_before' | 'starts_before_end' | 'starts_during' );
 */
static NDDL3Parser_temporalRelation_return
temporalRelation(pNDDL3Parser ctx)
{   
    NDDL3Parser_temporalRelation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set205;

    pANTLR3_BASE_TREE set205_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set205       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set205_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:394:5: ( 'after' | 'any' | 'before' | 'contained_by' | 'contains' | 'contains_end' | 'contains_start' | 'ends' | 'ends_after' | 'ends_after_start' | 'ends_before' | 'ends_during' | 'equal' | 'equals' | 'meets' | 'met_by' | 'parallels' | 'paralleled_by' | 'starts' | 'starts_after' | 'starts_before' | 'starts_before_end' | 'starts_during' )
        // NDDL/base/antlr/NDDL3.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set205=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= 79) && (LA(1) <= 101)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set205)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_temporalRelation0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_temporalRelation0);    goto ruletemporalRelationEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletemporalRelationEx; /* Prevent compiler warnings */
    ruletemporalRelationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end temporalRelation */

/** 
 * $ANTLR start literalValue
 * NDDL/base/antlr/NDDL3.g:419:1: literalValue : ( booleanLiteral | numericLiteral | stringLiteral );
 */
static NDDL3Parser_literalValue_return
literalValue(pNDDL3Parser ctx)
{   
    NDDL3Parser_literalValue_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_booleanLiteral_return booleanLiteral206;
    #undef	RETURN_TYPE_booleanLiteral206
    #define	RETURN_TYPE_booleanLiteral206 NDDL3Parser_booleanLiteral_return

    NDDL3Parser_numericLiteral_return numericLiteral207;
    #undef	RETURN_TYPE_numericLiteral207
    #define	RETURN_TYPE_numericLiteral207 NDDL3Parser_numericLiteral_return

    NDDL3Parser_stringLiteral_return stringLiteral208;
    #undef	RETURN_TYPE_stringLiteral208
    #define	RETURN_TYPE_stringLiteral208 NDDL3Parser_stringLiteral_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    booleanLiteral206.tree = NULL;

    numericLiteral207.tree = NULL;

    stringLiteral208.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:420:5: ( booleanLiteral | numericLiteral | stringLiteral )
            
            ANTLR3_UINT32 alt55;

            alt55=3;

            switch ( LA(1) ) 
            {
            case 102:
            case 103:
            	{
            		alt55=1;
            	}
                break;
            case INT:
            case FLOAT:
            case 72:
            case 104:
            case 105:
            case 106:
            case 107:
            	{
            		alt55=2;
            	}
                break;
            case STRING:
            	{
            		alt55=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 55;
                EXCEPTION->state        = 0;


                goto ruleliteralValueEx;
            }

            switch (alt55) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:420:9: booleanLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_booleanLiteral_in_literalValue2502);
        	        booleanLiteral206=booleanLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralValueEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, booleanLiteral206.tree);

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:421:9: numericLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_numericLiteral_in_literalValue2512);
        	        numericLiteral207=numericLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralValueEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, numericLiteral207.tree);

        	    }
        	    break;
        	case 3:
        	    // NDDL/base/antlr/NDDL3.g:422:9: stringLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_stringLiteral_in_literalValue2522);
        	        stringLiteral208=stringLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleliteralValueEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stringLiteral208.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralValueEx; /* Prevent compiler warnings */
    ruleliteralValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end literalValue */

/** 
 * $ANTLR start booleanLiteral
 * NDDL/base/antlr/NDDL3.g:425:1: booleanLiteral : ( 'true' | 'false' );
 */
static NDDL3Parser_booleanLiteral_return
booleanLiteral(pNDDL3Parser ctx)
{   
    NDDL3Parser_booleanLiteral_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set209;

    pANTLR3_BASE_TREE set209_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set209       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set209_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:426:5: ( 'true' | 'false' )
        // NDDL/base/antlr/NDDL3.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set209=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= 102) && (LA(1) <= 103)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set209)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_booleanLiteral0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_booleanLiteral0);    goto rulebooleanLiteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebooleanLiteralEx; /* Prevent compiler warnings */
    rulebooleanLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end booleanLiteral */

/** 
 * $ANTLR start numericLiteral
 * NDDL/base/antlr/NDDL3.g:430:1: numericLiteral : ( INT | FLOAT | ( '+' )? ( 'inf' | 'inff' ) | '-inf' | '-inff' );
 */
static NDDL3Parser_numericLiteral_return
numericLiteral(pNDDL3Parser ctx)
{   
    NDDL3Parser_numericLiteral_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    INT210;
    pANTLR3_COMMON_TOKEN    FLOAT211;
    pANTLR3_COMMON_TOKEN    char_literal212;
    pANTLR3_COMMON_TOKEN    set213;
    pANTLR3_COMMON_TOKEN    string_literal214;
    pANTLR3_COMMON_TOKEN    string_literal215;

    pANTLR3_BASE_TREE INT210_tree;
    pANTLR3_BASE_TREE FLOAT211_tree;
    pANTLR3_BASE_TREE char_literal212_tree;
    pANTLR3_BASE_TREE set213_tree;
    pANTLR3_BASE_TREE string_literal214_tree;
    pANTLR3_BASE_TREE string_literal215_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    INT210       = NULL;
    FLOAT211       = NULL;
    char_literal212       = NULL;
    set213       = NULL;
    string_literal214       = NULL;
    string_literal215       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    INT210_tree   = NULL;
    FLOAT211_tree   = NULL;
    char_literal212_tree   = NULL;
    set213_tree   = NULL;
    string_literal214_tree   = NULL;
    string_literal215_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:431:2: ( INT | FLOAT | ( '+' )? ( 'inf' | 'inff' ) | '-inf' | '-inff' )
            
            ANTLR3_UINT32 alt57;

            alt57=5;

            switch ( LA(1) ) 
            {
            case INT:
            	{
            		alt57=1;
            	}
                break;
            case FLOAT:
            	{
            		alt57=2;
            	}
                break;
            case 72:
            case 104:
            case 105:
            	{
            		alt57=3;
            	}
                break;
            case 106:
            	{
            		alt57=4;
            	}
                break;
            case 107:
            	{
            		alt57=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 57;
                EXCEPTION->state        = 0;


                goto rulenumericLiteralEx;
            }

            switch (alt57) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:431:4: INT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        INT210 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_numericLiteral2570); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenumericLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        INT210_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, INT210));
        	        ADAPTOR->addChild(ADAPTOR, root_0, INT210_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:432:4: FLOAT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FLOAT211 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_numericLiteral2575); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenumericLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        FLOAT211_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, FLOAT211));
        	        ADAPTOR->addChild(ADAPTOR, root_0, FLOAT211_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // NDDL/base/antlr/NDDL3.g:433:4: ( '+' )? ( 'inf' | 'inff' )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // NDDL/base/antlr/NDDL3.g:433:4: ( '+' )?
        	        {
        	            int alt56=2;
        	            {
        	                int LA56_0 = LA(1);
        	                if ( (LA56_0 == 72) ) 
        	                {
        	                    alt56=1;
        	                }
        	            }
        	            switch (alt56) 
        	            {
        	        	case 1:
        	        	    // NDDL/base/antlr/NDDL3.g:433:5: '+'
        	        	    {
        	        	        char_literal212 = (pANTLR3_COMMON_TOKEN) MATCHT(72, &FOLLOW_72_in_numericLiteral2581); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenumericLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        set213=(pANTLR3_COMMON_TOKEN)LT(1);
        	        if ( ((LA(1) >= 104) && (LA(1) <= 105)) )
        	        {
        	            CONSUME();
        	            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set213)));
        	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        	        }
        	        else 
        	        {
        	            if (BACKTRACKING>0)
        	            {
        	                FAILEDFLAG = ANTLR3_TRUE; 
        	                return retval;
        	            }
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
        	            EXCEPTION->expectingSet = &FOLLOW_set_in_numericLiteral2586;
        	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_numericLiteral2586);    goto rulenumericLiteralEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // NDDL/base/antlr/NDDL3.g:434:4: '-inf'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal214 = (pANTLR3_COMMON_TOKEN) MATCHT(106, &FOLLOW_106_in_numericLiteral2597); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenumericLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal214_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal214));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal214_tree);
        	        }

        	    }
        	    break;
        	case 5:
        	    // NDDL/base/antlr/NDDL3.g:435:9: '-inff'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal215 = (pANTLR3_COMMON_TOKEN) MATCHT(107, &FOLLOW_107_in_numericLiteral2608); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenumericLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal215_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal215));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal215_tree);
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenumericLiteralEx; /* Prevent compiler warnings */
    rulenumericLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end numericLiteral */

/** 
 * $ANTLR start stringLiteral
 * NDDL/base/antlr/NDDL3.g:438:1: stringLiteral : STRING ;
 */
static NDDL3Parser_stringLiteral_return
stringLiteral(pNDDL3Parser ctx)
{   
    NDDL3Parser_stringLiteral_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    STRING216;

    pANTLR3_BASE_TREE STRING216_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    STRING216       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    STRING216_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:439:5: ( STRING )
        // NDDL/base/antlr/NDDL3.g:439:9: STRING
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            STRING216 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_stringLiteral2625); 
            if  (HASEXCEPTION())
            {
                goto rulestringLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            STRING216_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, STRING216));
            ADAPTOR->addChild(ADAPTOR, root_0, STRING216_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestringLiteralEx; /* Prevent compiler warnings */
    rulestringLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stringLiteral */

/** 
 * $ANTLR start methodInvocation
 * NDDL/base/antlr/NDDL3.g:442:1: methodInvocation : ( qualified '.' methodName variableArgumentList ';' -> ^( METHOD_CALL qualified methodName variableArgumentList ) | 'close' variableArgumentList ';' -> ^( CLOSE CLOSE ) );
 */
static NDDL3Parser_methodInvocation_return
methodInvocation(pNDDL3Parser ctx)
{   
    NDDL3Parser_methodInvocation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal218;
    pANTLR3_COMMON_TOKEN    char_literal221;
    pANTLR3_COMMON_TOKEN    string_literal222;
    pANTLR3_COMMON_TOKEN    char_literal224;
    NDDL3Parser_qualified_return qualified217;
    #undef	RETURN_TYPE_qualified217
    #define	RETURN_TYPE_qualified217 NDDL3Parser_qualified_return

    NDDL3Parser_methodName_return methodName219;
    #undef	RETURN_TYPE_methodName219
    #define	RETURN_TYPE_methodName219 NDDL3Parser_methodName_return

    NDDL3Parser_variableArgumentList_return variableArgumentList220;
    #undef	RETURN_TYPE_variableArgumentList220
    #define	RETURN_TYPE_variableArgumentList220 NDDL3Parser_variableArgumentList_return

    NDDL3Parser_variableArgumentList_return variableArgumentList223;
    #undef	RETURN_TYPE_variableArgumentList223
    #define	RETURN_TYPE_variableArgumentList223 NDDL3Parser_variableArgumentList_return

    pANTLR3_BASE_TREE char_literal218_tree;
    pANTLR3_BASE_TREE char_literal221_tree;
    pANTLR3_BASE_TREE string_literal222_tree;
    pANTLR3_BASE_TREE char_literal224_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_108;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_46;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_37;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableArgumentList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_methodName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_qualified;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal218       = NULL;
    char_literal221       = NULL;
    string_literal222       = NULL;
    char_literal224       = NULL;
    qualified217.tree = NULL;

    methodName219.tree = NULL;

    variableArgumentList220.tree = NULL;

    variableArgumentList223.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal218_tree   = NULL;
    char_literal221_tree   = NULL;
    string_literal222_tree   = NULL;
    char_literal224_tree   = NULL;

    stream_108   = NULL;
    #define CREATE_stream_108  if (stream_108 == NULL) {stream_108 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 108"); } 
    stream_46   = NULL;
    #define CREATE_stream_46  if (stream_46 == NULL) {stream_46 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 46"); } 
    stream_37   = NULL;
    #define CREATE_stream_37  if (stream_37 == NULL) {stream_37 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 37"); } 
    stream_variableArgumentList   = NULL;
    #define CREATE_stream_variableArgumentList  if (stream_variableArgumentList == NULL) {stream_variableArgumentList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableArgumentList"); }
    stream_methodName   = NULL;
    #define CREATE_stream_methodName  if (stream_methodName == NULL) {stream_methodName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule methodName"); }
    stream_qualified   = NULL;
    #define CREATE_stream_qualified  if (stream_qualified == NULL) {stream_qualified = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule qualified"); }

    retval.tree  = NULL;
    {
        {
            //  NDDL/base/antlr/NDDL3.g:443:5: ( qualified '.' methodName variableArgumentList ';' -> ^( METHOD_CALL qualified methodName variableArgumentList ) | 'close' variableArgumentList ';' -> ^( CLOSE CLOSE ) )
            
            ANTLR3_UINT32 alt58;

            alt58=2;


            {
                int LA58_0 = LA(1);
                if ( (LA58_0 == IDENT || LA58_0 == 45) ) 
                {
                    alt58=1;
                }
                else if ( (LA58_0 == 108) ) 
                {
                    alt58=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 58;
                    EXCEPTION->state        = 0;


                    goto rulemethodInvocationEx;
                }
            }
            switch (alt58) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:443:9: qualified '.' methodName variableArgumentList ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_qualified_in_methodInvocation2648);
        	        qualified217=qualified(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_qualified; stream_qualified->add(stream_qualified, qualified217.tree, NULL); }
        	        char_literal218 = (pANTLR3_COMMON_TOKEN) MATCHT(46, &FOLLOW_46_in_methodInvocation2650); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_46; stream_46->add(stream_46, char_literal218, NULL); }

        	        FOLLOWPUSH(FOLLOW_methodName_in_methodInvocation2652);
        	        methodName219=methodName(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_methodName; stream_methodName->add(stream_methodName, methodName219.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_variableArgumentList_in_methodInvocation2654);
        	        variableArgumentList220=variableArgumentList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableArgumentList; stream_variableArgumentList->add(stream_variableArgumentList, variableArgumentList220.tree, NULL); }
        	        char_literal221 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_methodInvocation2656); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_37; stream_37->add(stream_37, char_literal221, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : methodName, qualified, variableArgumentList
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 444:13: -> ^( METHOD_CALL qualified methodName variableArgumentList )
        	        	{
        	        	    // NDDL/base/antlr/NDDL3.g:444:16: ^( METHOD_CALL qualified methodName variableArgumentList )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, METHOD_CALL, (pANTLR3_UINT8)"METHOD_CALL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_qualified == NULL ? NULL : stream_qualified->nextTree(stream_qualified));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_methodName == NULL ? NULL : stream_methodName->nextTree(stream_methodName));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableArgumentList == NULL ? NULL : stream_variableArgumentList->nextTree(stream_variableArgumentList));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // NDDL/base/antlr/NDDL3.g:445:4: 'close' variableArgumentList ';'
        	    {
        	        string_literal222 = (pANTLR3_COMMON_TOKEN) MATCHT(108, &FOLLOW_108_in_methodInvocation2685); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_108; stream_108->add(stream_108, string_literal222, NULL); }

        	        FOLLOWPUSH(FOLLOW_variableArgumentList_in_methodInvocation2687);
        	        variableArgumentList223=variableArgumentList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableArgumentList; stream_variableArgumentList->add(stream_variableArgumentList, variableArgumentList223.tree, NULL); }
        	        char_literal224 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_methodInvocation2689); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_37; stream_37->add(stream_37, char_literal224, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 446:4: -> ^( CLOSE CLOSE )
        	        	{
        	        	    // NDDL/base/antlr/NDDL3.g:446:7: ^( CLOSE CLOSE )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLOSE, (pANTLR3_UINT8)"CLOSE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CLOSE, (pANTLR3_UINT8)"CLOSE"));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemethodInvocationEx; /* Prevent compiler warnings */
    rulemethodInvocationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_108 != NULL) stream_108->free(stream_108);
        if (stream_46 != NULL) stream_46->free(stream_46);
        if (stream_37 != NULL) stream_37->free(stream_37);
        if (stream_variableArgumentList != NULL) stream_variableArgumentList->free(stream_variableArgumentList);
        if (stream_methodName != NULL) stream_methodName->free(stream_methodName);
        if (stream_qualified != NULL) stream_qualified->free(stream_qualified);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end methodInvocation */

/** 
 * $ANTLR start methodName
 * NDDL/base/antlr/NDDL3.g:449:1: methodName : ( IDENT | 'close' );
 */
static NDDL3Parser_methodName_return
methodName(pNDDL3Parser ctx)
{   
    NDDL3Parser_methodName_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set225;

    pANTLR3_BASE_TREE set225_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set225       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set225_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:450:2: ( IDENT | 'close' )
        // NDDL/base/antlr/NDDL3.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set225=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == IDENT || LA(1) == 108 )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set225)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_methodName0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_methodName0);    goto rulemethodNameEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemethodNameEx; /* Prevent compiler warnings */
    rulemethodNameEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end methodName */

/** 
 * $ANTLR start noopstatement
 * NDDL/base/antlr/NDDL3.g:454:1: noopstatement : ';' ;
 */
static NDDL3Parser_noopstatement_return
noopstatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_noopstatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal226;

    pANTLR3_BASE_TREE char_literal226_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal226       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal226_tree   = NULL;


    retval.tree  = NULL;
    {
        // NDDL/base/antlr/NDDL3.g:455:2: ( ';' )
        // NDDL/base/antlr/NDDL3.g:455:4: ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal226 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_noopstatement2730); 
            if  (HASEXCEPTION())
            {
                goto rulenoopstatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenoopstatementEx; /* Prevent compiler warnings */
    rulenoopstatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end noopstatement */

// $ANTLR start synpred1_NDDL3
static void synpred1_NDDL3_fragment(pNDDL3Parser ctx ) 
{
    // NDDL/base/antlr/NDDL3.g:299:5: ( IDENT variableArgumentList ( ':' violationMsg )? ';' )
    // NDDL/base/antlr/NDDL3.g:299:6: IDENT variableArgumentList ( ':' violationMsg )? ';'
    {
         MATCHT(IDENT, &FOLLOW_IDENT_in_synpred1_NDDL31603); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_NDDL3Ex;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_variableArgumentList_in_synpred1_NDDL31605);
        variableArgumentList(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_NDDL3Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

        // NDDL/base/antlr/NDDL3.g:299:33: ( ':' violationMsg )?
        {
            int alt59=2;
            {
                int LA59_0 = LA(1);
                if ( (LA59_0 == 62) ) 
                {
                    alt59=1;
                }
            }
            switch (alt59) 
            {
        	case 1:
        	    // NDDL/base/antlr/NDDL3.g:299:34: ':' violationMsg
        	    {
        	         MATCHT(62, &FOLLOW_62_in_synpred1_NDDL31608); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred1_NDDL3Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_violationMsg_in_synpred1_NDDL31610);
        	        violationMsg(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred1_NDDL3Ex;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
         MATCHT(37, &FOLLOW_37_in_synpred1_NDDL31614); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_NDDL3Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_NDDL3Ex; /* Prevent compiler warnings */
rulesynpred1_NDDL3Ex: ;

}
// $ANTLR end synpred1_NDDL3

// $ANTLR start synpred2_NDDL3
static void synpred2_NDDL3_fragment(pNDDL3Parser ctx ) 
{
    // NDDL/base/antlr/NDDL3.g:379:52: ( 'else' )
    // NDDL/base/antlr/NDDL3.g:379:53: 'else'
    {
         MATCHT(77, &FOLLOW_77_in_synpred2_NDDL32104); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred2_NDDL3Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred2_NDDL3Ex; /* Prevent compiler warnings */
rulesynpred2_NDDL3Ex: ;

}
// $ANTLR end synpred2_NDDL3
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred2_NDDL3(pNDDL3Parser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred2_NDDL3_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred1_NDDL3(pNDDL3Parser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_NDDL3_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
