/** \file
 *  This C source file was generated by $ANTLR version 3.1.1
 *
 *     -  From the grammar source file : ../base/antlr/NDDL3.g
 *     -                            On : 2009-03-02 08:44:07
 *     -                for the parser : NDDL3ParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "NDDL3Parser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pNDDL3Parser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pNDDL3Parser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pNDDL3Parser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   NDDL3ParserTokenNames[96+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "CONSTRUCTOR",
        (pANTLR3_UINT8) "CONSTRUCTOR_INVOCATION",
        (pANTLR3_UINT8) "CONSTRAINT_INSTANTIATION",
        (pANTLR3_UINT8) "NDDL",
        (pANTLR3_UINT8) "TOKEN_RELATION",
        (pANTLR3_UINT8) "VARIABLE",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "INT",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "INCLUDE",
        (pANTLR3_UINT8) "ESCAPE_SEQUENCE",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "INT_SUFFIX",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT_SUFFIX",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "'typedef'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'int'",
        (pANTLR3_UINT8) "'float'",
        (pANTLR3_UINT8) "'bool'",
        (pANTLR3_UINT8) "'string'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "'filter'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'class'",
        (pANTLR3_UINT8) "'extends'",
        (pANTLR3_UINT8) "'predicate'",
        (pANTLR3_UINT8) "'::'",
        (pANTLR3_UINT8) "'rejectable'",
        (pANTLR3_UINT8) "'goal'",
        (pANTLR3_UINT8) "'fact'",
        (pANTLR3_UINT8) "'super'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'foreach'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'after'",
        (pANTLR3_UINT8) "'any'",
        (pANTLR3_UINT8) "'before'",
        (pANTLR3_UINT8) "'contained_by'",
        (pANTLR3_UINT8) "'contains'",
        (pANTLR3_UINT8) "'contains_end'",
        (pANTLR3_UINT8) "'contains_start'",
        (pANTLR3_UINT8) "'ends'",
        (pANTLR3_UINT8) "'ends_after'",
        (pANTLR3_UINT8) "'ends_after_start'",
        (pANTLR3_UINT8) "'ends_before'",
        (pANTLR3_UINT8) "'ends_during'",
        (pANTLR3_UINT8) "'equal'",
        (pANTLR3_UINT8) "'equals'",
        (pANTLR3_UINT8) "'meets'",
        (pANTLR3_UINT8) "'met_by'",
        (pANTLR3_UINT8) "'parallels'",
        (pANTLR3_UINT8) "'paralleled_by'",
        (pANTLR3_UINT8) "'starts'",
        (pANTLR3_UINT8) "'starts_after'",
        (pANTLR3_UINT8) "'starts_before'",
        (pANTLR3_UINT8) "'starts_before_end'",
        (pANTLR3_UINT8) "'starts_during'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'inf'",
        (pANTLR3_UINT8) "'-inf'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'",
        (pANTLR3_UINT8) "'specify'",
        (pANTLR3_UINT8) "'reset'",
        (pANTLR3_UINT8) "'constrain'",
        (pANTLR3_UINT8) "'free'",
        (pANTLR3_UINT8) "'activate'",
        (pANTLR3_UINT8) "'merge'",
        (pANTLR3_UINT8) "'reject'",
        (pANTLR3_UINT8) "'cancel'",
        (pANTLR3_UINT8) "'close'",
        (pANTLR3_UINT8) "'constraint'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'<:'",
        (pANTLR3_UINT8) "'numeric'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static NDDL3Parser_nddl_return	nddl    (pNDDL3Parser ctx);
static NDDL3Parser_nddlStatement_return	nddlStatement    (pNDDL3Parser ctx);
static NDDL3Parser_typeDefinition_return	typeDefinition    (pNDDL3Parser ctx);
static NDDL3Parser_typeWithBaseDomain_return	typeWithBaseDomain    (pNDDL3Parser ctx);
static NDDL3Parser_domain_return	domain    (pNDDL3Parser ctx);
static NDDL3Parser_intervalNumericDomain_return	intervalNumericDomain    (pNDDL3Parser ctx);
static NDDL3Parser_enumeratedNumericDomain_return	enumeratedNumericDomain    (pNDDL3Parser ctx);
static NDDL3Parser_numericSet_return	numericSet    (pNDDL3Parser ctx);
static NDDL3Parser_enumeratedObjectDomain_return	enumeratedObjectDomain    (pNDDL3Parser ctx);
static NDDL3Parser_objectSet_return	objectSet    (pNDDL3Parser ctx);
static NDDL3Parser_enumeratedStringDomain_return	enumeratedStringDomain    (pNDDL3Parser ctx);
static NDDL3Parser_stringSet_return	stringSet    (pNDDL3Parser ctx);
static NDDL3Parser_enumeratedBoolDomain_return	enumeratedBoolDomain    (pNDDL3Parser ctx);
static NDDL3Parser_boolSet_return	boolSet    (pNDDL3Parser ctx);
static NDDL3Parser_variableDeclaration_return	variableDeclaration    (pNDDL3Parser ctx);
static NDDL3Parser_nameWithBaseDomain_return	nameWithBaseDomain    (pNDDL3Parser ctx);
static NDDL3Parser_anyValue_return	anyValue    (pNDDL3Parser ctx);
static NDDL3Parser_allocation_return	allocation    (pNDDL3Parser ctx);
static NDDL3Parser_constructorInvocation_return	constructorInvocation    (pNDDL3Parser ctx);
static NDDL3Parser_qualified_return	qualified    (pNDDL3Parser ctx);
static NDDL3Parser_assignment_return	assignment    (pNDDL3Parser ctx);
static NDDL3Parser_classDeclaration_return	classDeclaration    (pNDDL3Parser ctx);
static NDDL3Parser_classBlock_return	classBlock    (pNDDL3Parser ctx);
static NDDL3Parser_classStatement_return	classStatement    (pNDDL3Parser ctx);
static NDDL3Parser_constructor_return	constructor    (pNDDL3Parser ctx);
static NDDL3Parser_constructorBlock_return	constructorBlock    (pNDDL3Parser ctx);
static NDDL3Parser_constructorStatement_return	constructorStatement    (pNDDL3Parser ctx);
static NDDL3Parser_constructorParameterList_return	constructorParameterList    (pNDDL3Parser ctx);
static NDDL3Parser_constructorParameters_return	constructorParameters    (pNDDL3Parser ctx);
static NDDL3Parser_constructorParameter_return	constructorParameter    (pNDDL3Parser ctx);
static NDDL3Parser_predicate_return	predicate    (pNDDL3Parser ctx);
static NDDL3Parser_predicateBlock_return	predicateBlock    (pNDDL3Parser ctx);
static NDDL3Parser_predicateStatement_return	predicateStatement    (pNDDL3Parser ctx);
static NDDL3Parser_rule_return	rule    (pNDDL3Parser ctx);
static NDDL3Parser_ruleBlock_return	ruleBlock    (pNDDL3Parser ctx);
static NDDL3Parser_ruleStatement_return	ruleStatement    (pNDDL3Parser ctx);
static NDDL3Parser_type_return	type    (pNDDL3Parser ctx);
static NDDL3Parser_relation_return	relation    (pNDDL3Parser ctx);
static NDDL3Parser_problemStmt_return	problemStmt    (pNDDL3Parser ctx);
static NDDL3Parser_predicateArgumentList_return	predicateArgumentList    (pNDDL3Parser ctx);
static NDDL3Parser_predicateArguments_return	predicateArguments    (pNDDL3Parser ctx);
static NDDL3Parser_predicateArgument_return	predicateArgument    (pNDDL3Parser ctx);
static NDDL3Parser_constraintInstantiation_return	constraintInstantiation    (pNDDL3Parser ctx);
static NDDL3Parser_superInvocation_return	superInvocation    (pNDDL3Parser ctx);
static NDDL3Parser_variableArgumentList_return	variableArgumentList    (pNDDL3Parser ctx);
static NDDL3Parser_variableArguments_return	variableArguments    (pNDDL3Parser ctx);
static NDDL3Parser_variableArgument_return	variableArgument    (pNDDL3Parser ctx);
static NDDL3Parser_typeArgumentList_return	typeArgumentList    (pNDDL3Parser ctx);
static NDDL3Parser_typeArguments_return	typeArguments    (pNDDL3Parser ctx);
static NDDL3Parser_typeArgument_return	typeArgument    (pNDDL3Parser ctx);
static NDDL3Parser_flowControl_return	flowControl    (pNDDL3Parser ctx);
static NDDL3Parser_guardExpression_return	guardExpression    (pNDDL3Parser ctx);
static NDDL3Parser_allocationStmt_return	allocationStmt    (pNDDL3Parser ctx);
static NDDL3Parser_temporalRelation_return	temporalRelation    (pNDDL3Parser ctx);
static NDDL3Parser_numericLiteral_return	numericLiteral    (pNDDL3Parser ctx);
static NDDL3Parser_boolLiteral_return	boolLiteral    (pNDDL3Parser ctx);
static NDDL3Parser_methodInvocation_return	methodInvocation    (pNDDL3Parser ctx);
static NDDL3Parser_tokenNameList_return	tokenNameList    (pNDDL3Parser ctx);
static NDDL3Parser_tokenNames_return	tokenNames    (pNDDL3Parser ctx);
static NDDL3Parser_noopstatement_return	noopstatement    (pNDDL3Parser ctx);
static NDDL3Parser_constraintSignature_return	constraintSignature    (pNDDL3Parser ctx);
static NDDL3Parser_signatureBlock_return	signatureBlock    (pNDDL3Parser ctx);
static NDDL3Parser_signatureExpression_return	signatureExpression    (pNDDL3Parser ctx);
static NDDL3Parser_signatureAtom_return	signatureAtom    (pNDDL3Parser ctx);
static void	NDDL3ParserFree(pNDDL3Parser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "../base/antlr/NDDL3.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new NDDL3Parser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pNDDL3Parser
NDDL3ParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return NDDL3ParserNewSSD(instream, NULL);
}

/** \brief Create a new NDDL3Parser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pNDDL3Parser
NDDL3ParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pNDDL3Parser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pNDDL3Parser) ANTLR3_CALLOC(1, sizeof(NDDL3Parser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in NDDL3Parser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our NDDL3Parser interface
     */
    ctx->nddl	= nddl;
    ctx->nddlStatement	= nddlStatement;
    ctx->typeDefinition	= typeDefinition;
    ctx->typeWithBaseDomain	= typeWithBaseDomain;
    ctx->domain	= domain;
    ctx->intervalNumericDomain	= intervalNumericDomain;
    ctx->enumeratedNumericDomain	= enumeratedNumericDomain;
    ctx->numericSet	= numericSet;
    ctx->enumeratedObjectDomain	= enumeratedObjectDomain;
    ctx->objectSet	= objectSet;
    ctx->enumeratedStringDomain	= enumeratedStringDomain;
    ctx->stringSet	= stringSet;
    ctx->enumeratedBoolDomain	= enumeratedBoolDomain;
    ctx->boolSet	= boolSet;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->nameWithBaseDomain	= nameWithBaseDomain;
    ctx->anyValue	= anyValue;
    ctx->allocation	= allocation;
    ctx->constructorInvocation	= constructorInvocation;
    ctx->qualified	= qualified;
    ctx->assignment	= assignment;
    ctx->classDeclaration	= classDeclaration;
    ctx->classBlock	= classBlock;
    ctx->classStatement	= classStatement;
    ctx->constructor	= constructor;
    ctx->constructorBlock	= constructorBlock;
    ctx->constructorStatement	= constructorStatement;
    ctx->constructorParameterList	= constructorParameterList;
    ctx->constructorParameters	= constructorParameters;
    ctx->constructorParameter	= constructorParameter;
    ctx->predicate	= predicate;
    ctx->predicateBlock	= predicateBlock;
    ctx->predicateStatement	= predicateStatement;
    ctx->rule	= rule;
    ctx->ruleBlock	= ruleBlock;
    ctx->ruleStatement	= ruleStatement;
    ctx->type	= type;
    ctx->relation	= relation;
    ctx->problemStmt	= problemStmt;
    ctx->predicateArgumentList	= predicateArgumentList;
    ctx->predicateArguments	= predicateArguments;
    ctx->predicateArgument	= predicateArgument;
    ctx->constraintInstantiation	= constraintInstantiation;
    ctx->superInvocation	= superInvocation;
    ctx->variableArgumentList	= variableArgumentList;
    ctx->variableArguments	= variableArguments;
    ctx->variableArgument	= variableArgument;
    ctx->typeArgumentList	= typeArgumentList;
    ctx->typeArguments	= typeArguments;
    ctx->typeArgument	= typeArgument;
    ctx->flowControl	= flowControl;
    ctx->guardExpression	= guardExpression;
    ctx->allocationStmt	= allocationStmt;
    ctx->temporalRelation	= temporalRelation;
    ctx->numericLiteral	= numericLiteral;
    ctx->boolLiteral	= boolLiteral;
    ctx->methodInvocation	= methodInvocation;
    ctx->tokenNameList	= tokenNameList;
    ctx->tokenNames	= tokenNames;
    ctx->noopstatement	= noopstatement;
    ctx->constraintSignature	= constraintSignature;
    ctx->signatureBlock	= signatureBlock;
    ctx->signatureExpression	= signatureExpression;
    ctx->signatureAtom	= signatureAtom;
    ctx->free			= NDDL3ParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(64);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = NDDL3ParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 NDDL3ParserFree(pNDDL3Parser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return NDDL3ParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_nddlStatement_in_nddl62  */
static	ANTLR3_BITWORD FOLLOW_nddlStatement_in_nddl62_bits[]	= { ANTLR3_UINT64_LIT(0xFC0E2620FC000402), ANTLR3_UINT64_LIT(0x00000000C001FFFF) };
static  ANTLR3_BITSET_LIST FOLLOW_nddlStatement_in_nddl62	= { FOLLOW_nddlStatement_in_nddl62_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeDefinition_in_nddlStatement100  */
static	ANTLR3_BITWORD FOLLOW_typeDefinition_in_nddlStatement100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_typeDefinition_in_nddlStatement100	= { FOLLOW_typeDefinition_in_nddlStatement100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_nddlStatement112  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_nddlStatement112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_nddlStatement112	= { FOLLOW_variableDeclaration_in_nddlStatement112_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_in_nddlStatement130  */
static	ANTLR3_BITWORD FOLLOW_assignment_in_nddlStatement130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_in_nddlStatement130	= { FOLLOW_assignment_in_nddlStatement130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constraintInstantiation_in_nddlStatement148  */
static	ANTLR3_BITWORD FOLLOW_constraintInstantiation_in_nddlStatement148_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constraintInstantiation_in_nddlStatement148	= { FOLLOW_constraintInstantiation_in_nddlStatement148_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_classDeclaration_in_nddlStatement160  */
static	ANTLR3_BITWORD FOLLOW_classDeclaration_in_nddlStatement160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_classDeclaration_in_nddlStatement160	= { FOLLOW_classDeclaration_in_nddlStatement160_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_allocationStmt_in_nddlStatement178  */
static	ANTLR3_BITWORD FOLLOW_allocationStmt_in_nddlStatement178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_allocationStmt_in_nddlStatement178	= { FOLLOW_allocationStmt_in_nddlStatement178_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_rule_in_nddlStatement196  */
static	ANTLR3_BITWORD FOLLOW_rule_in_nddlStatement196_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_rule_in_nddlStatement196	= { FOLLOW_rule_in_nddlStatement196_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_problemStmt_in_nddlStatement214  */
static	ANTLR3_BITWORD FOLLOW_problemStmt_in_nddlStatement214_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_problemStmt_in_nddlStatement214	= { FOLLOW_problemStmt_in_nddlStatement214_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_nddlStatement232  */
static	ANTLR3_BITWORD FOLLOW_relation_in_nddlStatement232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_nddlStatement232	= { FOLLOW_relation_in_nddlStatement232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_methodInvocation_in_nddlStatement244  */
static	ANTLR3_BITWORD FOLLOW_methodInvocation_in_nddlStatement244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_methodInvocation_in_nddlStatement244	= { FOLLOW_methodInvocation_in_nddlStatement244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noopstatement_in_nddlStatement256  */
static	ANTLR3_BITWORD FOLLOW_noopstatement_in_nddlStatement256_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noopstatement_in_nddlStatement256	= { FOLLOW_noopstatement_in_nddlStatement256_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constraintSignature_in_nddlStatement274  */
static	ANTLR3_BITWORD FOLLOW_constraintSignature_in_nddlStatement274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constraintSignature_in_nddlStatement274	= { FOLLOW_constraintSignature_in_nddlStatement274_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_26_in_typeDefinition292  */
static	ANTLR3_BITWORD FOLLOW_26_in_typeDefinition292_bits[]	= { ANTLR3_UINT64_LIT(0x00000000F0000400) };
static  ANTLR3_BITSET_LIST FOLLOW_26_in_typeDefinition292	= { FOLLOW_26_in_typeDefinition292_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeWithBaseDomain_in_typeDefinition294  */
static	ANTLR3_BITWORD FOLLOW_typeWithBaseDomain_in_typeDefinition294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_typeWithBaseDomain_in_typeDefinition294	= { FOLLOW_typeWithBaseDomain_in_typeDefinition294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_typeDefinition296  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_typeDefinition296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_typeDefinition296	= { FOLLOW_IDENT_in_typeDefinition296_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_typeDefinition298  */
static	ANTLR3_BITWORD FOLLOW_27_in_typeDefinition298_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_typeDefinition298	= { FOLLOW_27_in_typeDefinition298_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_28_in_typeWithBaseDomain325  */
static	ANTLR3_BITWORD FOLLOW_28_in_typeWithBaseDomain325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000900003000), ANTLR3_UINT64_LIT(0x00000000000E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_28_in_typeWithBaseDomain325	= { FOLLOW_28_in_typeWithBaseDomain325_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_29_in_typeWithBaseDomain332  */
static	ANTLR3_BITWORD FOLLOW_29_in_typeWithBaseDomain332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000900003000), ANTLR3_UINT64_LIT(0x00000000000E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_29_in_typeWithBaseDomain332	= { FOLLOW_29_in_typeWithBaseDomain332_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_30_in_typeWithBaseDomain339  */
static	ANTLR3_BITWORD FOLLOW_30_in_typeWithBaseDomain339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000900003000), ANTLR3_UINT64_LIT(0x00000000000E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_30_in_typeWithBaseDomain339	= { FOLLOW_30_in_typeWithBaseDomain339_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_31_in_typeWithBaseDomain346  */
static	ANTLR3_BITWORD FOLLOW_31_in_typeWithBaseDomain346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000900003000), ANTLR3_UINT64_LIT(0x00000000000E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_31_in_typeWithBaseDomain346	= { FOLLOW_31_in_typeWithBaseDomain346_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_typeWithBaseDomain353  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_typeWithBaseDomain353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000900003000), ANTLR3_UINT64_LIT(0x00000000000E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_typeWithBaseDomain353	= { FOLLOW_IDENT_in_typeWithBaseDomain353_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_domain_in_typeWithBaseDomain357  */
static	ANTLR3_BITWORD FOLLOW_domain_in_typeWithBaseDomain357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_domain_in_typeWithBaseDomain357	= { FOLLOW_domain_in_typeWithBaseDomain357_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numericLiteral_in_domain374  */
static	ANTLR3_BITWORD FOLLOW_numericLiteral_in_domain374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_numericLiteral_in_domain374	= { FOLLOW_numericLiteral_in_domain374_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_intervalNumericDomain_in_domain392  */
static	ANTLR3_BITWORD FOLLOW_intervalNumericDomain_in_domain392_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_intervalNumericDomain_in_domain392	= { FOLLOW_intervalNumericDomain_in_domain392_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumeratedNumericDomain_in_domain410  */
static	ANTLR3_BITWORD FOLLOW_enumeratedNumericDomain_in_domain410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_enumeratedNumericDomain_in_domain410	= { FOLLOW_enumeratedNumericDomain_in_domain410_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumeratedStringDomain_in_domain428  */
static	ANTLR3_BITWORD FOLLOW_enumeratedStringDomain_in_domain428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_enumeratedStringDomain_in_domain428	= { FOLLOW_enumeratedStringDomain_in_domain428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumeratedBoolDomain_in_domain446  */
static	ANTLR3_BITWORD FOLLOW_enumeratedBoolDomain_in_domain446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_enumeratedBoolDomain_in_domain446	= { FOLLOW_enumeratedBoolDomain_in_domain446_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enumeratedObjectDomain_in_domain464  */
static	ANTLR3_BITWORD FOLLOW_enumeratedObjectDomain_in_domain464_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_enumeratedObjectDomain_in_domain464	= { FOLLOW_enumeratedObjectDomain_in_domain464_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_32_in_intervalNumericDomain495  */
static	ANTLR3_BITWORD FOLLOW_32_in_intervalNumericDomain495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000003000), ANTLR3_UINT64_LIT(0x00000000000E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_32_in_intervalNumericDomain495	= { FOLLOW_32_in_intervalNumericDomain495_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numericLiteral_in_intervalNumericDomain498  */
static	ANTLR3_BITWORD FOLLOW_numericLiteral_in_intervalNumericDomain498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200003000), ANTLR3_UINT64_LIT(0x00000000000E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_numericLiteral_in_intervalNumericDomain498	= { FOLLOW_numericLiteral_in_intervalNumericDomain498_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_intervalNumericDomain501  */
static	ANTLR3_BITWORD FOLLOW_33_in_intervalNumericDomain501_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000003000), ANTLR3_UINT64_LIT(0x00000000000E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_intervalNumericDomain501	= { FOLLOW_33_in_intervalNumericDomain501_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numericLiteral_in_intervalNumericDomain506  */
static	ANTLR3_BITWORD FOLLOW_numericLiteral_in_intervalNumericDomain506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_numericLiteral_in_intervalNumericDomain506	= { FOLLOW_numericLiteral_in_intervalNumericDomain506_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_34_in_intervalNumericDomain508  */
static	ANTLR3_BITWORD FOLLOW_34_in_intervalNumericDomain508_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_34_in_intervalNumericDomain508	= { FOLLOW_34_in_intervalNumericDomain508_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_enumeratedNumericDomain540  */
static	ANTLR3_BITWORD FOLLOW_35_in_enumeratedNumericDomain540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000003000), ANTLR3_UINT64_LIT(0x00000000000E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_enumeratedNumericDomain540	= { FOLLOW_35_in_enumeratedNumericDomain540_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numericSet_in_enumeratedNumericDomain543  */
static	ANTLR3_BITWORD FOLLOW_numericSet_in_enumeratedNumericDomain543_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_numericSet_in_enumeratedNumericDomain543	= { FOLLOW_numericSet_in_enumeratedNumericDomain543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_enumeratedNumericDomain545  */
static	ANTLR3_BITWORD FOLLOW_36_in_enumeratedNumericDomain545_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_enumeratedNumericDomain545	= { FOLLOW_36_in_enumeratedNumericDomain545_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numericLiteral_in_numericSet577  */
static	ANTLR3_BITWORD FOLLOW_numericLiteral_in_numericSet577_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_numericLiteral_in_numericSet577	= { FOLLOW_numericLiteral_in_numericSet577_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_numericSet580  */
static	ANTLR3_BITWORD FOLLOW_33_in_numericSet580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000003000), ANTLR3_UINT64_LIT(0x00000000000E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_numericSet580	= { FOLLOW_33_in_numericSet580_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numericLiteral_in_numericSet583  */
static	ANTLR3_BITWORD FOLLOW_numericLiteral_in_numericSet583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_numericLiteral_in_numericSet583	= { FOLLOW_numericLiteral_in_numericSet583_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_enumeratedObjectDomain616  */
static	ANTLR3_BITWORD FOLLOW_35_in_enumeratedObjectDomain616_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_enumeratedObjectDomain616	= { FOLLOW_35_in_enumeratedObjectDomain616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectSet_in_enumeratedObjectDomain619  */
static	ANTLR3_BITWORD FOLLOW_objectSet_in_enumeratedObjectDomain619_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_objectSet_in_enumeratedObjectDomain619	= { FOLLOW_objectSet_in_enumeratedObjectDomain619_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_enumeratedObjectDomain621  */
static	ANTLR3_BITWORD FOLLOW_36_in_enumeratedObjectDomain621_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_enumeratedObjectDomain621	= { FOLLOW_36_in_enumeratedObjectDomain621_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorInvocation_in_objectSet654  */
static	ANTLR3_BITWORD FOLLOW_constructorInvocation_in_objectSet654_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorInvocation_in_objectSet654	= { FOLLOW_constructorInvocation_in_objectSet654_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_objectSet656  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_objectSet656_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_objectSet656	= { FOLLOW_qualified_in_objectSet656_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_objectSet660  */
static	ANTLR3_BITWORD FOLLOW_33_in_objectSet660_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_objectSet660	= { FOLLOW_33_in_objectSet660_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorInvocation_in_objectSet664  */
static	ANTLR3_BITWORD FOLLOW_constructorInvocation_in_objectSet664_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorInvocation_in_objectSet664	= { FOLLOW_constructorInvocation_in_objectSet664_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_objectSet666  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_objectSet666_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_objectSet666	= { FOLLOW_qualified_in_objectSet666_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_enumeratedStringDomain700  */
static	ANTLR3_BITWORD FOLLOW_35_in_enumeratedStringDomain700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_enumeratedStringDomain700	= { FOLLOW_35_in_enumeratedStringDomain700_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stringSet_in_enumeratedStringDomain703  */
static	ANTLR3_BITWORD FOLLOW_stringSet_in_enumeratedStringDomain703_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_stringSet_in_enumeratedStringDomain703	= { FOLLOW_stringSet_in_enumeratedStringDomain703_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_enumeratedStringDomain705  */
static	ANTLR3_BITWORD FOLLOW_36_in_enumeratedStringDomain705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_enumeratedStringDomain705	= { FOLLOW_36_in_enumeratedStringDomain705_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_stringSet737  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_stringSet737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_stringSet737	= { FOLLOW_STRING_in_stringSet737_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_stringSet740  */
static	ANTLR3_BITWORD FOLLOW_33_in_stringSet740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_stringSet740	= { FOLLOW_33_in_stringSet740_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_stringSet743  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_stringSet743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_stringSet743	= { FOLLOW_STRING_in_stringSet743_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_enumeratedBoolDomain785  */
static	ANTLR3_BITWORD FOLLOW_35_in_enumeratedBoolDomain785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000300000) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_enumeratedBoolDomain785	= { FOLLOW_35_in_enumeratedBoolDomain785_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolSet_in_enumeratedBoolDomain788  */
static	ANTLR3_BITWORD FOLLOW_boolSet_in_enumeratedBoolDomain788_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_boolSet_in_enumeratedBoolDomain788	= { FOLLOW_boolSet_in_enumeratedBoolDomain788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_enumeratedBoolDomain790  */
static	ANTLR3_BITWORD FOLLOW_36_in_enumeratedBoolDomain790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_enumeratedBoolDomain790	= { FOLLOW_36_in_enumeratedBoolDomain790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolLiteral_in_boolSet814  */
static	ANTLR3_BITWORD FOLLOW_boolLiteral_in_boolSet814_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolLiteral_in_boolSet814	= { FOLLOW_boolLiteral_in_boolSet814_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_boolSet817  */
static	ANTLR3_BITWORD FOLLOW_33_in_boolSet817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000300000) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_boolSet817	= { FOLLOW_33_in_boolSet817_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolLiteral_in_boolSet820  */
static	ANTLR3_BITWORD FOLLOW_boolLiteral_in_boolSet820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolLiteral_in_boolSet820	= { FOLLOW_boolLiteral_in_boolSet820_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_variableDeclaration854  */
static	ANTLR3_BITWORD FOLLOW_37_in_variableDeclaration854_bits[]	= { ANTLR3_UINT64_LIT(0x00000020F0000400) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_variableDeclaration854	= { FOLLOW_37_in_variableDeclaration854_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_variableDeclaration858  */
static	ANTLR3_BITWORD FOLLOW_type_in_variableDeclaration858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_variableDeclaration858	= { FOLLOW_type_in_variableDeclaration858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameWithBaseDomain_in_variableDeclaration860  */
static	ANTLR3_BITWORD FOLLOW_nameWithBaseDomain_in_variableDeclaration860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000208000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameWithBaseDomain_in_variableDeclaration860	= { FOLLOW_nameWithBaseDomain_in_variableDeclaration860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_variableDeclaration863  */
static	ANTLR3_BITWORD FOLLOW_33_in_variableDeclaration863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_variableDeclaration863	= { FOLLOW_33_in_variableDeclaration863_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameWithBaseDomain_in_variableDeclaration865  */
static	ANTLR3_BITWORD FOLLOW_nameWithBaseDomain_in_variableDeclaration865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000208000000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameWithBaseDomain_in_variableDeclaration865	= { FOLLOW_nameWithBaseDomain_in_variableDeclaration865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_variableDeclaration869  */
static	ANTLR3_BITWORD FOLLOW_27_in_variableDeclaration869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_variableDeclaration869	= { FOLLOW_27_in_variableDeclaration869_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_nameWithBaseDomain941  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_nameWithBaseDomain941_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_nameWithBaseDomain941	= { FOLLOW_IDENT_in_nameWithBaseDomain941_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_nameWithBaseDomain944  */
static	ANTLR3_BITWORD FOLLOW_38_in_nameWithBaseDomain944_bits[]	= { ANTLR3_UINT64_LIT(0x0000060900003C00), ANTLR3_UINT64_LIT(0x00000000003E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_nameWithBaseDomain944	= { FOLLOW_38_in_nameWithBaseDomain944_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_anyValue_in_nameWithBaseDomain949  */
static	ANTLR3_BITWORD FOLLOW_anyValue_in_nameWithBaseDomain949_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_anyValue_in_nameWithBaseDomain949	= { FOLLOW_anyValue_in_nameWithBaseDomain949_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_nameWithBaseDomain951  */
static	ANTLR3_BITWORD FOLLOW_39_in_nameWithBaseDomain951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_nameWithBaseDomain951	= { FOLLOW_39_in_nameWithBaseDomain951_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_nameWithBaseDomain983  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_nameWithBaseDomain983_bits[]	= { ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_nameWithBaseDomain983	= { FOLLOW_IDENT_in_nameWithBaseDomain983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_40_in_nameWithBaseDomain985  */
static	ANTLR3_BITWORD FOLLOW_40_in_nameWithBaseDomain985_bits[]	= { ANTLR3_UINT64_LIT(0x0000060900003C00), ANTLR3_UINT64_LIT(0x00000000003E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_40_in_nameWithBaseDomain985	= { FOLLOW_40_in_nameWithBaseDomain985_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_anyValue_in_nameWithBaseDomain990  */
static	ANTLR3_BITWORD FOLLOW_anyValue_in_nameWithBaseDomain990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_anyValue_in_nameWithBaseDomain990	= { FOLLOW_anyValue_in_nameWithBaseDomain990_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_anyValue1013  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_anyValue1013_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_anyValue1013	= { FOLLOW_STRING_in_anyValue1013_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_boolLiteral_in_anyValue1031  */
static	ANTLR3_BITWORD FOLLOW_boolLiteral_in_anyValue1031_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_boolLiteral_in_anyValue1031	= { FOLLOW_boolLiteral_in_anyValue1031_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_domain_in_anyValue1049  */
static	ANTLR3_BITWORD FOLLOW_domain_in_anyValue1049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_domain_in_anyValue1049	= { FOLLOW_domain_in_anyValue1049_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_allocation_in_anyValue1067  */
static	ANTLR3_BITWORD FOLLOW_allocation_in_anyValue1067_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_allocation_in_anyValue1067	= { FOLLOW_allocation_in_anyValue1067_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_anyValue1085  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_anyValue1085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_anyValue1085	= { FOLLOW_qualified_in_anyValue1085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_allocation1116  */
static	ANTLR3_BITWORD FOLLOW_41_in_allocation1116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_allocation1116	= { FOLLOW_41_in_allocation1116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorInvocation_in_allocation1119  */
static	ANTLR3_BITWORD FOLLOW_constructorInvocation_in_allocation1119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorInvocation_in_allocation1119	= { FOLLOW_constructorInvocation_in_allocation1119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_constructorInvocation1150  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_constructorInvocation1150_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_constructorInvocation1150	= { FOLLOW_IDENT_in_constructorInvocation1150_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_constructorInvocation1152  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_constructorInvocation1152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_constructorInvocation1152	= { FOLLOW_variableArgumentList_in_constructorInvocation1152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_qualified1217  */
static	ANTLR3_BITWORD FOLLOW_set_in_qualified1217_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_qualified1217	= { FOLLOW_set_in_qualified1217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_qualified1226  */
static	ANTLR3_BITWORD FOLLOW_43_in_qualified1226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_qualified1226	= { FOLLOW_43_in_qualified1226_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_qualified1229  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_qualified1229_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_qualified1229	= { FOLLOW_IDENT_in_qualified1229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_assignment1262  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_assignment1262_bits[]	= { ANTLR3_UINT64_LIT(0x0000110000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_assignment1262	= { FOLLOW_qualified_in_assignment1262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_44_in_assignment1265  */
static	ANTLR3_BITWORD FOLLOW_44_in_assignment1265_bits[]	= { ANTLR3_UINT64_LIT(0x0000060900003C00), ANTLR3_UINT64_LIT(0x00000000003E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_44_in_assignment1265	= { FOLLOW_44_in_assignment1265_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_40_in_assignment1269  */
static	ANTLR3_BITWORD FOLLOW_40_in_assignment1269_bits[]	= { ANTLR3_UINT64_LIT(0x0000060900003C00), ANTLR3_UINT64_LIT(0x00000000003E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_40_in_assignment1269	= { FOLLOW_40_in_assignment1269_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_anyValue_in_assignment1272  */
static	ANTLR3_BITWORD FOLLOW_anyValue_in_assignment1272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_anyValue_in_assignment1272	= { FOLLOW_anyValue_in_assignment1272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_assignment1274  */
static	ANTLR3_BITWORD FOLLOW_27_in_assignment1274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_assignment1274	= { FOLLOW_27_in_assignment1274_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_45_in_classDeclaration1319  */
static	ANTLR3_BITWORD FOLLOW_45_in_classDeclaration1319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_45_in_classDeclaration1319	= { FOLLOW_45_in_classDeclaration1319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_classDeclaration1323  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_classDeclaration1323_bits[]	= { ANTLR3_UINT64_LIT(0x0000400808000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_classDeclaration1323	= { FOLLOW_IDENT_in_classDeclaration1323_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_46_in_classDeclaration1331  */
static	ANTLR3_BITWORD FOLLOW_46_in_classDeclaration1331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_46_in_classDeclaration1331	= { FOLLOW_46_in_classDeclaration1331_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_classDeclaration1335  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_classDeclaration1335_bits[]	= { ANTLR3_UINT64_LIT(0x0000400800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_classDeclaration1335	= { FOLLOW_IDENT_in_classDeclaration1335_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_classBlock_in_classDeclaration1339  */
static	ANTLR3_BITWORD FOLLOW_classBlock_in_classDeclaration1339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_classBlock_in_classDeclaration1339	= { FOLLOW_classBlock_in_classDeclaration1339_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_classDeclaration1379  */
static	ANTLR3_BITWORD FOLLOW_27_in_classDeclaration1379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_classDeclaration1379	= { FOLLOW_27_in_classDeclaration1379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_classBlock1434  */
static	ANTLR3_BITWORD FOLLOW_35_in_classBlock1434_bits[]	= { ANTLR3_UINT64_LIT(0x00008030F8000400) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_classBlock1434	= { FOLLOW_35_in_classBlock1434_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_classStatement_in_classBlock1437  */
static	ANTLR3_BITWORD FOLLOW_classStatement_in_classBlock1437_bits[]	= { ANTLR3_UINT64_LIT(0x00008030F8000400) };
static  ANTLR3_BITSET_LIST FOLLOW_classStatement_in_classBlock1437	= { FOLLOW_classStatement_in_classBlock1437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_classBlock1440  */
static	ANTLR3_BITWORD FOLLOW_36_in_classBlock1440_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_classBlock1440	= { FOLLOW_36_in_classBlock1440_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_classStatement1452  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_classStatement1452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_classStatement1452	= { FOLLOW_variableDeclaration_in_classStatement1452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructor_in_classStatement1457  */
static	ANTLR3_BITWORD FOLLOW_constructor_in_classStatement1457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructor_in_classStatement1457	= { FOLLOW_constructor_in_classStatement1457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_predicate_in_classStatement1462  */
static	ANTLR3_BITWORD FOLLOW_predicate_in_classStatement1462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_predicate_in_classStatement1462	= { FOLLOW_predicate_in_classStatement1462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noopstatement_in_classStatement1467  */
static	ANTLR3_BITWORD FOLLOW_noopstatement_in_classStatement1467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noopstatement_in_classStatement1467	= { FOLLOW_noopstatement_in_classStatement1467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_constructor1478  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_constructor1478_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_constructor1478	= { FOLLOW_IDENT_in_constructor1478_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorParameterList_in_constructor1480  */
static	ANTLR3_BITWORD FOLLOW_constructorParameterList_in_constructor1480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorParameterList_in_constructor1480	= { FOLLOW_constructorParameterList_in_constructor1480_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorBlock_in_constructor1482  */
static	ANTLR3_BITWORD FOLLOW_constructorBlock_in_constructor1482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorBlock_in_constructor1482	= { FOLLOW_constructorBlock_in_constructor1482_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_constructorBlock1508  */
static	ANTLR3_BITWORD FOLLOW_35_in_constructorBlock1508_bits[]	= { ANTLR3_UINT64_LIT(0x0010041008000400) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_constructorBlock1508	= { FOLLOW_35_in_constructorBlock1508_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorStatement_in_constructorBlock1511  */
static	ANTLR3_BITWORD FOLLOW_constructorStatement_in_constructorBlock1511_bits[]	= { ANTLR3_UINT64_LIT(0x0010041008000400) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorStatement_in_constructorBlock1511	= { FOLLOW_constructorStatement_in_constructorBlock1511_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_constructorBlock1514  */
static	ANTLR3_BITWORD FOLLOW_36_in_constructorBlock1514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_constructorBlock1514	= { FOLLOW_36_in_constructorBlock1514_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_in_constructorStatement1526  */
static	ANTLR3_BITWORD FOLLOW_assignment_in_constructorStatement1526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_in_constructorStatement1526	= { FOLLOW_assignment_in_constructorStatement1526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_superInvocation_in_constructorStatement1531  */
static	ANTLR3_BITWORD FOLLOW_superInvocation_in_constructorStatement1531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_superInvocation_in_constructorStatement1531	= { FOLLOW_superInvocation_in_constructorStatement1531_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noopstatement_in_constructorStatement1536  */
static	ANTLR3_BITWORD FOLLOW_noopstatement_in_constructorStatement1536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noopstatement_in_constructorStatement1536	= { FOLLOW_noopstatement_in_constructorStatement1536_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_constructorParameterList1547  */
static	ANTLR3_BITWORD FOLLOW_38_in_constructorParameterList1547_bits[]	= { ANTLR3_UINT64_LIT(0x000000A0F0000400) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_constructorParameterList1547	= { FOLLOW_38_in_constructorParameterList1547_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorParameters_in_constructorParameterList1550  */
static	ANTLR3_BITWORD FOLLOW_constructorParameters_in_constructorParameterList1550_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorParameters_in_constructorParameterList1550	= { FOLLOW_constructorParameters_in_constructorParameterList1550_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_constructorParameterList1553  */
static	ANTLR3_BITWORD FOLLOW_39_in_constructorParameterList1553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_constructorParameterList1553	= { FOLLOW_39_in_constructorParameterList1553_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorParameter_in_constructorParameters1565  */
static	ANTLR3_BITWORD FOLLOW_constructorParameter_in_constructorParameters1565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorParameter_in_constructorParameters1565	= { FOLLOW_constructorParameter_in_constructorParameters1565_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_constructorParameters1569  */
static	ANTLR3_BITWORD FOLLOW_33_in_constructorParameters1569_bits[]	= { ANTLR3_UINT64_LIT(0x00000020F0000400) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_constructorParameters1569	= { FOLLOW_33_in_constructorParameters1569_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constructorParameters_in_constructorParameters1572  */
static	ANTLR3_BITWORD FOLLOW_constructorParameters_in_constructorParameters1572_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constructorParameters_in_constructorParameters1572	= { FOLLOW_constructorParameters_in_constructorParameters1572_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_constructorParameter1585  */
static	ANTLR3_BITWORD FOLLOW_type_in_constructorParameter1585_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_constructorParameter1585	= { FOLLOW_type_in_constructorParameter1585_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_constructorParameter1587  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_constructorParameter1587_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_constructorParameter1587	= { FOLLOW_IDENT_in_constructorParameter1587_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_47_in_predicate1611  */
static	ANTLR3_BITWORD FOLLOW_47_in_predicate1611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_47_in_predicate1611	= { FOLLOW_47_in_predicate1611_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_predicate1614  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_predicate1614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_predicate1614	= { FOLLOW_IDENT_in_predicate1614_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_predicateBlock_in_predicate1616  */
static	ANTLR3_BITWORD FOLLOW_predicateBlock_in_predicate1616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_predicateBlock_in_predicate1616	= { FOLLOW_predicateBlock_in_predicate1616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_predicateBlock1628  */
static	ANTLR3_BITWORD FOLLOW_35_in_predicateBlock1628_bits[]	= { ANTLR3_UINT64_LIT(0x00000430F0000400) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_predicateBlock1628	= { FOLLOW_35_in_predicateBlock1628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_predicateStatement_in_predicateBlock1631  */
static	ANTLR3_BITWORD FOLLOW_predicateStatement_in_predicateBlock1631_bits[]	= { ANTLR3_UINT64_LIT(0x00000430F0000400) };
static  ANTLR3_BITSET_LIST FOLLOW_predicateStatement_in_predicateBlock1631	= { FOLLOW_predicateStatement_in_predicateBlock1631_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_predicateBlock1634  */
static	ANTLR3_BITWORD FOLLOW_36_in_predicateBlock1634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_predicateBlock1634	= { FOLLOW_36_in_predicateBlock1634_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_predicateStatement1647  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_predicateStatement1647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_predicateStatement1647	= { FOLLOW_variableDeclaration_in_predicateStatement1647_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constraintInstantiation_in_predicateStatement1652  */
static	ANTLR3_BITWORD FOLLOW_constraintInstantiation_in_predicateStatement1652_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constraintInstantiation_in_predicateStatement1652	= { FOLLOW_constraintInstantiation_in_predicateStatement1652_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_in_predicateStatement1657  */
static	ANTLR3_BITWORD FOLLOW_assignment_in_predicateStatement1657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_in_predicateStatement1657	= { FOLLOW_assignment_in_predicateStatement1657_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_rule1668  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_rule1668_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_rule1668	= { FOLLOW_IDENT_in_rule1668_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_48_in_rule1670  */
static	ANTLR3_BITWORD FOLLOW_48_in_rule1670_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_48_in_rule1670	= { FOLLOW_48_in_rule1670_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_rule1673  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_rule1673_bits[]	= { ANTLR3_UINT64_LIT(0xFCA00428F8000400), ANTLR3_UINT64_LIT(0x000000000001FFFF) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_rule1673	= { FOLLOW_IDENT_in_rule1673_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleBlock_in_rule1675  */
static	ANTLR3_BITWORD FOLLOW_ruleBlock_in_rule1675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleBlock_in_rule1675	= { FOLLOW_ruleBlock_in_rule1675_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_ruleBlock1686  */
static	ANTLR3_BITWORD FOLLOW_35_in_ruleBlock1686_bits[]	= { ANTLR3_UINT64_LIT(0xFCA00438F8000400), ANTLR3_UINT64_LIT(0x000000000001FFFF) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_ruleBlock1686	= { FOLLOW_35_in_ruleBlock1686_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleStatement_in_ruleBlock1689  */
static	ANTLR3_BITWORD FOLLOW_ruleStatement_in_ruleBlock1689_bits[]	= { ANTLR3_UINT64_LIT(0xFCA00438F8000400), ANTLR3_UINT64_LIT(0x000000000001FFFF) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleStatement_in_ruleBlock1689	= { FOLLOW_ruleStatement_in_ruleBlock1689_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_ruleBlock1692  */
static	ANTLR3_BITWORD FOLLOW_36_in_ruleBlock1692_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_ruleBlock1692	= { FOLLOW_36_in_ruleBlock1692_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleStatement_in_ruleBlock1698  */
static	ANTLR3_BITWORD FOLLOW_ruleStatement_in_ruleBlock1698_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleStatement_in_ruleBlock1698	= { FOLLOW_ruleStatement_in_ruleBlock1698_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relation_in_ruleStatement1717  */
static	ANTLR3_BITWORD FOLLOW_relation_in_ruleStatement1717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relation_in_ruleStatement1717	= { FOLLOW_relation_in_ruleStatement1717_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_ruleStatement1722  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_ruleStatement1722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_ruleStatement1722	= { FOLLOW_variableDeclaration_in_ruleStatement1722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constraintInstantiation_in_ruleStatement1727  */
static	ANTLR3_BITWORD FOLLOW_constraintInstantiation_in_ruleStatement1727_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constraintInstantiation_in_ruleStatement1727	= { FOLLOW_constraintInstantiation_in_ruleStatement1727_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_flowControl_in_ruleStatement1732  */
static	ANTLR3_BITWORD FOLLOW_flowControl_in_ruleStatement1732_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_flowControl_in_ruleStatement1732	= { FOLLOW_flowControl_in_ruleStatement1732_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noopstatement_in_ruleStatement1737  */
static	ANTLR3_BITWORD FOLLOW_noopstatement_in_ruleStatement1737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noopstatement_in_ruleStatement1737	= { FOLLOW_noopstatement_in_ruleStatement1737_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type0  */
static	ANTLR3_BITWORD FOLLOW_set_in_type0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type0	= { FOLLOW_set_in_type0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_relation1779  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_relation1779_bits[]	= { ANTLR3_UINT64_LIT(0xFC00040000000400), ANTLR3_UINT64_LIT(0x000000000001FFFF) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_relation1779	= { FOLLOW_IDENT_in_relation1779_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_42_in_relation1785  */
static	ANTLR3_BITWORD FOLLOW_42_in_relation1785_bits[]	= { ANTLR3_UINT64_LIT(0xFC00040000000400), ANTLR3_UINT64_LIT(0x000000000001FFFF) };
static  ANTLR3_BITSET_LIST FOLLOW_42_in_relation1785	= { FOLLOW_42_in_relation1785_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_temporalRelation_in_relation1789  */
static	ANTLR3_BITWORD FOLLOW_temporalRelation_in_relation1789_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_temporalRelation_in_relation1789	= { FOLLOW_temporalRelation_in_relation1789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_predicateArgumentList_in_relation1791  */
static	ANTLR3_BITWORD FOLLOW_predicateArgumentList_in_relation1791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_predicateArgumentList_in_relation1791	= { FOLLOW_predicateArgumentList_in_relation1791_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_relation1793  */
static	ANTLR3_BITWORD FOLLOW_27_in_relation1793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_relation1793	= { FOLLOW_27_in_relation1793_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_49_in_problemStmt1831  */
static	ANTLR3_BITWORD FOLLOW_49_in_problemStmt1831_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_49_in_problemStmt1831	= { FOLLOW_49_in_problemStmt1831_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_50_in_problemStmt1836  */
static	ANTLR3_BITWORD FOLLOW_50_in_problemStmt1836_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_50_in_problemStmt1836	= { FOLLOW_50_in_problemStmt1836_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_51_in_problemStmt1841  */
static	ANTLR3_BITWORD FOLLOW_51_in_problemStmt1841_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_51_in_problemStmt1841	= { FOLLOW_51_in_problemStmt1841_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_predicateArgumentList_in_problemStmt1845  */
static	ANTLR3_BITWORD FOLLOW_predicateArgumentList_in_problemStmt1845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_predicateArgumentList_in_problemStmt1845	= { FOLLOW_predicateArgumentList_in_problemStmt1845_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_problemStmt1847  */
static	ANTLR3_BITWORD FOLLOW_27_in_problemStmt1847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_problemStmt1847	= { FOLLOW_27_in_problemStmt1847_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_predicateArgumentList1867  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_predicateArgumentList1867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_predicateArgumentList1867	= { FOLLOW_IDENT_in_predicateArgumentList1867_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_predicateArgumentList1872  */
static	ANTLR3_BITWORD FOLLOW_38_in_predicateArgumentList1872_bits[]	= { ANTLR3_UINT64_LIT(0x0000048000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_predicateArgumentList1872	= { FOLLOW_38_in_predicateArgumentList1872_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_predicateArguments_in_predicateArgumentList1875  */
static	ANTLR3_BITWORD FOLLOW_predicateArguments_in_predicateArgumentList1875_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_predicateArguments_in_predicateArgumentList1875	= { FOLLOW_predicateArguments_in_predicateArgumentList1875_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_predicateArgumentList1878  */
static	ANTLR3_BITWORD FOLLOW_39_in_predicateArgumentList1878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_predicateArgumentList1878	= { FOLLOW_39_in_predicateArgumentList1878_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_predicateArgument_in_predicateArguments1890  */
static	ANTLR3_BITWORD FOLLOW_predicateArgument_in_predicateArguments1890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_predicateArgument_in_predicateArguments1890	= { FOLLOW_predicateArgument_in_predicateArguments1890_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_predicateArguments1893  */
static	ANTLR3_BITWORD FOLLOW_33_in_predicateArguments1893_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_predicateArguments1893	= { FOLLOW_33_in_predicateArguments1893_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_predicateArgument_in_predicateArguments1896  */
static	ANTLR3_BITWORD FOLLOW_predicateArgument_in_predicateArguments1896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_predicateArgument_in_predicateArguments1896	= { FOLLOW_predicateArgument_in_predicateArguments1896_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_predicateArgument1909  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_predicateArgument1909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000402) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_predicateArgument1909	= { FOLLOW_qualified_in_predicateArgument1909_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_predicateArgument1911  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_predicateArgument1911_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_predicateArgument1911	= { FOLLOW_IDENT_in_predicateArgument1911_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_constraintInstantiation1935  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_constraintInstantiation1935_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_constraintInstantiation1935	= { FOLLOW_IDENT_in_constraintInstantiation1935_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_constraintInstantiation1937  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_constraintInstantiation1937_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_constraintInstantiation1937	= { FOLLOW_variableArgumentList_in_constraintInstantiation1937_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_constraintInstantiation1939  */
static	ANTLR3_BITWORD FOLLOW_27_in_constraintInstantiation1939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_constraintInstantiation1939	= { FOLLOW_27_in_constraintInstantiation1939_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_52_in_superInvocation1963  */
static	ANTLR3_BITWORD FOLLOW_52_in_superInvocation1963_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_52_in_superInvocation1963	= { FOLLOW_52_in_superInvocation1963_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_superInvocation1966  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_superInvocation1966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_superInvocation1966	= { FOLLOW_variableArgumentList_in_superInvocation1966_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_superInvocation1968  */
static	ANTLR3_BITWORD FOLLOW_27_in_superInvocation1968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_superInvocation1968	= { FOLLOW_27_in_superInvocation1968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_variableArgumentList1980  */
static	ANTLR3_BITWORD FOLLOW_38_in_variableArgumentList1980_bits[]	= { ANTLR3_UINT64_LIT(0x0000068900003C00), ANTLR3_UINT64_LIT(0x00000000003E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_variableArgumentList1980	= { FOLLOW_38_in_variableArgumentList1980_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArguments_in_variableArgumentList1983  */
static	ANTLR3_BITWORD FOLLOW_variableArguments_in_variableArgumentList1983_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArguments_in_variableArgumentList1983	= { FOLLOW_variableArguments_in_variableArgumentList1983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_variableArgumentList1986  */
static	ANTLR3_BITWORD FOLLOW_39_in_variableArgumentList1986_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_variableArgumentList1986	= { FOLLOW_39_in_variableArgumentList1986_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgument_in_variableArguments1998  */
static	ANTLR3_BITWORD FOLLOW_variableArgument_in_variableArguments1998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgument_in_variableArguments1998	= { FOLLOW_variableArgument_in_variableArguments1998_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_variableArguments2001  */
static	ANTLR3_BITWORD FOLLOW_33_in_variableArguments2001_bits[]	= { ANTLR3_UINT64_LIT(0x0000060900003C00), ANTLR3_UINT64_LIT(0x00000000003E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_variableArguments2001	= { FOLLOW_33_in_variableArguments2001_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgument_in_variableArguments2004  */
static	ANTLR3_BITWORD FOLLOW_variableArgument_in_variableArguments2004_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgument_in_variableArguments2004	= { FOLLOW_variableArgument_in_variableArguments2004_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_anyValue_in_variableArgument2018  */
static	ANTLR3_BITWORD FOLLOW_anyValue_in_variableArgument2018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_anyValue_in_variableArgument2018	= { FOLLOW_anyValue_in_variableArgument2018_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_typeArgumentList2029  */
static	ANTLR3_BITWORD FOLLOW_38_in_typeArgumentList2029_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_typeArgumentList2029	= { FOLLOW_38_in_typeArgumentList2029_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeArguments_in_typeArgumentList2032  */
static	ANTLR3_BITWORD FOLLOW_typeArguments_in_typeArgumentList2032_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_typeArguments_in_typeArgumentList2032	= { FOLLOW_typeArguments_in_typeArgumentList2032_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_typeArgumentList2035  */
static	ANTLR3_BITWORD FOLLOW_39_in_typeArgumentList2035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_typeArgumentList2035	= { FOLLOW_39_in_typeArgumentList2035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeArgument_in_typeArguments2047  */
static	ANTLR3_BITWORD FOLLOW_typeArgument_in_typeArguments2047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_typeArgument_in_typeArguments2047	= { FOLLOW_typeArgument_in_typeArguments2047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_typeArguments2050  */
static	ANTLR3_BITWORD FOLLOW_33_in_typeArguments2050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_typeArguments2050	= { FOLLOW_33_in_typeArguments2050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeArgument_in_typeArguments2053  */
static	ANTLR3_BITWORD FOLLOW_typeArgument_in_typeArguments2053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_typeArgument_in_typeArguments2053	= { FOLLOW_typeArgument_in_typeArguments2053_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_typeArgument2066  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_typeArgument2066_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_typeArgument2066	= { FOLLOW_IDENT_in_typeArgument2066_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_53_in_flowControl2077  */
static	ANTLR3_BITWORD FOLLOW_53_in_flowControl2077_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_53_in_flowControl2077	= { FOLLOW_53_in_flowControl2077_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_guardExpression_in_flowControl2080  */
static	ANTLR3_BITWORD FOLLOW_guardExpression_in_flowControl2080_bits[]	= { ANTLR3_UINT64_LIT(0xFCA00428F8000400), ANTLR3_UINT64_LIT(0x000000000001FFFF) };
static  ANTLR3_BITSET_LIST FOLLOW_guardExpression_in_flowControl2080	= { FOLLOW_guardExpression_in_flowControl2080_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleBlock_in_flowControl2082  */
static	ANTLR3_BITWORD FOLLOW_ruleBlock_in_flowControl2082_bits[]	= { ANTLR3_UINT64_LIT(0x0040000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleBlock_in_flowControl2082	= { FOLLOW_ruleBlock_in_flowControl2082_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_54_in_flowControl2092  */
static	ANTLR3_BITWORD FOLLOW_54_in_flowControl2092_bits[]	= { ANTLR3_UINT64_LIT(0xFCA00428F8000400), ANTLR3_UINT64_LIT(0x000000000001FFFF) };
static  ANTLR3_BITSET_LIST FOLLOW_54_in_flowControl2092	= { FOLLOW_54_in_flowControl2092_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleBlock_in_flowControl2095  */
static	ANTLR3_BITWORD FOLLOW_ruleBlock_in_flowControl2095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleBlock_in_flowControl2095	= { FOLLOW_ruleBlock_in_flowControl2095_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_55_in_flowControl2102  */
static	ANTLR3_BITWORD FOLLOW_55_in_flowControl2102_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_55_in_flowControl2102	= { FOLLOW_55_in_flowControl2102_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_flowControl2105  */
static	ANTLR3_BITWORD FOLLOW_38_in_flowControl2105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_flowControl2105	= { FOLLOW_38_in_flowControl2105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_flowControl2108  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_flowControl2108_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_flowControl2108	= { FOLLOW_IDENT_in_flowControl2108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_44_in_flowControl2110  */
static	ANTLR3_BITWORD FOLLOW_44_in_flowControl2110_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_44_in_flowControl2110	= { FOLLOW_44_in_flowControl2110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_flowControl2113  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_flowControl2113_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_flowControl2113	= { FOLLOW_qualified_in_flowControl2113_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_flowControl2115  */
static	ANTLR3_BITWORD FOLLOW_39_in_flowControl2115_bits[]	= { ANTLR3_UINT64_LIT(0xFCA00428F8000400), ANTLR3_UINT64_LIT(0x000000000001FFFF) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_flowControl2115	= { FOLLOW_39_in_flowControl2115_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ruleBlock_in_flowControl2118  */
static	ANTLR3_BITWORD FOLLOW_ruleBlock_in_flowControl2118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ruleBlock_in_flowControl2118	= { FOLLOW_ruleBlock_in_flowControl2118_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_guardExpression2132  */
static	ANTLR3_BITWORD FOLLOW_38_in_guardExpression2132_bits[]	= { ANTLR3_UINT64_LIT(0x0000060900003C00), ANTLR3_UINT64_LIT(0x00000000003E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_guardExpression2132	= { FOLLOW_38_in_guardExpression2132_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_anyValue_in_guardExpression2135  */
static	ANTLR3_BITWORD FOLLOW_anyValue_in_guardExpression2135_bits[]	= { ANTLR3_UINT64_LIT(0x0300008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_anyValue_in_guardExpression2135	= { FOLLOW_anyValue_in_guardExpression2135_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_56_in_guardExpression2139  */
static	ANTLR3_BITWORD FOLLOW_56_in_guardExpression2139_bits[]	= { ANTLR3_UINT64_LIT(0x0000060900003C00), ANTLR3_UINT64_LIT(0x00000000003E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_56_in_guardExpression2139	= { FOLLOW_56_in_guardExpression2139_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_57_in_guardExpression2144  */
static	ANTLR3_BITWORD FOLLOW_57_in_guardExpression2144_bits[]	= { ANTLR3_UINT64_LIT(0x0000060900003C00), ANTLR3_UINT64_LIT(0x00000000003E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_57_in_guardExpression2144	= { FOLLOW_57_in_guardExpression2144_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_anyValue_in_guardExpression2148  */
static	ANTLR3_BITWORD FOLLOW_anyValue_in_guardExpression2148_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_anyValue_in_guardExpression2148	= { FOLLOW_anyValue_in_guardExpression2148_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_guardExpression2152  */
static	ANTLR3_BITWORD FOLLOW_39_in_guardExpression2152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_guardExpression2152	= { FOLLOW_39_in_guardExpression2152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_allocation_in_allocationStmt2174  */
static	ANTLR3_BITWORD FOLLOW_allocation_in_allocationStmt2174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_allocation_in_allocationStmt2174	= { FOLLOW_allocation_in_allocationStmt2174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_allocationStmt2176  */
static	ANTLR3_BITWORD FOLLOW_27_in_allocationStmt2176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_allocationStmt2176	= { FOLLOW_27_in_allocationStmt2176_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_temporalRelation0  */
static	ANTLR3_BITWORD FOLLOW_set_in_temporalRelation0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_temporalRelation0	= { FOLLOW_set_in_temporalRelation0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_numericLiteral2531  */
static	ANTLR3_BITWORD FOLLOW_INT_in_numericLiteral2531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_numericLiteral2531	= { FOLLOW_INT_in_numericLiteral2531_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_numericLiteral2536  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_numericLiteral2536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_numericLiteral2536	= { FOLLOW_FLOAT_in_numericLiteral2536_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_81_in_numericLiteral2542  */
static	ANTLR3_BITWORD FOLLOW_81_in_numericLiteral2542_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_81_in_numericLiteral2542	= { FOLLOW_81_in_numericLiteral2542_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_numericLiteral2547  */
static	ANTLR3_BITWORD FOLLOW_82_in_numericLiteral2547_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_numericLiteral2547	= { FOLLOW_82_in_numericLiteral2547_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_numericLiteral2552  */
static	ANTLR3_BITWORD FOLLOW_83_in_numericLiteral2552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_numericLiteral2552	= { FOLLOW_83_in_numericLiteral2552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_boolLiteral0  */
static	ANTLR3_BITWORD FOLLOW_set_in_boolLiteral0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_boolLiteral0	= { FOLLOW_set_in_boolLiteral0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qualified_in_methodInvocation2588  */
static	ANTLR3_BITWORD FOLLOW_qualified_in_methodInvocation2588_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qualified_in_methodInvocation2588	= { FOLLOW_qualified_in_methodInvocation2588_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_methodInvocation2590  */
static	ANTLR3_BITWORD FOLLOW_43_in_methodInvocation2590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000003FC00000) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_methodInvocation2590	= { FOLLOW_43_in_methodInvocation2590_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_methodInvocation2597  */
static	ANTLR3_BITWORD FOLLOW_86_in_methodInvocation2597_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_methodInvocation2597	= { FOLLOW_86_in_methodInvocation2597_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_methodInvocation2600  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_methodInvocation2600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_methodInvocation2600	= { FOLLOW_variableArgumentList_in_methodInvocation2600_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_methodInvocation2626  */
static	ANTLR3_BITWORD FOLLOW_87_in_methodInvocation2626_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_methodInvocation2626	= { FOLLOW_87_in_methodInvocation2626_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_methodInvocation2629  */
static	ANTLR3_BITWORD FOLLOW_38_in_methodInvocation2629_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_methodInvocation2629	= { FOLLOW_38_in_methodInvocation2629_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_methodInvocation2632  */
static	ANTLR3_BITWORD FOLLOW_39_in_methodInvocation2632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_methodInvocation2632	= { FOLLOW_39_in_methodInvocation2632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_88_in_methodInvocation2659  */
static	ANTLR3_BITWORD FOLLOW_88_in_methodInvocation2659_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_88_in_methodInvocation2659	= { FOLLOW_88_in_methodInvocation2659_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_methodInvocation2662  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_methodInvocation2662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_methodInvocation2662	= { FOLLOW_variableArgumentList_in_methodInvocation2662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_89_in_methodInvocation2668  */
static	ANTLR3_BITWORD FOLLOW_89_in_methodInvocation2668_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_89_in_methodInvocation2668	= { FOLLOW_89_in_methodInvocation2668_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_methodInvocation2671  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_methodInvocation2671_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_methodInvocation2671	= { FOLLOW_variableArgumentList_in_methodInvocation2671_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_methodInvocation2697  */
static	ANTLR3_BITWORD FOLLOW_90_in_methodInvocation2697_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_methodInvocation2697	= { FOLLOW_90_in_methodInvocation2697_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_methodInvocation2700  */
static	ANTLR3_BITWORD FOLLOW_38_in_methodInvocation2700_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_methodInvocation2700	= { FOLLOW_38_in_methodInvocation2700_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_methodInvocation2703  */
static	ANTLR3_BITWORD FOLLOW_39_in_methodInvocation2703_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_methodInvocation2703	= { FOLLOW_39_in_methodInvocation2703_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_91_in_methodInvocation2710  */
static	ANTLR3_BITWORD FOLLOW_91_in_methodInvocation2710_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_91_in_methodInvocation2710	= { FOLLOW_91_in_methodInvocation2710_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableArgumentList_in_methodInvocation2713  */
static	ANTLR3_BITWORD FOLLOW_variableArgumentList_in_methodInvocation2713_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableArgumentList_in_methodInvocation2713	= { FOLLOW_variableArgumentList_in_methodInvocation2713_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_methodInvocation2719  */
static	ANTLR3_BITWORD FOLLOW_92_in_methodInvocation2719_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_methodInvocation2719	= { FOLLOW_92_in_methodInvocation2719_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_methodInvocation2722  */
static	ANTLR3_BITWORD FOLLOW_38_in_methodInvocation2722_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_methodInvocation2722	= { FOLLOW_38_in_methodInvocation2722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_methodInvocation2725  */
static	ANTLR3_BITWORD FOLLOW_39_in_methodInvocation2725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_methodInvocation2725	= { FOLLOW_39_in_methodInvocation2725_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_methodInvocation2732  */
static	ANTLR3_BITWORD FOLLOW_93_in_methodInvocation2732_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_methodInvocation2732	= { FOLLOW_93_in_methodInvocation2732_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_methodInvocation2735  */
static	ANTLR3_BITWORD FOLLOW_38_in_methodInvocation2735_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_methodInvocation2735	= { FOLLOW_38_in_methodInvocation2735_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_methodInvocation2738  */
static	ANTLR3_BITWORD FOLLOW_39_in_methodInvocation2738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_methodInvocation2738	= { FOLLOW_39_in_methodInvocation2738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_methodInvocation2745  */
static	ANTLR3_BITWORD FOLLOW_27_in_methodInvocation2745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_methodInvocation2745	= { FOLLOW_27_in_methodInvocation2745_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_methodInvocation2752  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_methodInvocation2752_bits[]	= { ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_methodInvocation2752	= { FOLLOW_IDENT_in_methodInvocation2752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_43_in_methodInvocation2754  */
static	ANTLR3_BITWORD FOLLOW_43_in_methodInvocation2754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_43_in_methodInvocation2754	= { FOLLOW_43_in_methodInvocation2754_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_94_in_methodInvocation2759  */
static	ANTLR3_BITWORD FOLLOW_94_in_methodInvocation2759_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_94_in_methodInvocation2759	= { FOLLOW_94_in_methodInvocation2759_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_methodInvocation2762  */
static	ANTLR3_BITWORD FOLLOW_38_in_methodInvocation2762_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_methodInvocation2762	= { FOLLOW_38_in_methodInvocation2762_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_methodInvocation2765  */
static	ANTLR3_BITWORD FOLLOW_39_in_methodInvocation2765_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_methodInvocation2765	= { FOLLOW_39_in_methodInvocation2765_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_methodInvocation2768  */
static	ANTLR3_BITWORD FOLLOW_27_in_methodInvocation2768_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_methodInvocation2768	= { FOLLOW_27_in_methodInvocation2768_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_tokenNameList2780  */
static	ANTLR3_BITWORD FOLLOW_38_in_tokenNameList2780_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_tokenNameList2780	= { FOLLOW_38_in_tokenNameList2780_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tokenNames_in_tokenNameList2784  */
static	ANTLR3_BITWORD FOLLOW_tokenNames_in_tokenNameList2784_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_tokenNames_in_tokenNameList2784	= { FOLLOW_tokenNames_in_tokenNameList2784_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_tokenNameList2788  */
static	ANTLR3_BITWORD FOLLOW_39_in_tokenNameList2788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_tokenNameList2788	= { FOLLOW_39_in_tokenNameList2788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_tokenNames2800  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_tokenNames2800_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_tokenNames2800	= { FOLLOW_IDENT_in_tokenNames2800_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_33_in_tokenNames2803  */
static	ANTLR3_BITWORD FOLLOW_33_in_tokenNames2803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_33_in_tokenNames2803	= { FOLLOW_33_in_tokenNames2803_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_tokenNames2806  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_tokenNames2806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_tokenNames2806	= { FOLLOW_IDENT_in_tokenNames2806_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_noopstatement2826  */
static	ANTLR3_BITWORD FOLLOW_27_in_noopstatement2826_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_noopstatement2826	= { FOLLOW_27_in_noopstatement2826_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_constraintSignature2852  */
static	ANTLR3_BITWORD FOLLOW_95_in_constraintSignature2852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_constraintSignature2852	= { FOLLOW_95_in_constraintSignature2852_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_constraintSignature2856  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_constraintSignature2856_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_constraintSignature2856	= { FOLLOW_IDENT_in_constraintSignature2856_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeArgumentList_in_constraintSignature2860  */
static	ANTLR3_BITWORD FOLLOW_typeArgumentList_in_constraintSignature2860_bits[]	= { ANTLR3_UINT64_LIT(0x0000400808000000) };
static  ANTLR3_BITSET_LIST FOLLOW_typeArgumentList_in_constraintSignature2860	= { FOLLOW_typeArgumentList_in_constraintSignature2860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_46_in_constraintSignature2879  */
static	ANTLR3_BITWORD FOLLOW_46_in_constraintSignature2879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_46_in_constraintSignature2879	= { FOLLOW_46_in_constraintSignature2879_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_constraintSignature2883  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_constraintSignature2883_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_constraintSignature2883	= { FOLLOW_IDENT_in_constraintSignature2883_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_typeArgumentList_in_constraintSignature2887  */
static	ANTLR3_BITWORD FOLLOW_typeArgumentList_in_constraintSignature2887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000808000000) };
static  ANTLR3_BITSET_LIST FOLLOW_typeArgumentList_in_constraintSignature2887	= { FOLLOW_typeArgumentList_in_constraintSignature2887_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signatureBlock_in_constraintSignature2911  */
static	ANTLR3_BITWORD FOLLOW_signatureBlock_in_constraintSignature2911_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_signatureBlock_in_constraintSignature2911	= { FOLLOW_signatureBlock_in_constraintSignature2911_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_constraintSignature2915  */
static	ANTLR3_BITWORD FOLLOW_27_in_constraintSignature2915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_constraintSignature2915	= { FOLLOW_27_in_constraintSignature2915_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_35_in_signatureBlock2998  */
static	ANTLR3_BITWORD FOLLOW_35_in_signatureBlock2998_bits[]	= { ANTLR3_UINT64_LIT(0x0000005000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_35_in_signatureBlock2998	= { FOLLOW_35_in_signatureBlock2998_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signatureExpression_in_signatureBlock3002  */
static	ANTLR3_BITWORD FOLLOW_signatureExpression_in_signatureBlock3002_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_signatureExpression_in_signatureBlock3002	= { FOLLOW_signatureExpression_in_signatureBlock3002_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_signatureBlock3006  */
static	ANTLR3_BITWORD FOLLOW_36_in_signatureBlock3006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_signatureBlock3006	= { FOLLOW_36_in_signatureBlock3006_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signatureAtom_in_signatureExpression3038  */
static	ANTLR3_BITWORD FOLLOW_signatureAtom_in_signatureExpression3038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000300000000) };
static  ANTLR3_BITSET_LIST FOLLOW_signatureAtom_in_signatureExpression3038	= { FOLLOW_signatureAtom_in_signatureExpression3038_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_96_in_signatureExpression3042  */
static	ANTLR3_BITWORD FOLLOW_96_in_signatureExpression3042_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_96_in_signatureExpression3042	= { FOLLOW_96_in_signatureExpression3042_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_97_in_signatureExpression3047  */
static	ANTLR3_BITWORD FOLLOW_97_in_signatureExpression3047_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_97_in_signatureExpression3047	= { FOLLOW_97_in_signatureExpression3047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signatureAtom_in_signatureExpression3051  */
static	ANTLR3_BITWORD FOLLOW_signatureAtom_in_signatureExpression3051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000300000000) };
static  ANTLR3_BITSET_LIST FOLLOW_signatureAtom_in_signatureExpression3051	= { FOLLOW_signatureAtom_in_signatureExpression3051_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_signatureAtom3084  */
static	ANTLR3_BITWORD FOLLOW_38_in_signatureAtom3084_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_signatureAtom3084	= { FOLLOW_38_in_signatureAtom3084_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signatureExpression_in_signatureAtom3087  */
static	ANTLR3_BITWORD FOLLOW_signatureExpression_in_signatureAtom3087_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_signatureExpression_in_signatureAtom3087	= { FOLLOW_signatureExpression_in_signatureAtom3087_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_39_in_signatureAtom3089  */
static	ANTLR3_BITWORD FOLLOW_39_in_signatureAtom3089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_39_in_signatureAtom3089	= { FOLLOW_39_in_signatureAtom3089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_signatureAtom3108  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_signatureAtom3108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_signatureAtom3108	= { FOLLOW_IDENT_in_signatureAtom3108_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_signatureAtom3110  */
static	ANTLR3_BITWORD FOLLOW_98_in_signatureAtom3110_bits[]	= { ANTLR3_UINT64_LIT(0x00000020F0000400), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_signatureAtom3110	= { FOLLOW_98_in_signatureAtom3110_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_in_signatureAtom3114  */
static	ANTLR3_BITWORD FOLLOW_type_in_signatureAtom3114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_type_in_signatureAtom3114	= { FOLLOW_type_in_signatureAtom3114_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_99_in_signatureAtom3118  */
static	ANTLR3_BITWORD FOLLOW_99_in_signatureAtom3118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_99_in_signatureAtom3118	= { FOLLOW_99_in_signatureAtom3118_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    24:1: nddlStatement : ( typeDefinition | variableDeclaration | assignment | constraintInstantiation | classDeclaration | allocationStmt | rule | problemStmt | relation | methodInvocation | noopstatement | constraintSignature );
 */
static const ANTLR3_INT32 dfa2_eot[18] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_eof[18] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_min[18] =
    {
	10, -1, -1, 10, 40, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 10, 40
    };
static const ANTLR3_INT32 dfa2_max[18] =
    {
	95, -1, -1, 80, 80, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, 93, 44
    };
static const ANTLR3_INT32 dfa2_accept[18] =
    {
	-1, 1, 2, -1, -1, 5, 6, 8, 9, 10, 11, 12, 7, -1, 4, 3, -1, -1
    };
static const ANTLR3_INT32 dfa2_special[18] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa2_T_empty	    NULL

static const ANTLR3_INT32 dfa2_T0[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9
    };static const ANTLR3_INT32 dfa2_T1[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9
    };static const ANTLR3_INT32 dfa2_T2[] =
    {
	15, -1, -1, 16, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa2_T3[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, 15, -1, -1, 13, 15, -1, 
	-1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    };static const ANTLR3_INT32 dfa2_T4[] =
    {
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 10, 2, 
	2, 2, 2, -1, -1, -1, -1, -1, 2, -1, -1, -1, 6, 4, -1, -1, 5, -1, -1, -1, 
	7, 7, 7, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 9, 11
    };static const ANTLR3_INT32 dfa2_T5[] =
    {
	15, -1, -1, 16, 15
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa2_transitions[] =
{
    dfa2_T4, dfa2_T_empty, dfa2_T_empty, dfa2_T3, dfa2_T2, dfa2_T_empty, 
    dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, 
    dfa2_T_empty, dfa2_T_empty, dfa2_T1, dfa2_T_empty, dfa2_T_empty, dfa2_T0, 
    dfa2_T5	
};


/* Declare tracking structure for Cyclic DFA 2
 */
static
ANTLR3_CYCLIC_DFA cdfa2
    =	{
	    2,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"24:1: nddlStatement : ( typeDefinition | variableDeclaration | assignment | constraintInstantiation | classDeclaration | allocationStmt | rule | problemStmt | relation | methodInvocation | noopstatement | constraintSignature );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa2_eot,	    /* EOT table			    */
	    dfa2_eof,	    /* EOF table			    */
	    dfa2_min,	    /* Minimum tokens for each state    */
	    dfa2_max,	    /* Maximum tokens for each state    */
	    dfa2_accept,	/* Accept table			    */
	    dfa2_special,	/* Special transition states	    */
	    dfa2_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 2
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    275:36: ( options {k=1; } : 'else' ruleBlock )?
 */
static const ANTLR3_INT32 dfa42_eot[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa42_eof[20] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa42_min[20] =
    {
	10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa42_max[20] =
    {
	95, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa42_accept[20] =
    {
	-1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa42_special[20] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa42_T_empty	    NULL

static const ANTLR3_INT32 dfa42_T0[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, -1, -1, 2, -1, -1, -1, 
	2, 2, 2, -1, 2, 1, 2, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa42_transitions[] =
{
    dfa42_T0, dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, 
    dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, 
    dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, 
    dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, dfa42_T_empty, dfa42_T_empty	
};


/* Declare tracking structure for Cyclic DFA 42
 */
static
ANTLR3_CYCLIC_DFA cdfa42
    =	{
	    42,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"275:36: ( options {k=1; } : 'else' ruleBlock )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa42_eot,	    /* EOT table			    */
	    dfa42_eof,	    /* EOF table			    */
	    dfa42_min,	    /* Minimum tokens for each state    */
	    dfa42_max,	    /* Maximum tokens for each state    */
	    dfa42_accept,	/* Accept table			    */
	    dfa42_special,	/* Special transition states	    */
	    dfa42_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 42
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start nddl
 * ../base/antlr/NDDL3.g:20:1: nddl : ( nddlStatement )* -> ^( NDDL ( nddlStatement )* ) ;
 */
static NDDL3Parser_nddl_return
nddl(pNDDL3Parser ctx)
{   
    NDDL3Parser_nddl_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_nddlStatement_return nddlStatement1;
    #undef	RETURN_TYPE_nddlStatement1
    #define	RETURN_TYPE_nddlStatement1 NDDL3Parser_nddlStatement_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_nddlStatement;
    /* Initialize rule variables
     */


    root_0 = NULL;

    nddlStatement1.tree = NULL;

    retval.start = LT(1);

    stream_nddlStatement=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule nddlStatement");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:20:6: ( ( nddlStatement )* -> ^( NDDL ( nddlStatement )* ) )
        // ../base/antlr/NDDL3.g:20:8: ( nddlStatement )*
        {

            // ../base/antlr/NDDL3.g:20:8: ( nddlStatement )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == IDENT || ((LA1_0 >= 26) && (LA1_0 <= 31)) || LA1_0 == 37 || ((LA1_0 >= 41) && (LA1_0 <= 42)) || LA1_0 == 45 || ((LA1_0 >= 49) && (LA1_0 <= 51)) || ((LA1_0 >= 58) && (LA1_0 <= 80)) || ((LA1_0 >= 94) && (LA1_0 <= 95))) ) 
                    {
                        alt1=1;
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:20:8: nddlStatement
            	    {
            	        FOLLOWPUSH(FOLLOW_nddlStatement_in_nddl62);
            	        nddlStatement1=nddlStatement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenddlEx;
            	        }

            	        stream_nddlStatement->add(stream_nddlStatement, nddlStatement1.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : nddlStatement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 21:4: -> ^( NDDL ( nddlStatement )* )
            	{
            	    // ../base/antlr/NDDL3.g:21:7: ^( NDDL ( nddlStatement )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NDDL, (pANTLR3_UINT8)"NDDL"), root_1));

            	        // ../base/antlr/NDDL3.g:21:14: ( nddlStatement )*
            	        {
            	        	while ( stream_nddlStatement->hasNext(stream_nddlStatement) ) 
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_nddlStatement->nextTree(stream_nddlStatement));

            	        	}
            	        	stream_nddlStatement->reset(stream_nddlStatement);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenddlEx; /* Prevent compiler warnings */
    rulenddlEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    stream_nddlStatement->free(stream_nddlStatement);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end nddl */

/** 
 * $ANTLR start nddlStatement
 * ../base/antlr/NDDL3.g:24:1: nddlStatement : ( typeDefinition | variableDeclaration | assignment | constraintInstantiation | classDeclaration | allocationStmt | rule | problemStmt | relation | methodInvocation | noopstatement | constraintSignature );
 */
static NDDL3Parser_nddlStatement_return
nddlStatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_nddlStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_typeDefinition_return typeDefinition2;
    #undef	RETURN_TYPE_typeDefinition2
    #define	RETURN_TYPE_typeDefinition2 NDDL3Parser_typeDefinition_return

    NDDL3Parser_variableDeclaration_return variableDeclaration3;
    #undef	RETURN_TYPE_variableDeclaration3
    #define	RETURN_TYPE_variableDeclaration3 NDDL3Parser_variableDeclaration_return

    NDDL3Parser_assignment_return assignment4;
    #undef	RETURN_TYPE_assignment4
    #define	RETURN_TYPE_assignment4 NDDL3Parser_assignment_return

    NDDL3Parser_constraintInstantiation_return constraintInstantiation5;
    #undef	RETURN_TYPE_constraintInstantiation5
    #define	RETURN_TYPE_constraintInstantiation5 NDDL3Parser_constraintInstantiation_return

    NDDL3Parser_classDeclaration_return classDeclaration6;
    #undef	RETURN_TYPE_classDeclaration6
    #define	RETURN_TYPE_classDeclaration6 NDDL3Parser_classDeclaration_return

    NDDL3Parser_allocationStmt_return allocationStmt7;
    #undef	RETURN_TYPE_allocationStmt7
    #define	RETURN_TYPE_allocationStmt7 NDDL3Parser_allocationStmt_return

    NDDL3Parser_rule_return rule8;
    #undef	RETURN_TYPE_rule8
    #define	RETURN_TYPE_rule8 NDDL3Parser_rule_return

    NDDL3Parser_problemStmt_return problemStmt9;
    #undef	RETURN_TYPE_problemStmt9
    #define	RETURN_TYPE_problemStmt9 NDDL3Parser_problemStmt_return

    NDDL3Parser_relation_return relation10;
    #undef	RETURN_TYPE_relation10
    #define	RETURN_TYPE_relation10 NDDL3Parser_relation_return

    NDDL3Parser_methodInvocation_return methodInvocation11;
    #undef	RETURN_TYPE_methodInvocation11
    #define	RETURN_TYPE_methodInvocation11 NDDL3Parser_methodInvocation_return

    NDDL3Parser_noopstatement_return noopstatement12;
    #undef	RETURN_TYPE_noopstatement12
    #define	RETURN_TYPE_noopstatement12 NDDL3Parser_noopstatement_return

    NDDL3Parser_constraintSignature_return constraintSignature13;
    #undef	RETURN_TYPE_constraintSignature13
    #define	RETURN_TYPE_constraintSignature13 NDDL3Parser_constraintSignature_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    typeDefinition2.tree = NULL;

    variableDeclaration3.tree = NULL;

    assignment4.tree = NULL;

    constraintInstantiation5.tree = NULL;

    classDeclaration6.tree = NULL;

    allocationStmt7.tree = NULL;

    rule8.tree = NULL;

    problemStmt9.tree = NULL;

    relation10.tree = NULL;

    methodInvocation11.tree = NULL;

    noopstatement12.tree = NULL;

    constraintSignature13.tree = NULL;

    retval.start = LT(1);

    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:25:9: ( typeDefinition | variableDeclaration | assignment | constraintInstantiation | classDeclaration | allocationStmt | rule | problemStmt | relation | methodInvocation | noopstatement | constraintSignature )
            
            ANTLR3_UINT32 alt2;

            alt2=12;

            alt2 = cdfa2.predict(ctx, RECOGNIZER, ISTREAM, &cdfa2);
            if  (HASEXCEPTION())
            {
                goto rulenddlStatementEx;
            }

            switch (alt2) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:25:11: typeDefinition
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_typeDefinition_in_nddlStatement100);
        	        typeDefinition2=typeDefinition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, typeDefinition2.tree);

        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:26:11: variableDeclaration
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_nddlStatement112);
        	        variableDeclaration3=variableDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, variableDeclaration3.tree);

        	    }
        	    break;
        	case 3:
        	    // ../base/antlr/NDDL3.g:27:17: assignment
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_assignment_in_nddlStatement130);
        	        assignment4=assignment(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, assignment4.tree);

        	    }
        	    break;
        	case 4:
        	    // ../base/antlr/NDDL3.g:28:17: constraintInstantiation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constraintInstantiation_in_nddlStatement148);
        	        constraintInstantiation5=constraintInstantiation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, constraintInstantiation5.tree);

        	    }
        	    break;
        	case 5:
        	    // ../base/antlr/NDDL3.g:29:11: classDeclaration
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_classDeclaration_in_nddlStatement160);
        	        classDeclaration6=classDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, classDeclaration6.tree);

        	    }
        	    break;
        	case 6:
        	    // ../base/antlr/NDDL3.g:30:17: allocationStmt
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_allocationStmt_in_nddlStatement178);
        	        allocationStmt7=allocationStmt(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, allocationStmt7.tree);

        	    }
        	    break;
        	case 7:
        	    // ../base/antlr/NDDL3.g:31:17: rule
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_rule_in_nddlStatement196);
        	        rule8=rule(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, rule8.tree);

        	    }
        	    break;
        	case 8:
        	    // ../base/antlr/NDDL3.g:32:17: problemStmt
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_problemStmt_in_nddlStatement214);
        	        problemStmt9=problemStmt(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, problemStmt9.tree);

        	    }
        	    break;
        	case 9:
        	    // ../base/antlr/NDDL3.g:33:17: relation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_relation_in_nddlStatement232);
        	        relation10=relation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, relation10.tree);

        	    }
        	    break;
        	case 10:
        	    // ../base/antlr/NDDL3.g:34:11: methodInvocation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_methodInvocation_in_nddlStatement244);
        	        methodInvocation11=methodInvocation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, methodInvocation11.tree);

        	    }
        	    break;
        	case 11:
        	    // ../base/antlr/NDDL3.g:35:11: noopstatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noopstatement_in_nddlStatement256);
        	        noopstatement12=noopstatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, noopstatement12.tree);

        	    }
        	    break;
        	case 12:
        	    // ../base/antlr/NDDL3.g:36:17: constraintSignature
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constraintSignature_in_nddlStatement274);
        	        constraintSignature13=constraintSignature(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenddlStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, constraintSignature13.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenddlStatementEx; /* Prevent compiler warnings */
    rulenddlStatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end nddlStatement */

/** 
 * $ANTLR start typeDefinition
 * ../base/antlr/NDDL3.g:39:1: typeDefinition : 'typedef' typeWithBaseDomain IDENT ';' -> ^( 'typedef' IDENT typeWithBaseDomain ) ;
 */
static NDDL3Parser_typeDefinition_return
typeDefinition(pNDDL3Parser ctx)
{   
    NDDL3Parser_typeDefinition_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal14;
    pANTLR3_COMMON_TOKEN    IDENT16;
    pANTLR3_COMMON_TOKEN    char_literal17;
    NDDL3Parser_typeWithBaseDomain_return typeWithBaseDomain15;
    #undef	RETURN_TYPE_typeWithBaseDomain15
    #define	RETURN_TYPE_typeWithBaseDomain15 NDDL3Parser_typeWithBaseDomain_return

    pANTLR3_BASE_TREE string_literal14_tree;
    pANTLR3_BASE_TREE IDENT16_tree;
    pANTLR3_BASE_TREE char_literal17_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_26;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_27;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_typeWithBaseDomain;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal14       = NULL;
    IDENT16       = NULL;
    char_literal17       = NULL;
    typeWithBaseDomain15.tree = NULL;

    retval.start = LT(1);

    string_literal14_tree   = NULL;
    IDENT16_tree   = NULL;
    char_literal17_tree   = NULL;
    stream_IDENT   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); 
    stream_26   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 26"); 
    stream_27   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 27"); 
    stream_typeWithBaseDomain=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule typeWithBaseDomain");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:40:2: ( 'typedef' typeWithBaseDomain IDENT ';' -> ^( 'typedef' IDENT typeWithBaseDomain ) )
        // ../base/antlr/NDDL3.g:40:4: 'typedef' typeWithBaseDomain IDENT ';'
        {
            string_literal14 = (pANTLR3_COMMON_TOKEN) MATCHT(26, &FOLLOW_26_in_typeDefinition292); 
            if  (HASEXCEPTION())
            {
                goto ruletypeDefinitionEx;
            }
             
            stream_26->add(stream_26, string_literal14, NULL);

            FOLLOWPUSH(FOLLOW_typeWithBaseDomain_in_typeDefinition294);
            typeWithBaseDomain15=typeWithBaseDomain(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletypeDefinitionEx;
            }

            stream_typeWithBaseDomain->add(stream_typeWithBaseDomain, typeWithBaseDomain15.tree, NULL);
            IDENT16 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_typeDefinition296); 
            if  (HASEXCEPTION())
            {
                goto ruletypeDefinitionEx;
            }
             
            stream_IDENT->add(stream_IDENT, IDENT16, NULL);

            char_literal17 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_typeDefinition298); 
            if  (HASEXCEPTION())
            {
                goto ruletypeDefinitionEx;
            }
             
            stream_27->add(stream_27, char_literal17, NULL);


             
            /* AST REWRITE
             * elements          : IDENT, 26, typeWithBaseDomain
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 41:4: -> ^( 'typedef' IDENT typeWithBaseDomain )
            	{
            	    // ../base/antlr/NDDL3.g:41:7: ^( 'typedef' IDENT typeWithBaseDomain )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_26->nextNode(stream_26), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT->nextNode(stream_IDENT));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_typeWithBaseDomain->nextTree(stream_typeWithBaseDomain));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeDefinitionEx; /* Prevent compiler warnings */
    ruletypeDefinitionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    stream_IDENT->free(stream_IDENT);
    stream_26->free(stream_26);
    stream_27->free(stream_27);
    stream_typeWithBaseDomain->free(stream_typeWithBaseDomain);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end typeDefinition */

/** 
 * $ANTLR start typeWithBaseDomain
 * ../base/antlr/NDDL3.g:45:1: typeWithBaseDomain : ( 'int' | 'float' | 'bool' | 'string' | IDENT ) domain ;
 */
static NDDL3Parser_typeWithBaseDomain_return
typeWithBaseDomain(pNDDL3Parser ctx)
{   
    NDDL3Parser_typeWithBaseDomain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal18;
    pANTLR3_COMMON_TOKEN    string_literal19;
    pANTLR3_COMMON_TOKEN    string_literal20;
    pANTLR3_COMMON_TOKEN    string_literal21;
    pANTLR3_COMMON_TOKEN    IDENT22;
    NDDL3Parser_domain_return domain23;
    #undef	RETURN_TYPE_domain23
    #define	RETURN_TYPE_domain23 NDDL3Parser_domain_return

    pANTLR3_BASE_TREE string_literal18_tree;
    pANTLR3_BASE_TREE string_literal19_tree;
    pANTLR3_BASE_TREE string_literal20_tree;
    pANTLR3_BASE_TREE string_literal21_tree;
    pANTLR3_BASE_TREE IDENT22_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal18       = NULL;
    string_literal19       = NULL;
    string_literal20       = NULL;
    string_literal21       = NULL;
    IDENT22       = NULL;
    domain23.tree = NULL;

    retval.start = LT(1);

    string_literal18_tree   = NULL;
    string_literal19_tree   = NULL;
    string_literal20_tree   = NULL;
    string_literal21_tree   = NULL;
    IDENT22_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:46:2: ( ( 'int' | 'float' | 'bool' | 'string' | IDENT ) domain )
        // ../base/antlr/NDDL3.g:46:4: ( 'int' | 'float' | 'bool' | 'string' | IDENT ) domain
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // ../base/antlr/NDDL3.g:46:4: ( 'int' | 'float' | 'bool' | 'string' | IDENT )
            {
                int alt3=5;
                switch ( LA(1) ) 
                {
                case 28:
                	{
                		alt3=1;
                	}
                    break;
                case 29:
                	{
                		alt3=2;
                	}
                    break;
                case 30:
                	{
                		alt3=3;
                	}
                    break;
                case 31:
                	{
                		alt3=4;
                	}
                    break;
                case IDENT:
                	{
                		alt3=5;
                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 3;
                    EXCEPTION->state        = 0;


                    goto ruletypeWithBaseDomainEx;
                }

                switch (alt3) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:46:6: 'int'
            	    {
            	        string_literal18 = (pANTLR3_COMMON_TOKEN) MATCHT(28, &FOLLOW_28_in_typeWithBaseDomain325); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletypeWithBaseDomainEx;
            	        }

            	        string_literal18_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal18));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal18_tree, root_0));


            	    }
            	    break;
            	case 2:
            	    // ../base/antlr/NDDL3.g:47:5: 'float'
            	    {
            	        string_literal19 = (pANTLR3_COMMON_TOKEN) MATCHT(29, &FOLLOW_29_in_typeWithBaseDomain332); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletypeWithBaseDomainEx;
            	        }

            	        string_literal19_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal19));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal19_tree, root_0));


            	    }
            	    break;
            	case 3:
            	    // ../base/antlr/NDDL3.g:48:5: 'bool'
            	    {
            	        string_literal20 = (pANTLR3_COMMON_TOKEN) MATCHT(30, &FOLLOW_30_in_typeWithBaseDomain339); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletypeWithBaseDomainEx;
            	        }

            	        string_literal20_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal20));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal20_tree, root_0));


            	    }
            	    break;
            	case 4:
            	    // ../base/antlr/NDDL3.g:49:5: 'string'
            	    {
            	        string_literal21 = (pANTLR3_COMMON_TOKEN) MATCHT(31, &FOLLOW_31_in_typeWithBaseDomain346); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletypeWithBaseDomainEx;
            	        }

            	        string_literal21_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal21));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal21_tree, root_0));


            	    }
            	    break;
            	case 5:
            	    // ../base/antlr/NDDL3.g:50:5: IDENT
            	    {
            	        IDENT22 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_typeWithBaseDomain353); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletypeWithBaseDomainEx;
            	        }

            	        IDENT22_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT22));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, IDENT22_tree, root_0));


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_domain_in_typeWithBaseDomain357);
            domain23=domain(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletypeWithBaseDomainEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, domain23.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeWithBaseDomainEx; /* Prevent compiler warnings */
    ruletypeWithBaseDomainEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end typeWithBaseDomain */

/** 
 * $ANTLR start domain
 * ../base/antlr/NDDL3.g:53:1: domain : ( numericLiteral | intervalNumericDomain | enumeratedNumericDomain | enumeratedStringDomain | enumeratedBoolDomain | enumeratedObjectDomain );
 */
static NDDL3Parser_domain_return
domain(pNDDL3Parser ctx)
{   
    NDDL3Parser_domain_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_numericLiteral_return numericLiteral24;
    #undef	RETURN_TYPE_numericLiteral24
    #define	RETURN_TYPE_numericLiteral24 NDDL3Parser_numericLiteral_return

    NDDL3Parser_intervalNumericDomain_return intervalNumericDomain25;
    #undef	RETURN_TYPE_intervalNumericDomain25
    #define	RETURN_TYPE_intervalNumericDomain25 NDDL3Parser_intervalNumericDomain_return

    NDDL3Parser_enumeratedNumericDomain_return enumeratedNumericDomain26;
    #undef	RETURN_TYPE_enumeratedNumericDomain26
    #define	RETURN_TYPE_enumeratedNumericDomain26 NDDL3Parser_enumeratedNumericDomain_return

    NDDL3Parser_enumeratedStringDomain_return enumeratedStringDomain27;
    #undef	RETURN_TYPE_enumeratedStringDomain27
    #define	RETURN_TYPE_enumeratedStringDomain27 NDDL3Parser_enumeratedStringDomain_return

    NDDL3Parser_enumeratedBoolDomain_return enumeratedBoolDomain28;
    #undef	RETURN_TYPE_enumeratedBoolDomain28
    #define	RETURN_TYPE_enumeratedBoolDomain28 NDDL3Parser_enumeratedBoolDomain_return

    NDDL3Parser_enumeratedObjectDomain_return enumeratedObjectDomain29;
    #undef	RETURN_TYPE_enumeratedObjectDomain29
    #define	RETURN_TYPE_enumeratedObjectDomain29 NDDL3Parser_enumeratedObjectDomain_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    numericLiteral24.tree = NULL;

    intervalNumericDomain25.tree = NULL;

    enumeratedNumericDomain26.tree = NULL;

    enumeratedStringDomain27.tree = NULL;

    enumeratedBoolDomain28.tree = NULL;

    enumeratedObjectDomain29.tree = NULL;

    retval.start = LT(1);

    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:53:9: ( numericLiteral | intervalNumericDomain | enumeratedNumericDomain | enumeratedStringDomain | enumeratedBoolDomain | enumeratedObjectDomain )
            
            ANTLR3_UINT32 alt4;

            alt4=6;

            switch ( LA(1) ) 
            {
            case INT:
            case FLOAT:
            case 81:
            case 82:
            case 83:
            	{
            		alt4=1;
            	}
                break;
            case 32:
            	{
            		alt4=2;
            	}
                break;
            case 35:
            	{
            		switch ( LA(2) ) 
            		{
            		case 84:
            		case 85:
            			{
            				alt4=5;
            			}
            		    break;
            		case INT:
            		case FLOAT:
            		case 81:
            		case 82:
            		case 83:
            			{
            				alt4=3;
            			}
            		    break;
            		case IDENT:
            		case 42:
            			{
            				alt4=6;
            			}
            		    break;
            		case STRING:
            			{
            				alt4=4;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 4;
            		    EXCEPTION->state        = 3;


            		    goto ruledomainEx;
            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto ruledomainEx;
            }

            switch (alt4) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:53:17: numericLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_numericLiteral_in_domain374);
        	        numericLiteral24=numericLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, numericLiteral24.tree);

        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:54:17: intervalNumericDomain
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_intervalNumericDomain_in_domain392);
        	        intervalNumericDomain25=intervalNumericDomain(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, intervalNumericDomain25.tree);

        	    }
        	    break;
        	case 3:
        	    // ../base/antlr/NDDL3.g:55:17: enumeratedNumericDomain
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_enumeratedNumericDomain_in_domain410);
        	        enumeratedNumericDomain26=enumeratedNumericDomain(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, enumeratedNumericDomain26.tree);

        	    }
        	    break;
        	case 4:
        	    // ../base/antlr/NDDL3.g:56:17: enumeratedStringDomain
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_enumeratedStringDomain_in_domain428);
        	        enumeratedStringDomain27=enumeratedStringDomain(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, enumeratedStringDomain27.tree);

        	    }
        	    break;
        	case 5:
        	    // ../base/antlr/NDDL3.g:57:17: enumeratedBoolDomain
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_enumeratedBoolDomain_in_domain446);
        	        enumeratedBoolDomain28=enumeratedBoolDomain(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, enumeratedBoolDomain28.tree);

        	    }
        	    break;
        	case 6:
        	    // ../base/antlr/NDDL3.g:58:17: enumeratedObjectDomain
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_enumeratedObjectDomain_in_domain464);
        	        enumeratedObjectDomain29=enumeratedObjectDomain(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledomainEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, enumeratedObjectDomain29.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruledomainEx; /* Prevent compiler warnings */
    ruledomainEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end domain */

/** 
 * $ANTLR start intervalNumericDomain
 * ../base/antlr/NDDL3.g:61:1: intervalNumericDomain : '[' numericLiteral ( ',' )? numericLiteral ']' ;
 */
static NDDL3Parser_intervalNumericDomain_return
intervalNumericDomain(pNDDL3Parser ctx)
{   
    NDDL3Parser_intervalNumericDomain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal30;
    pANTLR3_COMMON_TOKEN    char_literal32;
    pANTLR3_COMMON_TOKEN    char_literal34;
    NDDL3Parser_numericLiteral_return numericLiteral31;
    #undef	RETURN_TYPE_numericLiteral31
    #define	RETURN_TYPE_numericLiteral31 NDDL3Parser_numericLiteral_return

    NDDL3Parser_numericLiteral_return numericLiteral33;
    #undef	RETURN_TYPE_numericLiteral33
    #define	RETURN_TYPE_numericLiteral33 NDDL3Parser_numericLiteral_return

    pANTLR3_BASE_TREE char_literal30_tree;
    pANTLR3_BASE_TREE char_literal32_tree;
    pANTLR3_BASE_TREE char_literal34_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal30       = NULL;
    char_literal32       = NULL;
    char_literal34       = NULL;
    numericLiteral31.tree = NULL;

    numericLiteral33.tree = NULL;

    retval.start = LT(1);

    char_literal30_tree   = NULL;
    char_literal32_tree   = NULL;
    char_literal34_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:62:9: ( '[' numericLiteral ( ',' )? numericLiteral ']' )
        // ../base/antlr/NDDL3.g:62:17: '[' numericLiteral ( ',' )? numericLiteral ']'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal30 = (pANTLR3_COMMON_TOKEN) MATCHT(32, &FOLLOW_32_in_intervalNumericDomain495); 
            if  (HASEXCEPTION())
            {
                goto ruleintervalNumericDomainEx;
            }

            char_literal30_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal30));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal30_tree, root_0));

            FOLLOWPUSH(FOLLOW_numericLiteral_in_intervalNumericDomain498);
            numericLiteral31=numericLiteral(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleintervalNumericDomainEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, numericLiteral31.tree);

            // ../base/antlr/NDDL3.g:62:37: ( ',' )?
            {
                int alt5=2;
                {
                    int LA5_0 = LA(1);
                    if ( (LA5_0 == 33) ) 
                    {
                        alt5=1;
                    }
                }
                switch (alt5) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:62:38: ','
            	    {
            	        char_literal32 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_intervalNumericDomain501); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleintervalNumericDomainEx;
            	        }


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_numericLiteral_in_intervalNumericDomain506);
            numericLiteral33=numericLiteral(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleintervalNumericDomainEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, numericLiteral33.tree);
            char_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(34, &FOLLOW_34_in_intervalNumericDomain508); 
            if  (HASEXCEPTION())
            {
                goto ruleintervalNumericDomainEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleintervalNumericDomainEx; /* Prevent compiler warnings */
    ruleintervalNumericDomainEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end intervalNumericDomain */

/** 
 * $ANTLR start enumeratedNumericDomain
 * ../base/antlr/NDDL3.g:65:1: enumeratedNumericDomain : '{' numericSet '}' ;
 */
static NDDL3Parser_enumeratedNumericDomain_return
enumeratedNumericDomain(pNDDL3Parser ctx)
{   
    NDDL3Parser_enumeratedNumericDomain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal35;
    pANTLR3_COMMON_TOKEN    char_literal37;
    NDDL3Parser_numericSet_return numericSet36;
    #undef	RETURN_TYPE_numericSet36
    #define	RETURN_TYPE_numericSet36 NDDL3Parser_numericSet_return

    pANTLR3_BASE_TREE char_literal35_tree;
    pANTLR3_BASE_TREE char_literal37_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal35       = NULL;
    char_literal37       = NULL;
    numericSet36.tree = NULL;

    retval.start = LT(1);

    char_literal35_tree   = NULL;
    char_literal37_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:66:9: ( '{' numericSet '}' )
        // ../base/antlr/NDDL3.g:66:17: '{' numericSet '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal35 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_enumeratedNumericDomain540); 
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedNumericDomainEx;
            }

            char_literal35_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal35));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal35_tree, root_0));

            FOLLOWPUSH(FOLLOW_numericSet_in_enumeratedNumericDomain543);
            numericSet36=numericSet(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedNumericDomainEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, numericSet36.tree);
            char_literal37 = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_enumeratedNumericDomain545); 
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedNumericDomainEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenumeratedNumericDomainEx; /* Prevent compiler warnings */
    ruleenumeratedNumericDomainEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enumeratedNumericDomain */

/** 
 * $ANTLR start numericSet
 * ../base/antlr/NDDL3.g:69:1: numericSet : numericLiteral ( ',' numericLiteral )* ;
 */
static NDDL3Parser_numericSet_return
numericSet(pNDDL3Parser ctx)
{   
    NDDL3Parser_numericSet_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal39;
    NDDL3Parser_numericLiteral_return numericLiteral38;
    #undef	RETURN_TYPE_numericLiteral38
    #define	RETURN_TYPE_numericLiteral38 NDDL3Parser_numericLiteral_return

    NDDL3Parser_numericLiteral_return numericLiteral40;
    #undef	RETURN_TYPE_numericLiteral40
    #define	RETURN_TYPE_numericLiteral40 NDDL3Parser_numericLiteral_return

    pANTLR3_BASE_TREE char_literal39_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal39       = NULL;
    numericLiteral38.tree = NULL;

    numericLiteral40.tree = NULL;

    retval.start = LT(1);

    char_literal39_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:70:9: ( numericLiteral ( ',' numericLiteral )* )
        // ../base/antlr/NDDL3.g:70:17: numericLiteral ( ',' numericLiteral )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_numericLiteral_in_numericSet577);
            numericLiteral38=numericLiteral(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulenumericSetEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, numericLiteral38.tree);

            // ../base/antlr/NDDL3.g:70:32: ( ',' numericLiteral )*

            for (;;)
            {
                int alt6=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == 33) ) 
                    {
                        alt6=1;
                    }

                }
                switch (alt6) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:70:33: ',' numericLiteral
            	    {
            	        char_literal39 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_numericSet580); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenumericSetEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_numericLiteral_in_numericSet583);
            	        numericLiteral40=numericLiteral(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenumericSetEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, numericLiteral40.tree);

            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenumericSetEx; /* Prevent compiler warnings */
    rulenumericSetEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end numericSet */

/** 
 * $ANTLR start enumeratedObjectDomain
 * ../base/antlr/NDDL3.g:73:1: enumeratedObjectDomain : '{' objectSet '}' ;
 */
static NDDL3Parser_enumeratedObjectDomain_return
enumeratedObjectDomain(pNDDL3Parser ctx)
{   
    NDDL3Parser_enumeratedObjectDomain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal41;
    pANTLR3_COMMON_TOKEN    char_literal43;
    NDDL3Parser_objectSet_return objectSet42;
    #undef	RETURN_TYPE_objectSet42
    #define	RETURN_TYPE_objectSet42 NDDL3Parser_objectSet_return

    pANTLR3_BASE_TREE char_literal41_tree;
    pANTLR3_BASE_TREE char_literal43_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal41       = NULL;
    char_literal43       = NULL;
    objectSet42.tree = NULL;

    retval.start = LT(1);

    char_literal41_tree   = NULL;
    char_literal43_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:74:9: ( '{' objectSet '}' )
        // ../base/antlr/NDDL3.g:74:17: '{' objectSet '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal41 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_enumeratedObjectDomain616); 
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedObjectDomainEx;
            }

            char_literal41_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal41));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal41_tree, root_0));

            FOLLOWPUSH(FOLLOW_objectSet_in_enumeratedObjectDomain619);
            objectSet42=objectSet(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedObjectDomainEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, objectSet42.tree);
            char_literal43 = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_enumeratedObjectDomain621); 
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedObjectDomainEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenumeratedObjectDomainEx; /* Prevent compiler warnings */
    ruleenumeratedObjectDomainEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enumeratedObjectDomain */

/** 
 * $ANTLR start objectSet
 * ../base/antlr/NDDL3.g:77:1: objectSet : ( constructorInvocation | qualified ) ( ',' ( constructorInvocation | qualified ) )* ;
 */
static NDDL3Parser_objectSet_return
objectSet(pNDDL3Parser ctx)
{   
    NDDL3Parser_objectSet_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal46;
    NDDL3Parser_constructorInvocation_return constructorInvocation44;
    #undef	RETURN_TYPE_constructorInvocation44
    #define	RETURN_TYPE_constructorInvocation44 NDDL3Parser_constructorInvocation_return

    NDDL3Parser_qualified_return qualified45;
    #undef	RETURN_TYPE_qualified45
    #define	RETURN_TYPE_qualified45 NDDL3Parser_qualified_return

    NDDL3Parser_constructorInvocation_return constructorInvocation47;
    #undef	RETURN_TYPE_constructorInvocation47
    #define	RETURN_TYPE_constructorInvocation47 NDDL3Parser_constructorInvocation_return

    NDDL3Parser_qualified_return qualified48;
    #undef	RETURN_TYPE_qualified48
    #define	RETURN_TYPE_qualified48 NDDL3Parser_qualified_return

    pANTLR3_BASE_TREE char_literal46_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal46       = NULL;
    constructorInvocation44.tree = NULL;

    qualified45.tree = NULL;

    constructorInvocation47.tree = NULL;

    qualified48.tree = NULL;

    retval.start = LT(1);

    char_literal46_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:78:9: ( ( constructorInvocation | qualified ) ( ',' ( constructorInvocation | qualified ) )* )
        // ../base/antlr/NDDL3.g:78:17: ( constructorInvocation | qualified ) ( ',' ( constructorInvocation | qualified ) )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // ../base/antlr/NDDL3.g:78:17: ( constructorInvocation | qualified )
            {
                int alt7=2;

                {
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == IDENT) ) 
                    {

                        {
                            int LA7_1 = LA(2);
                            if ( (LA7_1 == 38) ) 
                            {
                                alt7=1;
                            }
                            else if ( (LA7_1 == 33 || LA7_1 == 36 || LA7_1 == 43) ) 
                            {
                                alt7=2;
                            }
                            else 
                            {
                            
                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 7;
                                EXCEPTION->state        = 1;


                                goto ruleobjectSetEx;
                            }
                        }
                    }
                    else if ( (LA7_0 == 42) ) 
                    {
                        alt7=2;
                    }
                    else 
                    {
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 7;
                        EXCEPTION->state        = 0;


                        goto ruleobjectSetEx;
                    }
                }
                switch (alt7) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:78:18: constructorInvocation
            	    {
            	        FOLLOWPUSH(FOLLOW_constructorInvocation_in_objectSet654);
            	        constructorInvocation44=constructorInvocation(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleobjectSetEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, constructorInvocation44.tree);

            	    }
            	    break;
            	case 2:
            	    // ../base/antlr/NDDL3.g:78:40: qualified
            	    {
            	        FOLLOWPUSH(FOLLOW_qualified_in_objectSet656);
            	        qualified45=qualified(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleobjectSetEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, qualified45.tree);

            	    }
            	    break;

                }
            }

            // ../base/antlr/NDDL3.g:78:51: ( ',' ( constructorInvocation | qualified ) )*

            for (;;)
            {
                int alt9=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == 33) ) 
                    {
                        alt9=1;
                    }

                }
                switch (alt9) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:78:52: ',' ( constructorInvocation | qualified )
            	    {
            	        char_literal46 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_objectSet660); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleobjectSetEx;
            	        }


            	        // ../base/antlr/NDDL3.g:78:57: ( constructorInvocation | qualified )
            	        {
            	            int alt8=2;

            	            {
            	                int LA8_0 = LA(1);
            	                if ( (LA8_0 == IDENT) ) 
            	                {

            	                    {
            	                        int LA8_1 = LA(2);
            	                        if ( (LA8_1 == 38) ) 
            	                        {
            	                            alt8=1;
            	                        }
            	                        else if ( (LA8_1 == 33 || LA8_1 == 36 || LA8_1 == 43) ) 
            	                        {
            	                            alt8=2;
            	                        }
            	                        else 
            	                        {
            	                        
            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 8;
            	                            EXCEPTION->state        = 1;


            	                            goto ruleobjectSetEx;
            	                        }
            	                    }
            	                }
            	                else if ( (LA8_0 == 42) ) 
            	                {
            	                    alt8=2;
            	                }
            	                else 
            	                {
            	                
            	                    CONSTRUCTEX();
            	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                    EXCEPTION->message      = (void *)"";
            	                    EXCEPTION->decisionNum  = 8;
            	                    EXCEPTION->state        = 0;


            	                    goto ruleobjectSetEx;
            	                }
            	            }
            	            switch (alt8) 
            	            {
            	        	case 1:
            	        	    // ../base/antlr/NDDL3.g:78:58: constructorInvocation
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_constructorInvocation_in_objectSet664);
            	        	        constructorInvocation47=constructorInvocation(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectSetEx;
            	        	        }

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, constructorInvocation47.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ../base/antlr/NDDL3.g:78:80: qualified
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_qualified_in_objectSet666);
            	        	        qualified48=qualified(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleobjectSetEx;
            	        	        }

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, qualified48.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectSetEx; /* Prevent compiler warnings */
    ruleobjectSetEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end objectSet */

/** 
 * $ANTLR start enumeratedStringDomain
 * ../base/antlr/NDDL3.g:81:1: enumeratedStringDomain : '{' stringSet '}' ;
 */
static NDDL3Parser_enumeratedStringDomain_return
enumeratedStringDomain(pNDDL3Parser ctx)
{   
    NDDL3Parser_enumeratedStringDomain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal49;
    pANTLR3_COMMON_TOKEN    char_literal51;
    NDDL3Parser_stringSet_return stringSet50;
    #undef	RETURN_TYPE_stringSet50
    #define	RETURN_TYPE_stringSet50 NDDL3Parser_stringSet_return

    pANTLR3_BASE_TREE char_literal49_tree;
    pANTLR3_BASE_TREE char_literal51_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal49       = NULL;
    char_literal51       = NULL;
    stringSet50.tree = NULL;

    retval.start = LT(1);

    char_literal49_tree   = NULL;
    char_literal51_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:82:9: ( '{' stringSet '}' )
        // ../base/antlr/NDDL3.g:82:17: '{' stringSet '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal49 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_enumeratedStringDomain700); 
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedStringDomainEx;
            }

            char_literal49_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal49));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal49_tree, root_0));

            FOLLOWPUSH(FOLLOW_stringSet_in_enumeratedStringDomain703);
            stringSet50=stringSet(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedStringDomainEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, stringSet50.tree);
            char_literal51 = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_enumeratedStringDomain705); 
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedStringDomainEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenumeratedStringDomainEx; /* Prevent compiler warnings */
    ruleenumeratedStringDomainEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enumeratedStringDomain */

/** 
 * $ANTLR start stringSet
 * ../base/antlr/NDDL3.g:85:1: stringSet : STRING ( ',' STRING )* ;
 */
static NDDL3Parser_stringSet_return
stringSet(pNDDL3Parser ctx)
{   
    NDDL3Parser_stringSet_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    STRING52;
    pANTLR3_COMMON_TOKEN    char_literal53;
    pANTLR3_COMMON_TOKEN    STRING54;

    pANTLR3_BASE_TREE STRING52_tree;
    pANTLR3_BASE_TREE char_literal53_tree;
    pANTLR3_BASE_TREE STRING54_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    STRING52       = NULL;
    char_literal53       = NULL;
    STRING54       = NULL;
    retval.start = LT(1);

    STRING52_tree   = NULL;
    char_literal53_tree   = NULL;
    STRING54_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:86:9: ( STRING ( ',' STRING )* )
        // ../base/antlr/NDDL3.g:86:17: STRING ( ',' STRING )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            STRING52 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_stringSet737); 
            if  (HASEXCEPTION())
            {
                goto rulestringSetEx;
            }

            STRING52_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, STRING52));
            ADAPTOR->addChild(ADAPTOR, root_0, STRING52_tree);


            // ../base/antlr/NDDL3.g:86:24: ( ',' STRING )*

            for (;;)
            {
                int alt10=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == 33) ) 
                    {
                        alt10=1;
                    }

                }
                switch (alt10) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:86:25: ',' STRING
            	    {
            	        char_literal53 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_stringSet740); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestringSetEx;
            	        }

            	        STRING54 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_stringSet743); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestringSetEx;
            	        }

            	        STRING54_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, STRING54));
            	        ADAPTOR->addChild(ADAPTOR, root_0, STRING54_tree);


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestringSetEx; /* Prevent compiler warnings */
    rulestringSetEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stringSet */

/** 
 * $ANTLR start enumeratedBoolDomain
 * ../base/antlr/NDDL3.g:89:1: enumeratedBoolDomain : '{' boolSet '}' ;
 */
static NDDL3Parser_enumeratedBoolDomain_return
enumeratedBoolDomain(pNDDL3Parser ctx)
{   
    NDDL3Parser_enumeratedBoolDomain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal55;
    pANTLR3_COMMON_TOKEN    char_literal57;
    NDDL3Parser_boolSet_return boolSet56;
    #undef	RETURN_TYPE_boolSet56
    #define	RETURN_TYPE_boolSet56 NDDL3Parser_boolSet_return

    pANTLR3_BASE_TREE char_literal55_tree;
    pANTLR3_BASE_TREE char_literal57_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal55       = NULL;
    char_literal57       = NULL;
    boolSet56.tree = NULL;

    retval.start = LT(1);

    char_literal55_tree   = NULL;
    char_literal57_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:90:9: ( '{' boolSet '}' )
        // ../base/antlr/NDDL3.g:90:17: '{' boolSet '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal55 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_enumeratedBoolDomain785); 
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedBoolDomainEx;
            }

            char_literal55_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal55));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal55_tree, root_0));

            FOLLOWPUSH(FOLLOW_boolSet_in_enumeratedBoolDomain788);
            boolSet56=boolSet(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedBoolDomainEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, boolSet56.tree);
            char_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_enumeratedBoolDomain790); 
            if  (HASEXCEPTION())
            {
                goto ruleenumeratedBoolDomainEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenumeratedBoolDomainEx; /* Prevent compiler warnings */
    ruleenumeratedBoolDomainEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enumeratedBoolDomain */

/** 
 * $ANTLR start boolSet
 * ../base/antlr/NDDL3.g:93:1: boolSet : boolLiteral ( ',' boolLiteral )* ;
 */
static NDDL3Parser_boolSet_return
boolSet(pNDDL3Parser ctx)
{   
    NDDL3Parser_boolSet_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal59;
    NDDL3Parser_boolLiteral_return boolLiteral58;
    #undef	RETURN_TYPE_boolLiteral58
    #define	RETURN_TYPE_boolLiteral58 NDDL3Parser_boolLiteral_return

    NDDL3Parser_boolLiteral_return boolLiteral60;
    #undef	RETURN_TYPE_boolLiteral60
    #define	RETURN_TYPE_boolLiteral60 NDDL3Parser_boolLiteral_return

    pANTLR3_BASE_TREE char_literal59_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal59       = NULL;
    boolLiteral58.tree = NULL;

    boolLiteral60.tree = NULL;

    retval.start = LT(1);

    char_literal59_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:93:9: ( boolLiteral ( ',' boolLiteral )* )
        // ../base/antlr/NDDL3.g:93:17: boolLiteral ( ',' boolLiteral )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_boolLiteral_in_boolSet814);
            boolLiteral58=boolLiteral(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleboolSetEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, boolLiteral58.tree);

            // ../base/antlr/NDDL3.g:93:29: ( ',' boolLiteral )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == 33) ) 
                    {
                        alt11=1;
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:93:30: ',' boolLiteral
            	    {
            	        char_literal59 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_boolSet817); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleboolSetEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_boolLiteral_in_boolSet820);
            	        boolLiteral60=boolLiteral(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleboolSetEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, boolLiteral60.tree);

            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleboolSetEx; /* Prevent compiler warnings */
    ruleboolSetEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end boolSet */

/** 
 * $ANTLR start variableDeclaration
 * ../base/antlr/NDDL3.g:96:1: variableDeclaration : ( 'filter' )? type nameWithBaseDomain ( ',' nameWithBaseDomain )* ';' -> ^( VARIABLE type nameWithBaseDomain ( nameWithBaseDomain )* ) ;
 */
static NDDL3Parser_variableDeclaration_return
variableDeclaration(pNDDL3Parser ctx)
{   
    NDDL3Parser_variableDeclaration_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal61;
    pANTLR3_COMMON_TOKEN    char_literal64;
    pANTLR3_COMMON_TOKEN    char_literal66;
    NDDL3Parser_type_return type62;
    #undef	RETURN_TYPE_type62
    #define	RETURN_TYPE_type62 NDDL3Parser_type_return

    NDDL3Parser_nameWithBaseDomain_return nameWithBaseDomain63;
    #undef	RETURN_TYPE_nameWithBaseDomain63
    #define	RETURN_TYPE_nameWithBaseDomain63 NDDL3Parser_nameWithBaseDomain_return

    NDDL3Parser_nameWithBaseDomain_return nameWithBaseDomain65;
    #undef	RETURN_TYPE_nameWithBaseDomain65
    #define	RETURN_TYPE_nameWithBaseDomain65 NDDL3Parser_nameWithBaseDomain_return

    pANTLR3_BASE_TREE string_literal61_tree;
    pANTLR3_BASE_TREE char_literal64_tree;
    pANTLR3_BASE_TREE char_literal66_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_33;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_27;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_37;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_nameWithBaseDomain;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal61       = NULL;
    char_literal64       = NULL;
    char_literal66       = NULL;
    type62.tree = NULL;

    nameWithBaseDomain63.tree = NULL;

    nameWithBaseDomain65.tree = NULL;

    retval.start = LT(1);

    string_literal61_tree   = NULL;
    char_literal64_tree   = NULL;
    char_literal66_tree   = NULL;
    stream_33   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 33"); 
    stream_27   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 27"); 
    stream_37   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 37"); 
    stream_type=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type");
    stream_nameWithBaseDomain=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule nameWithBaseDomain");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:97:9: ( ( 'filter' )? type nameWithBaseDomain ( ',' nameWithBaseDomain )* ';' -> ^( VARIABLE type nameWithBaseDomain ( nameWithBaseDomain )* ) )
        // ../base/antlr/NDDL3.g:97:17: ( 'filter' )? type nameWithBaseDomain ( ',' nameWithBaseDomain )* ';'
        {

            // ../base/antlr/NDDL3.g:97:17: ( 'filter' )?
            {
                int alt12=2;
                {
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == 37) ) 
                    {
                        alt12=1;
                    }
                }
                switch (alt12) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:97:18: 'filter'
            	    {
            	        string_literal61 = (pANTLR3_COMMON_TOKEN) MATCHT(37, &FOLLOW_37_in_variableDeclaration854); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	         
            	        stream_37->add(stream_37, string_literal61, NULL);


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_type_in_variableDeclaration858);
            type62=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }

            stream_type->add(stream_type, type62.tree, NULL);
            FOLLOWPUSH(FOLLOW_nameWithBaseDomain_in_variableDeclaration860);
            nameWithBaseDomain63=nameWithBaseDomain(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }

            stream_nameWithBaseDomain->add(stream_nameWithBaseDomain, nameWithBaseDomain63.tree, NULL);

            // ../base/antlr/NDDL3.g:97:53: ( ',' nameWithBaseDomain )*

            for (;;)
            {
                int alt13=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA13_0 = LA(1);
                    if ( (LA13_0 == 33) ) 
                    {
                        alt13=1;
                    }

                }
                switch (alt13) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:97:54: ',' nameWithBaseDomain
            	    {
            	        char_literal64 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_variableDeclaration863); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	         
            	        stream_33->add(stream_33, char_literal64, NULL);

            	        FOLLOWPUSH(FOLLOW_nameWithBaseDomain_in_variableDeclaration865);
            	        nameWithBaseDomain65=nameWithBaseDomain(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }

            	        stream_nameWithBaseDomain->add(stream_nameWithBaseDomain, nameWithBaseDomain65.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */

            char_literal66 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_variableDeclaration869); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
             
            stream_27->add(stream_27, char_literal66, NULL);


             
            /* AST REWRITE
             * elements          : nameWithBaseDomain, type, nameWithBaseDomain
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 98:17: -> ^( VARIABLE type nameWithBaseDomain ( nameWithBaseDomain )* )
            	{
            	    // ../base/antlr/NDDL3.g:98:20: ^( VARIABLE type nameWithBaseDomain ( nameWithBaseDomain )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARIABLE, (pANTLR3_UINT8)"VARIABLE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type->nextTree(stream_type));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_nameWithBaseDomain->nextTree(stream_nameWithBaseDomain));
            	        // ../base/antlr/NDDL3.g:98:55: ( nameWithBaseDomain )*
            	        {
            	        	while ( stream_nameWithBaseDomain->hasNext(stream_nameWithBaseDomain) ) 
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_nameWithBaseDomain->nextTree(stream_nameWithBaseDomain));

            	        	}
            	        	stream_nameWithBaseDomain->reset(stream_nameWithBaseDomain);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    stream_33->free(stream_33);
    stream_27->free(stream_27);
    stream_37->free(stream_37);
    stream_type->free(stream_type);
    stream_nameWithBaseDomain->free(stream_nameWithBaseDomain);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start nameWithBaseDomain
 * ../base/antlr/NDDL3.g:101:1: nameWithBaseDomain : (variable= IDENT ( '(' value= anyValue ')' )? | variable= IDENT '=' value= anyValue ) ;
 */
static NDDL3Parser_nameWithBaseDomain_return
nameWithBaseDomain(pNDDL3Parser ctx)
{   
    NDDL3Parser_nameWithBaseDomain_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    variable;
    pANTLR3_COMMON_TOKEN    char_literal67;
    pANTLR3_COMMON_TOKEN    char_literal68;
    pANTLR3_COMMON_TOKEN    char_literal69;
    NDDL3Parser_anyValue_return value;
    #undef	RETURN_TYPE_value
    #define	RETURN_TYPE_value NDDL3Parser_anyValue_return

    pANTLR3_BASE_TREE variable_tree;
    pANTLR3_BASE_TREE char_literal67_tree;
    pANTLR3_BASE_TREE char_literal68_tree;
    pANTLR3_BASE_TREE char_literal69_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    variable       = NULL;
    char_literal67       = NULL;
    char_literal68       = NULL;
    char_literal69       = NULL;
    value.tree = NULL;

    retval.start = LT(1);

    variable_tree   = NULL;
    char_literal67_tree   = NULL;
    char_literal68_tree   = NULL;
    char_literal69_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:102:9: ( (variable= IDENT ( '(' value= anyValue ')' )? | variable= IDENT '=' value= anyValue ) )
        // ../base/antlr/NDDL3.g:102:17: (variable= IDENT ( '(' value= anyValue ')' )? | variable= IDENT '=' value= anyValue )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // ../base/antlr/NDDL3.g:102:17: (variable= IDENT ( '(' value= anyValue ')' )? | variable= IDENT '=' value= anyValue )
            {
                int alt15=2;

                {
                    int LA15_0 = LA(1);
                    if ( (LA15_0 == IDENT) ) 
                    {

                        {
                            int LA15_1 = LA(2);
                            if ( (LA15_1 == 40) ) 
                            {
                                alt15=2;
                            }
                            else if ( (LA15_1 == 27 || LA15_1 == 33 || LA15_1 == 38) ) 
                            {
                                alt15=1;
                            }
                            else 
                            {
                            
                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 15;
                                EXCEPTION->state        = 1;


                                goto rulenameWithBaseDomainEx;
                            }
                        }
                    }
                    else 
                    {
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 15;
                        EXCEPTION->state        = 0;


                        goto rulenameWithBaseDomainEx;
                    }
                }
                switch (alt15) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:102:25: variable= IDENT ( '(' value= anyValue ')' )?
            	    {
            	        variable = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_nameWithBaseDomain941); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameWithBaseDomainEx;
            	        }

            	        variable_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, variable));
            	        ADAPTOR->addChild(ADAPTOR, root_0, variable_tree);


            	        // ../base/antlr/NDDL3.g:102:40: ( '(' value= anyValue ')' )?
            	        {
            	            int alt14=2;
            	            {
            	                int LA14_0 = LA(1);
            	                if ( (LA14_0 == 38) ) 
            	                {
            	                    alt14=1;
            	                }
            	            }
            	            switch (alt14) 
            	            {
            	        	case 1:
            	        	    // ../base/antlr/NDDL3.g:102:41: '(' value= anyValue ')'
            	        	    {
            	        	        char_literal67 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_nameWithBaseDomain944); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulenameWithBaseDomainEx;
            	        	        }

            	        	        char_literal67_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal67));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal67_tree, root_0));

            	        	        FOLLOWPUSH(FOLLOW_anyValue_in_nameWithBaseDomain949);
            	        	        value=anyValue(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulenameWithBaseDomainEx;
            	        	        }

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, value.tree);
            	        	        char_literal68 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_nameWithBaseDomain951); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulenameWithBaseDomainEx;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // ../base/antlr/NDDL3.g:103:25: variable= IDENT '=' value= anyValue
            	    {
            	        variable = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_nameWithBaseDomain983); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameWithBaseDomainEx;
            	        }

            	        variable_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, variable));
            	        ADAPTOR->addChild(ADAPTOR, root_0, variable_tree);

            	        char_literal69 = (pANTLR3_COMMON_TOKEN) MATCHT(40, &FOLLOW_40_in_nameWithBaseDomain985); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameWithBaseDomainEx;
            	        }

            	        char_literal69_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal69));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal69_tree, root_0));

            	        FOLLOWPUSH(FOLLOW_anyValue_in_nameWithBaseDomain990);
            	        value=anyValue(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulenameWithBaseDomainEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, value.tree);

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenameWithBaseDomainEx; /* Prevent compiler warnings */
    rulenameWithBaseDomainEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end nameWithBaseDomain */

/** 
 * $ANTLR start anyValue
 * ../base/antlr/NDDL3.g:106:1: anyValue : ( STRING | boolLiteral | domain | allocation | qualified );
 */
static NDDL3Parser_anyValue_return
anyValue(pNDDL3Parser ctx)
{   
    NDDL3Parser_anyValue_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    STRING70;
    NDDL3Parser_boolLiteral_return boolLiteral71;
    #undef	RETURN_TYPE_boolLiteral71
    #define	RETURN_TYPE_boolLiteral71 NDDL3Parser_boolLiteral_return

    NDDL3Parser_domain_return domain72;
    #undef	RETURN_TYPE_domain72
    #define	RETURN_TYPE_domain72 NDDL3Parser_domain_return

    NDDL3Parser_allocation_return allocation73;
    #undef	RETURN_TYPE_allocation73
    #define	RETURN_TYPE_allocation73 NDDL3Parser_allocation_return

    NDDL3Parser_qualified_return qualified74;
    #undef	RETURN_TYPE_qualified74
    #define	RETURN_TYPE_qualified74 NDDL3Parser_qualified_return

    pANTLR3_BASE_TREE STRING70_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    STRING70       = NULL;
    boolLiteral71.tree = NULL;

    domain72.tree = NULL;

    allocation73.tree = NULL;

    qualified74.tree = NULL;

    retval.start = LT(1);

    STRING70_tree   = NULL;
    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:106:9: ( STRING | boolLiteral | domain | allocation | qualified )
            
            ANTLR3_UINT32 alt16;

            alt16=5;

            switch ( LA(1) ) 
            {
            case STRING:
            	{
            		alt16=1;
            	}
                break;
            case 84:
            case 85:
            	{
            		alt16=2;
            	}
                break;
            case INT:
            case FLOAT:
            case 32:
            case 35:
            case 81:
            case 82:
            case 83:
            	{
            		alt16=3;
            	}
                break;
            case 41:
            	{
            		alt16=4;
            	}
                break;
            case IDENT:
            case 42:
            	{
            		alt16=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 16;
                EXCEPTION->state        = 0;


                goto ruleanyValueEx;
            }

            switch (alt16) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:106:17: STRING
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        STRING70 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_anyValue1013); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleanyValueEx;
        	        }

        	        STRING70_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, STRING70));
        	        ADAPTOR->addChild(ADAPTOR, root_0, STRING70_tree);


        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:107:17: boolLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_boolLiteral_in_anyValue1031);
        	        boolLiteral71=boolLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleanyValueEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, boolLiteral71.tree);

        	    }
        	    break;
        	case 3:
        	    // ../base/antlr/NDDL3.g:108:17: domain
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_domain_in_anyValue1049);
        	        domain72=domain(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleanyValueEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, domain72.tree);

        	    }
        	    break;
        	case 4:
        	    // ../base/antlr/NDDL3.g:109:17: allocation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_allocation_in_anyValue1067);
        	        allocation73=allocation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleanyValueEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, allocation73.tree);

        	    }
        	    break;
        	case 5:
        	    // ../base/antlr/NDDL3.g:110:17: qualified
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_qualified_in_anyValue1085);
        	        qualified74=qualified(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleanyValueEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, qualified74.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleanyValueEx; /* Prevent compiler warnings */
    ruleanyValueEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end anyValue */

/** 
 * $ANTLR start allocation
 * ../base/antlr/NDDL3.g:113:1: allocation : 'new' constructorInvocation ;
 */
static NDDL3Parser_allocation_return
allocation(pNDDL3Parser ctx)
{   
    NDDL3Parser_allocation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal75;
    NDDL3Parser_constructorInvocation_return constructorInvocation76;
    #undef	RETURN_TYPE_constructorInvocation76
    #define	RETURN_TYPE_constructorInvocation76 NDDL3Parser_constructorInvocation_return

    pANTLR3_BASE_TREE string_literal75_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal75       = NULL;
    constructorInvocation76.tree = NULL;

    retval.start = LT(1);

    string_literal75_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:114:9: ( 'new' constructorInvocation )
        // ../base/antlr/NDDL3.g:114:17: 'new' constructorInvocation
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            string_literal75 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_allocation1116); 
            if  (HASEXCEPTION())
            {
                goto ruleallocationEx;
            }

            FOLLOWPUSH(FOLLOW_constructorInvocation_in_allocation1119);
            constructorInvocation76=constructorInvocation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleallocationEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, constructorInvocation76.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleallocationEx; /* Prevent compiler warnings */
    ruleallocationEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end allocation */

/** 
 * $ANTLR start constructorInvocation
 * ../base/antlr/NDDL3.g:117:1: constructorInvocation : IDENT variableArgumentList -> ^( CONSTRUCTOR_INVOCATION IDENT variableArgumentList ) ;
 */
static NDDL3Parser_constructorInvocation_return
constructorInvocation(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorInvocation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT77;
    NDDL3Parser_variableArgumentList_return variableArgumentList78;
    #undef	RETURN_TYPE_variableArgumentList78
    #define	RETURN_TYPE_variableArgumentList78 NDDL3Parser_variableArgumentList_return

    pANTLR3_BASE_TREE IDENT77_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableArgumentList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT77       = NULL;
    variableArgumentList78.tree = NULL;

    retval.start = LT(1);

    IDENT77_tree   = NULL;
    stream_IDENT   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); 
    stream_variableArgumentList=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableArgumentList");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:118:9: ( IDENT variableArgumentList -> ^( CONSTRUCTOR_INVOCATION IDENT variableArgumentList ) )
        // ../base/antlr/NDDL3.g:118:17: IDENT variableArgumentList
        {
            IDENT77 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_constructorInvocation1150); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorInvocationEx;
            }
             
            stream_IDENT->add(stream_IDENT, IDENT77, NULL);

            FOLLOWPUSH(FOLLOW_variableArgumentList_in_constructorInvocation1152);
            variableArgumentList78=variableArgumentList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstructorInvocationEx;
            }

            stream_variableArgumentList->add(stream_variableArgumentList, variableArgumentList78.tree, NULL);

             
            /* AST REWRITE
             * elements          : variableArgumentList, IDENT
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 119:25: -> ^( CONSTRUCTOR_INVOCATION IDENT variableArgumentList )
            	{
            	    // ../base/antlr/NDDL3.g:119:28: ^( CONSTRUCTOR_INVOCATION IDENT variableArgumentList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONSTRUCTOR_INVOCATION, (pANTLR3_UINT8)"CONSTRUCTOR_INVOCATION"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT->nextNode(stream_IDENT));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableArgumentList->nextTree(stream_variableArgumentList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorInvocationEx; /* Prevent compiler warnings */
    ruleconstructorInvocationEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    stream_IDENT->free(stream_IDENT);
    stream_variableArgumentList->free(stream_variableArgumentList);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorInvocation */

/** 
 * $ANTLR start qualified
 * ../base/antlr/NDDL3.g:122:1: qualified : ( 'this' | IDENT ) ( '.' IDENT )* ;
 */
static NDDL3Parser_qualified_return
qualified(pNDDL3Parser ctx)
{   
    NDDL3Parser_qualified_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set79;
    pANTLR3_COMMON_TOKEN    char_literal80;
    pANTLR3_COMMON_TOKEN    IDENT81;

    pANTLR3_BASE_TREE set79_tree;
    pANTLR3_BASE_TREE char_literal80_tree;
    pANTLR3_BASE_TREE IDENT81_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set79       = NULL;
    char_literal80       = NULL;
    IDENT81       = NULL;
    retval.start = LT(1);

    set79_tree   = NULL;
    char_literal80_tree   = NULL;
    IDENT81_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:123:9: ( ( 'this' | IDENT ) ( '.' IDENT )* )
        // ../base/antlr/NDDL3.g:123:17: ( 'this' | IDENT ) ( '.' IDENT )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set79=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == IDENT || LA(1) == 42 )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set79)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_qualified1217;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_qualified1217);    goto rulequalifiedEx;
            }


            // ../base/antlr/NDDL3.g:123:34: ( '.' IDENT )*

            for (;;)
            {
                int alt17=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA17_0 = LA(1);
                    if ( (LA17_0 == 43) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA17_2 = LA(2);
                            if ( (LA17_2 == IDENT) ) 
                            {
                                alt17=1;
                            }

                        }
                    }

                }
                switch (alt17) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:123:35: '.' IDENT
            	    {
            	        char_literal80 = (pANTLR3_COMMON_TOKEN) MATCHT(43, &FOLLOW_43_in_qualified1226); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalifiedEx;
            	        }

            	        char_literal80_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal80));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal80_tree, root_0));

            	        IDENT81 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_qualified1229); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequalifiedEx;
            	        }

            	        IDENT81_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT81));
            	        ADAPTOR->addChild(ADAPTOR, root_0, IDENT81_tree);


            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulequalifiedEx; /* Prevent compiler warnings */
    rulequalifiedEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end qualified */

/** 
 * $ANTLR start assignment
 * ../base/antlr/NDDL3.g:126:1: assignment : qualified ( 'in' | '=' ) anyValue ';' -> ^( '=' qualified anyValue ) ;
 */
static NDDL3Parser_assignment_return
assignment(pNDDL3Parser ctx)
{   
    NDDL3Parser_assignment_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal83;
    pANTLR3_COMMON_TOKEN    char_literal84;
    pANTLR3_COMMON_TOKEN    char_literal86;
    NDDL3Parser_qualified_return qualified82;
    #undef	RETURN_TYPE_qualified82
    #define	RETURN_TYPE_qualified82 NDDL3Parser_qualified_return

    NDDL3Parser_anyValue_return anyValue85;
    #undef	RETURN_TYPE_anyValue85
    #define	RETURN_TYPE_anyValue85 NDDL3Parser_anyValue_return

    pANTLR3_BASE_TREE string_literal83_tree;
    pANTLR3_BASE_TREE char_literal84_tree;
    pANTLR3_BASE_TREE char_literal86_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_44;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_40;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_27;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_anyValue;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_qualified;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal83       = NULL;
    char_literal84       = NULL;
    char_literal86       = NULL;
    qualified82.tree = NULL;

    anyValue85.tree = NULL;

    retval.start = LT(1);

    string_literal83_tree   = NULL;
    char_literal84_tree   = NULL;
    char_literal86_tree   = NULL;
    stream_44   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 44"); 
    stream_40   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 40"); 
    stream_27   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 27"); 
    stream_anyValue=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule anyValue");
    stream_qualified=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule qualified");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:127:9: ( qualified ( 'in' | '=' ) anyValue ';' -> ^( '=' qualified anyValue ) )
        // ../base/antlr/NDDL3.g:127:17: qualified ( 'in' | '=' ) anyValue ';'
        {
            FOLLOWPUSH(FOLLOW_qualified_in_assignment1262);
            qualified82=qualified(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentEx;
            }

            stream_qualified->add(stream_qualified, qualified82.tree, NULL);

            // ../base/antlr/NDDL3.g:127:27: ( 'in' | '=' )
            {
                int alt18=2;

                {
                    int LA18_0 = LA(1);
                    if ( (LA18_0 == 44) ) 
                    {
                        alt18=1;
                    }
                    else if ( (LA18_0 == 40) ) 
                    {
                        alt18=2;
                    }
                    else 
                    {
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 18;
                        EXCEPTION->state        = 0;


                        goto ruleassignmentEx;
                    }
                }
                switch (alt18) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:127:28: 'in'
            	    {
            	        string_literal83 = (pANTLR3_COMMON_TOKEN) MATCHT(44, &FOLLOW_44_in_assignment1265); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	         
            	        stream_44->add(stream_44, string_literal83, NULL);


            	    }
            	    break;
            	case 2:
            	    // ../base/antlr/NDDL3.g:127:35: '='
            	    {
            	        char_literal84 = (pANTLR3_COMMON_TOKEN) MATCHT(40, &FOLLOW_40_in_assignment1269); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleassignmentEx;
            	        }
            	         
            	        stream_40->add(stream_40, char_literal84, NULL);


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_anyValue_in_assignment1272);
            anyValue85=anyValue(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentEx;
            }

            stream_anyValue->add(stream_anyValue, anyValue85.tree, NULL);
            char_literal86 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_assignment1274); 
            if  (HASEXCEPTION())
            {
                goto ruleassignmentEx;
            }
             
            stream_27->add(stream_27, char_literal86, NULL);


             
            /* AST REWRITE
             * elements          : qualified, anyValue, 40
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 128:17: -> ^( '=' qualified anyValue )
            	{
            	    // ../base/antlr/NDDL3.g:128:20: ^( '=' qualified anyValue )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_40->nextNode(stream_40), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_qualified->nextTree(stream_qualified));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_anyValue->nextTree(stream_anyValue));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    stream_44->free(stream_44);
    stream_40->free(stream_40);
    stream_27->free(stream_27);
    stream_anyValue->free(stream_anyValue);
    stream_qualified->free(stream_qualified);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end assignment */

/** 
 * $ANTLR start classDeclaration
 * ../base/antlr/NDDL3.g:132:1: classDeclaration : 'class' c= IDENT ( ( ( 'extends' x= IDENT )? classBlock ) -> ^( 'class' $c ( ^( 'extends' $x) )? classBlock ) | ';' -> ^( 'class' $c ';' ) ) ;
 */
static NDDL3Parser_classDeclaration_return
classDeclaration(pNDDL3Parser ctx)
{   
    NDDL3Parser_classDeclaration_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    c;
    pANTLR3_COMMON_TOKEN    x;
    pANTLR3_COMMON_TOKEN    string_literal87;
    pANTLR3_COMMON_TOKEN    string_literal88;
    pANTLR3_COMMON_TOKEN    char_literal90;
    NDDL3Parser_classBlock_return classBlock89;
    #undef	RETURN_TYPE_classBlock89
    #define	RETURN_TYPE_classBlock89 NDDL3Parser_classBlock_return

    pANTLR3_BASE_TREE c_tree;
    pANTLR3_BASE_TREE x_tree;
    pANTLR3_BASE_TREE string_literal87_tree;
    pANTLR3_BASE_TREE string_literal88_tree;
    pANTLR3_BASE_TREE char_literal90_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_45;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_46;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_27;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_classBlock;
    /* Initialize rule variables
     */


    root_0 = NULL;

    c       = NULL;
    x       = NULL;
    string_literal87       = NULL;
    string_literal88       = NULL;
    char_literal90       = NULL;
    classBlock89.tree = NULL;

    retval.start = LT(1);

    c_tree   = NULL;
    x_tree   = NULL;
    string_literal87_tree   = NULL;
    string_literal88_tree   = NULL;
    char_literal90_tree   = NULL;
    stream_IDENT   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); 
    stream_45   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 45"); 
    stream_46   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 46"); 
    stream_27   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 27"); 
    stream_classBlock=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule classBlock");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:133:2: ( 'class' c= IDENT ( ( ( 'extends' x= IDENT )? classBlock ) -> ^( 'class' $c ( ^( 'extends' $x) )? classBlock ) | ';' -> ^( 'class' $c ';' ) ) )
        // ../base/antlr/NDDL3.g:133:4: 'class' c= IDENT ( ( ( 'extends' x= IDENT )? classBlock ) -> ^( 'class' $c ( ^( 'extends' $x) )? classBlock ) | ';' -> ^( 'class' $c ';' ) )
        {
            string_literal87 = (pANTLR3_COMMON_TOKEN) MATCHT(45, &FOLLOW_45_in_classDeclaration1319); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclarationEx;
            }
             
            stream_45->add(stream_45, string_literal87, NULL);

            c = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_classDeclaration1323); 
            if  (HASEXCEPTION())
            {
                goto ruleclassDeclarationEx;
            }
             
            stream_IDENT->add(stream_IDENT, c, NULL);


            // ../base/antlr/NDDL3.g:134:3: ( ( ( 'extends' x= IDENT )? classBlock ) -> ^( 'class' $c ( ^( 'extends' $x) )? classBlock ) | ';' -> ^( 'class' $c ';' ) )
            {
                int alt20=2;

                {
                    int LA20_0 = LA(1);
                    if ( (LA20_0 == 35 || LA20_0 == 46) ) 
                    {
                        alt20=1;
                    }
                    else if ( (LA20_0 == 27) ) 
                    {
                        alt20=2;
                    }
                    else 
                    {
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 20;
                        EXCEPTION->state        = 0;


                        goto ruleclassDeclarationEx;
                    }
                }
                switch (alt20) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:134:5: ( ( 'extends' x= IDENT )? classBlock )
            	    {
            	        // ../base/antlr/NDDL3.g:134:5: ( ( 'extends' x= IDENT )? classBlock )
            	        // ../base/antlr/NDDL3.g:134:6: ( 'extends' x= IDENT )? classBlock
            	        {

            	            // ../base/antlr/NDDL3.g:134:6: ( 'extends' x= IDENT )?
            	            {
            	                int alt19=2;
            	                {
            	                    int LA19_0 = LA(1);
            	                    if ( (LA19_0 == 46) ) 
            	                    {
            	                        alt19=1;
            	                    }
            	                }
            	                switch (alt19) 
            	                {
            	            	case 1:
            	            	    // ../base/antlr/NDDL3.g:134:7: 'extends' x= IDENT
            	            	    {
            	            	        string_literal88 = (pANTLR3_COMMON_TOKEN) MATCHT(46, &FOLLOW_46_in_classDeclaration1331); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruleclassDeclarationEx;
            	            	        }
            	            	         
            	            	        stream_46->add(stream_46, string_literal88, NULL);

            	            	        x = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_classDeclaration1335); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruleclassDeclarationEx;
            	            	        }
            	            	         
            	            	        stream_IDENT->add(stream_IDENT, x, NULL);


            	            	    }
            	            	    break;

            	                }
            	            }
            	            FOLLOWPUSH(FOLLOW_classBlock_in_classDeclaration1339);
            	            classBlock89=classBlock(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleclassDeclarationEx;
            	            }

            	            stream_classBlock->add(stream_classBlock, classBlock89.tree, NULL);

            	        }


            	         
            	        /* AST REWRITE
            	         * elements          : classBlock, 45, c, x, 46
            	         * token labels      : c, x
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_c;
            	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_x;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_c=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", c);
            	        	stream_x=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token x", x);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 135:15: -> ^( 'class' $c ( ^( 'extends' $x) )? classBlock )
            	        	{
            	        	    // ../base/antlr/NDDL3.g:135:18: ^( 'class' $c ( ^( 'extends' $x) )? classBlock )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_45->nextNode(stream_45), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_c->nextNode(stream_c));
            	        	        // ../base/antlr/NDDL3.g:135:31: ( ^( 'extends' $x) )?
            	        	        {
            	        	        	if ( stream_x->hasNext(stream_x)||stream_46->hasNext(stream_46) ) 
            	        	        	{
            	        	        		// ../base/antlr/NDDL3.g:135:31: ^( 'extends' $x)
            	        	        		{
            	        	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_46->nextNode(stream_46), root_2));

            	        	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_x->nextNode(stream_x));

            	        	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        	        		}

            	        	        	}
            	        	        	stream_x->reset(stream_x);
            	        	        	stream_46->reset(stream_46);

            	        	        }
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_classBlock->nextTree(stream_classBlock));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	stream_c->free(stream_c);
            	        	stream_x->free(stream_x);
            	        	stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // ../base/antlr/NDDL3.g:136:5: ';'
            	    {
            	        char_literal90 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_classDeclaration1379); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclassDeclarationEx;
            	        }
            	         
            	        stream_27->add(stream_27, char_literal90, NULL);


            	         
            	        /* AST REWRITE
            	         * elements          : 45, 27, c
            	         * token labels      : c
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_c;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_c=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", c);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 137:29: -> ^( 'class' $c ';' )
            	        	{
            	        	    // ../base/antlr/NDDL3.g:137:32: ^( 'class' $c ';' )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_45->nextNode(stream_45), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_c->nextNode(stream_c));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_27->nextNode(stream_27));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	stream_c->free(stream_c);
            	        	stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleclassDeclarationEx; /* Prevent compiler warnings */
    ruleclassDeclarationEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    stream_IDENT->free(stream_IDENT);
    stream_45->free(stream_45);
    stream_46->free(stream_46);
    stream_27->free(stream_27);
    stream_classBlock->free(stream_classBlock);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end classDeclaration */

/** 
 * $ANTLR start classBlock
 * ../base/antlr/NDDL3.g:141:1: classBlock : '{' ( classStatement )* '}' ;
 */
static NDDL3Parser_classBlock_return
classBlock(pNDDL3Parser ctx)
{   
    NDDL3Parser_classBlock_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal91;
    pANTLR3_COMMON_TOKEN    char_literal93;
    NDDL3Parser_classStatement_return classStatement92;
    #undef	RETURN_TYPE_classStatement92
    #define	RETURN_TYPE_classStatement92 NDDL3Parser_classStatement_return

    pANTLR3_BASE_TREE char_literal91_tree;
    pANTLR3_BASE_TREE char_literal93_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal91       = NULL;
    char_literal93       = NULL;
    classStatement92.tree = NULL;

    retval.start = LT(1);

    char_literal91_tree   = NULL;
    char_literal93_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:142:2: ( '{' ( classStatement )* '}' )
        // ../base/antlr/NDDL3.g:142:4: '{' ( classStatement )* '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal91 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_classBlock1434); 
            if  (HASEXCEPTION())
            {
                goto ruleclassBlockEx;
            }

            char_literal91_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal91));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal91_tree, root_0));


            // ../base/antlr/NDDL3.g:142:9: ( classStatement )*

            for (;;)
            {
                int alt21=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA21_0 = LA(1);
                    if ( (LA21_0 == IDENT || ((LA21_0 >= 27) && (LA21_0 <= 31)) || LA21_0 == 37 || LA21_0 == 47) ) 
                    {
                        alt21=1;
                    }

                }
                switch (alt21) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:142:9: classStatement
            	    {
            	        FOLLOWPUSH(FOLLOW_classStatement_in_classBlock1437);
            	        classStatement92=classStatement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleclassBlockEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, classStatement92.tree);

            	    }
            	    break;

            	default:
            	    goto loop21;	/* break out of the loop */
            	    break;
                }
            }
            loop21: ; /* Jump out to here if this rule does not match */

            char_literal93 = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_classBlock1440); 
            if  (HASEXCEPTION())
            {
                goto ruleclassBlockEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleclassBlockEx; /* Prevent compiler warnings */
    ruleclassBlockEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end classBlock */

/** 
 * $ANTLR start classStatement
 * ../base/antlr/NDDL3.g:145:1: classStatement : ( variableDeclaration | constructor | predicate | noopstatement );
 */
static NDDL3Parser_classStatement_return
classStatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_classStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_variableDeclaration_return variableDeclaration94;
    #undef	RETURN_TYPE_variableDeclaration94
    #define	RETURN_TYPE_variableDeclaration94 NDDL3Parser_variableDeclaration_return

    NDDL3Parser_constructor_return constructor95;
    #undef	RETURN_TYPE_constructor95
    #define	RETURN_TYPE_constructor95 NDDL3Parser_constructor_return

    NDDL3Parser_predicate_return predicate96;
    #undef	RETURN_TYPE_predicate96
    #define	RETURN_TYPE_predicate96 NDDL3Parser_predicate_return

    NDDL3Parser_noopstatement_return noopstatement97;
    #undef	RETURN_TYPE_noopstatement97
    #define	RETURN_TYPE_noopstatement97 NDDL3Parser_noopstatement_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    variableDeclaration94.tree = NULL;

    constructor95.tree = NULL;

    predicate96.tree = NULL;

    noopstatement97.tree = NULL;

    retval.start = LT(1);

    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:146:2: ( variableDeclaration | constructor | predicate | noopstatement )
            
            ANTLR3_UINT32 alt22;

            alt22=4;

            switch ( LA(1) ) 
            {
            case 28:
            case 29:
            case 30:
            case 31:
            case 37:
            	{
            		alt22=1;
            	}
                break;
            case IDENT:
            	{

            		{
            		    int LA22_2 = LA(2);
            		    if ( (LA22_2 == 38) ) 
            		    {
            		        alt22=2;
            		    }
            		    else if ( (LA22_2 == IDENT) ) 
            		    {
            		        alt22=1;
            		    }
            		    else 
            		    {
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 22;
            		        EXCEPTION->state        = 2;


            		        goto ruleclassStatementEx;
            		    }
            		}
            	}
                break;
            case 47:
            	{
            		alt22=3;
            	}
                break;
            case 27:
            	{
            		alt22=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 22;
                EXCEPTION->state        = 0;


                goto ruleclassStatementEx;
            }

            switch (alt22) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:146:4: variableDeclaration
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_classStatement1452);
        	        variableDeclaration94=variableDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleclassStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, variableDeclaration94.tree);

        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:147:4: constructor
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constructor_in_classStatement1457);
        	        constructor95=constructor(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleclassStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, constructor95.tree);

        	    }
        	    break;
        	case 3:
        	    // ../base/antlr/NDDL3.g:148:4: predicate
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_predicate_in_classStatement1462);
        	        predicate96=predicate(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleclassStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, predicate96.tree);

        	    }
        	    break;
        	case 4:
        	    // ../base/antlr/NDDL3.g:149:4: noopstatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noopstatement_in_classStatement1467);
        	        noopstatement97=noopstatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleclassStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, noopstatement97.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleclassStatementEx; /* Prevent compiler warnings */
    ruleclassStatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end classStatement */

/** 
 * $ANTLR start constructor
 * ../base/antlr/NDDL3.g:152:1: constructor : IDENT constructorParameterList constructorBlock -> ^( CONSTRUCTOR IDENT constructorParameterList constructorBlock ) ;
 */
static NDDL3Parser_constructor_return
constructor(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructor_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT98;
    NDDL3Parser_constructorParameterList_return constructorParameterList99;
    #undef	RETURN_TYPE_constructorParameterList99
    #define	RETURN_TYPE_constructorParameterList99 NDDL3Parser_constructorParameterList_return

    NDDL3Parser_constructorBlock_return constructorBlock100;
    #undef	RETURN_TYPE_constructorBlock100
    #define	RETURN_TYPE_constructorBlock100 NDDL3Parser_constructorBlock_return

    pANTLR3_BASE_TREE IDENT98_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_constructorParameterList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_constructorBlock;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT98       = NULL;
    constructorParameterList99.tree = NULL;

    constructorBlock100.tree = NULL;

    retval.start = LT(1);

    IDENT98_tree   = NULL;
    stream_IDENT   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); 
    stream_constructorParameterList=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule constructorParameterList");
    stream_constructorBlock=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule constructorBlock");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:153:2: ( IDENT constructorParameterList constructorBlock -> ^( CONSTRUCTOR IDENT constructorParameterList constructorBlock ) )
        // ../base/antlr/NDDL3.g:153:4: IDENT constructorParameterList constructorBlock
        {
            IDENT98 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_constructor1478); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorEx;
            }
             
            stream_IDENT->add(stream_IDENT, IDENT98, NULL);

            FOLLOWPUSH(FOLLOW_constructorParameterList_in_constructor1480);
            constructorParameterList99=constructorParameterList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstructorEx;
            }

            stream_constructorParameterList->add(stream_constructorParameterList, constructorParameterList99.tree, NULL);
            FOLLOWPUSH(FOLLOW_constructorBlock_in_constructor1482);
            constructorBlock100=constructorBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstructorEx;
            }

            stream_constructorBlock->add(stream_constructorBlock, constructorBlock100.tree, NULL);

             
            /* AST REWRITE
             * elements          : IDENT, constructorParameterList, constructorBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 154:4: -> ^( CONSTRUCTOR IDENT constructorParameterList constructorBlock )
            	{
            	    // ../base/antlr/NDDL3.g:154:7: ^( CONSTRUCTOR IDENT constructorParameterList constructorBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONSTRUCTOR, (pANTLR3_UINT8)"CONSTRUCTOR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT->nextNode(stream_IDENT));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_constructorParameterList->nextTree(stream_constructorParameterList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_constructorBlock->nextTree(stream_constructorBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorEx; /* Prevent compiler warnings */
    ruleconstructorEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    stream_IDENT->free(stream_IDENT);
    stream_constructorParameterList->free(stream_constructorParameterList);
    stream_constructorBlock->free(stream_constructorBlock);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructor */

/** 
 * $ANTLR start constructorBlock
 * ../base/antlr/NDDL3.g:157:1: constructorBlock : '{' ( constructorStatement )* '}' ;
 */
static NDDL3Parser_constructorBlock_return
constructorBlock(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorBlock_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal101;
    pANTLR3_COMMON_TOKEN    char_literal103;
    NDDL3Parser_constructorStatement_return constructorStatement102;
    #undef	RETURN_TYPE_constructorStatement102
    #define	RETURN_TYPE_constructorStatement102 NDDL3Parser_constructorStatement_return

    pANTLR3_BASE_TREE char_literal101_tree;
    pANTLR3_BASE_TREE char_literal103_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal101       = NULL;
    char_literal103       = NULL;
    constructorStatement102.tree = NULL;

    retval.start = LT(1);

    char_literal101_tree   = NULL;
    char_literal103_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:158:2: ( '{' ( constructorStatement )* '}' )
        // ../base/antlr/NDDL3.g:158:4: '{' ( constructorStatement )* '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal101 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_constructorBlock1508); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorBlockEx;
            }

            char_literal101_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal101));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal101_tree, root_0));


            // ../base/antlr/NDDL3.g:158:9: ( constructorStatement )*

            for (;;)
            {
                int alt23=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA23_0 = LA(1);
                    if ( (LA23_0 == IDENT || LA23_0 == 27 || LA23_0 == 42 || LA23_0 == 52) ) 
                    {
                        alt23=1;
                    }

                }
                switch (alt23) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:158:9: constructorStatement
            	    {
            	        FOLLOWPUSH(FOLLOW_constructorStatement_in_constructorBlock1511);
            	        constructorStatement102=constructorStatement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstructorBlockEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, constructorStatement102.tree);

            	    }
            	    break;

            	default:
            	    goto loop23;	/* break out of the loop */
            	    break;
                }
            }
            loop23: ; /* Jump out to here if this rule does not match */

            char_literal103 = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_constructorBlock1514); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorBlockEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorBlockEx; /* Prevent compiler warnings */
    ruleconstructorBlockEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorBlock */

/** 
 * $ANTLR start constructorStatement
 * ../base/antlr/NDDL3.g:161:1: constructorStatement : ( assignment | superInvocation | noopstatement );
 */
static NDDL3Parser_constructorStatement_return
constructorStatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_assignment_return assignment104;
    #undef	RETURN_TYPE_assignment104
    #define	RETURN_TYPE_assignment104 NDDL3Parser_assignment_return

    NDDL3Parser_superInvocation_return superInvocation105;
    #undef	RETURN_TYPE_superInvocation105
    #define	RETURN_TYPE_superInvocation105 NDDL3Parser_superInvocation_return

    NDDL3Parser_noopstatement_return noopstatement106;
    #undef	RETURN_TYPE_noopstatement106
    #define	RETURN_TYPE_noopstatement106 NDDL3Parser_noopstatement_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    assignment104.tree = NULL;

    superInvocation105.tree = NULL;

    noopstatement106.tree = NULL;

    retval.start = LT(1);

    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:162:2: ( assignment | superInvocation | noopstatement )
            
            ANTLR3_UINT32 alt24;

            alt24=3;

            switch ( LA(1) ) 
            {
            case IDENT:
            case 42:
            	{
            		alt24=1;
            	}
                break;
            case 52:
            	{
            		alt24=2;
            	}
                break;
            case 27:
            	{
            		alt24=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 24;
                EXCEPTION->state        = 0;


                goto ruleconstructorStatementEx;
            }

            switch (alt24) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:162:4: assignment
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_assignment_in_constructorStatement1526);
        	        assignment104=assignment(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstructorStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, assignment104.tree);

        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:163:4: superInvocation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_superInvocation_in_constructorStatement1531);
        	        superInvocation105=superInvocation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstructorStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, superInvocation105.tree);

        	    }
        	    break;
        	case 3:
        	    // ../base/antlr/NDDL3.g:164:4: noopstatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noopstatement_in_constructorStatement1536);
        	        noopstatement106=noopstatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstructorStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, noopstatement106.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorStatementEx; /* Prevent compiler warnings */
    ruleconstructorStatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorStatement */

/** 
 * $ANTLR start constructorParameterList
 * ../base/antlr/NDDL3.g:167:1: constructorParameterList : '(' ( constructorParameters )? ')' ;
 */
static NDDL3Parser_constructorParameterList_return
constructorParameterList(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorParameterList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal107;
    pANTLR3_COMMON_TOKEN    char_literal109;
    NDDL3Parser_constructorParameters_return constructorParameters108;
    #undef	RETURN_TYPE_constructorParameters108
    #define	RETURN_TYPE_constructorParameters108 NDDL3Parser_constructorParameters_return

    pANTLR3_BASE_TREE char_literal107_tree;
    pANTLR3_BASE_TREE char_literal109_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal107       = NULL;
    char_literal109       = NULL;
    constructorParameters108.tree = NULL;

    retval.start = LT(1);

    char_literal107_tree   = NULL;
    char_literal109_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:168:2: ( '(' ( constructorParameters )? ')' )
        // ../base/antlr/NDDL3.g:168:4: '(' ( constructorParameters )? ')'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal107 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_constructorParameterList1547); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorParameterListEx;
            }

            char_literal107_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal107));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal107_tree, root_0));


            // ../base/antlr/NDDL3.g:168:9: ( constructorParameters )?
            {
                int alt25=2;
                {
                    int LA25_0 = LA(1);
                    if ( (LA25_0 == IDENT || ((LA25_0 >= 28) && (LA25_0 <= 31))) ) 
                    {
                        alt25=1;
                    }
                }
                switch (alt25) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:168:9: constructorParameters
            	    {
            	        FOLLOWPUSH(FOLLOW_constructorParameters_in_constructorParameterList1550);
            	        constructorParameters108=constructorParameters(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstructorParameterListEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, constructorParameters108.tree);

            	    }
            	    break;

                }
            }
            char_literal109 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_constructorParameterList1553); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorParameterListEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorParameterListEx; /* Prevent compiler warnings */
    ruleconstructorParameterListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorParameterList */

/** 
 * $ANTLR start constructorParameters
 * ../base/antlr/NDDL3.g:171:1: constructorParameters : constructorParameter ( ',' constructorParameters )? ;
 */
static NDDL3Parser_constructorParameters_return
constructorParameters(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorParameters_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal111;
    NDDL3Parser_constructorParameter_return constructorParameter110;
    #undef	RETURN_TYPE_constructorParameter110
    #define	RETURN_TYPE_constructorParameter110 NDDL3Parser_constructorParameter_return

    NDDL3Parser_constructorParameters_return constructorParameters112;
    #undef	RETURN_TYPE_constructorParameters112
    #define	RETURN_TYPE_constructorParameters112 NDDL3Parser_constructorParameters_return

    pANTLR3_BASE_TREE char_literal111_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal111       = NULL;
    constructorParameter110.tree = NULL;

    constructorParameters112.tree = NULL;

    retval.start = LT(1);

    char_literal111_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:172:2: ( constructorParameter ( ',' constructorParameters )? )
        // ../base/antlr/NDDL3.g:172:4: constructorParameter ( ',' constructorParameters )?
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_constructorParameter_in_constructorParameters1565);
            constructorParameter110=constructorParameter(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstructorParametersEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, constructorParameter110.tree);

            // ../base/antlr/NDDL3.g:172:26: ( ',' constructorParameters )?
            {
                int alt26=2;
                {
                    int LA26_0 = LA(1);
                    if ( (LA26_0 == 33) ) 
                    {
                        alt26=1;
                    }
                }
                switch (alt26) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:172:27: ',' constructorParameters
            	    {
            	        char_literal111 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_constructorParameters1569); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstructorParametersEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_constructorParameters_in_constructorParameters1572);
            	        constructorParameters112=constructorParameters(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstructorParametersEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, constructorParameters112.tree);

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorParametersEx; /* Prevent compiler warnings */
    ruleconstructorParametersEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorParameters */

/** 
 * $ANTLR start constructorParameter
 * ../base/antlr/NDDL3.g:175:1: constructorParameter : type IDENT -> ^( VARIABLE IDENT type ) ;
 */
static NDDL3Parser_constructorParameter_return
constructorParameter(pNDDL3Parser ctx)
{   
    NDDL3Parser_constructorParameter_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT114;
    NDDL3Parser_type_return type113;
    #undef	RETURN_TYPE_type113
    #define	RETURN_TYPE_type113 NDDL3Parser_type_return

    pANTLR3_BASE_TREE IDENT114_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT114       = NULL;
    type113.tree = NULL;

    retval.start = LT(1);

    IDENT114_tree   = NULL;
    stream_IDENT   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); 
    stream_type=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:176:2: ( type IDENT -> ^( VARIABLE IDENT type ) )
        // ../base/antlr/NDDL3.g:176:4: type IDENT
        {
            FOLLOWPUSH(FOLLOW_type_in_constructorParameter1585);
            type113=type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstructorParameterEx;
            }

            stream_type->add(stream_type, type113.tree, NULL);
            IDENT114 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_constructorParameter1587); 
            if  (HASEXCEPTION())
            {
                goto ruleconstructorParameterEx;
            }
             
            stream_IDENT->add(stream_IDENT, IDENT114, NULL);


             
            /* AST REWRITE
             * elements          : type, IDENT
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 177:4: -> ^( VARIABLE IDENT type )
            	{
            	    // ../base/antlr/NDDL3.g:177:7: ^( VARIABLE IDENT type )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARIABLE, (pANTLR3_UINT8)"VARIABLE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT->nextNode(stream_IDENT));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type->nextTree(stream_type));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstructorParameterEx; /* Prevent compiler warnings */
    ruleconstructorParameterEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    stream_IDENT->free(stream_IDENT);
    stream_type->free(stream_type);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constructorParameter */

/** 
 * $ANTLR start predicate
 * ../base/antlr/NDDL3.g:180:1: predicate : 'predicate' IDENT predicateBlock ;
 */
static NDDL3Parser_predicate_return
predicate(pNDDL3Parser ctx)
{   
    NDDL3Parser_predicate_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal115;
    pANTLR3_COMMON_TOKEN    IDENT116;
    NDDL3Parser_predicateBlock_return predicateBlock117;
    #undef	RETURN_TYPE_predicateBlock117
    #define	RETURN_TYPE_predicateBlock117 NDDL3Parser_predicateBlock_return

    pANTLR3_BASE_TREE string_literal115_tree;
    pANTLR3_BASE_TREE IDENT116_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal115       = NULL;
    IDENT116       = NULL;
    predicateBlock117.tree = NULL;

    retval.start = LT(1);

    string_literal115_tree   = NULL;
    IDENT116_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:181:2: ( 'predicate' IDENT predicateBlock )
        // ../base/antlr/NDDL3.g:181:4: 'predicate' IDENT predicateBlock
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            string_literal115 = (pANTLR3_COMMON_TOKEN) MATCHT(47, &FOLLOW_47_in_predicate1611); 
            if  (HASEXCEPTION())
            {
                goto rulepredicateEx;
            }

            string_literal115_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal115));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal115_tree, root_0));

            IDENT116 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_predicate1614); 
            if  (HASEXCEPTION())
            {
                goto rulepredicateEx;
            }

            IDENT116_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT116));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT116_tree);

            FOLLOWPUSH(FOLLOW_predicateBlock_in_predicate1616);
            predicateBlock117=predicateBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepredicateEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, predicateBlock117.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepredicateEx; /* Prevent compiler warnings */
    rulepredicateEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end predicate */

/** 
 * $ANTLR start predicateBlock
 * ../base/antlr/NDDL3.g:184:1: predicateBlock : '{' ( predicateStatement )* '}' ;
 */
static NDDL3Parser_predicateBlock_return
predicateBlock(pNDDL3Parser ctx)
{   
    NDDL3Parser_predicateBlock_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal118;
    pANTLR3_COMMON_TOKEN    char_literal120;
    NDDL3Parser_predicateStatement_return predicateStatement119;
    #undef	RETURN_TYPE_predicateStatement119
    #define	RETURN_TYPE_predicateStatement119 NDDL3Parser_predicateStatement_return

    pANTLR3_BASE_TREE char_literal118_tree;
    pANTLR3_BASE_TREE char_literal120_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal118       = NULL;
    char_literal120       = NULL;
    predicateStatement119.tree = NULL;

    retval.start = LT(1);

    char_literal118_tree   = NULL;
    char_literal120_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:185:2: ( '{' ( predicateStatement )* '}' )
        // ../base/antlr/NDDL3.g:185:4: '{' ( predicateStatement )* '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal118 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_predicateBlock1628); 
            if  (HASEXCEPTION())
            {
                goto rulepredicateBlockEx;
            }

            char_literal118_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal118));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal118_tree, root_0));


            // ../base/antlr/NDDL3.g:185:9: ( predicateStatement )*

            for (;;)
            {
                int alt27=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA27_0 = LA(1);
                    if ( (LA27_0 == IDENT || ((LA27_0 >= 28) && (LA27_0 <= 31)) || LA27_0 == 37 || LA27_0 == 42) ) 
                    {
                        alt27=1;
                    }

                }
                switch (alt27) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:185:9: predicateStatement
            	    {
            	        FOLLOWPUSH(FOLLOW_predicateStatement_in_predicateBlock1631);
            	        predicateStatement119=predicateStatement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepredicateBlockEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, predicateStatement119.tree);

            	    }
            	    break;

            	default:
            	    goto loop27;	/* break out of the loop */
            	    break;
                }
            }
            loop27: ; /* Jump out to here if this rule does not match */

            char_literal120 = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_predicateBlock1634); 
            if  (HASEXCEPTION())
            {
                goto rulepredicateBlockEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepredicateBlockEx; /* Prevent compiler warnings */
    rulepredicateBlockEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end predicateBlock */

/** 
 * $ANTLR start predicateStatement
 * ../base/antlr/NDDL3.g:189:1: predicateStatement : ( variableDeclaration | constraintInstantiation | assignment );
 */
static NDDL3Parser_predicateStatement_return
predicateStatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_predicateStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_variableDeclaration_return variableDeclaration121;
    #undef	RETURN_TYPE_variableDeclaration121
    #define	RETURN_TYPE_variableDeclaration121 NDDL3Parser_variableDeclaration_return

    NDDL3Parser_constraintInstantiation_return constraintInstantiation122;
    #undef	RETURN_TYPE_constraintInstantiation122
    #define	RETURN_TYPE_constraintInstantiation122 NDDL3Parser_constraintInstantiation_return

    NDDL3Parser_assignment_return assignment123;
    #undef	RETURN_TYPE_assignment123
    #define	RETURN_TYPE_assignment123 NDDL3Parser_assignment_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    variableDeclaration121.tree = NULL;

    constraintInstantiation122.tree = NULL;

    assignment123.tree = NULL;

    retval.start = LT(1);

    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:190:2: ( variableDeclaration | constraintInstantiation | assignment )
            
            ANTLR3_UINT32 alt28;

            alt28=3;

            switch ( LA(1) ) 
            {
            case 28:
            case 29:
            case 30:
            case 31:
            case 37:
            	{
            		alt28=1;
            	}
                break;
            case IDENT:
            	{
            		switch ( LA(2) ) 
            		{
            		case 40:
            		case 43:
            		case 44:
            			{
            				alt28=3;
            			}
            		    break;
            		case 38:
            			{
            				alt28=2;
            			}
            		    break;
            		case IDENT:
            			{
            				alt28=1;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 28;
            		    EXCEPTION->state        = 2;


            		    goto rulepredicateStatementEx;
            		}

            	}
                break;
            case 42:
            	{
            		alt28=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 28;
                EXCEPTION->state        = 0;


                goto rulepredicateStatementEx;
            }

            switch (alt28) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:190:4: variableDeclaration
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_predicateStatement1647);
        	        variableDeclaration121=variableDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepredicateStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, variableDeclaration121.tree);

        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:191:4: constraintInstantiation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constraintInstantiation_in_predicateStatement1652);
        	        constraintInstantiation122=constraintInstantiation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepredicateStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, constraintInstantiation122.tree);

        	    }
        	    break;
        	case 3:
        	    // ../base/antlr/NDDL3.g:192:4: assignment
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_assignment_in_predicateStatement1657);
        	        assignment123=assignment(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepredicateStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, assignment123.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepredicateStatementEx; /* Prevent compiler warnings */
    rulepredicateStatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end predicateStatement */

/** 
 * $ANTLR start rule
 * ../base/antlr/NDDL3.g:196:1: rule : IDENT '::' IDENT ruleBlock ;
 */
static NDDL3Parser_rule_return
rule(pNDDL3Parser ctx)
{   
    NDDL3Parser_rule_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT124;
    pANTLR3_COMMON_TOKEN    string_literal125;
    pANTLR3_COMMON_TOKEN    IDENT126;
    NDDL3Parser_ruleBlock_return ruleBlock127;
    #undef	RETURN_TYPE_ruleBlock127
    #define	RETURN_TYPE_ruleBlock127 NDDL3Parser_ruleBlock_return

    pANTLR3_BASE_TREE IDENT124_tree;
    pANTLR3_BASE_TREE string_literal125_tree;
    pANTLR3_BASE_TREE IDENT126_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT124       = NULL;
    string_literal125       = NULL;
    IDENT126       = NULL;
    ruleBlock127.tree = NULL;

    retval.start = LT(1);

    IDENT124_tree   = NULL;
    string_literal125_tree   = NULL;
    IDENT126_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:196:6: ( IDENT '::' IDENT ruleBlock )
        // ../base/antlr/NDDL3.g:196:8: IDENT '::' IDENT ruleBlock
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            IDENT124 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_rule1668); 
            if  (HASEXCEPTION())
            {
                goto ruleruleEx;
            }

            IDENT124_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT124));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT124_tree);

            string_literal125 = (pANTLR3_COMMON_TOKEN) MATCHT(48, &FOLLOW_48_in_rule1670); 
            if  (HASEXCEPTION())
            {
                goto ruleruleEx;
            }

            string_literal125_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal125));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal125_tree, root_0));

            IDENT126 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_rule1673); 
            if  (HASEXCEPTION())
            {
                goto ruleruleEx;
            }

            IDENT126_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT126));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT126_tree);

            FOLLOWPUSH(FOLLOW_ruleBlock_in_rule1675);
            ruleBlock127=ruleBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleruleEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, ruleBlock127.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleruleEx; /* Prevent compiler warnings */
    ruleruleEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end rule */

/** 
 * $ANTLR start ruleBlock
 * ../base/antlr/NDDL3.g:199:1: ruleBlock : ( '{' ( ruleStatement )* '}' | ruleStatement -> ^( '{' ruleStatement ) );
 */
static NDDL3Parser_ruleBlock_return
ruleBlock(pNDDL3Parser ctx)
{   
    NDDL3Parser_ruleBlock_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal128;
    pANTLR3_COMMON_TOKEN    char_literal130;
    NDDL3Parser_ruleStatement_return ruleStatement129;
    #undef	RETURN_TYPE_ruleStatement129
    #define	RETURN_TYPE_ruleStatement129 NDDL3Parser_ruleStatement_return

    NDDL3Parser_ruleStatement_return ruleStatement131;
    #undef	RETURN_TYPE_ruleStatement131
    #define	RETURN_TYPE_ruleStatement131 NDDL3Parser_ruleStatement_return

    pANTLR3_BASE_TREE char_literal128_tree;
    pANTLR3_BASE_TREE char_literal130_tree;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ruleStatement;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal128       = NULL;
    char_literal130       = NULL;
    ruleStatement129.tree = NULL;

    ruleStatement131.tree = NULL;

    retval.start = LT(1);

    char_literal128_tree   = NULL;
    char_literal130_tree   = NULL;
    stream_ruleStatement=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ruleStatement");
    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:200:2: ( '{' ( ruleStatement )* '}' | ruleStatement -> ^( '{' ruleStatement ) )
            
            ANTLR3_UINT32 alt30;

            alt30=2;


            {
                int LA30_0 = LA(1);
                if ( (LA30_0 == 35) ) 
                {
                    alt30=1;
                }
                else if ( (LA30_0 == IDENT || ((LA30_0 >= 27) && (LA30_0 <= 31)) || LA30_0 == 37 || LA30_0 == 42 || LA30_0 == 53 || LA30_0 == 55 || ((LA30_0 >= 58) && (LA30_0 <= 80))) ) 
                {
                    alt30=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 30;
                    EXCEPTION->state        = 0;


                    goto ruleruleBlockEx;
                }
            }
            switch (alt30) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:200:4: '{' ( ruleStatement )* '}'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal128 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_ruleBlock1686); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleBlockEx;
        	        }

        	        char_literal128_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal128));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal128_tree, root_0));


        	        // ../base/antlr/NDDL3.g:200:9: ( ruleStatement )*

        	        for (;;)
        	        {
        	            int alt29=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA29_0 = LA(1);
        	                if ( (LA29_0 == IDENT || ((LA29_0 >= 27) && (LA29_0 <= 31)) || LA29_0 == 37 || LA29_0 == 42 || LA29_0 == 53 || LA29_0 == 55 || ((LA29_0 >= 58) && (LA29_0 <= 80))) ) 
        	                {
        	                    alt29=1;
        	                }

        	            }
        	            switch (alt29) 
        	            {
        	        	case 1:
        	        	    // ../base/antlr/NDDL3.g:200:9: ruleStatement
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_ruleStatement_in_ruleBlock1689);
        	        	        ruleStatement129=ruleStatement(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleruleBlockEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, ruleStatement129.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop29;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop29: ; /* Jump out to here if this rule does not match */

        	        char_literal130 = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_ruleBlock1692); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleBlockEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:201:4: ruleStatement
        	    {
        	        FOLLOWPUSH(FOLLOW_ruleStatement_in_ruleBlock1698);
        	        ruleStatement131=ruleStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleBlockEx;
        	        }

        	        stream_ruleStatement->add(stream_ruleStatement, ruleStatement131.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : ruleStatement, 35
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 201:18: -> ^( '{' ruleStatement )
        	        	{
        	        	    // ../base/antlr/NDDL3.g:201:21: ^( '{' ruleStatement )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, 35, (pANTLR3_UINT8)"35"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ruleStatement->nextTree(stream_ruleStatement));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleruleBlockEx; /* Prevent compiler warnings */
    ruleruleBlockEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    stream_ruleStatement->free(stream_ruleStatement);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end ruleBlock */

/** 
 * $ANTLR start ruleStatement
 * ../base/antlr/NDDL3.g:204:1: ruleStatement : ( relation | variableDeclaration | constraintInstantiation | flowControl | noopstatement );
 */
static NDDL3Parser_ruleStatement_return
ruleStatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_ruleStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_relation_return relation132;
    #undef	RETURN_TYPE_relation132
    #define	RETURN_TYPE_relation132 NDDL3Parser_relation_return

    NDDL3Parser_variableDeclaration_return variableDeclaration133;
    #undef	RETURN_TYPE_variableDeclaration133
    #define	RETURN_TYPE_variableDeclaration133 NDDL3Parser_variableDeclaration_return

    NDDL3Parser_constraintInstantiation_return constraintInstantiation134;
    #undef	RETURN_TYPE_constraintInstantiation134
    #define	RETURN_TYPE_constraintInstantiation134 NDDL3Parser_constraintInstantiation_return

    NDDL3Parser_flowControl_return flowControl135;
    #undef	RETURN_TYPE_flowControl135
    #define	RETURN_TYPE_flowControl135 NDDL3Parser_flowControl_return

    NDDL3Parser_noopstatement_return noopstatement136;
    #undef	RETURN_TYPE_noopstatement136
    #define	RETURN_TYPE_noopstatement136 NDDL3Parser_noopstatement_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    relation132.tree = NULL;

    variableDeclaration133.tree = NULL;

    constraintInstantiation134.tree = NULL;

    flowControl135.tree = NULL;

    noopstatement136.tree = NULL;

    retval.start = LT(1);

    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:205:2: ( relation | variableDeclaration | constraintInstantiation | flowControl | noopstatement )
            
            ANTLR3_UINT32 alt31;

            alt31=5;

            switch ( LA(1) ) 
            {
            case IDENT:
            	{
            		switch ( LA(2) ) 
            		{
            		case 58:
            		case 59:
            		case 60:
            		case 61:
            		case 62:
            		case 63:
            		case 64:
            		case 65:
            		case 66:
            		case 67:
            		case 68:
            		case 69:
            		case 70:
            		case 71:
            		case 72:
            		case 73:
            		case 74:
            		case 75:
            		case 76:
            		case 77:
            		case 78:
            		case 79:
            		case 80:
            			{
            				alt31=1;
            			}
            		    break;
            		case 38:
            			{
            				alt31=3;
            			}
            		    break;
            		case IDENT:
            			{
            				alt31=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 31;
            		    EXCEPTION->state        = 1;


            		    goto ruleruleStatementEx;
            		}

            	}
                break;
            case 42:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            	{
            		alt31=1;
            	}
                break;
            case 28:
            case 29:
            case 30:
            case 31:
            case 37:
            	{
            		alt31=2;
            	}
                break;
            case 53:
            case 55:
            	{
            		alt31=4;
            	}
                break;
            case 27:
            	{
            		alt31=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 31;
                EXCEPTION->state        = 0;


                goto ruleruleStatementEx;
            }

            switch (alt31) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:205:4: relation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_relation_in_ruleStatement1717);
        	        relation132=relation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, relation132.tree);

        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:206:4: variableDeclaration
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_ruleStatement1722);
        	        variableDeclaration133=variableDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, variableDeclaration133.tree);

        	    }
        	    break;
        	case 3:
        	    // ../base/antlr/NDDL3.g:207:4: constraintInstantiation
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constraintInstantiation_in_ruleStatement1727);
        	        constraintInstantiation134=constraintInstantiation(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, constraintInstantiation134.tree);

        	    }
        	    break;
        	case 4:
        	    // ../base/antlr/NDDL3.g:208:4: flowControl
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_flowControl_in_ruleStatement1732);
        	        flowControl135=flowControl(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, flowControl135.tree);

        	    }
        	    break;
        	case 5:
        	    // ../base/antlr/NDDL3.g:209:4: noopstatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noopstatement_in_ruleStatement1737);
        	        noopstatement136=noopstatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleruleStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, noopstatement136.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleruleStatementEx; /* Prevent compiler warnings */
    ruleruleStatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end ruleStatement */

/** 
 * $ANTLR start type
 * ../base/antlr/NDDL3.g:212:1: type : ( 'int' | 'float' | 'bool' | 'string' | IDENT );
 */
static NDDL3Parser_type_return
type(pNDDL3Parser ctx)
{   
    NDDL3Parser_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set137;

    pANTLR3_BASE_TREE set137_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set137       = NULL;
    retval.start = LT(1);

    set137_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:212:6: ( 'int' | 'float' | 'bool' | 'string' | IDENT )
        // ../base/antlr/NDDL3.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set137=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == IDENT || ((LA(1) >= 28) && (LA(1) <= 31)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set137)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_type0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_type0);    goto ruletypeEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end type */

/** 
 * $ANTLR start relation
 * ../base/antlr/NDDL3.g:219:1: relation : (token= IDENT | token= 'this' )? temporalRelation predicateArgumentList ';' -> ^( TOKEN_RELATION $token temporalRelation predicateArgumentList ) ;
 */
static NDDL3Parser_relation_return
relation(pNDDL3Parser ctx)
{   
    NDDL3Parser_relation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    token;
    pANTLR3_COMMON_TOKEN    char_literal140;
    NDDL3Parser_temporalRelation_return temporalRelation138;
    #undef	RETURN_TYPE_temporalRelation138
    #define	RETURN_TYPE_temporalRelation138 NDDL3Parser_temporalRelation_return

    NDDL3Parser_predicateArgumentList_return predicateArgumentList139;
    #undef	RETURN_TYPE_predicateArgumentList139
    #define	RETURN_TYPE_predicateArgumentList139 NDDL3Parser_predicateArgumentList_return

    pANTLR3_BASE_TREE token_tree;
    pANTLR3_BASE_TREE char_literal140_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_42;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_27;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_temporalRelation;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_predicateArgumentList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    token       = NULL;
    char_literal140       = NULL;
    temporalRelation138.tree = NULL;

    predicateArgumentList139.tree = NULL;

    retval.start = LT(1);

    token_tree   = NULL;
    char_literal140_tree   = NULL;
    stream_IDENT   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); 
    stream_42   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 42"); 
    stream_27   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 27"); 
    stream_temporalRelation=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule temporalRelation");
    stream_predicateArgumentList=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule predicateArgumentList");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:219:9: ( (token= IDENT | token= 'this' )? temporalRelation predicateArgumentList ';' -> ^( TOKEN_RELATION $token temporalRelation predicateArgumentList ) )
        // ../base/antlr/NDDL3.g:219:11: (token= IDENT | token= 'this' )? temporalRelation predicateArgumentList ';'
        {

            // ../base/antlr/NDDL3.g:219:11: (token= IDENT | token= 'this' )?
            {
                int alt32=3;
                {
                    int LA32_0 = LA(1);
                    if ( (LA32_0 == IDENT) ) 
                    {
                        alt32=1;
                    }
                    else if ( (LA32_0 == 42) ) 
                    {
                        alt32=2;
                    }
                }
                switch (alt32) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:219:12: token= IDENT
            	    {
            	        token = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_relation1779); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationEx;
            	        }
            	         
            	        stream_IDENT->add(stream_IDENT, token, NULL);


            	    }
            	    break;
            	case 2:
            	    // ../base/antlr/NDDL3.g:219:26: token= 'this'
            	    {
            	        token = (pANTLR3_COMMON_TOKEN) MATCHT(42, &FOLLOW_42_in_relation1785); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationEx;
            	        }
            	         
            	        stream_42->add(stream_42, token, NULL);


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_temporalRelation_in_relation1789);
            temporalRelation138=temporalRelation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerelationEx;
            }

            stream_temporalRelation->add(stream_temporalRelation, temporalRelation138.tree, NULL);
            FOLLOWPUSH(FOLLOW_predicateArgumentList_in_relation1791);
            predicateArgumentList139=predicateArgumentList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerelationEx;
            }

            stream_predicateArgumentList->add(stream_predicateArgumentList, predicateArgumentList139.tree, NULL);
            char_literal140 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_relation1793); 
            if  (HASEXCEPTION())
            {
                goto rulerelationEx;
            }
             
            stream_27->add(stream_27, char_literal140, NULL);


             
            /* AST REWRITE
             * elements          : predicateArgumentList, token, temporalRelation
             * token labels      : token
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_token;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_token=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token token", token);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 220:4: -> ^( TOKEN_RELATION $token temporalRelation predicateArgumentList )
            	{
            	    // ../base/antlr/NDDL3.g:220:7: ^( TOKEN_RELATION $token temporalRelation predicateArgumentList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TOKEN_RELATION, (pANTLR3_UINT8)"TOKEN_RELATION"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_token->nextNode(stream_token));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_temporalRelation->nextTree(stream_temporalRelation));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_predicateArgumentList->nextTree(stream_predicateArgumentList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	stream_token->free(stream_token);
            	stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationEx; /* Prevent compiler warnings */
    rulerelationEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    stream_IDENT->free(stream_IDENT);
    stream_42->free(stream_42);
    stream_27->free(stream_27);
    stream_temporalRelation->free(stream_temporalRelation);
    stream_predicateArgumentList->free(stream_predicateArgumentList);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end relation */

/** 
 * $ANTLR start problemStmt
 * ../base/antlr/NDDL3.g:223:1: problemStmt : ( 'rejectable' | 'goal' | 'fact' ) predicateArgumentList ';' ;
 */
static NDDL3Parser_problemStmt_return
problemStmt(pNDDL3Parser ctx)
{   
    NDDL3Parser_problemStmt_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal141;
    pANTLR3_COMMON_TOKEN    string_literal142;
    pANTLR3_COMMON_TOKEN    string_literal143;
    pANTLR3_COMMON_TOKEN    char_literal145;
    NDDL3Parser_predicateArgumentList_return predicateArgumentList144;
    #undef	RETURN_TYPE_predicateArgumentList144
    #define	RETURN_TYPE_predicateArgumentList144 NDDL3Parser_predicateArgumentList_return

    pANTLR3_BASE_TREE string_literal141_tree;
    pANTLR3_BASE_TREE string_literal142_tree;
    pANTLR3_BASE_TREE string_literal143_tree;
    pANTLR3_BASE_TREE char_literal145_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal141       = NULL;
    string_literal142       = NULL;
    string_literal143       = NULL;
    char_literal145       = NULL;
    predicateArgumentList144.tree = NULL;

    retval.start = LT(1);

    string_literal141_tree   = NULL;
    string_literal142_tree   = NULL;
    string_literal143_tree   = NULL;
    char_literal145_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:223:17: ( ( 'rejectable' | 'goal' | 'fact' ) predicateArgumentList ';' )
        // ../base/antlr/NDDL3.g:223:19: ( 'rejectable' | 'goal' | 'fact' ) predicateArgumentList ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // ../base/antlr/NDDL3.g:223:19: ( 'rejectable' | 'goal' | 'fact' )
            {
                int alt33=3;
                switch ( LA(1) ) 
                {
                case 49:
                	{
                		alt33=1;
                	}
                    break;
                case 50:
                	{
                		alt33=2;
                	}
                    break;
                case 51:
                	{
                		alt33=3;
                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 33;
                    EXCEPTION->state        = 0;


                    goto ruleproblemStmtEx;
                }

                switch (alt33) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:223:20: 'rejectable'
            	    {
            	        string_literal141 = (pANTLR3_COMMON_TOKEN) MATCHT(49, &FOLLOW_49_in_problemStmt1831); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleproblemStmtEx;
            	        }

            	        string_literal141_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal141));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal141_tree, root_0));


            	    }
            	    break;
            	case 2:
            	    // ../base/antlr/NDDL3.g:223:36: 'goal'
            	    {
            	        string_literal142 = (pANTLR3_COMMON_TOKEN) MATCHT(50, &FOLLOW_50_in_problemStmt1836); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleproblemStmtEx;
            	        }

            	        string_literal142_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal142));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal142_tree, root_0));


            	    }
            	    break;
            	case 3:
            	    // ../base/antlr/NDDL3.g:223:46: 'fact'
            	    {
            	        string_literal143 = (pANTLR3_COMMON_TOKEN) MATCHT(51, &FOLLOW_51_in_problemStmt1841); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleproblemStmtEx;
            	        }

            	        string_literal143_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal143));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal143_tree, root_0));


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_predicateArgumentList_in_problemStmt1845);
            predicateArgumentList144=predicateArgumentList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleproblemStmtEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, predicateArgumentList144.tree);
            char_literal145 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_problemStmt1847); 
            if  (HASEXCEPTION())
            {
                goto ruleproblemStmtEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleproblemStmtEx; /* Prevent compiler warnings */
    ruleproblemStmtEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end problemStmt */

/** 
 * $ANTLR start predicateArgumentList
 * ../base/antlr/NDDL3.g:226:1: predicateArgumentList : ( IDENT | '(' ( predicateArguments )? ')' );
 */
static NDDL3Parser_predicateArgumentList_return
predicateArgumentList(pNDDL3Parser ctx)
{   
    NDDL3Parser_predicateArgumentList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT146;
    pANTLR3_COMMON_TOKEN    char_literal147;
    pANTLR3_COMMON_TOKEN    char_literal149;
    NDDL3Parser_predicateArguments_return predicateArguments148;
    #undef	RETURN_TYPE_predicateArguments148
    #define	RETURN_TYPE_predicateArguments148 NDDL3Parser_predicateArguments_return

    pANTLR3_BASE_TREE IDENT146_tree;
    pANTLR3_BASE_TREE char_literal147_tree;
    pANTLR3_BASE_TREE char_literal149_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT146       = NULL;
    char_literal147       = NULL;
    char_literal149       = NULL;
    predicateArguments148.tree = NULL;

    retval.start = LT(1);

    IDENT146_tree   = NULL;
    char_literal147_tree   = NULL;
    char_literal149_tree   = NULL;
    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:227:2: ( IDENT | '(' ( predicateArguments )? ')' )
            
            ANTLR3_UINT32 alt35;

            alt35=2;


            {
                int LA35_0 = LA(1);
                if ( (LA35_0 == IDENT) ) 
                {
                    alt35=1;
                }
                else if ( (LA35_0 == 38) ) 
                {
                    alt35=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 35;
                    EXCEPTION->state        = 0;


                    goto rulepredicateArgumentListEx;
                }
            }
            switch (alt35) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:227:4: IDENT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        IDENT146 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_predicateArgumentList1867); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepredicateArgumentListEx;
        	        }

        	        IDENT146_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT146));
        	        ADAPTOR->addChild(ADAPTOR, root_0, IDENT146_tree);


        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:228:4: '(' ( predicateArguments )? ')'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal147 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_predicateArgumentList1872); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepredicateArgumentListEx;
        	        }

        	        char_literal147_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal147));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal147_tree, root_0));


        	        // ../base/antlr/NDDL3.g:228:9: ( predicateArguments )?
        	        {
        	            int alt34=2;
        	            {
        	                int LA34_0 = LA(1);
        	                if ( (LA34_0 == IDENT || LA34_0 == 42) ) 
        	                {
        	                    alt34=1;
        	                }
        	            }
        	            switch (alt34) 
        	            {
        	        	case 1:
        	        	    // ../base/antlr/NDDL3.g:228:9: predicateArguments
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_predicateArguments_in_predicateArgumentList1875);
        	        	        predicateArguments148=predicateArguments(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepredicateArgumentListEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, predicateArguments148.tree);

        	        	    }
        	        	    break;

        	            }
        	        }
        	        char_literal149 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_predicateArgumentList1878); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepredicateArgumentListEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepredicateArgumentListEx; /* Prevent compiler warnings */
    rulepredicateArgumentListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end predicateArgumentList */

/** 
 * $ANTLR start predicateArguments
 * ../base/antlr/NDDL3.g:231:1: predicateArguments : predicateArgument ( ',' predicateArgument )* ;
 */
static NDDL3Parser_predicateArguments_return
predicateArguments(pNDDL3Parser ctx)
{   
    NDDL3Parser_predicateArguments_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal151;
    NDDL3Parser_predicateArgument_return predicateArgument150;
    #undef	RETURN_TYPE_predicateArgument150
    #define	RETURN_TYPE_predicateArgument150 NDDL3Parser_predicateArgument_return

    NDDL3Parser_predicateArgument_return predicateArgument152;
    #undef	RETURN_TYPE_predicateArgument152
    #define	RETURN_TYPE_predicateArgument152 NDDL3Parser_predicateArgument_return

    pANTLR3_BASE_TREE char_literal151_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal151       = NULL;
    predicateArgument150.tree = NULL;

    predicateArgument152.tree = NULL;

    retval.start = LT(1);

    char_literal151_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:232:2: ( predicateArgument ( ',' predicateArgument )* )
        // ../base/antlr/NDDL3.g:232:4: predicateArgument ( ',' predicateArgument )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_predicateArgument_in_predicateArguments1890);
            predicateArgument150=predicateArgument(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepredicateArgumentsEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, predicateArgument150.tree);

            // ../base/antlr/NDDL3.g:232:22: ( ',' predicateArgument )*

            for (;;)
            {
                int alt36=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA36_0 = LA(1);
                    if ( (LA36_0 == 33) ) 
                    {
                        alt36=1;
                    }

                }
                switch (alt36) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:232:23: ',' predicateArgument
            	    {
            	        char_literal151 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_predicateArguments1893); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepredicateArgumentsEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_predicateArgument_in_predicateArguments1896);
            	        predicateArgument152=predicateArgument(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepredicateArgumentsEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, predicateArgument152.tree);

            	    }
            	    break;

            	default:
            	    goto loop36;	/* break out of the loop */
            	    break;
                }
            }
            loop36: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepredicateArgumentsEx; /* Prevent compiler warnings */
    rulepredicateArgumentsEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end predicateArguments */

/** 
 * $ANTLR start predicateArgument
 * ../base/antlr/NDDL3.g:235:1: predicateArgument : qualified ( IDENT )? -> ^( qualified ( IDENT )? ) ;
 */
static NDDL3Parser_predicateArgument_return
predicateArgument(pNDDL3Parser ctx)
{   
    NDDL3Parser_predicateArgument_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT154;
    NDDL3Parser_qualified_return qualified153;
    #undef	RETURN_TYPE_qualified153
    #define	RETURN_TYPE_qualified153 NDDL3Parser_qualified_return

    pANTLR3_BASE_TREE IDENT154_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_qualified;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT154       = NULL;
    qualified153.tree = NULL;

    retval.start = LT(1);

    IDENT154_tree   = NULL;
    stream_IDENT   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); 
    stream_qualified=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule qualified");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:236:2: ( qualified ( IDENT )? -> ^( qualified ( IDENT )? ) )
        // ../base/antlr/NDDL3.g:236:4: qualified ( IDENT )?
        {
            FOLLOWPUSH(FOLLOW_qualified_in_predicateArgument1909);
            qualified153=qualified(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepredicateArgumentEx;
            }

            stream_qualified->add(stream_qualified, qualified153.tree, NULL);

            // ../base/antlr/NDDL3.g:236:14: ( IDENT )?
            {
                int alt37=2;
                {
                    int LA37_0 = LA(1);
                    if ( (LA37_0 == IDENT) ) 
                    {
                        alt37=1;
                    }
                }
                switch (alt37) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:236:14: IDENT
            	    {
            	        IDENT154 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_predicateArgument1911); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepredicateArgumentEx;
            	        }
            	         
            	        stream_IDENT->add(stream_IDENT, IDENT154, NULL);


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : qualified, IDENT
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 237:4: -> ^( qualified ( IDENT )? )
            	{
            	    // ../base/antlr/NDDL3.g:237:7: ^( qualified ( IDENT )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_qualified->nextNode(stream_qualified), root_1));

            	        // ../base/antlr/NDDL3.g:237:19: ( IDENT )?
            	        {
            	        	if ( stream_IDENT->hasNext(stream_IDENT) ) 
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT->nextNode(stream_IDENT));

            	        	}
            	        	stream_IDENT->reset(stream_IDENT);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepredicateArgumentEx; /* Prevent compiler warnings */
    rulepredicateArgumentEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    stream_IDENT->free(stream_IDENT);
    stream_qualified->free(stream_qualified);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end predicateArgument */

/** 
 * $ANTLR start constraintInstantiation
 * ../base/antlr/NDDL3.g:240:1: constraintInstantiation : IDENT variableArgumentList ';' -> ^( CONSTRAINT_INSTANTIATION IDENT variableArgumentList ) ;
 */
static NDDL3Parser_constraintInstantiation_return
constraintInstantiation(pNDDL3Parser ctx)
{   
    NDDL3Parser_constraintInstantiation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT155;
    pANTLR3_COMMON_TOKEN    char_literal157;
    NDDL3Parser_variableArgumentList_return variableArgumentList156;
    #undef	RETURN_TYPE_variableArgumentList156
    #define	RETURN_TYPE_variableArgumentList156 NDDL3Parser_variableArgumentList_return

    pANTLR3_BASE_TREE IDENT155_tree;
    pANTLR3_BASE_TREE char_literal157_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_27;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableArgumentList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT155       = NULL;
    char_literal157       = NULL;
    variableArgumentList156.tree = NULL;

    retval.start = LT(1);

    IDENT155_tree   = NULL;
    char_literal157_tree   = NULL;
    stream_IDENT   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); 
    stream_27   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 27"); 
    stream_variableArgumentList=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableArgumentList");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:241:2: ( IDENT variableArgumentList ';' -> ^( CONSTRAINT_INSTANTIATION IDENT variableArgumentList ) )
        // ../base/antlr/NDDL3.g:241:4: IDENT variableArgumentList ';'
        {
            IDENT155 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_constraintInstantiation1935); 
            if  (HASEXCEPTION())
            {
                goto ruleconstraintInstantiationEx;
            }
             
            stream_IDENT->add(stream_IDENT, IDENT155, NULL);

            FOLLOWPUSH(FOLLOW_variableArgumentList_in_constraintInstantiation1937);
            variableArgumentList156=variableArgumentList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstraintInstantiationEx;
            }

            stream_variableArgumentList->add(stream_variableArgumentList, variableArgumentList156.tree, NULL);
            char_literal157 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_constraintInstantiation1939); 
            if  (HASEXCEPTION())
            {
                goto ruleconstraintInstantiationEx;
            }
             
            stream_27->add(stream_27, char_literal157, NULL);


             
            /* AST REWRITE
             * elements          : variableArgumentList, IDENT
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 242:4: -> ^( CONSTRAINT_INSTANTIATION IDENT variableArgumentList )
            	{
            	    // ../base/antlr/NDDL3.g:242:7: ^( CONSTRAINT_INSTANTIATION IDENT variableArgumentList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONSTRAINT_INSTANTIATION, (pANTLR3_UINT8)"CONSTRAINT_INSTANTIATION"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENT->nextNode(stream_IDENT));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableArgumentList->nextTree(stream_variableArgumentList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstraintInstantiationEx; /* Prevent compiler warnings */
    ruleconstraintInstantiationEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    stream_IDENT->free(stream_IDENT);
    stream_27->free(stream_27);
    stream_variableArgumentList->free(stream_variableArgumentList);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constraintInstantiation */

/** 
 * $ANTLR start superInvocation
 * ../base/antlr/NDDL3.g:245:1: superInvocation : 'super' variableArgumentList ';' ;
 */
static NDDL3Parser_superInvocation_return
superInvocation(pNDDL3Parser ctx)
{   
    NDDL3Parser_superInvocation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal158;
    pANTLR3_COMMON_TOKEN    char_literal160;
    NDDL3Parser_variableArgumentList_return variableArgumentList159;
    #undef	RETURN_TYPE_variableArgumentList159
    #define	RETURN_TYPE_variableArgumentList159 NDDL3Parser_variableArgumentList_return

    pANTLR3_BASE_TREE string_literal158_tree;
    pANTLR3_BASE_TREE char_literal160_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal158       = NULL;
    char_literal160       = NULL;
    variableArgumentList159.tree = NULL;

    retval.start = LT(1);

    string_literal158_tree   = NULL;
    char_literal160_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:246:2: ( 'super' variableArgumentList ';' )
        // ../base/antlr/NDDL3.g:246:4: 'super' variableArgumentList ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            string_literal158 = (pANTLR3_COMMON_TOKEN) MATCHT(52, &FOLLOW_52_in_superInvocation1963); 
            if  (HASEXCEPTION())
            {
                goto rulesuperInvocationEx;
            }

            string_literal158_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal158));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal158_tree, root_0));

            FOLLOWPUSH(FOLLOW_variableArgumentList_in_superInvocation1966);
            variableArgumentList159=variableArgumentList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesuperInvocationEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, variableArgumentList159.tree);
            char_literal160 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_superInvocation1968); 
            if  (HASEXCEPTION())
            {
                goto rulesuperInvocationEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesuperInvocationEx; /* Prevent compiler warnings */
    rulesuperInvocationEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end superInvocation */

/** 
 * $ANTLR start variableArgumentList
 * ../base/antlr/NDDL3.g:249:1: variableArgumentList : '(' ( variableArguments )? ')' ;
 */
static NDDL3Parser_variableArgumentList_return
variableArgumentList(pNDDL3Parser ctx)
{   
    NDDL3Parser_variableArgumentList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal161;
    pANTLR3_COMMON_TOKEN    char_literal163;
    NDDL3Parser_variableArguments_return variableArguments162;
    #undef	RETURN_TYPE_variableArguments162
    #define	RETURN_TYPE_variableArguments162 NDDL3Parser_variableArguments_return

    pANTLR3_BASE_TREE char_literal161_tree;
    pANTLR3_BASE_TREE char_literal163_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal161       = NULL;
    char_literal163       = NULL;
    variableArguments162.tree = NULL;

    retval.start = LT(1);

    char_literal161_tree   = NULL;
    char_literal163_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:250:2: ( '(' ( variableArguments )? ')' )
        // ../base/antlr/NDDL3.g:250:4: '(' ( variableArguments )? ')'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal161 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_variableArgumentList1980); 
            if  (HASEXCEPTION())
            {
                goto rulevariableArgumentListEx;
            }

            char_literal161_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal161));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal161_tree, root_0));


            // ../base/antlr/NDDL3.g:250:9: ( variableArguments )?
            {
                int alt38=2;
                {
                    int LA38_0 = LA(1);
                    if ( (((LA38_0 >= IDENT) && (LA38_0 <= FLOAT)) || LA38_0 == 32 || LA38_0 == 35 || ((LA38_0 >= 41) && (LA38_0 <= 42)) || ((LA38_0 >= 81) && (LA38_0 <= 85))) ) 
                    {
                        alt38=1;
                    }
                }
                switch (alt38) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:250:9: variableArguments
            	    {
            	        FOLLOWPUSH(FOLLOW_variableArguments_in_variableArgumentList1983);
            	        variableArguments162=variableArguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableArgumentListEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, variableArguments162.tree);

            	    }
            	    break;

                }
            }
            char_literal163 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_variableArgumentList1986); 
            if  (HASEXCEPTION())
            {
                goto rulevariableArgumentListEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableArgumentListEx; /* Prevent compiler warnings */
    rulevariableArgumentListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end variableArgumentList */

/** 
 * $ANTLR start variableArguments
 * ../base/antlr/NDDL3.g:253:1: variableArguments : variableArgument ( ',' variableArgument )* ;
 */
static NDDL3Parser_variableArguments_return
variableArguments(pNDDL3Parser ctx)
{   
    NDDL3Parser_variableArguments_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal165;
    NDDL3Parser_variableArgument_return variableArgument164;
    #undef	RETURN_TYPE_variableArgument164
    #define	RETURN_TYPE_variableArgument164 NDDL3Parser_variableArgument_return

    NDDL3Parser_variableArgument_return variableArgument166;
    #undef	RETURN_TYPE_variableArgument166
    #define	RETURN_TYPE_variableArgument166 NDDL3Parser_variableArgument_return

    pANTLR3_BASE_TREE char_literal165_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal165       = NULL;
    variableArgument164.tree = NULL;

    variableArgument166.tree = NULL;

    retval.start = LT(1);

    char_literal165_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:254:2: ( variableArgument ( ',' variableArgument )* )
        // ../base/antlr/NDDL3.g:254:4: variableArgument ( ',' variableArgument )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_variableArgument_in_variableArguments1998);
            variableArgument164=variableArgument(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableArgumentsEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, variableArgument164.tree);

            // ../base/antlr/NDDL3.g:254:21: ( ',' variableArgument )*

            for (;;)
            {
                int alt39=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == 33) ) 
                    {
                        alt39=1;
                    }

                }
                switch (alt39) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:254:22: ',' variableArgument
            	    {
            	        char_literal165 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_variableArguments2001); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableArgumentsEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_variableArgument_in_variableArguments2004);
            	        variableArgument166=variableArgument(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableArgumentsEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, variableArgument166.tree);

            	    }
            	    break;

            	default:
            	    goto loop39;	/* break out of the loop */
            	    break;
                }
            }
            loop39: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableArgumentsEx; /* Prevent compiler warnings */
    rulevariableArgumentsEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end variableArguments */

/** 
 * $ANTLR start variableArgument
 * ../base/antlr/NDDL3.g:258:1: variableArgument : anyValue ;
 */
static NDDL3Parser_variableArgument_return
variableArgument(pNDDL3Parser ctx)
{   
    NDDL3Parser_variableArgument_return retval;

    pANTLR3_BASE_TREE root_0;

    NDDL3Parser_anyValue_return anyValue167;
    #undef	RETURN_TYPE_anyValue167
    #define	RETURN_TYPE_anyValue167 NDDL3Parser_anyValue_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    anyValue167.tree = NULL;

    retval.start = LT(1);

    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:259:2: ( anyValue )
        // ../base/antlr/NDDL3.g:259:4: anyValue
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_anyValue_in_variableArgument2018);
            anyValue167=anyValue(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableArgumentEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, anyValue167.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableArgumentEx; /* Prevent compiler warnings */
    rulevariableArgumentEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end variableArgument */

/** 
 * $ANTLR start typeArgumentList
 * ../base/antlr/NDDL3.g:262:1: typeArgumentList : '(' ( typeArguments )? ')' ;
 */
static NDDL3Parser_typeArgumentList_return
typeArgumentList(pNDDL3Parser ctx)
{   
    NDDL3Parser_typeArgumentList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal168;
    pANTLR3_COMMON_TOKEN    char_literal170;
    NDDL3Parser_typeArguments_return typeArguments169;
    #undef	RETURN_TYPE_typeArguments169
    #define	RETURN_TYPE_typeArguments169 NDDL3Parser_typeArguments_return

    pANTLR3_BASE_TREE char_literal168_tree;
    pANTLR3_BASE_TREE char_literal170_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal168       = NULL;
    char_literal170       = NULL;
    typeArguments169.tree = NULL;

    retval.start = LT(1);

    char_literal168_tree   = NULL;
    char_literal170_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:263:2: ( '(' ( typeArguments )? ')' )
        // ../base/antlr/NDDL3.g:263:4: '(' ( typeArguments )? ')'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal168 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_typeArgumentList2029); 
            if  (HASEXCEPTION())
            {
                goto ruletypeArgumentListEx;
            }

            char_literal168_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal168));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal168_tree, root_0));


            // ../base/antlr/NDDL3.g:263:9: ( typeArguments )?
            {
                int alt40=2;
                {
                    int LA40_0 = LA(1);
                    if ( (LA40_0 == IDENT) ) 
                    {
                        alt40=1;
                    }
                }
                switch (alt40) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:263:9: typeArguments
            	    {
            	        FOLLOWPUSH(FOLLOW_typeArguments_in_typeArgumentList2032);
            	        typeArguments169=typeArguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletypeArgumentListEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, typeArguments169.tree);

            	    }
            	    break;

                }
            }
            char_literal170 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_typeArgumentList2035); 
            if  (HASEXCEPTION())
            {
                goto ruletypeArgumentListEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeArgumentListEx; /* Prevent compiler warnings */
    ruletypeArgumentListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end typeArgumentList */

/** 
 * $ANTLR start typeArguments
 * ../base/antlr/NDDL3.g:266:1: typeArguments : typeArgument ( ',' typeArgument )* ;
 */
static NDDL3Parser_typeArguments_return
typeArguments(pNDDL3Parser ctx)
{   
    NDDL3Parser_typeArguments_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal172;
    NDDL3Parser_typeArgument_return typeArgument171;
    #undef	RETURN_TYPE_typeArgument171
    #define	RETURN_TYPE_typeArgument171 NDDL3Parser_typeArgument_return

    NDDL3Parser_typeArgument_return typeArgument173;
    #undef	RETURN_TYPE_typeArgument173
    #define	RETURN_TYPE_typeArgument173 NDDL3Parser_typeArgument_return

    pANTLR3_BASE_TREE char_literal172_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal172       = NULL;
    typeArgument171.tree = NULL;

    typeArgument173.tree = NULL;

    retval.start = LT(1);

    char_literal172_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:267:2: ( typeArgument ( ',' typeArgument )* )
        // ../base/antlr/NDDL3.g:267:4: typeArgument ( ',' typeArgument )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_typeArgument_in_typeArguments2047);
            typeArgument171=typeArgument(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletypeArgumentsEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, typeArgument171.tree);

            // ../base/antlr/NDDL3.g:267:17: ( ',' typeArgument )*

            for (;;)
            {
                int alt41=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA41_0 = LA(1);
                    if ( (LA41_0 == 33) ) 
                    {
                        alt41=1;
                    }

                }
                switch (alt41) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:267:18: ',' typeArgument
            	    {
            	        char_literal172 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_typeArguments2050); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletypeArgumentsEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_typeArgument_in_typeArguments2053);
            	        typeArgument173=typeArgument(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletypeArgumentsEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, typeArgument173.tree);

            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeArgumentsEx; /* Prevent compiler warnings */
    ruletypeArgumentsEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end typeArguments */

/** 
 * $ANTLR start typeArgument
 * ../base/antlr/NDDL3.g:270:1: typeArgument : IDENT ;
 */
static NDDL3Parser_typeArgument_return
typeArgument(pNDDL3Parser ctx)
{   
    NDDL3Parser_typeArgument_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT174;

    pANTLR3_BASE_TREE IDENT174_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT174       = NULL;
    retval.start = LT(1);

    IDENT174_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:271:2: ( IDENT )
        // ../base/antlr/NDDL3.g:271:4: IDENT
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            IDENT174 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_typeArgument2066); 
            if  (HASEXCEPTION())
            {
                goto ruletypeArgumentEx;
            }

            IDENT174_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT174));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT174_tree);


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletypeArgumentEx; /* Prevent compiler warnings */
    ruletypeArgumentEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end typeArgument */

/** 
 * $ANTLR start flowControl
 * ../base/antlr/NDDL3.g:274:1: flowControl : ( 'if' guardExpression ruleBlock ( options {k=1; } : 'else' ruleBlock )? | 'foreach' '(' IDENT 'in' qualified ')' ruleBlock );
 */
static NDDL3Parser_flowControl_return
flowControl(pNDDL3Parser ctx)
{   
    NDDL3Parser_flowControl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal175;
    pANTLR3_COMMON_TOKEN    string_literal178;
    pANTLR3_COMMON_TOKEN    string_literal180;
    pANTLR3_COMMON_TOKEN    char_literal181;
    pANTLR3_COMMON_TOKEN    IDENT182;
    pANTLR3_COMMON_TOKEN    string_literal183;
    pANTLR3_COMMON_TOKEN    char_literal185;
    NDDL3Parser_guardExpression_return guardExpression176;
    #undef	RETURN_TYPE_guardExpression176
    #define	RETURN_TYPE_guardExpression176 NDDL3Parser_guardExpression_return

    NDDL3Parser_ruleBlock_return ruleBlock177;
    #undef	RETURN_TYPE_ruleBlock177
    #define	RETURN_TYPE_ruleBlock177 NDDL3Parser_ruleBlock_return

    NDDL3Parser_ruleBlock_return ruleBlock179;
    #undef	RETURN_TYPE_ruleBlock179
    #define	RETURN_TYPE_ruleBlock179 NDDL3Parser_ruleBlock_return

    NDDL3Parser_qualified_return qualified184;
    #undef	RETURN_TYPE_qualified184
    #define	RETURN_TYPE_qualified184 NDDL3Parser_qualified_return

    NDDL3Parser_ruleBlock_return ruleBlock186;
    #undef	RETURN_TYPE_ruleBlock186
    #define	RETURN_TYPE_ruleBlock186 NDDL3Parser_ruleBlock_return

    pANTLR3_BASE_TREE string_literal175_tree;
    pANTLR3_BASE_TREE string_literal178_tree;
    pANTLR3_BASE_TREE string_literal180_tree;
    pANTLR3_BASE_TREE char_literal181_tree;
    pANTLR3_BASE_TREE IDENT182_tree;
    pANTLR3_BASE_TREE string_literal183_tree;
    pANTLR3_BASE_TREE char_literal185_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal175       = NULL;
    string_literal178       = NULL;
    string_literal180       = NULL;
    char_literal181       = NULL;
    IDENT182       = NULL;
    string_literal183       = NULL;
    char_literal185       = NULL;
    guardExpression176.tree = NULL;

    ruleBlock177.tree = NULL;

    ruleBlock179.tree = NULL;

    qualified184.tree = NULL;

    ruleBlock186.tree = NULL;

    retval.start = LT(1);

    string_literal175_tree   = NULL;
    string_literal178_tree   = NULL;
    string_literal180_tree   = NULL;
    char_literal181_tree   = NULL;
    IDENT182_tree   = NULL;
    string_literal183_tree   = NULL;
    char_literal185_tree   = NULL;
    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:275:2: ( 'if' guardExpression ruleBlock ( options {k=1; } : 'else' ruleBlock )? | 'foreach' '(' IDENT 'in' qualified ')' ruleBlock )
            
            ANTLR3_UINT32 alt43;

            alt43=2;


            {
                int LA43_0 = LA(1);
                if ( (LA43_0 == 53) ) 
                {
                    alt43=1;
                }
                else if ( (LA43_0 == 55) ) 
                {
                    alt43=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 43;
                    EXCEPTION->state        = 0;


                    goto ruleflowControlEx;
                }
            }
            switch (alt43) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:275:4: 'if' guardExpression ruleBlock ( options {k=1; } : 'else' ruleBlock )?
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal175 = (pANTLR3_COMMON_TOKEN) MATCHT(53, &FOLLOW_53_in_flowControl2077); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }

        	        string_literal175_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal175));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal175_tree, root_0));

        	        FOLLOWPUSH(FOLLOW_guardExpression_in_flowControl2080);
        	        guardExpression176=guardExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, guardExpression176.tree);
        	        FOLLOWPUSH(FOLLOW_ruleBlock_in_flowControl2082);
        	        ruleBlock177=ruleBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, ruleBlock177.tree);

        	        // ../base/antlr/NDDL3.g:275:36: ( options {k=1; } : 'else' ruleBlock )?
        	        {
        	            int alt42=2;
        	            alt42 = cdfa42.predict(ctx, RECOGNIZER, ISTREAM, &cdfa42);
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleflowControlEx;
        	            }

        	            switch (alt42) 
        	            {
        	        	case 1:
        	        	    // ../base/antlr/NDDL3.g:275:52: 'else' ruleBlock
        	        	    {
        	        	        string_literal178 = (pANTLR3_COMMON_TOKEN) MATCHT(54, &FOLLOW_54_in_flowControl2092); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleflowControlEx;
        	        	        }

        	        	        FOLLOWPUSH(FOLLOW_ruleBlock_in_flowControl2095);
        	        	        ruleBlock179=ruleBlock(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleflowControlEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, ruleBlock179.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:276:4: 'foreach' '(' IDENT 'in' qualified ')' ruleBlock
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal180 = (pANTLR3_COMMON_TOKEN) MATCHT(55, &FOLLOW_55_in_flowControl2102); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }

        	        string_literal180_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal180));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal180_tree, root_0));

        	        char_literal181 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_flowControl2105); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }

        	        IDENT182 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_flowControl2108); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }

        	        IDENT182_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT182));
        	        ADAPTOR->addChild(ADAPTOR, root_0, IDENT182_tree);

        	        string_literal183 = (pANTLR3_COMMON_TOKEN) MATCHT(44, &FOLLOW_44_in_flowControl2110); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_qualified_in_flowControl2113);
        	        qualified184=qualified(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, qualified184.tree);
        	        char_literal185 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_flowControl2115); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_ruleBlock_in_flowControl2118);
        	        ruleBlock186=ruleBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflowControlEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, ruleBlock186.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleflowControlEx; /* Prevent compiler warnings */
    ruleflowControlEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end flowControl */

/** 
 * $ANTLR start guardExpression
 * ../base/antlr/NDDL3.g:281:1: guardExpression : '(' anyValue ( ( '==' | '!=' ) anyValue )? ')' ;
 */
static NDDL3Parser_guardExpression_return
guardExpression(pNDDL3Parser ctx)
{   
    NDDL3Parser_guardExpression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal187;
    pANTLR3_COMMON_TOKEN    string_literal189;
    pANTLR3_COMMON_TOKEN    string_literal190;
    pANTLR3_COMMON_TOKEN    char_literal192;
    NDDL3Parser_anyValue_return anyValue188;
    #undef	RETURN_TYPE_anyValue188
    #define	RETURN_TYPE_anyValue188 NDDL3Parser_anyValue_return

    NDDL3Parser_anyValue_return anyValue191;
    #undef	RETURN_TYPE_anyValue191
    #define	RETURN_TYPE_anyValue191 NDDL3Parser_anyValue_return

    pANTLR3_BASE_TREE char_literal187_tree;
    pANTLR3_BASE_TREE string_literal189_tree;
    pANTLR3_BASE_TREE string_literal190_tree;
    pANTLR3_BASE_TREE char_literal192_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal187       = NULL;
    string_literal189       = NULL;
    string_literal190       = NULL;
    char_literal192       = NULL;
    anyValue188.tree = NULL;

    anyValue191.tree = NULL;

    retval.start = LT(1);

    char_literal187_tree   = NULL;
    string_literal189_tree   = NULL;
    string_literal190_tree   = NULL;
    char_literal192_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:282:2: ( '(' anyValue ( ( '==' | '!=' ) anyValue )? ')' )
        // ../base/antlr/NDDL3.g:282:4: '(' anyValue ( ( '==' | '!=' ) anyValue )? ')'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal187 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_guardExpression2132); 
            if  (HASEXCEPTION())
            {
                goto ruleguardExpressionEx;
            }

            FOLLOWPUSH(FOLLOW_anyValue_in_guardExpression2135);
            anyValue188=anyValue(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleguardExpressionEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, anyValue188.tree);

            // ../base/antlr/NDDL3.g:282:18: ( ( '==' | '!=' ) anyValue )?
            {
                int alt45=2;
                {
                    int LA45_0 = LA(1);
                    if ( (((LA45_0 >= 56) && (LA45_0 <= 57))) ) 
                    {
                        alt45=1;
                    }
                }
                switch (alt45) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:282:19: ( '==' | '!=' ) anyValue
            	    {

            	        // ../base/antlr/NDDL3.g:282:19: ( '==' | '!=' )
            	        {
            	            int alt44=2;

            	            {
            	                int LA44_0 = LA(1);
            	                if ( (LA44_0 == 56) ) 
            	                {
            	                    alt44=1;
            	                }
            	                else if ( (LA44_0 == 57) ) 
            	                {
            	                    alt44=2;
            	                }
            	                else 
            	                {
            	                
            	                    CONSTRUCTEX();
            	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                    EXCEPTION->message      = (void *)"";
            	                    EXCEPTION->decisionNum  = 44;
            	                    EXCEPTION->state        = 0;


            	                    goto ruleguardExpressionEx;
            	                }
            	            }
            	            switch (alt44) 
            	            {
            	        	case 1:
            	        	    // ../base/antlr/NDDL3.g:282:20: '=='
            	        	    {
            	        	        string_literal189 = (pANTLR3_COMMON_TOKEN) MATCHT(56, &FOLLOW_56_in_guardExpression2139); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleguardExpressionEx;
            	        	        }

            	        	        string_literal189_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal189));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal189_tree, root_0));


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ../base/antlr/NDDL3.g:282:28: '!='
            	        	    {
            	        	        string_literal190 = (pANTLR3_COMMON_TOKEN) MATCHT(57, &FOLLOW_57_in_guardExpression2144); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleguardExpressionEx;
            	        	        }

            	        	        string_literal190_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal190));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal190_tree, root_0));


            	        	    }
            	        	    break;

            	            }
            	        }
            	        FOLLOWPUSH(FOLLOW_anyValue_in_guardExpression2148);
            	        anyValue191=anyValue(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleguardExpressionEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, anyValue191.tree);

            	    }
            	    break;

                }
            }
            char_literal192 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_guardExpression2152); 
            if  (HASEXCEPTION())
            {
                goto ruleguardExpressionEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleguardExpressionEx; /* Prevent compiler warnings */
    ruleguardExpressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end guardExpression */

/** 
 * $ANTLR start allocationStmt
 * ../base/antlr/NDDL3.g:285:1: allocationStmt : allocation ';' ;
 */
static NDDL3Parser_allocationStmt_return
allocationStmt(pNDDL3Parser ctx)
{   
    NDDL3Parser_allocationStmt_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal194;
    NDDL3Parser_allocation_return allocation193;
    #undef	RETURN_TYPE_allocation193
    #define	RETURN_TYPE_allocation193 NDDL3Parser_allocation_return

    pANTLR3_BASE_TREE char_literal194_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal194       = NULL;
    allocation193.tree = NULL;

    retval.start = LT(1);

    char_literal194_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:286:2: ( allocation ';' )
        // ../base/antlr/NDDL3.g:286:4: allocation ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_allocation_in_allocationStmt2174);
            allocation193=allocation(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleallocationStmtEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, allocation193.tree);
            char_literal194 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_allocationStmt2176); 
            if  (HASEXCEPTION())
            {
                goto ruleallocationStmtEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleallocationStmtEx; /* Prevent compiler warnings */
    ruleallocationStmtEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end allocationStmt */

/** 
 * $ANTLR start temporalRelation
 * ../base/antlr/NDDL3.g:289:1: temporalRelation : ( 'after' | 'any' | 'before' | 'contained_by' | 'contains' | 'contains_end' | 'contains_start' | 'ends' | 'ends_after' | 'ends_after_start' | 'ends_before' | 'ends_during' | 'equal' | 'equals' | 'meets' | 'met_by' | 'parallels' | 'paralleled_by' | 'starts' | 'starts_after' | 'starts_before' | 'starts_before_end' | 'starts_during' );
 */
static NDDL3Parser_temporalRelation_return
temporalRelation(pNDDL3Parser ctx)
{   
    NDDL3Parser_temporalRelation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set195;

    pANTLR3_BASE_TREE set195_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set195       = NULL;
    retval.start = LT(1);

    set195_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:290:9: ( 'after' | 'any' | 'before' | 'contained_by' | 'contains' | 'contains_end' | 'contains_start' | 'ends' | 'ends_after' | 'ends_after_start' | 'ends_before' | 'ends_during' | 'equal' | 'equals' | 'meets' | 'met_by' | 'parallels' | 'paralleled_by' | 'starts' | 'starts_after' | 'starts_before' | 'starts_before_end' | 'starts_during' )
        // ../base/antlr/NDDL3.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set195=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= 58) && (LA(1) <= 80)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set195)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_temporalRelation0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_temporalRelation0);    goto ruletemporalRelationEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletemporalRelationEx; /* Prevent compiler warnings */
    ruletemporalRelationEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end temporalRelation */

/** 
 * $ANTLR start numericLiteral
 * ../base/antlr/NDDL3.g:315:1: numericLiteral : ( INT | FLOAT | ( '+' )? 'inf' | '-inf' );
 */
static NDDL3Parser_numericLiteral_return
numericLiteral(pNDDL3Parser ctx)
{   
    NDDL3Parser_numericLiteral_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    INT196;
    pANTLR3_COMMON_TOKEN    FLOAT197;
    pANTLR3_COMMON_TOKEN    char_literal198;
    pANTLR3_COMMON_TOKEN    string_literal199;
    pANTLR3_COMMON_TOKEN    string_literal200;

    pANTLR3_BASE_TREE INT196_tree;
    pANTLR3_BASE_TREE FLOAT197_tree;
    pANTLR3_BASE_TREE char_literal198_tree;
    pANTLR3_BASE_TREE string_literal199_tree;
    pANTLR3_BASE_TREE string_literal200_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    INT196       = NULL;
    FLOAT197       = NULL;
    char_literal198       = NULL;
    string_literal199       = NULL;
    string_literal200       = NULL;
    retval.start = LT(1);

    INT196_tree   = NULL;
    FLOAT197_tree   = NULL;
    char_literal198_tree   = NULL;
    string_literal199_tree   = NULL;
    string_literal200_tree   = NULL;
    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:316:2: ( INT | FLOAT | ( '+' )? 'inf' | '-inf' )
            
            ANTLR3_UINT32 alt47;

            alt47=4;

            switch ( LA(1) ) 
            {
            case INT:
            	{
            		alt47=1;
            	}
                break;
            case FLOAT:
            	{
            		alt47=2;
            	}
                break;
            case 81:
            case 82:
            	{
            		alt47=3;
            	}
                break;
            case 83:
            	{
            		alt47=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 47;
                EXCEPTION->state        = 0;


                goto rulenumericLiteralEx;
            }

            switch (alt47) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:316:4: INT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        INT196 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_numericLiteral2531); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenumericLiteralEx;
        	        }

        	        INT196_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, INT196));
        	        ADAPTOR->addChild(ADAPTOR, root_0, INT196_tree);


        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:317:4: FLOAT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FLOAT197 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_numericLiteral2536); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenumericLiteralEx;
        	        }

        	        FLOAT197_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, FLOAT197));
        	        ADAPTOR->addChild(ADAPTOR, root_0, FLOAT197_tree);


        	    }
        	    break;
        	case 3:
        	    // ../base/antlr/NDDL3.g:318:4: ( '+' )? 'inf'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // ../base/antlr/NDDL3.g:318:4: ( '+' )?
        	        {
        	            int alt46=2;
        	            {
        	                int LA46_0 = LA(1);
        	                if ( (LA46_0 == 81) ) 
        	                {
        	                    alt46=1;
        	                }
        	            }
        	            switch (alt46) 
        	            {
        	        	case 1:
        	        	    // ../base/antlr/NDDL3.g:318:5: '+'
        	        	    {
        	        	        char_literal198 = (pANTLR3_COMMON_TOKEN) MATCHT(81, &FOLLOW_81_in_numericLiteral2542); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenumericLiteralEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        string_literal199 = (pANTLR3_COMMON_TOKEN) MATCHT(82, &FOLLOW_82_in_numericLiteral2547); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenumericLiteralEx;
        	        }

        	        string_literal199_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal199));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal199_tree);


        	    }
        	    break;
        	case 4:
        	    // ../base/antlr/NDDL3.g:319:4: '-inf'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal200 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_numericLiteral2552); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenumericLiteralEx;
        	        }

        	        string_literal200_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal200));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal200_tree);


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenumericLiteralEx; /* Prevent compiler warnings */
    rulenumericLiteralEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end numericLiteral */

/** 
 * $ANTLR start boolLiteral
 * ../base/antlr/NDDL3.g:322:1: boolLiteral : ( 'true' | 'false' );
 */
static NDDL3Parser_boolLiteral_return
boolLiteral(pNDDL3Parser ctx)
{   
    NDDL3Parser_boolLiteral_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set201;

    pANTLR3_BASE_TREE set201_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set201       = NULL;
    retval.start = LT(1);

    set201_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:323:2: ( 'true' | 'false' )
        // ../base/antlr/NDDL3.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set201=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= 84) && (LA(1) <= 85)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set201)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_boolLiteral0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_boolLiteral0);    goto ruleboolLiteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleboolLiteralEx; /* Prevent compiler warnings */
    ruleboolLiteralEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end boolLiteral */

/** 
 * $ANTLR start methodInvocation
 * ../base/antlr/NDDL3.g:327:1: methodInvocation : ( qualified '.' ( 'specify' variableArgumentList | 'reset' '(' ')' | 'constrain' variableArgumentList | 'free' variableArgumentList | 'activate' '(' ')' | 'merge' variableArgumentList | 'reject' '(' ')' | 'cancel' '(' ')' ) ';' | ( IDENT '.' )? 'close' '(' ')' ';' );
 */
static NDDL3Parser_methodInvocation_return
methodInvocation(pNDDL3Parser ctx)
{   
    NDDL3Parser_methodInvocation_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal203;
    pANTLR3_COMMON_TOKEN    string_literal204;
    pANTLR3_COMMON_TOKEN    string_literal206;
    pANTLR3_COMMON_TOKEN    char_literal207;
    pANTLR3_COMMON_TOKEN    char_literal208;
    pANTLR3_COMMON_TOKEN    string_literal209;
    pANTLR3_COMMON_TOKEN    string_literal211;
    pANTLR3_COMMON_TOKEN    string_literal213;
    pANTLR3_COMMON_TOKEN    char_literal214;
    pANTLR3_COMMON_TOKEN    char_literal215;
    pANTLR3_COMMON_TOKEN    string_literal216;
    pANTLR3_COMMON_TOKEN    string_literal218;
    pANTLR3_COMMON_TOKEN    char_literal219;
    pANTLR3_COMMON_TOKEN    char_literal220;
    pANTLR3_COMMON_TOKEN    string_literal221;
    pANTLR3_COMMON_TOKEN    char_literal222;
    pANTLR3_COMMON_TOKEN    char_literal223;
    pANTLR3_COMMON_TOKEN    char_literal224;
    pANTLR3_COMMON_TOKEN    IDENT225;
    pANTLR3_COMMON_TOKEN    char_literal226;
    pANTLR3_COMMON_TOKEN    string_literal227;
    pANTLR3_COMMON_TOKEN    char_literal228;
    pANTLR3_COMMON_TOKEN    char_literal229;
    pANTLR3_COMMON_TOKEN    char_literal230;
    NDDL3Parser_qualified_return qualified202;
    #undef	RETURN_TYPE_qualified202
    #define	RETURN_TYPE_qualified202 NDDL3Parser_qualified_return

    NDDL3Parser_variableArgumentList_return variableArgumentList205;
    #undef	RETURN_TYPE_variableArgumentList205
    #define	RETURN_TYPE_variableArgumentList205 NDDL3Parser_variableArgumentList_return

    NDDL3Parser_variableArgumentList_return variableArgumentList210;
    #undef	RETURN_TYPE_variableArgumentList210
    #define	RETURN_TYPE_variableArgumentList210 NDDL3Parser_variableArgumentList_return

    NDDL3Parser_variableArgumentList_return variableArgumentList212;
    #undef	RETURN_TYPE_variableArgumentList212
    #define	RETURN_TYPE_variableArgumentList212 NDDL3Parser_variableArgumentList_return

    NDDL3Parser_variableArgumentList_return variableArgumentList217;
    #undef	RETURN_TYPE_variableArgumentList217
    #define	RETURN_TYPE_variableArgumentList217 NDDL3Parser_variableArgumentList_return

    pANTLR3_BASE_TREE char_literal203_tree;
    pANTLR3_BASE_TREE string_literal204_tree;
    pANTLR3_BASE_TREE string_literal206_tree;
    pANTLR3_BASE_TREE char_literal207_tree;
    pANTLR3_BASE_TREE char_literal208_tree;
    pANTLR3_BASE_TREE string_literal209_tree;
    pANTLR3_BASE_TREE string_literal211_tree;
    pANTLR3_BASE_TREE string_literal213_tree;
    pANTLR3_BASE_TREE char_literal214_tree;
    pANTLR3_BASE_TREE char_literal215_tree;
    pANTLR3_BASE_TREE string_literal216_tree;
    pANTLR3_BASE_TREE string_literal218_tree;
    pANTLR3_BASE_TREE char_literal219_tree;
    pANTLR3_BASE_TREE char_literal220_tree;
    pANTLR3_BASE_TREE string_literal221_tree;
    pANTLR3_BASE_TREE char_literal222_tree;
    pANTLR3_BASE_TREE char_literal223_tree;
    pANTLR3_BASE_TREE char_literal224_tree;
    pANTLR3_BASE_TREE IDENT225_tree;
    pANTLR3_BASE_TREE char_literal226_tree;
    pANTLR3_BASE_TREE string_literal227_tree;
    pANTLR3_BASE_TREE char_literal228_tree;
    pANTLR3_BASE_TREE char_literal229_tree;
    pANTLR3_BASE_TREE char_literal230_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal203       = NULL;
    string_literal204       = NULL;
    string_literal206       = NULL;
    char_literal207       = NULL;
    char_literal208       = NULL;
    string_literal209       = NULL;
    string_literal211       = NULL;
    string_literal213       = NULL;
    char_literal214       = NULL;
    char_literal215       = NULL;
    string_literal216       = NULL;
    string_literal218       = NULL;
    char_literal219       = NULL;
    char_literal220       = NULL;
    string_literal221       = NULL;
    char_literal222       = NULL;
    char_literal223       = NULL;
    char_literal224       = NULL;
    IDENT225       = NULL;
    char_literal226       = NULL;
    string_literal227       = NULL;
    char_literal228       = NULL;
    char_literal229       = NULL;
    char_literal230       = NULL;
    qualified202.tree = NULL;

    variableArgumentList205.tree = NULL;

    variableArgumentList210.tree = NULL;

    variableArgumentList212.tree = NULL;

    variableArgumentList217.tree = NULL;

    retval.start = LT(1);

    char_literal203_tree   = NULL;
    string_literal204_tree   = NULL;
    string_literal206_tree   = NULL;
    char_literal207_tree   = NULL;
    char_literal208_tree   = NULL;
    string_literal209_tree   = NULL;
    string_literal211_tree   = NULL;
    string_literal213_tree   = NULL;
    char_literal214_tree   = NULL;
    char_literal215_tree   = NULL;
    string_literal216_tree   = NULL;
    string_literal218_tree   = NULL;
    char_literal219_tree   = NULL;
    char_literal220_tree   = NULL;
    string_literal221_tree   = NULL;
    char_literal222_tree   = NULL;
    char_literal223_tree   = NULL;
    char_literal224_tree   = NULL;
    IDENT225_tree   = NULL;
    char_literal226_tree   = NULL;
    string_literal227_tree   = NULL;
    char_literal228_tree   = NULL;
    char_literal229_tree   = NULL;
    char_literal230_tree   = NULL;
    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:328:9: ( qualified '.' ( 'specify' variableArgumentList | 'reset' '(' ')' | 'constrain' variableArgumentList | 'free' variableArgumentList | 'activate' '(' ')' | 'merge' variableArgumentList | 'reject' '(' ')' | 'cancel' '(' ')' ) ';' | ( IDENT '.' )? 'close' '(' ')' ';' )
            
            ANTLR3_UINT32 alt50;

            alt50=2;

            switch ( LA(1) ) 
            {
            case IDENT:
            	{

            		{
            		    int LA50_1 = LA(2);
            		    if ( (LA50_1 == 43) ) 
            		    {

            		        {
            		            int LA50_4 = LA(3);
            		            if ( (LA50_4 == IDENT || ((LA50_4 >= 86) && (LA50_4 <= 93))) ) 
            		            {
            		                alt50=1;
            		            }
            		            else if ( (LA50_4 == 94) ) 
            		            {
            		                alt50=2;
            		            }
            		            else 
            		            {
            		            
            		                CONSTRUCTEX();
            		                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		                EXCEPTION->message      = (void *)"";
            		                EXCEPTION->decisionNum  = 50;
            		                EXCEPTION->state        = 4;


            		                goto rulemethodInvocationEx;
            		            }
            		        }
            		    }
            		    else 
            		    {
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 50;
            		        EXCEPTION->state        = 1;


            		        goto rulemethodInvocationEx;
            		    }
            		}
            	}
                break;
            case 42:
            	{
            		alt50=1;
            	}
                break;
            case 94:
            	{
            		alt50=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 50;
                EXCEPTION->state        = 0;


                goto rulemethodInvocationEx;
            }

            switch (alt50) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:328:11: qualified '.' ( 'specify' variableArgumentList | 'reset' '(' ')' | 'constrain' variableArgumentList | 'free' variableArgumentList | 'activate' '(' ')' | 'merge' variableArgumentList | 'reject' '(' ')' | 'cancel' '(' ')' ) ';'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_qualified_in_methodInvocation2588);
        	        qualified202=qualified(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, qualified202.tree);
        	        char_literal203 = (pANTLR3_COMMON_TOKEN) MATCHT(43, &FOLLOW_43_in_methodInvocation2590); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }


        	        // ../base/antlr/NDDL3.g:329:3: ( 'specify' variableArgumentList | 'reset' '(' ')' | 'constrain' variableArgumentList | 'free' variableArgumentList | 'activate' '(' ')' | 'merge' variableArgumentList | 'reject' '(' ')' | 'cancel' '(' ')' )
        	        {
        	            int alt48=8;
        	            switch ( LA(1) ) 
        	            {
        	            case 86:
        	            	{
        	            		alt48=1;
        	            	}
        	                break;
        	            case 87:
        	            	{
        	            		alt48=2;
        	            	}
        	                break;
        	            case 88:
        	            	{
        	            		alt48=3;
        	            	}
        	                break;
        	            case 89:
        	            	{
        	            		alt48=4;
        	            	}
        	                break;
        	            case 90:
        	            	{
        	            		alt48=5;
        	            	}
        	                break;
        	            case 91:
        	            	{
        	            		alt48=6;
        	            	}
        	                break;
        	            case 92:
        	            	{
        	            		alt48=7;
        	            	}
        	                break;
        	            case 93:
        	            	{
        	            		alt48=8;
        	            	}
        	                break;

        	            default:
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 48;
        	                EXCEPTION->state        = 0;


        	                goto rulemethodInvocationEx;
        	            }

        	            switch (alt48) 
        	            {
        	        	case 1:
        	        	    // ../base/antlr/NDDL3.g:329:5: 'specify' variableArgumentList
        	        	    {
        	        	        string_literal204 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_methodInvocation2597); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        string_literal204_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal204));
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal204_tree, root_0));

        	        	        FOLLOWPUSH(FOLLOW_variableArgumentList_in_methodInvocation2600);
        	        	        variableArgumentList205=variableArgumentList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, variableArgumentList205.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ../base/antlr/NDDL3.g:330:25: 'reset' '(' ')'
        	        	    {
        	        	        string_literal206 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_methodInvocation2626); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        string_literal206_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal206));
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal206_tree, root_0));

        	        	        char_literal207 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_methodInvocation2629); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        char_literal208 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_methodInvocation2632); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // ../base/antlr/NDDL3.g:331:25: 'constrain' variableArgumentList
        	        	    {
        	        	        string_literal209 = (pANTLR3_COMMON_TOKEN) MATCHT(88, &FOLLOW_88_in_methodInvocation2659); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        string_literal209_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal209));
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal209_tree, root_0));

        	        	        FOLLOWPUSH(FOLLOW_variableArgumentList_in_methodInvocation2662);
        	        	        variableArgumentList210=variableArgumentList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, variableArgumentList210.tree);

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // ../base/antlr/NDDL3.g:332:5: 'free' variableArgumentList
        	        	    {
        	        	        string_literal211 = (pANTLR3_COMMON_TOKEN) MATCHT(89, &FOLLOW_89_in_methodInvocation2668); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        string_literal211_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal211));
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal211_tree, root_0));

        	        	        FOLLOWPUSH(FOLLOW_variableArgumentList_in_methodInvocation2671);
        	        	        variableArgumentList212=variableArgumentList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, variableArgumentList212.tree);

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // ../base/antlr/NDDL3.g:333:25: 'activate' '(' ')'
        	        	    {
        	        	        string_literal213 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_methodInvocation2697); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        string_literal213_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal213));
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal213_tree, root_0));

        	        	        char_literal214 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_methodInvocation2700); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        char_literal215 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_methodInvocation2703); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // ../base/antlr/NDDL3.g:334:5: 'merge' variableArgumentList
        	        	    {
        	        	        string_literal216 = (pANTLR3_COMMON_TOKEN) MATCHT(91, &FOLLOW_91_in_methodInvocation2710); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        string_literal216_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal216));
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal216_tree, root_0));

        	        	        FOLLOWPUSH(FOLLOW_variableArgumentList_in_methodInvocation2713);
        	        	        variableArgumentList217=variableArgumentList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, variableArgumentList217.tree);

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // ../base/antlr/NDDL3.g:335:5: 'reject' '(' ')'
        	        	    {
        	        	        string_literal218 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_methodInvocation2719); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        string_literal218_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal218));
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal218_tree, root_0));

        	        	        char_literal219 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_methodInvocation2722); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        char_literal220 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_methodInvocation2725); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // ../base/antlr/NDDL3.g:336:5: 'cancel' '(' ')'
        	        	    {
        	        	        string_literal221 = (pANTLR3_COMMON_TOKEN) MATCHT(93, &FOLLOW_93_in_methodInvocation2732); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        string_literal221_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal221));
        	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal221_tree, root_0));

        	        	        char_literal222 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_methodInvocation2735); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        char_literal223 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_methodInvocation2738); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        char_literal224 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_methodInvocation2745); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:338:4: ( IDENT '.' )? 'close' '(' ')' ';'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // ../base/antlr/NDDL3.g:338:4: ( IDENT '.' )?
        	        {
        	            int alt49=2;
        	            {
        	                int LA49_0 = LA(1);
        	                if ( (LA49_0 == IDENT) ) 
        	                {
        	                    alt49=1;
        	                }
        	            }
        	            switch (alt49) 
        	            {
        	        	case 1:
        	        	    // ../base/antlr/NDDL3.g:338:5: IDENT '.'
        	        	    {
        	        	        IDENT225 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_methodInvocation2752); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }

        	        	        IDENT225_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT225));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, IDENT225_tree);

        	        	        char_literal226 = (pANTLR3_COMMON_TOKEN) MATCHT(43, &FOLLOW_43_in_methodInvocation2754); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemethodInvocationEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        string_literal227 = (pANTLR3_COMMON_TOKEN) MATCHT(94, &FOLLOW_94_in_methodInvocation2759); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }

        	        string_literal227_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal227));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal227_tree, root_0));

        	        char_literal228 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_methodInvocation2762); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }

        	        char_literal229 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_methodInvocation2765); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }

        	        char_literal230 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_methodInvocation2768); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemethodInvocationEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemethodInvocationEx; /* Prevent compiler warnings */
    rulemethodInvocationEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end methodInvocation */

/** 
 * $ANTLR start tokenNameList
 * ../base/antlr/NDDL3.g:341:1: tokenNameList : '(' ( tokenNames )? ')' ;
 */
static NDDL3Parser_tokenNameList_return
tokenNameList(pNDDL3Parser ctx)
{   
    NDDL3Parser_tokenNameList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal231;
    pANTLR3_COMMON_TOKEN    char_literal233;
    NDDL3Parser_tokenNames_return tokenNames232;
    #undef	RETURN_TYPE_tokenNames232
    #define	RETURN_TYPE_tokenNames232 NDDL3Parser_tokenNames_return

    pANTLR3_BASE_TREE char_literal231_tree;
    pANTLR3_BASE_TREE char_literal233_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal231       = NULL;
    char_literal233       = NULL;
    tokenNames232.tree = NULL;

    retval.start = LT(1);

    char_literal231_tree   = NULL;
    char_literal233_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:342:2: ( '(' ( tokenNames )? ')' )
        // ../base/antlr/NDDL3.g:342:4: '(' ( tokenNames )? ')'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal231 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_tokenNameList2780); 
            if  (HASEXCEPTION())
            {
                goto ruletokenNameListEx;
            }

            char_literal231_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal231));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal231_tree, root_0));


            // ../base/antlr/NDDL3.g:342:9: ( tokenNames )?
            {
                int alt51=2;
                {
                    int LA51_0 = LA(1);
                    if ( (LA51_0 == IDENT) ) 
                    {
                        alt51=1;
                    }
                }
                switch (alt51) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:342:10: tokenNames
            	    {
            	        FOLLOWPUSH(FOLLOW_tokenNames_in_tokenNameList2784);
            	        tokenNames232=tokenNames(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletokenNameListEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, tokenNames232.tree);

            	    }
            	    break;

                }
            }
            char_literal233 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_tokenNameList2788); 
            if  (HASEXCEPTION())
            {
                goto ruletokenNameListEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletokenNameListEx; /* Prevent compiler warnings */
    ruletokenNameListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end tokenNameList */

/** 
 * $ANTLR start tokenNames
 * ../base/antlr/NDDL3.g:345:1: tokenNames : IDENT ( ',' IDENT )* ;
 */
static NDDL3Parser_tokenNames_return
tokenNames(pNDDL3Parser ctx)
{   
    NDDL3Parser_tokenNames_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT234;
    pANTLR3_COMMON_TOKEN    char_literal235;
    pANTLR3_COMMON_TOKEN    IDENT236;

    pANTLR3_BASE_TREE IDENT234_tree;
    pANTLR3_BASE_TREE char_literal235_tree;
    pANTLR3_BASE_TREE IDENT236_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENT234       = NULL;
    char_literal235       = NULL;
    IDENT236       = NULL;
    retval.start = LT(1);

    IDENT234_tree   = NULL;
    char_literal235_tree   = NULL;
    IDENT236_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:346:2: ( IDENT ( ',' IDENT )* )
        // ../base/antlr/NDDL3.g:346:4: IDENT ( ',' IDENT )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            IDENT234 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_tokenNames2800); 
            if  (HASEXCEPTION())
            {
                goto ruletokenNamesEx;
            }

            IDENT234_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT234));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT234_tree);


            // ../base/antlr/NDDL3.g:346:10: ( ',' IDENT )*

            for (;;)
            {
                int alt52=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA52_0 = LA(1);
                    if ( (LA52_0 == 33) ) 
                    {
                        alt52=1;
                    }

                }
                switch (alt52) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:346:11: ',' IDENT
            	    {
            	        char_literal235 = (pANTLR3_COMMON_TOKEN) MATCHT(33, &FOLLOW_33_in_tokenNames2803); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletokenNamesEx;
            	        }

            	        IDENT236 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_tokenNames2806); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletokenNamesEx;
            	        }

            	        IDENT236_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT236));
            	        ADAPTOR->addChild(ADAPTOR, root_0, IDENT236_tree);


            	    }
            	    break;

            	default:
            	    goto loop52;	/* break out of the loop */
            	    break;
                }
            }
            loop52: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletokenNamesEx; /* Prevent compiler warnings */
    ruletokenNamesEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end tokenNames */

/** 
 * $ANTLR start noopstatement
 * ../base/antlr/NDDL3.g:349:1: noopstatement : ';' ;
 */
static NDDL3Parser_noopstatement_return
noopstatement(pNDDL3Parser ctx)
{   
    NDDL3Parser_noopstatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal237;

    pANTLR3_BASE_TREE char_literal237_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal237       = NULL;
    retval.start = LT(1);

    char_literal237_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:350:2: ( ';' )
        // ../base/antlr/NDDL3.g:350:4: ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal237 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_noopstatement2826); 
            if  (HASEXCEPTION())
            {
                goto rulenoopstatementEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenoopstatementEx; /* Prevent compiler warnings */
    rulenoopstatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end noopstatement */

/** 
 * $ANTLR start constraintSignature
 * ../base/antlr/NDDL3.g:354:1: constraintSignature : 'constraint' c= IDENT args= typeArgumentList ( 'extends' x= IDENT xargs= typeArgumentList )? (sb= signatureBlock | ';' ) -> ^( 'constraint' $c $args ( ^( 'extends' $x $xargs) )? ( $sb)? ) ;
 */
static NDDL3Parser_constraintSignature_return
constraintSignature(pNDDL3Parser ctx)
{   
    NDDL3Parser_constraintSignature_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    c;
    pANTLR3_COMMON_TOKEN    x;
    pANTLR3_COMMON_TOKEN    string_literal238;
    pANTLR3_COMMON_TOKEN    string_literal239;
    pANTLR3_COMMON_TOKEN    char_literal240;
    NDDL3Parser_typeArgumentList_return args;
    #undef	RETURN_TYPE_args
    #define	RETURN_TYPE_args NDDL3Parser_typeArgumentList_return

    NDDL3Parser_typeArgumentList_return xargs;
    #undef	RETURN_TYPE_xargs
    #define	RETURN_TYPE_xargs NDDL3Parser_typeArgumentList_return

    NDDL3Parser_signatureBlock_return sb;
    #undef	RETURN_TYPE_sb
    #define	RETURN_TYPE_sb NDDL3Parser_signatureBlock_return

    pANTLR3_BASE_TREE c_tree;
    pANTLR3_BASE_TREE x_tree;
    pANTLR3_BASE_TREE string_literal238_tree;
    pANTLR3_BASE_TREE string_literal239_tree;
    pANTLR3_BASE_TREE char_literal240_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_95;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_46;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_27;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_signatureBlock;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_typeArgumentList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    c       = NULL;
    x       = NULL;
    string_literal238       = NULL;
    string_literal239       = NULL;
    char_literal240       = NULL;
    args.tree = NULL;

    xargs.tree = NULL;

    sb.tree = NULL;

    retval.start = LT(1);

    c_tree   = NULL;
    x_tree   = NULL;
    string_literal238_tree   = NULL;
    string_literal239_tree   = NULL;
    char_literal240_tree   = NULL;
    stream_IDENT   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENT"); 
    stream_95   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 95"); 
    stream_46   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 46"); 
    stream_27   = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 27"); 
    stream_signatureBlock=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule signatureBlock");
    stream_typeArgumentList=antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule typeArgumentList");
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:355:9: ( 'constraint' c= IDENT args= typeArgumentList ( 'extends' x= IDENT xargs= typeArgumentList )? (sb= signatureBlock | ';' ) -> ^( 'constraint' $c $args ( ^( 'extends' $x $xargs) )? ( $sb)? ) )
        // ../base/antlr/NDDL3.g:355:17: 'constraint' c= IDENT args= typeArgumentList ( 'extends' x= IDENT xargs= typeArgumentList )? (sb= signatureBlock | ';' )
        {
            string_literal238 = (pANTLR3_COMMON_TOKEN) MATCHT(95, &FOLLOW_95_in_constraintSignature2852); 
            if  (HASEXCEPTION())
            {
                goto ruleconstraintSignatureEx;
            }
             
            stream_95->add(stream_95, string_literal238, NULL);

            c = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_constraintSignature2856); 
            if  (HASEXCEPTION())
            {
                goto ruleconstraintSignatureEx;
            }
             
            stream_IDENT->add(stream_IDENT, c, NULL);

            FOLLOWPUSH(FOLLOW_typeArgumentList_in_constraintSignature2860);
            args=typeArgumentList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstraintSignatureEx;
            }

            stream_typeArgumentList->add(stream_typeArgumentList, args.tree, NULL);

            // ../base/antlr/NDDL3.g:356:17: ( 'extends' x= IDENT xargs= typeArgumentList )?
            {
                int alt53=2;
                {
                    int LA53_0 = LA(1);
                    if ( (LA53_0 == 46) ) 
                    {
                        alt53=1;
                    }
                }
                switch (alt53) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:356:18: 'extends' x= IDENT xargs= typeArgumentList
            	    {
            	        string_literal239 = (pANTLR3_COMMON_TOKEN) MATCHT(46, &FOLLOW_46_in_constraintSignature2879); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstraintSignatureEx;
            	        }
            	         
            	        stream_46->add(stream_46, string_literal239, NULL);

            	        x = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_constraintSignature2883); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstraintSignatureEx;
            	        }
            	         
            	        stream_IDENT->add(stream_IDENT, x, NULL);

            	        FOLLOWPUSH(FOLLOW_typeArgumentList_in_constraintSignature2887);
            	        xargs=typeArgumentList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstraintSignatureEx;
            	        }

            	        stream_typeArgumentList->add(stream_typeArgumentList, xargs.tree, NULL);

            	    }
            	    break;

                }
            }

            // ../base/antlr/NDDL3.g:357:17: (sb= signatureBlock | ';' )
            {
                int alt54=2;

                {
                    int LA54_0 = LA(1);
                    if ( (LA54_0 == 35) ) 
                    {
                        alt54=1;
                    }
                    else if ( (LA54_0 == 27) ) 
                    {
                        alt54=2;
                    }
                    else 
                    {
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 54;
                        EXCEPTION->state        = 0;


                        goto ruleconstraintSignatureEx;
                    }
                }
                switch (alt54) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:357:18: sb= signatureBlock
            	    {
            	        FOLLOWPUSH(FOLLOW_signatureBlock_in_constraintSignature2911);
            	        sb=signatureBlock(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstraintSignatureEx;
            	        }

            	        stream_signatureBlock->add(stream_signatureBlock, sb.tree, NULL);

            	    }
            	    break;
            	case 2:
            	    // ../base/antlr/NDDL3.g:357:38: ';'
            	    {
            	        char_literal240 = (pANTLR3_COMMON_TOKEN) MATCHT(27, &FOLLOW_27_in_constraintSignature2915); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconstraintSignatureEx;
            	        }
            	         
            	        stream_27->add(stream_27, char_literal240, NULL);


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : 95, xargs, c, sb, x, args, 46
             * token labels      : c, x
             * rule labels       : retval, args, sb, xargs
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_c;
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_x;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_args;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sb;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_xargs;

            	stream_c=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c", c);
            	stream_x=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token x", x);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_args=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token args", args.tree != NULL ? args.tree : NULL);
            	stream_sb=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token sb", sb.tree != NULL ? sb.tree : NULL);
            	stream_xargs=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token xargs", xargs.tree != NULL ? xargs.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 358:25: -> ^( 'constraint' $c $args ( ^( 'extends' $x $xargs) )? ( $sb)? )
            	{
            	    // ../base/antlr/NDDL3.g:358:28: ^( 'constraint' $c $args ( ^( 'extends' $x $xargs) )? ( $sb)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_95->nextNode(stream_95), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_c->nextNode(stream_c));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_args->nextTree(stream_args));
            	        // ../base/antlr/NDDL3.g:358:52: ( ^( 'extends' $x $xargs) )?
            	        {
            	        	if ( stream_xargs->hasNext(stream_xargs)||stream_x->hasNext(stream_x)||stream_46->hasNext(stream_46) ) 
            	        	{
            	        		// ../base/antlr/NDDL3.g:358:52: ^( 'extends' $x $xargs)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_46->nextNode(stream_46), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_x->nextNode(stream_x));
            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_xargs->nextTree(stream_xargs));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	stream_xargs->reset(stream_xargs);
            	        	stream_x->reset(stream_x);
            	        	stream_46->reset(stream_46);

            	        }
            	        // ../base/antlr/NDDL3.g:358:76: ( $sb)?
            	        {
            	        	if ( stream_sb->hasNext(stream_sb) ) 
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_sb->nextTree(stream_sb));

            	        	}
            	        	stream_sb->reset(stream_sb);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	stream_c->free(stream_c);
            	stream_x->free(stream_x);
            	stream_retval->free(stream_retval);
            	stream_args->free(stream_args);
            	stream_sb->free(stream_sb);
            	stream_xargs->free(stream_xargs);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstraintSignatureEx; /* Prevent compiler warnings */
    ruleconstraintSignatureEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    stream_IDENT->free(stream_IDENT);
    stream_95->free(stream_95);
    stream_46->free(stream_46);
    stream_27->free(stream_27);
    stream_signatureBlock->free(stream_signatureBlock);
    stream_typeArgumentList->free(stream_typeArgumentList);
    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end constraintSignature */

/** 
 * $ANTLR start signatureBlock
 * ../base/antlr/NDDL3.g:361:1: signatureBlock : '{' ( signatureExpression )? '}' ;
 */
static NDDL3Parser_signatureBlock_return
signatureBlock(pNDDL3Parser ctx)
{   
    NDDL3Parser_signatureBlock_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal241;
    pANTLR3_COMMON_TOKEN    char_literal243;
    NDDL3Parser_signatureExpression_return signatureExpression242;
    #undef	RETURN_TYPE_signatureExpression242
    #define	RETURN_TYPE_signatureExpression242 NDDL3Parser_signatureExpression_return

    pANTLR3_BASE_TREE char_literal241_tree;
    pANTLR3_BASE_TREE char_literal243_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal241       = NULL;
    char_literal243       = NULL;
    signatureExpression242.tree = NULL;

    retval.start = LT(1);

    char_literal241_tree   = NULL;
    char_literal243_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:362:9: ( '{' ( signatureExpression )? '}' )
        // ../base/antlr/NDDL3.g:362:17: '{' ( signatureExpression )? '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal241 = (pANTLR3_COMMON_TOKEN) MATCHT(35, &FOLLOW_35_in_signatureBlock2998); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureBlockEx;
            }

            char_literal241_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal241));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal241_tree, root_0));


            // ../base/antlr/NDDL3.g:362:22: ( signatureExpression )?
            {
                int alt55=2;
                {
                    int LA55_0 = LA(1);
                    if ( (LA55_0 == IDENT || LA55_0 == 38) ) 
                    {
                        alt55=1;
                    }
                }
                switch (alt55) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:362:23: signatureExpression
            	    {
            	        FOLLOWPUSH(FOLLOW_signatureExpression_in_signatureBlock3002);
            	        signatureExpression242=signatureExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesignatureBlockEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, signatureExpression242.tree);

            	    }
            	    break;

                }
            }
            char_literal243 = (pANTLR3_COMMON_TOKEN) MATCHT(36, &FOLLOW_36_in_signatureBlock3006); 
            if  (HASEXCEPTION())
            {
                goto rulesignatureBlockEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesignatureBlockEx; /* Prevent compiler warnings */
    rulesignatureBlockEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end signatureBlock */

/** 
 * $ANTLR start signatureExpression
 * ../base/antlr/NDDL3.g:365:1: signatureExpression : signatureAtom ( ( '&&' | '||' ) signatureAtom )* ;
 */
static NDDL3Parser_signatureExpression_return
signatureExpression(pNDDL3Parser ctx)
{   
    NDDL3Parser_signatureExpression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal245;
    pANTLR3_COMMON_TOKEN    string_literal246;
    NDDL3Parser_signatureAtom_return signatureAtom244;
    #undef	RETURN_TYPE_signatureAtom244
    #define	RETURN_TYPE_signatureAtom244 NDDL3Parser_signatureAtom_return

    NDDL3Parser_signatureAtom_return signatureAtom247;
    #undef	RETURN_TYPE_signatureAtom247
    #define	RETURN_TYPE_signatureAtom247 NDDL3Parser_signatureAtom_return

    pANTLR3_BASE_TREE string_literal245_tree;
    pANTLR3_BASE_TREE string_literal246_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal245       = NULL;
    string_literal246       = NULL;
    signatureAtom244.tree = NULL;

    signatureAtom247.tree = NULL;

    retval.start = LT(1);

    string_literal245_tree   = NULL;
    string_literal246_tree   = NULL;
    retval.tree  = NULL;
    {
        // ../base/antlr/NDDL3.g:366:9: ( signatureAtom ( ( '&&' | '||' ) signatureAtom )* )
        // ../base/antlr/NDDL3.g:366:17: signatureAtom ( ( '&&' | '||' ) signatureAtom )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_signatureAtom_in_signatureExpression3038);
            signatureAtom244=signatureAtom(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesignatureExpressionEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, signatureAtom244.tree);

            // ../base/antlr/NDDL3.g:366:31: ( ( '&&' | '||' ) signatureAtom )*

            for (;;)
            {
                int alt57=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA57_0 = LA(1);
                    if ( (((LA57_0 >= 96) && (LA57_0 <= 97))) ) 
                    {
                        alt57=1;
                    }

                }
                switch (alt57) 
                {
            	case 1:
            	    // ../base/antlr/NDDL3.g:366:32: ( '&&' | '||' ) signatureAtom
            	    {

            	        // ../base/antlr/NDDL3.g:366:32: ( '&&' | '||' )
            	        {
            	            int alt56=2;

            	            {
            	                int LA56_0 = LA(1);
            	                if ( (LA56_0 == 96) ) 
            	                {
            	                    alt56=1;
            	                }
            	                else if ( (LA56_0 == 97) ) 
            	                {
            	                    alt56=2;
            	                }
            	                else 
            	                {
            	                
            	                    CONSTRUCTEX();
            	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                    EXCEPTION->message      = (void *)"";
            	                    EXCEPTION->decisionNum  = 56;
            	                    EXCEPTION->state        = 0;


            	                    goto rulesignatureExpressionEx;
            	                }
            	            }
            	            switch (alt56) 
            	            {
            	        	case 1:
            	        	    // ../base/antlr/NDDL3.g:366:33: '&&'
            	        	    {
            	        	        string_literal245 = (pANTLR3_COMMON_TOKEN) MATCHT(96, &FOLLOW_96_in_signatureExpression3042); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesignatureExpressionEx;
            	        	        }

            	        	        string_literal245_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal245));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal245_tree, root_0));


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ../base/antlr/NDDL3.g:366:41: '||'
            	        	    {
            	        	        string_literal246 = (pANTLR3_COMMON_TOKEN) MATCHT(97, &FOLLOW_97_in_signatureExpression3047); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesignatureExpressionEx;
            	        	        }

            	        	        string_literal246_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal246));
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal246_tree, root_0));


            	        	    }
            	        	    break;

            	            }
            	        }
            	        FOLLOWPUSH(FOLLOW_signatureAtom_in_signatureExpression3051);
            	        signatureAtom247=signatureAtom(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesignatureExpressionEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, signatureAtom247.tree);

            	    }
            	    break;

            	default:
            	    goto loop57;	/* break out of the loop */
            	    break;
                }
            }
            loop57: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesignatureExpressionEx; /* Prevent compiler warnings */
    rulesignatureExpressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end signatureExpression */

/** 
 * $ANTLR start signatureAtom
 * ../base/antlr/NDDL3.g:369:1: signatureAtom : ( '(' signatureExpression ')' | IDENT '<:' ( type | 'numeric' ) );
 */
static NDDL3Parser_signatureAtom_return
signatureAtom(pNDDL3Parser ctx)
{   
    NDDL3Parser_signatureAtom_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal248;
    pANTLR3_COMMON_TOKEN    char_literal250;
    pANTLR3_COMMON_TOKEN    IDENT251;
    pANTLR3_COMMON_TOKEN    string_literal252;
    pANTLR3_COMMON_TOKEN    string_literal254;
    NDDL3Parser_signatureExpression_return signatureExpression249;
    #undef	RETURN_TYPE_signatureExpression249
    #define	RETURN_TYPE_signatureExpression249 NDDL3Parser_signatureExpression_return

    NDDL3Parser_type_return type253;
    #undef	RETURN_TYPE_type253
    #define	RETURN_TYPE_type253 NDDL3Parser_type_return

    pANTLR3_BASE_TREE char_literal248_tree;
    pANTLR3_BASE_TREE char_literal250_tree;
    pANTLR3_BASE_TREE IDENT251_tree;
    pANTLR3_BASE_TREE string_literal252_tree;
    pANTLR3_BASE_TREE string_literal254_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal248       = NULL;
    char_literal250       = NULL;
    IDENT251       = NULL;
    string_literal252       = NULL;
    string_literal254       = NULL;
    signatureExpression249.tree = NULL;

    type253.tree = NULL;

    retval.start = LT(1);

    char_literal248_tree   = NULL;
    char_literal250_tree   = NULL;
    IDENT251_tree   = NULL;
    string_literal252_tree   = NULL;
    string_literal254_tree   = NULL;
    retval.tree  = NULL;
    {
        {
            //  ../base/antlr/NDDL3.g:370:9: ( '(' signatureExpression ')' | IDENT '<:' ( type | 'numeric' ) )
            
            ANTLR3_UINT32 alt59;

            alt59=2;


            {
                int LA59_0 = LA(1);
                if ( (LA59_0 == 38) ) 
                {
                    alt59=1;
                }
                else if ( (LA59_0 == IDENT) ) 
                {
                    alt59=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 59;
                    EXCEPTION->state        = 0;


                    goto rulesignatureAtomEx;
                }
            }
            switch (alt59) 
            {
        	case 1:
        	    // ../base/antlr/NDDL3.g:370:17: '(' signatureExpression ')'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal248 = (pANTLR3_COMMON_TOKEN) MATCHT(38, &FOLLOW_38_in_signatureAtom3084); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesignatureAtomEx;
        	        }

        	        char_literal248_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal248));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, char_literal248_tree, root_0));

        	        FOLLOWPUSH(FOLLOW_signatureExpression_in_signatureAtom3087);
        	        signatureExpression249=signatureExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesignatureAtomEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, signatureExpression249.tree);
        	        char_literal250 = (pANTLR3_COMMON_TOKEN) MATCHT(39, &FOLLOW_39_in_signatureAtom3089); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesignatureAtomEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../base/antlr/NDDL3.g:371:17: IDENT '<:' ( type | 'numeric' )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        IDENT251 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_signatureAtom3108); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesignatureAtomEx;
        	        }

        	        IDENT251_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT251));
        	        ADAPTOR->addChild(ADAPTOR, root_0, IDENT251_tree);

        	        string_literal252 = (pANTLR3_COMMON_TOKEN) MATCHT(98, &FOLLOW_98_in_signatureAtom3110); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesignatureAtomEx;
        	        }

        	        string_literal252_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal252));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, string_literal252_tree, root_0));


        	        // ../base/antlr/NDDL3.g:371:29: ( type | 'numeric' )
        	        {
        	            int alt58=2;

        	            {
        	                int LA58_0 = LA(1);
        	                if ( (LA58_0 == IDENT || ((LA58_0 >= 28) && (LA58_0 <= 31))) ) 
        	                {
        	                    alt58=1;
        	                }
        	                else if ( (LA58_0 == 99) ) 
        	                {
        	                    alt58=2;
        	                }
        	                else 
        	                {
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 58;
        	                    EXCEPTION->state        = 0;


        	                    goto rulesignatureAtomEx;
        	                }
        	            }
        	            switch (alt58) 
        	            {
        	        	case 1:
        	        	    // ../base/antlr/NDDL3.g:371:30: type
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_type_in_signatureAtom3114);
        	        	        type253=type(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulesignatureAtomEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, type253.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // ../base/antlr/NDDL3.g:371:37: 'numeric'
        	        	    {
        	        	        string_literal254 = (pANTLR3_COMMON_TOKEN) MATCHT(99, &FOLLOW_99_in_signatureAtom3118); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulesignatureAtomEx;
        	        	        }

        	        	        string_literal254_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal254));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal254_tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesignatureAtomEx; /* Prevent compiler warnings */
    rulesignatureAtomEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end signatureAtom */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
