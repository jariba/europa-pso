// csp.1.nddl

#include "csp.1.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  Ints IntsBaseDomain(){
    static Ints sl_enum("Ints");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(1);
      sl_enum.insert(2);
      sl_enum.insert(3);
      sl_enum.insert(4);
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  Floats FloatsBaseDomain(){
    static Floats sl_enum("Floats");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(1.2);
      sl_enum.insert(2.3);
      sl_enum.insert(3.4);
      sl_enum.insert(67.9);
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  Strings StringsBaseDomain(){
    static Strings sl_enum("Strings");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("s1"));
      sl_enum.insert(LabelStr("s2"));
      sl_enum.insert(LabelStr("s3"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  Symbol SymbolBaseDomain(){
    static Symbol sl_enum("Symbol");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("s4"));
      sl_enum.insert(LabelStr("s5"));
      sl_enum.insert(LabelStr("s6"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  Fruit FruitBaseDomain(){
    static Fruit sl_enum("Fruit");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("Apple"));
      sl_enum.insert(LabelStr("Orange"));
      sl_enum.insert(LabelStr("Banana"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  Speed SpeedBaseDomain(){
    static Speed sl_enum("Speed");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("Slow"));
      sl_enum.insert(LabelStr("Medium"));
      sl_enum.insert(LabelStr("Fast"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  Color ColorBaseDomain(){
    static Color sl_enum("Color");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("Red"));
      sl_enum.insert(LabelStr("Orange"));
      sl_enum.insert(LabelStr("Yellow"));
      sl_enum.insert(LabelStr("Green"));
      sl_enum.insert(LabelStr("Blue"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::testInstance("csp.1");
    // Register Constraints
    // Invoke commands to populate schema with type definitions
    id->addEnum("Ints");
    id->addEnum("Floats");
    id->addEnum("Strings");
    id->addEnum("Symbol");
    id->addEnum("Fruit");
    id->addEnum("Speed");
    id->addEnum("Color");
    id->addValue("Strings", LabelStr("s1"));
    id->addValue("Strings", LabelStr("s2"));
    id->addValue("Strings", LabelStr("s3"));
    id->addValue("Symbol", LabelStr("s4"));
    id->addValue("Symbol", LabelStr("s5"));
    id->addValue("Symbol", LabelStr("s6"));
    id->addValue("Fruit", LabelStr("Apple"));
    id->addValue("Fruit", LabelStr("Orange"));
    id->addValue("Fruit", LabelStr("Banana"));
    id->addValue("Speed", LabelStr("Slow"));
    id->addValue("Speed", LabelStr("Medium"));
    id->addValue("Speed", LabelStr("Fast"));
    id->addValue("Color", LabelStr("Red"));
    id->addValue("Color", LabelStr("Orange"));
    id->addValue("Color", LabelStr("Yellow"));
    id->addValue("Color", LabelStr("Green"));
    id->addValue("Color", LabelStr("Blue"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Ints, IntsBaseDomain());
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Floats, FloatsBaseDomain());
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Strings, StringsBaseDomain());
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Symbol, SymbolBaseDomain());
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Fruit, FruitBaseDomain());
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Speed, SpeedBaseDomain());
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Color, ColorBaseDomain());
    // Allocate rules
    return id;
  }
  
}
