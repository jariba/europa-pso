// class-constructor.nddl

#include "class-constructor.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  Locations LocationsBaseDomain(){
    static Locations sl_enum("Locations");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("Hill"));
      sl_enum.insert(LabelStr("Rock"));
      sl_enum.insert(LabelStr("Lander"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  
  // class-constructor.nddl:9 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if(m_0.isNoId()){
      m_0 = addVariable(IntervalIntDomain("int"), "m_0");
    }
    if(m_1.isNoId()){
      m_1 = addVariable(IntervalIntDomain("int"), "m_1");
    }
    if(m_2.isNoId()){
      m_2 = addVariable(BoolDomain("bool"), "m_2");
    }
    if(m_3.isNoId()){
      m_3 = addVariable(BoolDomain("bool"), "m_3");
    }
    if(m_4.isNoId()){
      m_4 = addVariable(StringDomain("string"), "m_4");
    }
    if(m_5.isNoId()){
      m_5 = addVariable(LocationsBaseDomain(), "m_5");
    }
    if(m_6.isNoId()){
      m_6 = addVariable(IntervalDomain("float"), "m_6");
    }
    check_error(m_7.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  // class-constructor.nddl:9 Foo
  void Foo::constructor(const WorldId& w) {
    m_0 = addVariable(IntervalIntDomain(100, 100, "int"), "m_0");
    m_1 = addVariable(IntervalIntDomain(200, 200, "int"), "m_1");
    m_2 = addVariable(BoolDomain(false, "bool"), "m_2");
    m_4 = addVariable(StringDomain(LabelStr("This is a very long string"), "string"), "m_4");
    m_5 = addVariable(Locations(LabelStr("Hill"), "Locations"), "m_5");
    m_7 = addVariable(WorldDomain(w, "World"), "m_7");
  }
  
  // class-constructor.nddl:9 Foo
  class FooFactory0: public ConcreteObjectFactory {
  public:
    FooFactory0(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("World")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to World");
      check_error(arguments[0]->isSingleton());
      WorldId w((WorldId)arguments[0]->getSingletonValue());
      
      FooId instance = (new Foo(planDb, objectType, objectName))->getId();
      instance->constructor(w);
      instance->handleDefaults();
      return instance;
    }
  };
  
  // class-constructor.nddl:9 Foo
  void Foo::constructor(const WorldId& w, int a, bool b, const LabelStr& c, const LabelStr& loc) {
    m_0 = addVariable(IntervalIntDomain(a, a, "int"), "m_0");
    m_2 = addVariable(BoolDomain(b, "bool"), "m_2");
    m_4 = addVariable(StringDomain(c, "string"), "m_4");
    m_5 = addVariable(Locations(loc, "Locations"), "m_5");
    m_6 = addVariable(IntervalDomain(198.65, 198.65, "float"), "m_6");
    m_7 = addVariable(WorldDomain(w, "World"), "m_7");
  }
  
  // class-constructor.nddl:9 Foo
  class FooFactory1: public ConcreteObjectFactory {
  public:
    FooFactory1(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 5);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("World")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to World");
      check_error(arguments[0]->isSingleton());
      WorldId w((WorldId)arguments[0]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1], 
                                                TypeFactory::baseDomain("int")), 
                  "Cannot convert " + arguments[1]->getTypeName().toString() + " to int");
      check_error(arguments[1]->isSingleton());
      int a((int)arguments[1]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2], 
                                                TypeFactory::baseDomain("bool")), 
                  "Cannot convert " + arguments[2]->getTypeName().toString() + " to bool");
      check_error(arguments[2]->isSingleton());
      bool b((bool)arguments[2]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[3], 
                                                TypeFactory::baseDomain("string")), 
                  "Cannot convert " + arguments[3]->getTypeName().toString() + " to string");
      check_error(arguments[3]->isSingleton());
      LabelStr c((LabelStr)arguments[3]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[4], 
                                                TypeFactory::baseDomain("Locations")), 
                  "Cannot convert " + arguments[4]->getTypeName().toString() + " to Locations");
      check_error(arguments[4]->isSingleton());
      LabelStr loc((LabelStr)arguments[4]->getSingletonValue());
      
      FooId instance = (new Foo(planDb, objectType, objectName))->getId();
      instance->constructor(w, a, b, c, loc);
      instance->handleDefaults();
      return instance;
    }
  };
  
  // class-constructor.nddl:9 Foo
  void Foo::constructor(const WorldId& w, int a, bool b) {
    m_0 = addVariable(IntervalIntDomain(a, a, "int"), "m_0");
    m_2 = addVariable(BoolDomain(b, "bool"), "m_2");
    m_4 = addVariable(StringDomain(LabelStr("Default String Value"), "string"), "m_4");
    m_5 = addVariable(Locations(LabelStr("Rock"), "Locations"), "m_5");
    m_6 = addVariable(IntervalDomain(198.65, 198.65, "float"), "m_6");
    m_7 = addVariable(WorldDomain(w, "World"), "m_7");
  }
  
  // class-constructor.nddl:9 Foo
  class FooFactory2: public ConcreteObjectFactory {
  public:
    FooFactory2(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 3);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("World")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to World");
      check_error(arguments[0]->isSingleton());
      WorldId w((WorldId)arguments[0]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1], 
                                                TypeFactory::baseDomain("int")), 
                  "Cannot convert " + arguments[1]->getTypeName().toString() + " to int");
      check_error(arguments[1]->isSingleton());
      int a((int)arguments[1]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[2], 
                                                TypeFactory::baseDomain("bool")), 
                  "Cannot convert " + arguments[2]->getTypeName().toString() + " to bool");
      check_error(arguments[2]->isSingleton());
      bool b((bool)arguments[2]->getSingletonValue());
      
      FooId instance = (new Foo(planDb, objectType, objectName))->getId();
      instance->constructor(w, a, b);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // class-constructor.nddl:49 Bar
  Bar::Bar(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Foo(planDatabase, "Bar", name) {
  }
  Bar::Bar(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Foo(planDatabase, type, name) {
  }
  Bar::Bar(const ObjectId& parent, const LabelStr& name)
   : Foo(parent, "Bar", name) {}
  Bar::Bar(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Foo(parent, type, name) {}
  // default initialization of member variables
  void Bar::handleDefaults(bool autoClose) {
    Foo::handleDefaults(false);
    if(m_8.isNoId()){
      m_8 = addVariable(IntervalDomain("float"), "m_8");
    }
    if (autoClose)
      close();
  }
  
  
  // class-constructor.nddl:49 Bar
  void Bar::constructor(float m8, const WorldId& w) {
    Foo::constructor(w, 10, true);
    m_8 = addVariable(IntervalDomain(m8, m8, "float"), "m_8");
  }
  
  // class-constructor.nddl:49 Bar
  class BarFactory3: public ConcreteObjectFactory {
  public:
    BarFactory3(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 2);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("float")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to float");
      check_error(arguments[0]->isSingleton());
      float m8((float)arguments[0]->getSingletonValue());
      
      check_error(AbstractDomain::canBeCompared(*arguments[1], 
                                                TypeFactory::baseDomain("World")), 
                  "Cannot convert " + arguments[1]->getTypeName().toString() + " to World");
      check_error(arguments[1]->isSingleton());
      WorldId w((WorldId)arguments[1]->getSingletonValue());
      
      BarId instance = (new Bar(planDb, objectType, objectName))->getId();
      instance->constructor(m8, w);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // class-constructor.nddl:57 Baz
  Baz::Baz(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Baz", name, true) {
  }
  Baz::Baz(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Baz::Baz(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Baz", name, true) {}
  Baz::Baz(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Baz::handleDefaults(bool autoClose) {
    check_error(m_foo.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  // class-constructor.nddl:57 Baz
  void Baz::constructor(const FooId& _foo) {
    m_foo = addVariable(FooDomain(_foo, "Foo"), "m_foo");
  }
  
  // class-constructor.nddl:57 Baz
  class BazFactory4: public ConcreteObjectFactory {
  public:
    BazFactory4(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("Foo")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to Foo");
      check_error(arguments[0]->isSingleton());
      FooId _foo((FooId)arguments[0]->getSingletonValue());
      
      BazId instance = (new Baz(planDb, objectType, objectName))->getId();
      instance->constructor(_foo);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // class-constructor.nddl:71 Bat
  Bat::Bat(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Bat", name, true) {
  }
  Bat::Bat(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Bat::Bat(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Bat", name, true) {}
  Bat::Bat(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Bat::handleDefaults(bool autoClose) {
    check_error(m_baz.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  // class-constructor.nddl:71 Bat
  void Bat::constructor(const FooId& _foo) {
    m_baz = addVariable(BazDomain((new Baz(m_id, "m_baz"))->getId(), "Baz"), "m_baz");
    Id<Baz>(singleton(m_baz))->constructor(_foo);
    Id<Baz>(singleton(m_baz))->handleDefaults();
  }
  
  // class-constructor.nddl:71 Bat
  class BatFactory5: public ConcreteObjectFactory {
  public:
    BatFactory5(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("Foo")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to Foo");
      check_error(arguments[0]->isSingleton());
      FooId _foo((FooId)arguments[0]->getSingletonValue());
      
      BatId instance = (new Bat(planDb, objectType, objectName))->getId();
      instance->constructor(_foo);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // class-constructor.nddl:80 Bing
  Bing::Bing(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Bing", name, true) {
  }
  Bing::Bing(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Bing::Bing(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Bing", name, true) {}
  Bing::Bing(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Bing::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Bing::constructor() {
  }
  
  
  // class-constructor.nddl:80 Bing
  DECLARE_DEFAULT_OBJECT_FACTORY(BingFactory6, Bing);
  
  
  // class-constructor.nddl:81 Bang
  Bang::Bang(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Bing(planDatabase, "Bang", name) {
  }
  Bang::Bang(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Bing(planDatabase, type, name) {
  }
  Bang::Bang(const ObjectId& parent, const LabelStr& name)
   : Bing(parent, "Bang", name) {}
  Bang::Bang(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Bing(parent, type, name) {}
  // default initialization of member variables
  void Bang::handleDefaults(bool autoClose) {
    Bing::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // class-constructor.nddl:81 Bang
  DECLARE_DEFAULT_OBJECT_FACTORY(BangFactory7, Bang);
  
  
  // class-constructor.nddl:83 Baluga
  Baluga::Baluga(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Baluga", name, true) {
  }
  Baluga::Baluga(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Baluga::Baluga(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Baluga", name, true) {}
  Baluga::Baluga(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Baluga::handleDefaults(bool autoClose) {
    if(location.isNoId()){
      location = addVariable(LocationsBaseDomain(), "location");
    }
    if (autoClose)
      close();
  }
  
  
  // class-constructor.nddl:83 Baluga
  void Baluga::constructor(const LabelStr& loc) {
    location = addVariable(Locations(loc, "Locations"), "location");
  }
  
  // class-constructor.nddl:83 Baluga
  class BalugaFactory8: public ConcreteObjectFactory {
  public:
    BalugaFactory8(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("Locations")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to Locations");
      check_error(arguments[0]->isSingleton());
      LabelStr loc((LabelStr)arguments[0]->getSingletonValue());
      
      BalugaId instance = (new Baluga(planDb, objectType, objectName))->getId();
      instance->constructor(loc);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // class-constructor.nddl:94 StringBase
  StringBase::StringBase(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "StringBase", name, true) {
  }
  StringBase::StringBase(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  StringBase::StringBase(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "StringBase", name, true) {}
  StringBase::StringBase(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void StringBase::handleDefaults(bool autoClose) {
    if(arg0.isNoId()){
      arg0 = addVariable(StringDomain("string"), "arg0");
    }
    if (autoClose)
      close();
  }
  
  
  // class-constructor.nddl:94 StringBase
  void StringBase::constructor(const LabelStr& _arg0) {
    arg0 = addVariable(StringDomain(_arg0, "string"), "arg0");
  }
  
  // class-constructor.nddl:94 StringBase
  class StringBaseFactory9: public ConcreteObjectFactory {
  public:
    StringBaseFactory9(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                TypeFactory::baseDomain("string")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to string");
      check_error(arguments[0]->isSingleton());
      LabelStr _arg0((LabelStr)arguments[0]->getSingletonValue());
      
      StringBaseId instance = (new StringBase(planDb, objectType, objectName))->getId();
      instance->constructor(_arg0);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // class-constructor.nddl:99 StringDerived
  StringDerived::StringDerived(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : StringBase(planDatabase, "StringDerived", name) {
  }
  StringDerived::StringDerived(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : StringBase(planDatabase, type, name) {
  }
  StringDerived::StringDerived(const ObjectId& parent, const LabelStr& name)
   : StringBase(parent, "StringDerived", name) {}
  StringDerived::StringDerived(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : StringBase(parent, type, name) {}
  // default initialization of member variables
  void StringDerived::handleDefaults(bool autoClose) {
    StringBase::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // class-constructor.nddl:99 StringDerived
  void StringDerived::constructor() {
    StringBase::constructor("derived");
  }
  
  // class-constructor.nddl:99 StringDerived
  class StringDerivedFactory10: public ConcreteObjectFactory {
  public:
    StringDerivedFactory10(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 0);
      StringDerivedId instance = (new StringDerived(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // class-constructor.nddl:103 World
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "World", name, true) {
  }
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  World::World(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "World", name, true) {}
  World::World(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void World::handleDefaults(bool autoClose) {
    if(m_str1.isNoId()){
      m_str1 = addVariable(StringDomain("string"), "m_str1");
    }
    check_error(m_foo1.isValid(), "object variables must be initialized explicitly");
    
    check_error(m_foo2.isValid(), "object variables must be initialized explicitly");
    
    check_error(m_foo3.isValid(), "object variables must be initialized explicitly");
    
    check_error(m_foo4.isValid(), "object variables must be initialized explicitly");
    
    check_error(m_baz1.isValid(), "object variables must be initialized explicitly");
    
    check_error(m_bat1.isValid(), "object variables must be initialized explicitly");
    
    if(m_int1.isNoId()){
      m_int1 = addVariable(IntervalIntDomain("int"), "m_int1");
    }
    check_error(m_string.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  // class-constructor.nddl:103 World
  void World::constructor() {
    m_str1 = addVariable(StringDomain(LabelStr("This is also a long string"), "string"), "m_str1");
    m_foo1 = addVariable(FooDomain((new Foo(m_id, "m_foo1"))->getId(), "Foo"), "m_foo1");
    Id<Foo>(singleton(m_foo1))->constructor(m_id, 1, true, singleton(m_str1), LabelStr("Lander"));
    Id<Foo>(singleton(m_foo1))->handleDefaults();
    m_foo2 = addVariable(FooDomain((new Foo(m_id, "m_foo2"))->getId(), "Foo"), "m_foo2");
    Id<Foo>(singleton(m_foo2))->constructor(m_id);
    Id<Foo>(singleton(m_foo2))->handleDefaults();
    m_foo3 = addVariable(m_foo2->baseDomain(), "m_foo3");
    m_int1 = addVariable(IntervalIntDomain(100, 100, "int"), "m_int1");
    m_foo4 = addVariable(FooDomain((new Foo(m_id, "m_foo4"))->getId(), "Foo"), "m_foo4");
    Id<Foo>(singleton(m_foo4))->constructor(m_id, (int) singleton(m_int1), false);
    Id<Foo>(singleton(m_foo4))->handleDefaults();
    m_baz1 = addVariable(BazDomain((new Baz(m_id, "m_baz1"))->getId(), "Baz"), "m_baz1");
    Id<Baz>(singleton(m_baz1))->constructor(singleton(m_foo1));
    Id<Baz>(singleton(m_baz1))->handleDefaults();
    m_bat1 = addVariable(BatDomain((new Bat(m_id, "m_bat1"))->getId(), "Bat"), "m_bat1");
    Id<Bat>(singleton(m_bat1))->constructor(singleton(m_foo1));
    Id<Bat>(singleton(m_bat1))->handleDefaults();
    m_string = addVariable(StringDerivedDomain((new StringDerived(m_id, "m_string"))->getId(), "StringDerived"), "m_string");
    Id<StringDerived>(singleton(m_string))->constructor();
    Id<StringDerived>(singleton(m_string))->handleDefaults();
  }
  
  // class-constructor.nddl:103 World
  class WorldFactory11: public ConcreteObjectFactory {
  public:
    WorldFactory11(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 0);
      WorldId instance = (new World(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::testInstance("class-constructor");
    // Register Constraints
    // Invoke commands to populate schema with type definitions
    id->addObjectType("Timeline","Object");
    id->addObjectType("Foo", "Object");
    id->addObjectType("Bar", "Foo");
    id->addObjectType("Baz", "Object");
    id->addObjectType("Bat", "Object");
    id->addObjectType("Bing", "Object");
    id->addObjectType("Bang", "Bing");
    id->addObjectType("Baluga", "Object");
    id->addObjectType("StringBase", "Object");
    id->addObjectType("StringDerived", "StringBase");
    id->addObjectType("World", "Object");
    id->addEnum("Locations");
    id->addMember("Foo", "int", "m_0");
    id->addMember("Foo", "int", "m_1");
    id->addMember("Foo", "bool", "m_2");
    id->addMember("Foo", "bool", "m_3");
    id->addMember("Foo", "string", "m_4");
    id->addMember("Foo", "Locations", "m_5");
    id->addMember("Foo", "float", "m_6");
    id->addMember("Foo", "World", "m_7");
    id->addMember("Bar", "float", "m_8");
    id->addMember("Baz", "Foo", "m_foo");
    id->addMember("Bat", "Baz", "m_baz");
    id->addMember("Baluga", "Locations", "location");
    id->addMember("StringBase", "string", "arg0");
    id->addMember("World", "string", "m_str1");
    id->addMember("World", "Foo", "m_foo1");
    id->addMember("World", "Foo", "m_foo2");
    id->addMember("World", "Foo", "m_foo3");
    id->addMember("World", "Foo", "m_foo4");
    id->addMember("World", "Baz", "m_baz1");
    id->addMember("World", "Bat", "m_bat1");
    id->addMember("World", "int", "m_int1");
    id->addMember("World", "StringDerived", "m_string");
    id->addValue("Locations", LabelStr("Hill"));
    id->addValue("Locations", LabelStr("Rock"));
    id->addValue("Locations", LabelStr("Lander"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TYPE_FACTORY(Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(Locations, LocationsBaseDomain());
    REGISTER_TYPE_FACTORY(Foo, ObjectDomain("Foo"));
    REGISTER_OBJECT_FACTORY(FooFactory0, Foo:World);
    REGISTER_OBJECT_FACTORY(FooFactory0, Foo:Object);
    REGISTER_OBJECT_FACTORY(FooFactory1, Foo:World:int:bool:string:Locations);
    REGISTER_OBJECT_FACTORY(FooFactory1, Foo:Object:int:bool:string:Locations);
    REGISTER_OBJECT_FACTORY(FooFactory2, Foo:World:int:bool);
    REGISTER_OBJECT_FACTORY(FooFactory2, Foo:Object:int:bool);
    REGISTER_TYPE_FACTORY(Bar, ObjectDomain("Bar"));
    REGISTER_OBJECT_FACTORY(BarFactory3, Bar:float:World);
    REGISTER_OBJECT_FACTORY(BarFactory3, Bar:float:Object);
    REGISTER_TYPE_FACTORY(Baz, ObjectDomain("Baz"));
    REGISTER_OBJECT_FACTORY(BazFactory4, Baz:Foo);
    REGISTER_OBJECT_FACTORY(BazFactory4, Baz:Object);
    REGISTER_TYPE_FACTORY(Bat, ObjectDomain("Bat"));
    REGISTER_OBJECT_FACTORY(BatFactory5, Bat:Foo);
    REGISTER_OBJECT_FACTORY(BatFactory5, Bat:Object);
    REGISTER_TYPE_FACTORY(Bing, ObjectDomain("Bing"));
    REGISTER_OBJECT_FACTORY(BingFactory6, Bing);
    REGISTER_TYPE_FACTORY(Bang, ObjectDomain("Bang"));
    REGISTER_OBJECT_FACTORY(BangFactory7, Bang);
    REGISTER_TYPE_FACTORY(Baluga, ObjectDomain("Baluga"));
    REGISTER_OBJECT_FACTORY(BalugaFactory8, Baluga:Locations);
    REGISTER_TYPE_FACTORY(StringBase, ObjectDomain("StringBase"));
    REGISTER_OBJECT_FACTORY(StringBaseFactory9, StringBase:string);
    REGISTER_TYPE_FACTORY(StringDerived, ObjectDomain("StringDerived"));
    REGISTER_OBJECT_FACTORY(StringDerivedFactory10, StringDerived);
    REGISTER_TYPE_FACTORY(World, ObjectDomain("World"));
    REGISTER_OBJECT_FACTORY(WorldFactory11, World);
    // Allocate rules
    return id;
  }
  
}
