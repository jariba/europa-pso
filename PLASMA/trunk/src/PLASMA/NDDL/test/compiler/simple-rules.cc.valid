// simple-rules.nddl

#include "simple-rules.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  TokenStates TokenStatesBaseDomain(){
    static TokenStates sl_enum("TokenStates");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("INACTIVE"));
      sl_enum.insert(LabelStr("ACTIVE"));
      sl_enum.insert(LabelStr("MERGED"));
      sl_enum.insert(LabelStr("REJECTED"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Timeline
  
  
  
  // StringData.nddl:5 StringData
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "StringData", name, true) {
  }
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  StringData::StringData(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "StringData", name, true) {}
  StringData::StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void StringData::handleDefaults(bool autoClose) {
    if(data.isNoId()){
      data = addVariable(StringDomain("string"), "data");
    }
    if (autoClose)
      close();
  }
  
  
  // StringData.nddl:5 StringData
  void StringData::constructor(const LabelStr& _data) {
    data = addVariable(StringDomain(_data, "string"), "data");
  }
  
  // StringData.nddl:5 StringData
  class StringDataFactory0: public ConcreteObjectFactory {
  public:
    StringDataFactory0(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                planDb->getConstraintEngine()->getTypeFactoryMgr()->baseDomain("string")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to string");
      check_error(arguments[0]->isSingleton());
      LabelStr _data((LabelStr)arguments[0]->getSingletonValue());
      
      StringDataId instance = (new StringData(planDb, objectType, objectName))->getId();
      instance->constructor(_data);
      instance->handleDefaults();
      return instance;
    }
  };
  
  Locations LocationsBaseDomain(){
    static Locations sl_enum("Locations");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("Hill"));
      sl_enum.insert(LabelStr("Rock"));
      sl_enum.insert(LabelStr("Lander"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  StringEnum StringEnumBaseDomain(){
    static StringEnum sl_enum("StringEnum");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("s1"));
      sl_enum.insert(LabelStr("s2"));
      sl_enum.insert(LabelStr("s3"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  NumericEnum NumericEnumBaseDomain(){
    static NumericEnum sl_enum("NumericEnum");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(1.0);
      sl_enum.insert(3.0);
      sl_enum.insert(4.0);
      sl_enum.insert(10.4);
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  
  // simple-rules.nddl:7 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Foo::constructor() {
  }
  
  
  // simple-rules.nddl:7 Foo
  DECLARE_DEFAULT_OBJECT_FACTORY(FooFactory1, Foo);
  
  
  // simple-rules.nddl:8 Bar
  Foo::Bar::Bar(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool isFact, bool close)
   : NddlToken(planDatabase, name, rejectable, isFact, false) {
    handleDefaults(close);
  }
  
  Foo::Bar::Bar(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::Bar::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  
  // simple-rules.nddl:11 Rover
  Rover::Rover(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Rover", name, true) {
  }
  Rover::Rover(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Rover::Rover(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Rover", name, true) {}
  Rover::Rover(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Rover::handleDefaults(bool autoClose) {
    check_error(foo.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  
  // simple-rules.nddl:13 At
  Rover::At::At(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool isFact, bool close)
   : NddlToken(planDatabase, name, rejectable, isFact, false) {
    handleDefaults(close);
  }
  
  Rover::At::At(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Rover::At::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(_location.isNoId()){
      _location = addParameter(LocationsBaseDomain(), "_location");
    }
    if(_foo.isNoId()){
      _foo = addParameter(ObjectDomain("Foo"), "_foo");
      completeObjectParam(Foo, _foo);
    }
    if (autoClose)
      close();
  }
  
  
  
  // simple-rules.nddl:18 Going
  Rover::Going::Going(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool isFact, bool close)
   : NddlToken(planDatabase, name, rejectable, isFact, false) {
    handleDefaults(close);
  }
  
  Rover::Going::Going(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Rover::Going::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(_from.isNoId()){
      _from = addParameter(LocationsBaseDomain(), "_from");
    }
    if(_to.isNoId()){
      _to = addParameter(LocationsBaseDomain(), "_to");
    }
    if (autoClose)
      close();
  }
  
  
  
  // simple-rules.nddl:22 AnyPredicate
  Rover::AnyPredicate::AnyPredicate(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool isFact, bool close)
   : NddlToken(planDatabase, name, rejectable, isFact, false) {
    handleDefaults(close);
  }
  
  Rover::AnyPredicate::AnyPredicate(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Rover::AnyPredicate::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(v0.isNoId()){
      v0 = addParameter(SymbolDomain(LabelStr("Hill"), "Locations"), "v0");
    }
    if(v1.isNoId()){
      v1 = addParameter(StringEnumBaseDomain(), "v1");
    }
    if(v2.isNoId()){
      v2 = addParameter(NumericEnumBaseDomain(), "v2");
    }
    if(v3.isNoId()){
      v3 = addParameter(IntervalIntDomain("int"), "v3");
    }
    if(v4.isNoId()){
      v4 = addParameter(IntervalDomain("float"), "v4");
    }
    if (autoClose)
      close();
    
    // Post parameter constraints
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("v0")));
      vars.push_back(predicateVariable(SymbolDomain(listFromString("Hill$Lander$",false), "Locations")));
      token_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("v1")));
      vars.push_back(predicateVariable(StringDomain(listFromString("s1$s2$",false), "string")));
      token_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("v2")));
      vars.push_back(predicateVariable(NumericDomain(listFromString("1.0$4.0$10.4$",true), "float")));
      token_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("v3")));
      vars.push_back(predicateVariable(IntervalIntDomain(0, 12, "int")));
      token_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("v4")));
      vars.push_back(predicateVariable(IntervalDomain(-1.98, 2.67, "float")));
      token_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("v3")));
      vars.push_back(predicateVariable(IntervalIntDomain(8,8, "int")));
      token_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("v3")));
      vars.push_back(predicateVariable(IntervalIntDomain(+inf,+inf, "int")));
      token_constraint(neq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("v4")));
      vars.push_back(predicateVariable(IntervalIntDomain(-inf, -100, "int")));
      token_constraint(neq, vars);
    }
  }
  
  
  // simple-rules.nddl:11 Rover
  void Rover::constructor() {
    foo = addVariable(FooDomain((new Foo(m_id, "foo"))->getId(), "Foo"), "foo");
    Id<Foo>(singleton(foo))->constructor();
    Id<Foo>(singleton(foo))->handleDefaults();
  }
  
  // simple-rules.nddl:11 Rover
  class RoverFactory2: public ConcreteObjectFactory {
  public:
    RoverFactory2(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 0);
      RoverId instance = (new Rover(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  // simple-rules.nddl:44 At
  class Rover$At$0$0: public RuleInstance {
  public:
    Rover$At$0$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Rover$At$0, Rover$At$0$0, Rover.At, "simple-rules.nddl,44");
  
  void Rover$At$0$0::handleExecute() {
    objectVar(Foo, localFoo, false, false);
    objectVar(Rover, r, false, false);
    localSlave(Going, to, "meets");
    sameObject(object, to);
    meets(this, to);
    localSlave(Going, from, "meets");
    sameObject(object, from);
    meets(this, from);
    slave(Foo::Bar, Foo.Bar, bar, LabelStr("meets"));
    sameObject(_foo, bar);
    meets(this, bar);
    slave(Foo::Bar, Foo.Bar, baz, LabelStr("meets"));
    sameObject(localFoo, baz);
    meets(this, baz);
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("to")), std::string("_from")));
      vars.push_back(var(getId(),std::string("_location")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("from")), std::string("_to")));
      vars.push_back(var(getId(),std::string("_location")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("from")), std::string("object")));
      vars.push_back(varfromtok(tok(getId(), std::string("to")), std::string("object")));
      vars.push_back(var(getId(),std::string("r")));
      rule_constraint(commonAncestor, vars);
    }
  }
  
  // simple-rules.nddl:62 Going
  class Rover$Going$1$0: public RuleInstance {
  public:
    Rover$Going$1$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Rover$Going$1, Rover$Going$1$0, Rover.Going, "simple-rules.nddl,62");
  
  void Rover$Going$1$0::handleExecute() {
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("_from")));
      vars.push_back(var(getId(),std::string("_to")));
      rule_constraint(neq, vars);
    }
  }
  
  
  // simple-rules.nddl:67 SuperRover
  SuperRover::SuperRover(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Rover(planDatabase, "SuperRover", name) {
  }
  SuperRover::SuperRover(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Rover(planDatabase, type, name) {
  }
  SuperRover::SuperRover(const ObjectId& parent, const LabelStr& name)
   : Rover(parent, "SuperRover", name) {}
  SuperRover::SuperRover(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Rover(parent, type, name) {}
  // default initialization of member variables
  void SuperRover::handleDefaults(bool autoClose) {
    Rover::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // simple-rules.nddl:67 SuperRover
  void SuperRover::constructor() {
    Rover::constructor();
  }
  
  // simple-rules.nddl:67 SuperRover
  class SuperRoverFactory3: public ConcreteObjectFactory {
  public:
    SuperRoverFactory3(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 0);
      SuperRoverId instance = (new SuperRover(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // simple-rules.nddl:74 World
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "World", name, true) {
  }
  World::World(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  World::World(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "World", name, true) {}
  World::World(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void World::handleDefaults(bool autoClose) {
    check_error(rover.isValid(), "object variables must be initialized explicitly");
    
    if (autoClose)
      close();
  }
  
  
  
  // simple-rules.nddl:77 initialState
  World::initialState::initialState(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool isFact, bool close)
   : NddlToken(planDatabase, name, rejectable, isFact, false) {
    handleDefaults(close);
  }
  
  World::initialState::initialState(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void World::initialState::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // simple-rules.nddl:74 World
  void World::constructor() {
    rover = addVariable(RoverDomain((new Rover(m_id, "rover"))->getId(), "Rover"), "rover");
    Id<Rover>(singleton(rover))->constructor();
    Id<Rover>(singleton(rover))->handleDefaults();
  }
  
  // simple-rules.nddl:74 World
  class WorldFactory4: public ConcreteObjectFactory {
  public:
    WorldFactory4(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 0);
      WorldId instance = (new World(planDb, objectType, objectName))->getId();
      instance->constructor();
      instance->handleDefaults();
      return instance;
    }
  };
  
  // simple-rules.nddl:84 initialState
  class World$initialState$2$0: public RuleInstance {
  public:
    World$initialState$2$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$World$initialState$2, World$initialState$2$0, World.initialState, "simple-rules.nddl,84");
  
  void World$initialState$2$0::handleExecute() {
    objectVar(Rover, r1, false, false);
    objectVar(Rover, r2, false, false);
    slave(Rover::At, Rover.At, s0, LabelStr("contains"));
    contains(this, s0);
    slave(Rover::At, Rover.At, s1, LabelStr("contained_by"));
    contained_by(this, s1);
    slave(Rover::At, Rover.At, s2, LabelStr("meets"));
    meets(this, s2);
    slave(Rover::At, Rover.At, s3, LabelStr("met_by"));
    met_by(this, s3);
    slave(Rover::At, Rover.At, s4, LabelStr("before"));
    before(this, s4);
    slave(Rover::At, Rover.At, s5, LabelStr("after"));
    after(this, s5);
    slave(Rover::At, Rover.At, s6, LabelStr("starts"));
    starts(this, s6);
    slave(Rover::At, Rover.At, s7, LabelStr("ends"));
    ends(this, s7);
    slave(Rover::At, Rover.At, s8, LabelStr("any"));
    slave(Rover::At, Rover.At, s9, LabelStr("ends_after"));
    ends_after(this, s9);
    slave(Rover::At, Rover.At, s10, LabelStr("ends_before"));
    ends_before(this, s10);
    slave(Rover::At, Rover.At, s11, LabelStr("ends_after_start"));
    ends_after_start(this, s11);
    slave(Rover::At, Rover.At, s12, LabelStr("starts_before_end"));
    starts_before_end(this, s12);
    slave(Rover::At, Rover.At, s13, LabelStr("starts_during"));
    starts_during(this, s13);
    slave(Rover::At, Rover.At, s14, LabelStr("contains_start"));
    contains_start(this, s14);
    slave(Rover::At, Rover.At, s15, LabelStr("ends_during"));
    ends_during(this, s15);
    slave(Rover::At, Rover.At, s16, LabelStr("contains_end"));
    contains_end(this, s16);
    slave(Rover::At, Rover.At, s17, LabelStr("starts_before"));
    starts_before(this, s17);
    slave(Rover::At, Rover.At, s18, LabelStr("starts_after"));
    starts_after(this, s18);
    slave(Rover::At, Rover.At, s19, LabelStr("equals"));
    equals(this, s19);
    slave(Rover::At, Rover.At, a, LabelStr("contains"));
    contains(this, a);
    slave(Rover::At, Rover.At, b, LabelStr("contains"));
    contains(this, b);
    slave(Rover::At, Rover.At, c, LabelStr("after"));
    after(b, c);
    meets(a, c);
    slave(Rover::At, Rover.At, d, LabelStr("starts"));
    starts(c, d);
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("a")), std::string("_location")));
      vars.push_back(ruleVariable(SymbolDomain(LabelStr("Lander"), "Locations")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("b")), std::string("_location")));
      vars.push_back(ruleVariable(SymbolDomain(listFromString("Rock$Hill$",false), "Locations")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("a")), std::string("end")));
      vars.push_back(varfromtok(tok(getId(), std::string("b")), std::string("start")));
      rule_constraint(leq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(varfromtok(tok(getId(), std::string("a")), std::string("start")));
      vars.push_back(ruleVariable(IntervalIntDomain(-10000, 10000, "int")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("r1")));
      vars.push_back(var(getId(),std::string("r2")));
      rule_constraint(eq, vars);
    }
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(const SchemaId& schema){
    SchemaId id = schema;
    // Register Constraints
    // Invoke commands to populate schema with type definitions
    id->addObjectType("StringData", "Object");
    id->addObjectType("Foo", "Timeline");
    id->addObjectType("Rover", "Timeline");
    id->addObjectType("SuperRover", "Rover");
    id->addObjectType("World", "Timeline");
    id->addEnum("TokenStates");
    id->addMember("StringData", "string", "data");
    id->addEnum("Locations");
    id->addEnum("StringEnum");
    id->addEnum("NumericEnum");
    id->addPredicate("Foo.Bar");
    id->addMember("Rover", "Foo", "foo");
    id->addPredicate("Rover.At");
    id->addMember("Rover.At", "Locations", "_location");
    id->addMember("Rover.At", "Foo", "_foo");
    id->addPredicate("Rover.Going");
    id->addMember("Rover.Going", "Locations", "_from");
    id->addMember("Rover.Going", "Locations", "_to");
    id->addPredicate("Rover.AnyPredicate");
    id->addMember("Rover.AnyPredicate", "Locations", "v0");
    id->addMember("Rover.AnyPredicate", "StringEnum", "v1");
    id->addMember("Rover.AnyPredicate", "NumericEnum", "v2");
    id->addMember("Rover.AnyPredicate", "int", "v3");
    id->addMember("Rover.AnyPredicate", "float", "v4");
    id->addMember("World", "Rover", "rover");
    id->addPredicate("World.initialState");
    id->addValue("TokenStates", LabelStr("INACTIVE"));
    id->addValue("TokenStates", LabelStr("ACTIVE"));
    id->addValue("TokenStates", LabelStr("MERGED"));
    id->addValue("TokenStates", LabelStr("REJECTED"));
    id->addValue("Locations", LabelStr("Hill"));
    id->addValue("Locations", LabelStr("Rock"));
    id->addValue("Locations", LabelStr("Lander"));
    id->addValue("StringEnum", LabelStr("s1"));
    id->addValue("StringEnum", LabelStr("s2"));
    id->addValue("StringEnum", LabelStr("s3"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Foo::Bar::Factory);
    REGISTER_TOKEN_FACTORY(Rover::At::Factory);
    REGISTER_TOKEN_FACTORY(Rover::Going::Factory);
    REGISTER_TOKEN_FACTORY(Rover::AnyPredicate::Factory);
    REGISTER_TOKEN_FACTORY(World::initialState::Factory);
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),TokenStates, TokenStatesBaseDomain());
    REGISTER_OBJECT_FACTORY(StringDataFactory0, StringData:string);
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Locations, LocationsBaseDomain());
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),StringEnum, StringEnumBaseDomain());
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),NumericEnum, NumericEnumBaseDomain());
    REGISTER_OBJECT_FACTORY(FooFactory1, Foo);
    REGISTER_OBJECT_FACTORY(RoverFactory2, Rover);
    REGISTER_OBJECT_FACTORY(SuperRoverFactory3, SuperRover);
    REGISTER_OBJECT_FACTORY(WorldFactory4, World);
    // Allocate rules
    new Rule$Rover$At$0();
    new Rule$Rover$Going$1();
    new Rule$World$initialState$2();
    return id;
  }
  
}
