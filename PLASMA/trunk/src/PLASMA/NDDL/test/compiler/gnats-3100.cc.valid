// gnats-3100.nddl

#include "gnats-3100.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  
  // gnats-3100.nddl:1 Base
  Base::Base(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "Base", name, true) {
  }
  Base::Base(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  Base::Base(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "Base", name, true) {}
  Base::Base(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void Base::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Base::constructor() {
  }
  
  
  // gnats-3100.nddl:1 Base
  DECLARE_DEFAULT_OBJECT_FACTORY(BaseFactory0, Base);
  
  
  // gnats-3100.nddl:3 Derived
  Derived::Derived(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Base(planDatabase, "Derived", name) {
  }
  Derived::Derived(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Base(planDatabase, type, name) {
  }
  Derived::Derived(const ObjectId& parent, const LabelStr& name)
   : Base(parent, "Derived", name) {}
  Derived::Derived(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Base(parent, type, name) {}
  // default initialization of member variables
  void Derived::handleDefaults(bool autoClose) {
    Base::handleDefaults(false);
    if (autoClose)
      close();
  }
  
  
  // gnats-3100.nddl:3 Derived
  DECLARE_DEFAULT_OBJECT_FACTORY(DerivedFactory1, Derived);
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::testInstance("gnats-3100");
    // Register Constraints
    // Invoke commands to populate schema with type definitions
    id->addObjectType("Timeline","Object");
    id->addObjectType("Base", "Object");
    id->addObjectType("Derived", "Base");
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TYPE_FACTORY(Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(Base, ObjectDomain("Base"));
    REGISTER_OBJECT_FACTORY(BaseFactory0, Base);
    REGISTER_TYPE_FACTORY(Derived, ObjectDomain("Derived"));
    REGISTER_OBJECT_FACTORY(DerivedFactory1, Derived);
    // Allocate rules
    return id;
  }
  
}
