// globals.nddl

#include "globals.hh"
#include "NddlUtils.hh"

namespace NDDL {
  
  TokenStates TokenStatesBaseDomain(){
    static TokenStates sl_enum("TokenStates");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("INACTIVE"));
      sl_enum.insert(LabelStr("ACTIVE"));
      sl_enum.insert(LabelStr("MERGED"));
      sl_enum.insert(LabelStr("REJECTED"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  // SKIPPING IMPLEMENTATION FOR BUILT-IN CLASS Timeline
  
  
  
  // StringData.nddl:5 StringData
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Object(planDatabase, "StringData", name, true) {
  }
  StringData::StringData(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Object(planDatabase, type, name, true) {
  }
  StringData::StringData(const ObjectId& parent, const LabelStr& name)
   : Object(parent, "StringData", name, true) {}
  StringData::StringData(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Object(parent, type, name, true) {}
  // default initialization of member variables
  void StringData::handleDefaults(bool autoClose) {
    if(data.isNoId()){
      data = addVariable(StringDomain("string"), "data");
    }
    if (autoClose)
      close();
  }
  
  
  // StringData.nddl:5 StringData
  void StringData::constructor(const LabelStr& _data) {
    data = addVariable(StringDomain(_data, "string"), "data");
  }
  
  // StringData.nddl:5 StringData
  class StringDataFactory0: public ConcreteObjectFactory {
  public:
    StringDataFactory0(const LabelStr& name): ConcreteObjectFactory(name){}
  private:
    ObjectId createInstance(const PlanDatabaseId& planDb,
                            const LabelStr& objectType, 
                            const LabelStr& objectName,
                            const std::vector<const AbstractDomain*>& arguments) const {
      check_error(arguments.size() == 1);
      check_error(AbstractDomain::canBeCompared(*arguments[0], 
                                                planDb->getConstraintEngine()->getTypeFactoryMgr()->baseDomain("string")), 
                  "Cannot convert " + arguments[0]->getTypeName().toString() + " to string");
      check_error(arguments[0]->isSingleton());
      LabelStr _data((LabelStr)arguments[0]->getSingletonValue());
      
      StringDataId instance = (new StringData(planDb, objectType, objectName))->getId();
      instance->constructor(_data);
      instance->handleDefaults();
      return instance;
    }
  };
  
  
  // globals.nddl:11 Foo
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& name)
   : Timeline(planDatabase, "Foo", name, true) {
  }
  Foo::Foo(const PlanDatabaseId& planDatabase, const LabelStr& type, const LabelStr& name)
   : Timeline(planDatabase, type, name, true) {
  }
  Foo::Foo(const ObjectId& parent, const LabelStr& name)
   : Timeline(parent, "Foo", name, true) {}
  Foo::Foo(const ObjectId& parent, const LabelStr& type, const LabelStr& name)
   : Timeline(parent, type, name, true) {}
  // default initialization of member variables
  void Foo::handleDefaults(bool autoClose) {
    if (autoClose)
      close();
  }
  
  // implicit constructor
  void Foo::constructor() {
  }
  
  
  // globals.nddl:11 Foo
  DECLARE_DEFAULT_OBJECT_FACTORY(FooFactory1, Foo);
  
  
  // globals.nddl:12 pred1
  Foo::pred1::pred1(const PlanDatabaseId& planDatabase, const LabelStr& name, bool rejectable, bool isFact, bool close)
   : NddlToken(planDatabase, name, rejectable, isFact, false) {
    handleDefaults(close);
  }
  
  Foo::pred1::pred1(const TokenId& parent, const LabelStr& name, const LabelStr& relation, bool close)
   : NddlToken(parent, name, relation, false) {
    handleDefaults(close);
  }
  
  // default initialization of member variables
  void Foo::pred1::handleDefaults(bool autoClose) {
    NddlToken::handleDefaults(false);
    if(global1.isNoId()){
      global1 = addParameter(IntervalIntDomain("int"), "global1");
    }
    if(local1.isNoId()){
      local1 = addParameter(IntervalIntDomain("int"), "local1");
    }
    if (autoClose)
      close();
    
    // Post parameter constraints
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("local1")));
      vars.push_back(var(getId(),std::string("global2")));
      token_constraint(neq, vars);
    }
  }
  
  
  // globals.nddl:22 pred1
  class Foo$pred1$0$0: public RuleInstance {
  public:
    Foo$pred1$0$0(const RuleId& rule, const TokenId& token, const PlanDatabaseId& planDb)
    : RuleInstance(rule, token, planDb){}
    void handleExecute();
  };
  
  class Foo$pred1$0$0$0: public RuleInstance {
  public:
    Foo$pred1$0$0$0(const RuleInstanceId& parent, const ConstrainedVariableId& var, const AbstractDomain& domain, const bool positive)
    : RuleInstance(parent, var, domain, positive){}
    void handleExecute();
  };
  
  class Foo$pred1$0$0$1: public RuleInstance {
  public:
    Foo$pred1$0$0$1(const RuleInstanceId& parent, const ConstrainedVariableId& var, const AbstractDomain& domain, const bool positive)
    : RuleInstance(parent, var, domain, positive){}
    void handleExecute();
  };
  
  DECLARE_AND_DEFINE_RULE(Rule$Foo$pred1$0, Foo$pred1$0$0, Foo.pred1, "globals.nddl,22");
  
  void Foo$pred1$0$0::handleExecute() {
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("global1")));
      vars.push_back(var(getId(),std::string("global2")));
      rule_constraint(eq, vars);
    }
    {
      std::vector<ConstrainedVariableId> vars;
      vars.push_back(var(getId(),std::string("global4")));
      vars.push_back(var(getId(),std::string("object")));
      rule_constraint(eq, vars);
    }
    addChildRule(new Foo$pred1$0$0$0(m_id, var(getId(),std::string("global3")), BoolDomain(true, "bool"), true));
    addChildRule(new Foo$pred1$0$0$1(m_id, var(getId(),std::string("global3")), BoolDomain(false, "bool"), true));
  }
  void Foo$pred1$0$0$0::handleExecute() {
    localSlave(pred1, slave0, "meets");
    sameObject(object, slave0);
    meets(this, slave0);
  }
  void Foo$pred1$0$0$1::handleExecute() {
    localSlave(pred1, slave1, "met_by");
    sameObject(object, slave1);
    met_by(this, slave1);
  }
  
  Color ColorBaseDomain(){
    static Color sl_enum("Color");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("red"));
      sl_enum.insert(LabelStr("green"));
      sl_enum.insert(LabelStr("blue"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
  Random RandomBaseDomain(){
    static Random sl_enum("Random");
    if (sl_enum.isOpen()) {
      // Insert values to initialize
      sl_enum.insert(LabelStr("purple"));
      sl_enum.insert(LabelStr("violet"));
      sl_enum.close();
    }
    return(sl_enum);
  }
  
} // namespace NDDL


namespace NDDL {
  // Boot-strap code to initialize schema
  extern "C" SchemaId loadSchema(){
    Id<Schema> id = Schema::testInstance("globals");
    // Register Constraints
    // Invoke commands to populate schema with type definitions
    id->addObjectType("StringData", "Object");
    id->addObjectType("Foo", "Timeline");
    id->addEnum("TokenStates");
    id->addMember("StringData", "string", "data");
    id->addPredicate("Foo.pred1");
    id->addMember("Foo.pred1", "int", "global1");
    id->addMember("Foo.pred1", "int", "local1");
    id->addEnum("Color");
    id->addEnum("Random");
    id->addValue("TokenStates", LabelStr("INACTIVE"));
    id->addValue("TokenStates", LabelStr("ACTIVE"));
    id->addValue("TokenStates", LabelStr("MERGED"));
    id->addValue("TokenStates", LabelStr("REJECTED"));
    id->addValue("Color", LabelStr("red"));
    id->addValue("Color", LabelStr("green"));
    id->addValue("Color", LabelStr("blue"));
    id->addValue("Random", LabelStr("purple"));
    id->addValue("Random", LabelStr("violet"));
    // Force allocation of model specific type factories
    // Allocate factories
    REGISTER_TOKEN_FACTORY(Foo::pred1::Factory);
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Object, ObjectDomain("Object"));
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),TokenStates, TokenStatesBaseDomain());
    REGISTER_OBJECT_FACTORY(StringDataFactory0, StringData:string);
    REGISTER_OBJECT_FACTORY(FooFactory1, Foo);
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Color, ColorBaseDomain());
    REGISTER_TYPE_FACTORY(id->getTypeFactoryMgr(),Random, RandomBaseDomain());
    // Allocate rules
    new Rule$Foo$pred1$0();
    return id;
  }
  
}
