
float 	 STATE_COND_TRUE = 	 1000.0;
float 	 STATE_COND_FALSE = 	 1000.0;

string 	 AD_VERSION = 	 "20070813.2";

class State_Condition extends Reservoir {
  State_Condition(float initCap) {
    super(initCap, 0.0, +inff, +inff, +inff, +inff, +inff);
  }
}

class This_Subject_is_on_sixth_floor extends State_Condition {
  This_Subject_is_on_sixth_floor(float initCap) {
    super(initCap);
  }
}

class This_Subject_Allowed_To_Eat extends State_Condition {
  This_Subject_Allowed_To_Eat(float initCap) {
    super(initCap);
  }
}

class This_Subject_Allowed_To_Eat_Regular_Food extends State_Condition {
  This_Subject_Allowed_To_Eat_Regular_Food(float initCap) {
    super(initCap);
  }
}

class This_Subject_Allowed_To_Eat_Non_Special_Food extends State_Condition {
  This_Subject_Allowed_To_Eat_Non_Special_Food(float initCap) {
    super(initCap);
  }
}

class This_Subject_Allowed_To_Exercise extends State_Condition {
  This_Subject_Allowed_To_Exercise(float initCap) {
    super(initCap);
  }
}

class This_Subject_Allowed_To_Exercise_Maximally extends State_Condition {
  This_Subject_Allowed_To_Exercise_Maximally(float initCap) {
    super(initCap);
  }
}

class This_Subject_May_Not_Have_Science_Constraint_CPX extends State_Condition {
  This_Subject_May_Not_Have_Science_Constraint_CPX(float initCap) {
    super(initCap);
  }
}

class This_Subject_May_Not_Be_Subjected_To_Sore_Foot extends State_Condition {
  This_Subject_May_Not_Be_Subjected_To_Sore_Foot(float initCap) {
    super(initCap);
  }
}

class This_Subject_is_on_first_floor extends State_Condition {
  This_Subject_is_on_first_floor(float initCap) {
    super(initCap);
  }
}

class This_Subject_May_Not_Have_Science_Constraint_NB extends State_Condition {
  This_Subject_May_Not_Have_Science_Constraint_NB(float initCap) {
    super(initCap);
  }
}

class This_Subject_May_Not_Have_Science_Constraint_vibration extends State_Condition {
  This_Subject_May_Not_Have_Science_Constraint_vibration(float initCap) {
    super(initCap);
  }
}

class First_Floor_can_be_setup_for_Isokinetic extends State_Condition {
  First_Floor_can_be_setup_for_Isokinetic(float initCap) {
    super(initCap);
  }
}

class First_Floor_can_be_setup_for_Neuro extends State_Condition {
  First_Floor_can_be_setup_for_Neuro(float initCap) {
    super(initCap);
  }
}

class First_Floor_can_be_setup_for_Vibe extends State_Condition {
  First_Floor_can_be_setup_for_Vibe(float initCap) {
    super(initCap);
  }
}

class Cardio_can_be_setup_for_Cardio extends State_Condition {
  Cardio_can_be_setup_for_Cardio(float initCap) {
    super(initCap);
  }
}

class Cardio_can_be_setup_for_Vibe extends State_Condition {
  Cardio_can_be_setup_for_Vibe(float initCap) {
    super(initCap);
  }
}

class Unit_Capacity_Resource extends Reservoir {
  Unit_Capacity_Resource() {
    super(1.0, 0.0, 10.0, +inff, +inff, +inff, +inff);
  }
}

class Continuable_Unit_Capacity_Resource extends Unit_Capacity_Resource {
  Continuable_Unit_Capacity_Resource() {
    super();
  }
}

class This_Subject_Availability extends Unit_Capacity_Resource {
  This_Subject_Availability() {
    super();
  }
}

class Level1 extends Unit_Capacity_Resource {
  Level1() {
    super();
  }
}

class Continuable_Equipment_Cardio extends Continuable_Unit_Capacity_Resource {
  Continuable_Equipment_Cardio() {
    super();
  }
}

class Continuable_Room_Cardio extends Continuable_Unit_Capacity_Resource {
  Continuable_Room_Cardio() {
    super();
  }
}

class Operator_Cardio_Team extends Unit_Capacity_Resource {
  Operator_Cardio_Team() {
    super();
  }
}

class Operator_Meck extends Unit_Capacity_Resource {
  Operator_Meck() {
    super();
  }
}

class Operator_Hagan extends Unit_Capacity_Resource {
  Operator_Hagan() {
    super();
  }
}

class Continuable_Equipment_Isokinetic extends Continuable_Unit_Capacity_Resource {
  Continuable_Equipment_Isokinetic() {
    super();
  }
}

class Continuable_Room_First_Floor extends Continuable_Unit_Capacity_Resource {
  Continuable_Room_First_Floor() {
    super();
  }
}

class Operator_Baldwin extends Unit_Capacity_Resource {
  Operator_Baldwin() {
    super();
  }
}

class Operator_LeBlanc extends Unit_Capacity_Resource {
  Operator_LeBlanc() {
    super();
  }
}

class Continuable_Equipment_Neuro extends Continuable_Unit_Capacity_Resource {
  Continuable_Equipment_Neuro() {
    super();
  }
}

class Operator_Taylor extends Unit_Capacity_Resource {
  Operator_Taylor() {
    super();
  }
}

class Operator_Seaton extends Unit_Capacity_Resource {
  Operator_Seaton() {
    super();
  }
}

class Operator_Rubin extends Unit_Capacity_Resource {
  Operator_Rubin() {
    super();
  }
}

class Continuable_Equipment_Vibe extends Continuable_Unit_Capacity_Resource {
  Continuable_Equipment_Vibe() {
    super();
  }
}

class Operator_Therapist extends Unit_Capacity_Resource {
  Operator_Therapist() {
    super();
  }
}

class van extends Unit_Capacity_Resource {
  van() {
    super();
  }
}

class gurneys extends Reservoir {
  gurneys(float maxCap) {
    super(maxCap, 0.0, maxCap, +inff, +inff, +inff, +inff);
  }
}

class kitchen_staff extends Reservoir {
  kitchen_staff(float maxCap) {
    super(maxCap, 0.0, maxCap, +inff, +inff, +inff, +inff);
  }
}

class Active_This_Subject_is_on_sixth_floor extends Timeline {
  Active_This_Subject_is_on_sixth_floor() {}

  predicate Mutex_This_Subject_is_on_sixth_floor {}
}

class Active_This_Subject_Allowed_To_Eat extends Timeline {
  Active_This_Subject_Allowed_To_Eat() {}

  predicate Mutex_This_Subject_Allowed_To_Eat {}
}

class Active_This_Subject_Allowed_To_Eat_Regular_Food extends Timeline {
  Active_This_Subject_Allowed_To_Eat_Regular_Food() {}

  predicate Mutex_This_Subject_Allowed_To_Eat_Regular_Food {}
}

class Active_This_Subject_Allowed_To_Eat_Non_Special_Food extends Timeline {
  Active_This_Subject_Allowed_To_Eat_Non_Special_Food() {}

  predicate Mutex_This_Subject_Allowed_To_Eat_Non_Special_Food {}
}

class Active_This_Subject_Allowed_To_Exercise extends Timeline {
  Active_This_Subject_Allowed_To_Exercise() {}

  predicate Mutex_This_Subject_Allowed_To_Exercise {}
}

class Active_This_Subject_Allowed_To_Exercise_Maximally extends Timeline {
  Active_This_Subject_Allowed_To_Exercise_Maximally() {}

  predicate Mutex_This_Subject_Allowed_To_Exercise_Maximally {}
}

class Active_This_Subject_May_Not_Have_Science_Constraint_CPX extends Timeline {
  Active_This_Subject_May_Not_Have_Science_Constraint_CPX() {}

  predicate Mutex_This_Subject_May_Not_Have_Science_Constraint_CPX {}
}

class Active_This_Subject_May_Not_Be_Subjected_To_Sore_Foot extends Timeline {
  Active_This_Subject_May_Not_Be_Subjected_To_Sore_Foot() {}

  predicate Mutex_This_Subject_May_Not_Be_Subjected_To_Sore_Foot {}
}

class Active_This_Subject_is_on_first_floor extends Timeline {
  Active_This_Subject_is_on_first_floor() {}

  predicate Mutex_This_Subject_is_on_first_floor {}
}

class Active_This_Subject_May_Not_Have_Science_Constraint_NB extends Timeline {
  Active_This_Subject_May_Not_Have_Science_Constraint_NB() {}

  predicate Mutex_This_Subject_May_Not_Have_Science_Constraint_NB {}
}

class Active_This_Subject_May_Not_Have_Science_Constraint_vibration extends Timeline {
  Active_This_Subject_May_Not_Have_Science_Constraint_vibration() {}

  predicate Mutex_This_Subject_May_Not_Have_Science_Constraint_vibration {}
}

class Active_This_Subject_Availability extends Timeline {
  Active_This_Subject_Availability() {}

  predicate Mutex_This_Subject_Availability {}
}

class Active_This_Subject_Tripline extends Timeline {
  Active_This_Subject_Tripline() {}

  predicate Mutex_This_Subject_Stay_on_sixth_floor {}
  predicate Mutex_This_Subject_Trip_to_first_floor {}
}

class Subject extends Object {

  This_Subject_is_on_sixth_floor SC_This_Subject_is_on_sixth_floor;
  This_Subject_Allowed_To_Eat SC_This_Subject_Allowed_To_Eat;
  This_Subject_Allowed_To_Eat_Regular_Food SC_This_Subject_Allowed_To_Eat_Regular_Food;
  This_Subject_Allowed_To_Eat_Non_Special_Food SC_This_Subject_Allowed_To_Eat_Non_Special_Food;
  This_Subject_Allowed_To_Exercise SC_This_Subject_Allowed_To_Exercise;
  This_Subject_Allowed_To_Exercise_Maximally SC_This_Subject_Allowed_To_Exercise_Maximally;
  This_Subject_May_Not_Have_Science_Constraint_CPX SC_This_Subject_May_Not_Have_Science_Constraint_CPX;
  This_Subject_May_Not_Be_Subjected_To_Sore_Foot SC_This_Subject_May_Not_Be_Subjected_To_Sore_Foot;
  This_Subject_is_on_first_floor SC_This_Subject_is_on_first_floor;
  This_Subject_May_Not_Have_Science_Constraint_NB SC_This_Subject_May_Not_Have_Science_Constraint_NB;
  This_Subject_May_Not_Have_Science_Constraint_vibration SC_This_Subject_May_Not_Have_Science_Constraint_vibration;
  This_Subject_Availability UCR_This_Subject_Availability;

  Active_This_Subject_is_on_sixth_floor TL_This_Subject_is_on_sixth_floor;
  Active_This_Subject_Allowed_To_Eat TL_This_Subject_Allowed_To_Eat;
  Active_This_Subject_Allowed_To_Eat_Regular_Food TL_This_Subject_Allowed_To_Eat_Regular_Food;
  Active_This_Subject_Allowed_To_Eat_Non_Special_Food TL_This_Subject_Allowed_To_Eat_Non_Special_Food;
  Active_This_Subject_Allowed_To_Exercise TL_This_Subject_Allowed_To_Exercise;
  Active_This_Subject_Allowed_To_Exercise_Maximally TL_This_Subject_Allowed_To_Exercise_Maximally;
  Active_This_Subject_May_Not_Have_Science_Constraint_CPX TL_This_Subject_May_Not_Have_Science_Constraint_CPX;
  Active_This_Subject_May_Not_Be_Subjected_To_Sore_Foot TL_This_Subject_May_Not_Be_Subjected_To_Sore_Foot;
  Active_This_Subject_is_on_first_floor TL_This_Subject_is_on_first_floor;
  Active_This_Subject_May_Not_Have_Science_Constraint_NB TL_This_Subject_May_Not_Have_Science_Constraint_NB;
  Active_This_Subject_May_Not_Have_Science_Constraint_vibration TL_This_Subject_May_Not_Have_Science_Constraint_vibration;
  Active_This_Subject_Availability TL_This_Subject_Availability;
  Active_This_Subject_Tripline TL_This_Subject_Tripline;


  int index;
  Subject(int _index) {
  index = _index;

    SC_This_Subject_is_on_sixth_floor = new This_Subject_is_on_sixth_floor(1000.0);
    SC_This_Subject_Allowed_To_Eat = new This_Subject_Allowed_To_Eat(1000.0);
    SC_This_Subject_Allowed_To_Eat_Regular_Food = new This_Subject_Allowed_To_Eat_Regular_Food(1000.0);
    SC_This_Subject_Allowed_To_Eat_Non_Special_Food = new This_Subject_Allowed_To_Eat_Non_Special_Food(1000.0);
    SC_This_Subject_Allowed_To_Exercise = new This_Subject_Allowed_To_Exercise(1000.0);
    SC_This_Subject_Allowed_To_Exercise_Maximally = new This_Subject_Allowed_To_Exercise_Maximally(1000.0);
    SC_This_Subject_May_Not_Have_Science_Constraint_CPX = new This_Subject_May_Not_Have_Science_Constraint_CPX(1000.0);
    SC_This_Subject_May_Not_Be_Subjected_To_Sore_Foot = new This_Subject_May_Not_Be_Subjected_To_Sore_Foot(1000.0);
    SC_This_Subject_is_on_first_floor = new This_Subject_is_on_first_floor(0.0);
    SC_This_Subject_May_Not_Have_Science_Constraint_NB = new This_Subject_May_Not_Have_Science_Constraint_NB(1000.0);
    SC_This_Subject_May_Not_Have_Science_Constraint_vibration = new This_Subject_May_Not_Have_Science_Constraint_vibration(1000.0);
    UCR_This_Subject_Availability = new This_Subject_Availability();

    TL_This_Subject_is_on_sixth_floor = new Active_This_Subject_is_on_sixth_floor();
    TL_This_Subject_Allowed_To_Eat = new Active_This_Subject_Allowed_To_Eat();
    TL_This_Subject_Allowed_To_Eat_Regular_Food = new Active_This_Subject_Allowed_To_Eat_Regular_Food();
    TL_This_Subject_Allowed_To_Eat_Non_Special_Food = new Active_This_Subject_Allowed_To_Eat_Non_Special_Food();
    TL_This_Subject_Allowed_To_Exercise = new Active_This_Subject_Allowed_To_Exercise();
    TL_This_Subject_Allowed_To_Exercise_Maximally = new Active_This_Subject_Allowed_To_Exercise_Maximally();
    TL_This_Subject_May_Not_Have_Science_Constraint_CPX = new Active_This_Subject_May_Not_Have_Science_Constraint_CPX();
    TL_This_Subject_May_Not_Be_Subjected_To_Sore_Foot = new Active_This_Subject_May_Not_Be_Subjected_To_Sore_Foot();
    TL_This_Subject_is_on_first_floor = new Active_This_Subject_is_on_first_floor();
    TL_This_Subject_May_Not_Have_Science_Constraint_NB = new Active_This_Subject_May_Not_Have_Science_Constraint_NB();
    TL_This_Subject_May_Not_Have_Science_Constraint_vibration = new Active_This_Subject_May_Not_Have_Science_Constraint_vibration();
    TL_This_Subject_Availability = new Active_This_Subject_Availability();
    TL_This_Subject_Tripline = new Active_This_Subject_Tripline();


  }

  predicate Sleep {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Other {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Response_to_Tilt_CT1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Response_to_Tilt_CT2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Vascular_Function_CV1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Vascular_Function_CV2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Plasma_Volume_CP1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Cardiac_Function_Echo_CE1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate PE_Nitroprusside_CPX1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Dorsal_Foot_Vein_CPX2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Dorsal_Hand_Vein_CPX3 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Leg_Compliance_CPX4 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Cycle_Ergometer_EC1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Functional_Fitness_EF1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Isokinetic_EK1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Isokinetic_EK2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Serum_Preg___Blood_PS1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate DEXA_BD1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate pQCT_BP1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Clinical_Nutritional_Assessment_NN1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Clinical_Laboratory_Assessment_NL1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Sublingual_Scrape_NSS1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Stress_Measures_SM1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Saliva_Sample_SS1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Saliva_Briefing_SB1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Functional_Stretch_Reflex_NS1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Balance_Control_NB1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Balance_Control_NB2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Balance_Control_NB3 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Balance_Control_NB4 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Lactulose_Acetaminophen_Test_PL1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Lactulose_Post_5_PL2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Lactulose_Post_6_PL3 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Pharmacy_Briefing_PB1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate WinSCAT_PW1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Quantitative_Ultrasound_Scan_RPX1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Posture_Study_RPX2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate QCT_Scan_RPX3 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate MRI_Lumbar_RPX4 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Serum_Pregnancy_Test_RPX5 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate DEXA_RPX6 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Vibration_RPX7 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Vibe_Echo_RPX8 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Vibe_EMG_RPX9 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Post_Vibration_FSR_RPX10 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Vest_Fitting_RPX11 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Vitals_V1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Vitals_No_Meds_V2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Physiotherapy_WP1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate AM_Stretching_WS1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate PM_Stretching_WS2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Stretch_FAM_WSF {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Reconditioning_WR1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Away_T1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Come_back_T1R {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Go_to_JSC_T2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Return_from_JSC_T2R {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Hygiene_H1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Admit_Physical_A1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Dimissal_A2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Subject_Briefing_A3 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Head_Down_A4 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Breakfast_B1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Light_Breakfast___Complex_Carbs_B2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Lunch_L1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Light_Lunch___Complex_Carbs_L2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Special_Lact_Light_Lunch___Complex_Carbs_L3 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Special_Lact_Lunch_L4 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Remaining_Meal_RM1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Special_Lact_Remaining_Meal_RM2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Dinner_D1 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

  predicate Special_Lact_Dinner_D2 {
    int          dur;
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;

    eq(duration, dur);
  }

}

class Active_Cardio_can_be_setup_for_Cardio extends Timeline {
  Active_Cardio_can_be_setup_for_Cardio() {}

  predicate Mutex_Cardio_can_be_setup_for_Cardio {}
}

class Active_Continuable_Equipment_Cardio extends Timeline {
  Active_Continuable_Equipment_Cardio() {}

  predicate Mutex_Continuable_Equipment_Cardio {
    int index;
  }
}

class Active_Continuable_Room_Cardio extends Timeline {
  Active_Continuable_Room_Cardio() {}

  predicate Mutex_Continuable_Room_Cardio {
    int index;
  }
}

class Active_Operator_Cardio_Team extends Timeline {
  Active_Operator_Cardio_Team() {}

  predicate Mutex_Operator_Cardio_Team {}
}

class Active_Level1 extends Timeline {
  Active_Level1() {}

  predicate Mutex_Level1 {}
}

class Active_Operator_Meck extends Timeline {
  Active_Operator_Meck() {}

  predicate Mutex_Operator_Meck {}
}

class Active_Operator_Hagan extends Timeline {
  Active_Operator_Hagan() {}

  predicate Mutex_Operator_Hagan {}
}

class Active_First_Floor_can_be_setup_for_Isokinetic extends Timeline {
  Active_First_Floor_can_be_setup_for_Isokinetic() {}

  predicate Mutex_First_Floor_can_be_setup_for_Isokinetic {}
}

class Active_Continuable_Equipment_Isokinetic extends Timeline {
  Active_Continuable_Equipment_Isokinetic() {}

  predicate Mutex_Continuable_Equipment_Isokinetic {
    int index;
  }
}

class Active_Continuable_Room_First_Floor extends Timeline {
  Active_Continuable_Room_First_Floor() {}

  predicate Mutex_Continuable_Room_First_Floor {
    int index;
  }
}

class Active_Operator_Baldwin extends Timeline {
  Active_Operator_Baldwin() {}

  predicate Mutex_Operator_Baldwin {}
}

class Active_First_Floor_can_be_setup_for_Vibe extends Timeline {
  Active_First_Floor_can_be_setup_for_Vibe() {}

  predicate Mutex_First_Floor_can_be_setup_for_Vibe {}
}

class Active_First_Floor_can_be_setup_for_Neuro extends Timeline {
  Active_First_Floor_can_be_setup_for_Neuro() {}

  predicate Mutex_First_Floor_can_be_setup_for_Neuro {}
}

class Active_Operator_LeBlanc extends Timeline {
  Active_Operator_LeBlanc() {}

  predicate Mutex_Operator_LeBlanc {}
}

class Active_Continuable_Equipment_Neuro extends Timeline {
  Active_Continuable_Equipment_Neuro() {}

  predicate Mutex_Continuable_Equipment_Neuro {
    int index;
  }
}

class Active_Operator_Taylor extends Timeline {
  Active_Operator_Taylor() {}

  predicate Mutex_Operator_Taylor {}
}

class Active_Operator_Seaton extends Timeline {
  Active_Operator_Seaton() {}

  predicate Mutex_Operator_Seaton {}
}

class Active_Operator_Rubin extends Timeline {
  Active_Operator_Rubin() {}

  predicate Mutex_Operator_Rubin {}
}

class Active_Continuable_Equipment_Vibe extends Timeline {
  Active_Continuable_Equipment_Vibe() {}

  predicate Mutex_Continuable_Equipment_Vibe {
    int index;
  }
}

class Active_Cardio_can_be_setup_for_Vibe extends Timeline {
  Active_Cardio_can_be_setup_for_Vibe() {}

  predicate Mutex_Cardio_can_be_setup_for_Vibe {}
}

class Active_Operator_Therapist extends Timeline {
  Active_Operator_Therapist() {}

  predicate Mutex_Operator_Therapist {}
}

class Active_gurneys extends Timeline {
  Active_gurneys() {}

  predicate Mutex_gurneys {}
}

class Active_van extends Timeline {
  Active_van() {}

  predicate Mutex_van {}
}

class Active_kitchen_staff extends Timeline {
  Active_kitchen_staff() {}

  predicate Mutex_kitchen_staff {}
}

class ContainerObj extends Object {

  ContainerObj() {}

  predicate CONTAINER {
    int          priority;
    int          reftime;
    bool         enforce;
    bool         scheduled;
    bool         solved;
    float        container_id;
    float        name;
    string       Name;
  }

}

bool      Enable_Passive_Checking;
bool      Enable_Active_Enforcement;
bool      Enforce_This_Subject_is_on_sixth_floor_MX;
bool      Enforce_Continuable_Equipment_Neuro_MX;
bool      Enforce_Operator_Seaton_MX;
bool      Enforce_Continuable_Room_First_Floor_MX;
bool      Enforce_Operator_LeBlanc_MX;
bool      Enforce_Continuable_Equipment_Isokinetic_MX;
bool      Enforce_Continuable_Room_Cardio_MX;
bool      Enforce_Cardio_can_be_setup_for_Vibe_MX;
bool      Enforce_This_Subject_is_on_first_floor_MX;
bool      Enforce_First_Floor_can_be_setup_for_Isokinetic_MX;
bool      Enforce_This_Subject_May_Not_Have_Science_Constraint_CPX_MX;
bool      Enforce_This_Subject_Allowed_To_Exercise_MX;
bool      Enforce_Operator_Rubin_MX;
bool      Enforce_Operator_Baldwin_MX;
bool      Enforce_gurneys_MX;
bool      Enforce_Cardio_can_be_setup_for_Cardio_MX;
bool      Enforce_Continuable_Equipment_Vibe_MX;
bool      Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX;
bool      Enforce_kitchen_staff_MX;
bool      Enforce_This_Subject_Allowed_To_Eat_Non_Special_Food_MX;
bool      Enforce_First_Floor_can_be_setup_for_Vibe_MX;
bool      Enforce_Continuable_Equipment_Cardio_MX;
bool      Enforce_First_Floor_can_be_setup_for_Neuro_MX;
bool      Enforce_Operator_Therapist_MX;
bool      Enforce_This_Subject_Availability_MX;
bool      Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX;
bool      Enforce_Operator_Cardio_Team_MX;
bool      Enforce_van_MX;
bool      Enforce_Operator_Taylor_MX;
bool      Enforce_This_Subject_Allowed_To_Eat_MX;
bool      Enforce_Level1_MX;
bool      Enforce_This_Subject_May_Not_Have_Science_Constraint_vibration_MX;
bool      Enforce_Operator_Hagan_MX;
bool      Enforce_Operator_Meck_MX;
bool      Enforce_This_Subject_May_Not_Be_Subjected_To_Sore_Foot_MX;
bool      Enforce_This_Subject_May_Not_Have_Science_Constraint_NB_MX;
