// Author: Minh Do (minh.do@nasa.gov)

#include "BW_NoArm-model.nddl"

Problem problem = new Problem();
int startHorizon, endHorizon;
startHorizon.specify(0);
endHorizon.specify(100);

// The famous "Sussman Anomaly" problem
Block blockA = new Block("Block A");
Block blockB = new Block("Block B");
Block blockC = new Block("Block C");

// Close the Object Database - no more objects can be created
close();

// Establish the initial block configuration
// [C on A] [B] -> goal: [A on B on C]
fact(blockA.bottom.OnTable initialBlockALocation);
initialBlockALocation.start.specify(startHorizon);
initialBlockALocation.activate();

fact(blockA.top.NotClear initialBlockANotClear);
initialBlockANotClear.start.specify(startHorizon);
initialBlockANotClear.activate();

fact(blockB.bottom.OnTable initialBlockBLocation);
initialBlockBLocation.start.specify(startHorizon);
initialBlockBLocation.activate();

fact(blockB.top.Clear initialBlockBClear);
initialBlockBClear.start.specify(startHorizon);
initialBlockBClear.activate();

fact(blockC.bottom.On initialBlockCLocation);
initialBlockCLocation.start.specify(startHorizon);
initialBlockCLocation.bottomBlock.specify(blockA);
initialBlockCLocation.activate();

fact(blockC.top.Clear initialBlockCClear);
initialBlockCClear.start.specify(startHorizon);
initialBlockCClear.activate();

// Goals
// A problem goal to ensure all subgoals hold concurrently
goal(problem.goalAchieved problemGoal);
problemGoal.start >= startHorizon;
problemGoal.end <= endHorizon;

// SIMPLE GOAL: C OnTable
/*
goal(blockC.bottom.OnTable goalCOnTable);
goalCOnTable.start >= startHorizon;
goalCOnTable meets problemGoal;
*/

// SIMPLE GOAL: [C On B] [A]
goal(blockC.bottom.On goalConB);
eq(goalConB.bottomBlock,blockB);
goalConB.start >= startHorizon;
goalConB meets problemGoal;

// SIMPLE GOAL: [C on B] and [A on C]
/*
goal(blockA.bottom.On goalAonC);
eq(goalAonC.bottomBlock,blockC);
goalAonC.start >= startHorizon;
goalAonC meets problemGoal;
*/

// TODO: GOAL: [A on B on C]

// EOF
