#include "Resources.nddl"
#include "Bedrest-objects.nddl"

Subject::Sleep {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok0);
        eq(tok0.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok1);
        eq(tok1.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok2);
        eq(tok2.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok3);
        eq(tok3.quantity, 1.0);

      }
    }
  }
}

Subject::Sleep {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Other {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok4);
        eq(tok4.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok5);
        eq(tok5.quantity, 1.0);

      }
    }
  }
}

Subject::Other {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Response_to_Tilt_CT1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(Cardio_can_be_setup_for_Cardio.consume tok6);
        eq(tok6.quantity, 1.0);
        ends(Cardio_can_be_setup_for_Cardio.produce tok7);
        eq(tok7.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok8);
        eq(tok8.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok9);
        eq(tok9.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok10);
        eq(tok10.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok11);
        eq(tok11.quantity, 1.0);

        any(Continuable_Equipment_Cardio.consume tok12);
        temporaldistance(tok12.time, 1800, start);
        eq(tok12.quantity, 1.0);
        ends(Continuable_Equipment_Cardio.produce tok13);
        eq(tok13.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok14);
        eq(tok14.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok15);
        eq(tok15.quantity, 1.0);

        starts(Operator_Cardio_Team.consume tok16);
        eq(tok16.quantity, 1.0);
        ends(Operator_Cardio_Team.produce tok17);
        eq(tok17.quantity, 1.0);

      }
    }
  }
}

Subject::Response_to_Tilt_CT1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok18);
        temporaldistance(tok18.time, 1800, start);
        eq(tok18.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok19);
        eq(tok19.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok20);
        temporaldistance(tok20.time, 14400, start);
        eq(tok20.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok21);
        eq(tok21.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok22);
        temporaldistance(tok22.time, 82800, start);
        eq(tok22.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok23);
        eq(tok23.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Response_to_Tilt_CT2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(Cardio_can_be_setup_for_Cardio.consume tok24);
        eq(tok24.quantity, 1.0);
        ends(Cardio_can_be_setup_for_Cardio.produce tok25);
        eq(tok25.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok26);
        eq(tok26.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok27);
        eq(tok27.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok28);
        eq(tok28.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok29);
        eq(tok29.quantity, 1.0);

        starts(Level1.consume tok30);
        eq(tok30.quantity, 1.0);
        ends(Level1.produce tok31);
        eq(tok31.quantity, 1.0);

        any(Continuable_Equipment_Cardio.consume tok32);
        temporaldistance(tok32.time, 1800, start);
        eq(tok32.quantity, 1.0);
        ends(Continuable_Equipment_Cardio.produce tok33);
        eq(tok33.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok34);
        eq(tok34.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok35);
        eq(tok35.quantity, 1.0);

        starts(Operator_Cardio_Team.consume tok36);
        eq(tok36.quantity, 1.0);
        ends(Operator_Cardio_Team.produce tok37);
        eq(tok37.quantity, 1.0);

      }
    }
  }
}

Subject::Response_to_Tilt_CT2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok38);
        temporaldistance(tok38.time, 1800, start);
        eq(tok38.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok39);
        eq(tok39.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok40);
        temporaldistance(tok40.time, 14400, start);
        eq(tok40.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok41);
        eq(tok41.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok42);
        temporaldistance(tok42.time, 82800, start);
        eq(tok42.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok43);
        eq(tok43.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Vascular_Function_CV1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(Cardio_can_be_setup_for_Cardio.consume tok44);
        eq(tok44.quantity, 1.0);
        ends(Cardio_can_be_setup_for_Cardio.produce tok45);
        eq(tok45.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok46);
        eq(tok46.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok47);
        eq(tok47.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok48);
        eq(tok48.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok49);
        eq(tok49.quantity, 1.0);

        any(Continuable_Equipment_Cardio.consume tok50);
        temporaldistance(tok50.time, 1800, start);
        eq(tok50.quantity, 1.0);
        ends(Continuable_Equipment_Cardio.produce tok51);
        eq(tok51.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok52);
        eq(tok52.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok53);
        eq(tok53.quantity, 1.0);

        starts(Operator_Cardio_Team.consume tok54);
        eq(tok54.quantity, 1.0);
        ends(Operator_Cardio_Team.produce tok55);
        eq(tok55.quantity, 1.0);

      }
    }
  }
}

Subject::Vascular_Function_CV1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok56);
        temporaldistance(tok56.time, 1800, start);
        eq(tok56.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok57);
        eq(tok57.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok58);
        temporaldistance(tok58.time, 14400, start);
        eq(tok58.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok59);
        eq(tok59.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok60);
        temporaldistance(tok60.time, 82800, start);
        eq(tok60.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok61);
        eq(tok61.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Vascular_Function_CV2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(Cardio_can_be_setup_for_Cardio.consume tok62);
        eq(tok62.quantity, 1.0);
        ends(Cardio_can_be_setup_for_Cardio.produce tok63);
        eq(tok63.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok64);
        eq(tok64.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok65);
        eq(tok65.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok66);
        eq(tok66.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok67);
        eq(tok67.quantity, 1.0);

        starts(Level1.consume tok68);
        eq(tok68.quantity, 1.0);
        ends(Level1.produce tok69);
        eq(tok69.quantity, 1.0);

        any(Continuable_Equipment_Cardio.consume tok70);
        temporaldistance(tok70.time, 1800, start);
        eq(tok70.quantity, 1.0);
        ends(Continuable_Equipment_Cardio.produce tok71);
        eq(tok71.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok72);
        eq(tok72.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok73);
        eq(tok73.quantity, 1.0);

        starts(Operator_Cardio_Team.consume tok74);
        eq(tok74.quantity, 1.0);
        ends(Operator_Cardio_Team.produce tok75);
        eq(tok75.quantity, 1.0);

      }
    }
  }
}

Subject::Vascular_Function_CV2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok76);
        temporaldistance(tok76.time, 1800, start);
        eq(tok76.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok77);
        eq(tok77.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok78);
        temporaldistance(tok78.time, 14400, start);
        eq(tok78.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok79);
        eq(tok79.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok80);
        temporaldistance(tok80.time, 82800, start);
        eq(tok80.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok81);
        eq(tok81.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Plasma_Volume_CP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(Cardio_can_be_setup_for_Cardio.consume tok82);
        eq(tok82.quantity, 1.0);
        ends(Cardio_can_be_setup_for_Cardio.produce tok83);
        eq(tok83.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok84);
        eq(tok84.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok85);
        eq(tok85.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok86);
        eq(tok86.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok87);
        eq(tok87.quantity, 1.0);

        any(Continuable_Equipment_Cardio.consume tok88);
        temporaldistance(tok88.time, 1800, start);
        eq(tok88.quantity, 1.0);
        ends(Continuable_Equipment_Cardio.produce tok89);
        eq(tok89.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok90);
        eq(tok90.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok91);
        eq(tok91.quantity, 1.0);

        starts(Operator_Cardio_Team.consume tok92);
        eq(tok92.quantity, 1.0);
        ends(Operator_Cardio_Team.produce tok93);
        eq(tok93.quantity, 1.0);

      }
    }
  }
}

Subject::Plasma_Volume_CP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok94);
        temporaldistance(tok94.time, 1800, start);
        eq(tok94.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok95);
        eq(tok95.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok96);
        temporaldistance(tok96.time, 14400, start);
        eq(tok96.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok97);
        eq(tok97.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok98);
        temporaldistance(tok98.time, 82800, start);
        eq(tok98.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok99);
        eq(tok99.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Cardiac_Function_Echo_CE1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(Cardio_can_be_setup_for_Cardio.consume tok100);
        eq(tok100.quantity, 1.0);
        ends(Cardio_can_be_setup_for_Cardio.produce tok101);
        eq(tok101.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok102);
        eq(tok102.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok103);
        eq(tok103.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok104);
        eq(tok104.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok105);
        eq(tok105.quantity, 1.0);

        any(Continuable_Equipment_Cardio.consume tok106);
        temporaldistance(tok106.time, 1800, start);
        eq(tok106.quantity, 1.0);
        ends(Continuable_Equipment_Cardio.produce tok107);
        eq(tok107.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok108);
        eq(tok108.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok109);
        eq(tok109.quantity, 1.0);

        starts(Operator_Cardio_Team.consume tok110);
        eq(tok110.quantity, 1.0);
        ends(Operator_Cardio_Team.produce tok111);
        eq(tok111.quantity, 1.0);

      }
    }
  }
}

Subject::Cardiac_Function_Echo_CE1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok112);
        temporaldistance(tok112.time, 1800, start);
        eq(tok112.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok113);
        eq(tok113.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok114);
        temporaldistance(tok114.time, 14400, start);
        eq(tok114.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok115);
        eq(tok115.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise.consume tok116);
        temporaldistance(tok116.time, 3600, start);
        eq(tok116.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise.produce tok117);
        eq(tok117.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok118);
        temporaldistance(tok118.time, 82800, start);
        eq(tok118.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok119);
        eq(tok119.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::PE_Nitroprusside_CPX1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(Cardio_can_be_setup_for_Cardio.consume tok120);
        eq(tok120.quantity, 1.0);
        ends(Cardio_can_be_setup_for_Cardio.produce tok121);
        eq(tok121.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok122);
        eq(tok122.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok123);
        eq(tok123.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok124);
        eq(tok124.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok125);
        eq(tok125.quantity, 1.0);

        starts(Level1.consume tok126);
        eq(tok126.quantity, 1.0);
        ends(Level1.produce tok127);
        eq(tok127.quantity, 1.0);

        any(Continuable_Equipment_Cardio.consume tok128);
        temporaldistance(tok128.time, 1800, start);
        eq(tok128.quantity, 1.0);
        ends(Continuable_Equipment_Cardio.produce tok129);
        eq(tok129.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok130);
        eq(tok130.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok131);
        eq(tok131.quantity, 1.0);

        starts(Operator_Meck.consume tok132);
        eq(tok132.quantity, 1.0);
        ends(Operator_Meck.produce tok133);
        eq(tok133.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.consume tok134);
        eq(tok134.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.produce tok135);
        eq(tok135.quantity, 1.0);

      }
    }
  }
}

Subject::PE_Nitroprusside_CPX1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok136);
        temporaldistance(tok136.time, 1800, start);
        eq(tok136.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok137);
        eq(tok137.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok138);
        temporaldistance(tok138.time, 14400, start);
        eq(tok138.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok139);
        eq(tok139.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok140);
        temporaldistance(tok140.time, 82800, start);
        eq(tok140.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok141);
        eq(tok141.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.consume tok142);
        eq(tok142.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.produce tok143);
        temporaldistance(end, 28800, tok143.time);
        eq(tok143.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Dorsal_Foot_Vein_CPX2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(Cardio_can_be_setup_for_Cardio.consume tok144);
        eq(tok144.quantity, 1.0);
        ends(Cardio_can_be_setup_for_Cardio.produce tok145);
        eq(tok145.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok146);
        eq(tok146.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok147);
        eq(tok147.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok148);
        eq(tok148.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok149);
        eq(tok149.quantity, 1.0);

        any(Continuable_Equipment_Cardio.consume tok150);
        temporaldistance(tok150.time, 1800, start);
        eq(tok150.quantity, 1.0);
        ends(Continuable_Equipment_Cardio.produce tok151);
        eq(tok151.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok152);
        eq(tok152.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok153);
        eq(tok153.quantity, 1.0);

        starts(Operator_Meck.consume tok154);
        eq(tok154.quantity, 1.0);
        ends(Operator_Meck.produce tok155);
        eq(tok155.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.consume tok156);
        eq(tok156.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.produce tok157);
        eq(tok157.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.consume tok158);
        eq(tok158.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.produce tok159);
        eq(tok159.quantity, 1.0);

      }
    }
  }
}

Subject::Dorsal_Foot_Vein_CPX2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok160);
        temporaldistance(tok160.time, 1800, start);
        eq(tok160.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok161);
        eq(tok161.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok162);
        temporaldistance(tok162.time, 14400, start);
        eq(tok162.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok163);
        eq(tok163.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok164);
        temporaldistance(tok164.time, 82800, start);
        eq(tok164.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok165);
        eq(tok165.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.consume tok166);
        eq(tok166.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.produce tok167);
        temporaldistance(end, 28800, tok167.time);
        eq(tok167.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Dorsal_Hand_Vein_CPX3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(Cardio_can_be_setup_for_Cardio.consume tok168);
        eq(tok168.quantity, 1.0);
        ends(Cardio_can_be_setup_for_Cardio.produce tok169);
        eq(tok169.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok170);
        eq(tok170.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok171);
        eq(tok171.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok172);
        eq(tok172.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok173);
        eq(tok173.quantity, 1.0);

        any(Continuable_Equipment_Cardio.consume tok174);
        temporaldistance(tok174.time, 1800, start);
        eq(tok174.quantity, 1.0);
        ends(Continuable_Equipment_Cardio.produce tok175);
        eq(tok175.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok176);
        eq(tok176.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok177);
        eq(tok177.quantity, 1.0);

        starts(Operator_Meck.consume tok178);
        eq(tok178.quantity, 1.0);
        ends(Operator_Meck.produce tok179);
        eq(tok179.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.consume tok180);
        eq(tok180.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.produce tok181);
        eq(tok181.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.consume tok182);
        eq(tok182.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.produce tok183);
        eq(tok183.quantity, 1.0);

      }
    }
  }
}

Subject::Dorsal_Hand_Vein_CPX3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok184);
        temporaldistance(tok184.time, 1800, start);
        eq(tok184.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok185);
        eq(tok185.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok186);
        temporaldistance(tok186.time, 14400, start);
        eq(tok186.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok187);
        eq(tok187.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok188);
        temporaldistance(tok188.time, 82800, start);
        eq(tok188.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok189);
        eq(tok189.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.consume tok190);
        eq(tok190.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.produce tok191);
        temporaldistance(end, 28800, tok191.time);
        eq(tok191.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Leg_Compliance_CPX4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(Cardio_can_be_setup_for_Cardio.consume tok192);
        eq(tok192.quantity, 1.0);
        ends(Cardio_can_be_setup_for_Cardio.produce tok193);
        eq(tok193.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok194);
        eq(tok194.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok195);
        eq(tok195.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok196);
        eq(tok196.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok197);
        eq(tok197.quantity, 1.0);

        any(Continuable_Equipment_Cardio.consume tok198);
        temporaldistance(tok198.time, 1800, start);
        eq(tok198.quantity, 1.0);
        ends(Continuable_Equipment_Cardio.produce tok199);
        eq(tok199.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok200);
        eq(tok200.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok201);
        eq(tok201.quantity, 1.0);

        starts(Operator_Meck.consume tok202);
        eq(tok202.quantity, 1.0);
        ends(Operator_Meck.produce tok203);
        eq(tok203.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.consume tok204);
        eq(tok204.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.produce tok205);
        eq(tok205.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.consume tok206);
        eq(tok206.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.produce tok207);
        eq(tok207.quantity, 1.0);

      }
    }
  }
}

Subject::Leg_Compliance_CPX4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok208);
        temporaldistance(tok208.time, 1800, start);
        eq(tok208.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok209);
        eq(tok209.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok210);
        temporaldistance(tok210.time, 14400, start);
        eq(tok210.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok211);
        eq(tok211.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok212);
        temporaldistance(tok212.time, 82800, start);
        eq(tok212.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok213);
        eq(tok213.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.consume tok214);
        eq(tok214.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_May_Not_Have_Science_Constraint_CPX.produce tok215);
        temporaldistance(end, 28800, tok215.time);
        eq(tok215.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Cycle_Ergometer_EC1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok216);
        eq(tok216.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok217);
        eq(tok217.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok218);
        eq(tok218.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok219);
        eq(tok219.quantity, 1.0);

        starts(Level1.consume tok220);
        eq(tok220.quantity, 1.0);
        ends(Level1.produce tok221);
        eq(tok221.quantity, 1.0);

        starts(Operator_Hagan.consume tok222);
        eq(tok222.quantity, 1.0);
        ends(Operator_Hagan.produce tok223);
        eq(tok223.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok224);
        eq(tok224.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok225);
        eq(tok225.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Exercise.consume tok226);
        eq(tok226.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Exercise.produce tok227);
        eq(tok227.quantity, 1.0);

      }
    }
  }
}

Subject::Cycle_Ergometer_EC1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok228);
        temporaldistance(tok228.time, 7200, start);
        eq(tok228.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok229);
        eq(tok229.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok230);
        temporaldistance(tok230.time, 7200, start);
        eq(tok230.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok231);
        eq(tok231.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise.consume tok232);
        temporaldistance(tok232.time, 28800, start);
        eq(tok232.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise.produce tok233);
        eq(tok233.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok234);
        temporaldistance(tok234.time, 82800, start);
        eq(tok234.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok235);
        eq(tok235.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Functional_Fitness_EF1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok236);
        eq(tok236.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok237);
        eq(tok237.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok238);
        eq(tok238.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok239);
        eq(tok239.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok240);
        eq(tok240.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok241);
        eq(tok241.quantity, 1.0);

        starts(Operator_Hagan.consume tok242);
        eq(tok242.quantity, 1.0);
        ends(Operator_Hagan.produce tok243);
        eq(tok243.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok244);
        eq(tok244.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok245);
        eq(tok245.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Exercise.consume tok246);
        eq(tok246.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Exercise.produce tok247);
        eq(tok247.quantity, 1.0);

      }
    }
  }
}

Subject::Functional_Fitness_EF1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok248);
        temporaldistance(tok248.time, 5400, start);
        eq(tok248.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok249);
        eq(tok249.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok250);
        temporaldistance(tok250.time, 5400, start);
        eq(tok250.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok251);
        eq(tok251.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok252);
        temporaldistance(tok252.time, 14400, start);
        eq(tok252.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok253);
        eq(tok253.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Isokinetic_EK1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(First_Floor_can_be_setup_for_Isokinetic.consume tok254);
        eq(tok254.quantity, 1.0);
        ends(First_Floor_can_be_setup_for_Isokinetic.produce tok255);
        eq(tok255.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok256);
        eq(tok256.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok257);
        eq(tok257.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_first_floor.consume tok258);
        eq(tok258.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_first_floor.produce tok259);
        eq(tok259.quantity, 1.0);

        any(Continuable_Equipment_Isokinetic.consume tok260);
        temporaldistance(tok260.time, 900, start);
        eq(tok260.quantity, 1.0);
        ends(Continuable_Equipment_Isokinetic.produce tok261);
        eq(tok261.quantity, 1.0);

        starts(Continuable_Room_First_Floor.consume tok262);
        eq(tok262.quantity, 1.0);
        ends(Continuable_Room_First_Floor.produce tok263);
        eq(tok263.quantity, 1.0);

        starts(Operator_Baldwin.consume tok264);
        eq(tok264.quantity, 1.0);
        ends(Operator_Baldwin.produce tok265);
        eq(tok265.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok266);
        eq(tok266.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok267);
        eq(tok267.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Exercise.consume tok268);
        eq(tok268.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Exercise.produce tok269);
        eq(tok269.quantity, 1.0);

      }
    }
  }
}

Subject::Isokinetic_EK1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(First_Floor_can_be_setup_for_Vibe.consume tok270);
        temporaldistance(tok270.time, 2700, start);
        eq(tok270.quantity, STATE_COND_FALSE);
        starts(First_Floor_can_be_setup_for_Vibe.produce tok271);
        eq(tok271.quantity, STATE_COND_TRUE);

        any(First_Floor_can_be_setup_for_Neuro.consume tok272);
        temporaldistance(tok272.time, 2700, start);
        eq(tok272.quantity, STATE_COND_FALSE);
        starts(First_Floor_can_be_setup_for_Neuro.produce tok273);
        eq(tok273.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat.consume tok274);
        temporaldistance(tok274.time, 7200, start);
        eq(tok274.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok275);
        eq(tok275.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok276);
        temporaldistance(tok276.time, 7200, start);
        eq(tok276.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok277);
        eq(tok277.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise.consume tok278);
        temporaldistance(tok278.time, 28800, start);
        eq(tok278.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise.produce tok279);
        eq(tok279.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok280);
        temporaldistance(tok280.time, 82800, start);
        eq(tok280.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok281);
        eq(tok281.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Isokinetic_EK2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(First_Floor_can_be_setup_for_Isokinetic.consume tok282);
        eq(tok282.quantity, 1.0);
        ends(First_Floor_can_be_setup_for_Isokinetic.produce tok283);
        eq(tok283.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok284);
        eq(tok284.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok285);
        eq(tok285.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_first_floor.consume tok286);
        eq(tok286.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_first_floor.produce tok287);
        eq(tok287.quantity, 1.0);

        any(Continuable_Equipment_Isokinetic.consume tok288);
        temporaldistance(tok288.time, 900, start);
        eq(tok288.quantity, 1.0);
        ends(Continuable_Equipment_Isokinetic.produce tok289);
        eq(tok289.quantity, 1.0);

        starts(Continuable_Room_First_Floor.consume tok290);
        eq(tok290.quantity, 1.0);
        ends(Continuable_Room_First_Floor.produce tok291);
        eq(tok291.quantity, 1.0);

        starts(Operator_Baldwin.consume tok292);
        eq(tok292.quantity, 1.0);
        ends(Operator_Baldwin.produce tok293);
        eq(tok293.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok294);
        eq(tok294.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok295);
        eq(tok295.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Exercise.consume tok296);
        eq(tok296.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Exercise.produce tok297);
        eq(tok297.quantity, 1.0);

      }
    }
  }
}

Subject::Isokinetic_EK2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(First_Floor_can_be_setup_for_Vibe.consume tok298);
        temporaldistance(tok298.time, 2700, start);
        eq(tok298.quantity, STATE_COND_FALSE);
        starts(First_Floor_can_be_setup_for_Vibe.produce tok299);
        eq(tok299.quantity, STATE_COND_TRUE);

        any(First_Floor_can_be_setup_for_Neuro.consume tok300);
        temporaldistance(tok300.time, 2700, start);
        eq(tok300.quantity, STATE_COND_FALSE);
        starts(First_Floor_can_be_setup_for_Neuro.produce tok301);
        eq(tok301.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat.consume tok302);
        temporaldistance(tok302.time, 7200, start);
        eq(tok302.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok303);
        eq(tok303.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok304);
        temporaldistance(tok304.time, 7200, start);
        eq(tok304.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok305);
        eq(tok305.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise.consume tok306);
        temporaldistance(tok306.time, 28800, start);
        eq(tok306.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise.produce tok307);
        eq(tok307.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok308);
        temporaldistance(tok308.time, 82800, start);
        eq(tok308.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok309);
        eq(tok309.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Serum_Preg___Blood_PS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok310);
        eq(tok310.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok311);
        eq(tok311.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok312);
        eq(tok312.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok313);
        eq(tok313.quantity, 1.0);

      }
    }
  }
}

Subject::Serum_Preg___Blood_PS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::DEXA_BD1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok314);
        eq(tok314.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok315);
        eq(tok315.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok316);
        eq(tok316.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok317);
        eq(tok317.quantity, 1.0);

        starts(Operator_LeBlanc.consume tok318);
        eq(tok318.quantity, 1.0);
        ends(Operator_LeBlanc.produce tok319);
        eq(tok319.quantity, 1.0);

      }
    }
  }
}

Subject::DEXA_BD1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::pQCT_BP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok320);
        eq(tok320.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok321);
        eq(tok321.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok322);
        eq(tok322.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok323);
        eq(tok323.quantity, 1.0);

        starts(Operator_LeBlanc.consume tok324);
        eq(tok324.quantity, 1.0);
        ends(Operator_LeBlanc.produce tok325);
        eq(tok325.quantity, 1.0);

      }
    }
  }
}

Subject::pQCT_BP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Clinical_Nutritional_Assessment_NN1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok326);
        eq(tok326.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok327);
        eq(tok327.quantity, 1.0);

      }
    }
  }
}

Subject::Clinical_Nutritional_Assessment_NN1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok328);
        temporaldistance(tok328.time, 28800, start);
        eq(tok328.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok329);
        eq(tok329.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok330);
        temporaldistance(tok330.time, 28800, start);
        eq(tok330.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok331);
        eq(tok331.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Clinical_Laboratory_Assessment_NL1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok332);
        eq(tok332.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok333);
        eq(tok333.quantity, 1.0);

      }
    }
  }
}

Subject::Clinical_Laboratory_Assessment_NL1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok334);
        temporaldistance(tok334.time, 28800, start);
        eq(tok334.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok335);
        eq(tok335.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok336);
        temporaldistance(tok336.time, 28800, start);
        eq(tok336.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok337);
        eq(tok337.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Sublingual_Scrape_NSS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok338);
        eq(tok338.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok339);
        eq(tok339.quantity, 1.0);

      }
    }
  }
}

Subject::Sublingual_Scrape_NSS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok340);
        temporaldistance(tok340.time, 28800, start);
        eq(tok340.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok341);
        eq(tok341.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok342);
        temporaldistance(tok342.time, 28800, start);
        eq(tok342.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok343);
        eq(tok343.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Stress_Measures_SM1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok344);
        eq(tok344.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok345);
        eq(tok345.quantity, 1.0);

      }
    }
  }
}

Subject::Stress_Measures_SM1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok346);
        temporaldistance(tok346.time, 28800, start);
        eq(tok346.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok347);
        eq(tok347.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok348);
        temporaldistance(tok348.time, 28800, start);
        eq(tok348.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok349);
        eq(tok349.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Saliva_Sample_SS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok350);
        eq(tok350.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok351);
        eq(tok351.quantity, 1.0);

      }
    }
  }
}

Subject::Saliva_Sample_SS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok352);
        temporaldistance(tok352.time, 28800, start);
        eq(tok352.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok353);
        eq(tok353.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok354);
        temporaldistance(tok354.time, 28800, start);
        eq(tok354.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok355);
        eq(tok355.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Saliva_Briefing_SB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok356);
        eq(tok356.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok357);
        eq(tok357.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok358);
        eq(tok358.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok359);
        eq(tok359.quantity, 1.0);

      }
    }
  }
}

Subject::Saliva_Briefing_SB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Functional_Stretch_Reflex_NS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(First_Floor_can_be_setup_for_Neuro.consume tok360);
        eq(tok360.quantity, 1.0);
        ends(First_Floor_can_be_setup_for_Neuro.produce tok361);
        eq(tok361.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok362);
        eq(tok362.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok363);
        eq(tok363.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_first_floor.consume tok364);
        eq(tok364.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_first_floor.produce tok365);
        eq(tok365.quantity, 1.0);

        any(Continuable_Equipment_Neuro.consume tok366);
        temporaldistance(tok366.time, 900, start);
        eq(tok366.quantity, 1.0);
        ends(Continuable_Equipment_Neuro.produce tok367);
        eq(tok367.quantity, 1.0);

        starts(Continuable_Room_First_Floor.consume tok368);
        eq(tok368.quantity, 1.0);
        ends(Continuable_Room_First_Floor.produce tok369);
        eq(tok369.quantity, 1.0);

        starts(Operator_Taylor.consume tok370);
        eq(tok370.quantity, 1.0);
        ends(Operator_Taylor.produce tok371);
        eq(tok371.quantity, 1.0);

      }
    }
  }
}

Subject::Functional_Stretch_Reflex_NS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(First_Floor_can_be_setup_for_Vibe.consume tok372);
        temporaldistance(tok372.time, 2700, start);
        eq(tok372.quantity, STATE_COND_FALSE);
        starts(First_Floor_can_be_setup_for_Vibe.produce tok373);
        eq(tok373.quantity, STATE_COND_TRUE);

        any(First_Floor_can_be_setup_for_Isokinetic.consume tok374);
        temporaldistance(tok374.time, 2700, start);
        eq(tok374.quantity, STATE_COND_FALSE);
        starts(First_Floor_can_be_setup_for_Isokinetic.produce tok375);
        eq(tok375.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise.consume tok376);
        temporaldistance(tok376.time, 14400, start);
        eq(tok376.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise.produce tok377);
        eq(tok377.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok378);
        temporaldistance(tok378.time, 82800, start);
        eq(tok378.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok379);
        eq(tok379.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Balance_Control_NB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok380);
        eq(tok380.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok381);
        eq(tok381.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok382);
        eq(tok382.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok383);
        eq(tok383.quantity, 1.0);

        any(Continuable_Equipment_Neuro.consume tok384);
        temporaldistance(tok384.time, 900, start);
        eq(tok384.quantity, 1.0);
        ends(Continuable_Equipment_Neuro.produce tok385);
        eq(tok385.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.consume tok386);
        eq(tok386.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.produce tok387);
        eq(tok387.quantity, 1.0);

      }
    }
  }
}

Subject::Balance_Control_NB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok388);
        temporaldistance(tok388.time, 1800, start);
        eq(tok388.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok389);
        eq(tok389.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok390);
        temporaldistance(tok390.time, 1800, start);
        eq(tok390.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok391);
        eq(tok391.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise.consume tok392);
        temporaldistance(tok392.time, 28800, start);
        eq(tok392.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise.produce tok393);
        eq(tok393.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok394);
        temporaldistance(tok394.time, 28800, start);
        eq(tok394.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok395);
        eq(tok395.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.consume tok396);
        eq(tok396.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.produce tok397);
        temporaldistance(end, 28800, tok397.time);
        eq(tok397.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Balance_Control_NB2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok398);
        eq(tok398.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok399);
        eq(tok399.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok400);
        eq(tok400.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok401);
        eq(tok401.quantity, 1.0);

        any(Continuable_Equipment_Neuro.consume tok402);
        temporaldistance(tok402.time, 900, start);
        eq(tok402.quantity, 1.0);
        ends(Continuable_Equipment_Neuro.produce tok403);
        eq(tok403.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.consume tok404);
        eq(tok404.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.produce tok405);
        eq(tok405.quantity, 1.0);

      }
    }
  }
}

Subject::Balance_Control_NB2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok406);
        temporaldistance(tok406.time, 1800, start);
        eq(tok406.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok407);
        eq(tok407.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok408);
        temporaldistance(tok408.time, 1800, start);
        eq(tok408.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok409);
        eq(tok409.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise.consume tok410);
        temporaldistance(tok410.time, 28800, start);
        eq(tok410.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise.produce tok411);
        eq(tok411.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok412);
        temporaldistance(tok412.time, 28800, start);
        eq(tok412.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok413);
        eq(tok413.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.consume tok414);
        eq(tok414.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.produce tok415);
        temporaldistance(end, 28800, tok415.time);
        eq(tok415.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Balance_Control_NB3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok416);
        eq(tok416.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok417);
        eq(tok417.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok418);
        eq(tok418.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok419);
        eq(tok419.quantity, 1.0);

        any(Continuable_Equipment_Neuro.consume tok420);
        temporaldistance(tok420.time, 900, start);
        eq(tok420.quantity, 1.0);
        ends(Continuable_Equipment_Neuro.produce tok421);
        eq(tok421.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.consume tok422);
        eq(tok422.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.produce tok423);
        eq(tok423.quantity, 1.0);

      }
    }
  }
}

Subject::Balance_Control_NB3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok424);
        temporaldistance(tok424.time, 1800, start);
        eq(tok424.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok425);
        eq(tok425.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok426);
        temporaldistance(tok426.time, 1800, start);
        eq(tok426.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok427);
        eq(tok427.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise.consume tok428);
        temporaldistance(tok428.time, 28800, start);
        eq(tok428.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise.produce tok429);
        eq(tok429.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok430);
        temporaldistance(tok430.time, 28800, start);
        eq(tok430.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok431);
        eq(tok431.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.consume tok432);
        eq(tok432.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.produce tok433);
        temporaldistance(end, 28800, tok433.time);
        eq(tok433.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Balance_Control_NB4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok434);
        eq(tok434.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok435);
        eq(tok435.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok436);
        eq(tok436.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok437);
        eq(tok437.quantity, 1.0);

        starts(Level1.consume tok438);
        eq(tok438.quantity, 1.0);
        ends(Level1.produce tok439);
        eq(tok439.quantity, 1.0);

        any(Continuable_Equipment_Neuro.consume tok440);
        temporaldistance(tok440.time, 900, start);
        eq(tok440.quantity, 1.0);
        ends(Continuable_Equipment_Neuro.produce tok441);
        eq(tok441.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.consume tok442);
        eq(tok442.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.produce tok443);
        eq(tok443.quantity, 1.0);

      }
    }
  }
}

Subject::Balance_Control_NB4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok444);
        temporaldistance(tok444.time, 1800, start);
        eq(tok444.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok445);
        eq(tok445.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok446);
        temporaldistance(tok446.time, 1800, start);
        eq(tok446.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok447);
        eq(tok447.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.consume tok448);
        eq(tok448.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_May_Not_Have_Science_Constraint_NB.produce tok449);
        temporaldistance(end, 28800, tok449.time);
        eq(tok449.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Lactulose_Acetaminophen_Test_PL1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok450);
        eq(tok450.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok451);
        eq(tok451.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok452);
        eq(tok452.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok453);
        eq(tok453.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.consume tok454);
        eq(tok454.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.produce tok455);
        eq(tok455.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat.consume tok456);
        eq(tok456.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat.produce tok457);
        eq(tok457.quantity, 1.0);

      }
    }
  }
}

Subject::Lactulose_Acetaminophen_Test_PL1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok458);
        temporaldistance(tok458.time, 28800, start);
        eq(tok458.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok459);
        eq(tok459.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok460);
        temporaldistance(tok460.time, 72000, start);
        eq(tok460.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok461);
        eq(tok461.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Lactulose_Post_5_PL2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok462);
        eq(tok462.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok463);
        eq(tok463.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok464);
        eq(tok464.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok465);
        eq(tok465.quantity, 1.0);

      }
    }
  }
}

Subject::Lactulose_Post_5_PL2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok466);
        temporaldistance(tok466.time, 28800, start);
        eq(tok466.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok467);
        eq(tok467.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok468);
        temporaldistance(tok468.time, 72000, start);
        eq(tok468.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok469);
        eq(tok469.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Lactulose_Post_6_PL3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok470);
        eq(tok470.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok471);
        eq(tok471.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok472);
        eq(tok472.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok473);
        eq(tok473.quantity, 1.0);

      }
    }
  }
}

Subject::Lactulose_Post_6_PL3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok474);
        temporaldistance(tok474.time, 28800, start);
        eq(tok474.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok475);
        eq(tok475.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok476);
        temporaldistance(tok476.time, 72000, start);
        eq(tok476.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok477);
        eq(tok477.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Pharmacy_Briefing_PB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok478);
        eq(tok478.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok479);
        eq(tok479.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok480);
        eq(tok480.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok481);
        eq(tok481.quantity, 1.0);

      }
    }
  }
}

Subject::Pharmacy_Briefing_PB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::WinSCAT_PW1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok482);
        eq(tok482.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok483);
        eq(tok483.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok484);
        eq(tok484.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok485);
        eq(tok485.quantity, 1.0);

        starts(Operator_Seaton.consume tok486);
        eq(tok486.quantity, 1.0);
        ends(Operator_Seaton.produce tok487);
        eq(tok487.quantity, 1.0);

      }
    }
  }
}

Subject::WinSCAT_PW1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok488);
        temporaldistance(tok488.time, 1800, start);
        eq(tok488.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok489);
        eq(tok489.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok490);
        temporaldistance(tok490.time, 1800, start);
        eq(tok490.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok491);
        eq(tok491.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Quantitative_Ultrasound_Scan_RPX1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok492);
        eq(tok492.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok493);
        eq(tok493.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok494);
        eq(tok494.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok495);
        eq(tok495.quantity, 1.0);

        starts(Operator_Rubin.consume tok496);
        eq(tok496.quantity, 1.0);
        ends(Operator_Rubin.produce tok497);
        eq(tok497.quantity, 1.0);

      }
    }
  }
}

Subject::Quantitative_Ultrasound_Scan_RPX1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Posture_Study_RPX2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok498);
        eq(tok498.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok499);
        eq(tok499.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok500);
        eq(tok500.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok501);
        eq(tok501.quantity, 1.0);

        starts(Operator_Rubin.consume tok502);
        eq(tok502.quantity, 1.0);
        ends(Operator_Rubin.produce tok503);
        eq(tok503.quantity, 1.0);

      }
    }
  }
}

Subject::Posture_Study_RPX2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::QCT_Scan_RPX3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok504);
        eq(tok504.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok505);
        eq(tok505.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_first_floor.consume tok506);
        eq(tok506.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_first_floor.produce tok507);
        eq(tok507.quantity, 1.0);

        starts(Operator_Rubin.consume tok508);
        eq(tok508.quantity, 1.0);
        ends(Operator_Rubin.produce tok509);
        eq(tok509.quantity, 1.0);

      }
    }
  }
}

Subject::QCT_Scan_RPX3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::MRI_Lumbar_RPX4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok510);
        eq(tok510.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok511);
        eq(tok511.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_first_floor.consume tok512);
        eq(tok512.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_first_floor.produce tok513);
        eq(tok513.quantity, 1.0);

        starts(Operator_Rubin.consume tok514);
        eq(tok514.quantity, 1.0);
        ends(Operator_Rubin.produce tok515);
        eq(tok515.quantity, 1.0);

      }
    }
  }
}

Subject::MRI_Lumbar_RPX4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Serum_Pregnancy_Test_RPX5 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok516);
        eq(tok516.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok517);
        eq(tok517.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok518);
        eq(tok518.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok519);
        eq(tok519.quantity, 1.0);

        starts(Operator_Rubin.consume tok520);
        eq(tok520.quantity, 1.0);
        ends(Operator_Rubin.produce tok521);
        eq(tok521.quantity, 1.0);

      }
    }
  }
}

Subject::Serum_Pregnancy_Test_RPX5 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::DEXA_RPX6 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok522);
        eq(tok522.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok523);
        eq(tok523.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok524);
        eq(tok524.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok525);
        eq(tok525.quantity, 1.0);

        starts(Operator_Rubin.consume tok526);
        eq(tok526.quantity, 1.0);
        ends(Operator_Rubin.produce tok527);
        eq(tok527.quantity, 1.0);

      }
    }
  }
}

Subject::DEXA_RPX6 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Vibration_RPX7 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok528);
        eq(tok528.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok529);
        eq(tok529.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok530);
        eq(tok530.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok531);
        eq(tok531.quantity, 1.0);

        starts(Continuable_Equipment_Vibe.consume tok532);
        eq(tok532.quantity, 1.0);
        ends(Continuable_Equipment_Vibe.produce tok533);
        eq(tok533.quantity, 1.0);

        starts(Operator_Rubin.consume tok534);
        eq(tok534.quantity, 1.0);
        ends(Operator_Rubin.produce tok535);
        eq(tok535.quantity, 1.0);

      }
    }
  }
}

Subject::Vibration_RPX7 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok536);
        temporaldistance(tok536.time, 1800, start);
        eq(tok536.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok537);
        eq(tok537.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok538);
        temporaldistance(tok538.time, 1800, start);
        eq(tok538.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok539);
        eq(tok539.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Vibe_Echo_RPX8 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(Cardio_can_be_setup_for_Vibe.consume tok540);
        eq(tok540.quantity, 1.0);
        ends(Cardio_can_be_setup_for_Vibe.produce tok541);
        eq(tok541.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok542);
        eq(tok542.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok543);
        eq(tok543.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok544);
        eq(tok544.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok545);
        eq(tok545.quantity, 1.0);

        starts(Continuable_Equipment_Vibe.consume tok546);
        eq(tok546.quantity, 1.0);
        ends(Continuable_Equipment_Vibe.produce tok547);
        eq(tok547.quantity, 1.0);

        starts(Continuable_Room_Cardio.consume tok548);
        eq(tok548.quantity, 1.0);
        ends(Continuable_Room_Cardio.produce tok549);
        eq(tok549.quantity, 1.0);

        starts(Operator_Rubin.consume tok550);
        eq(tok550.quantity, 1.0);
        ends(Operator_Rubin.produce tok551);
        eq(tok551.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.consume tok552);
        eq(tok552.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.produce tok553);
        eq(tok553.quantity, 1.0);

      }
    }
  }
}

Subject::Vibe_Echo_RPX8 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(Cardio_can_be_setup_for_Cardio.consume tok554);
        temporaldistance(tok554.time, 1800, start);
        eq(tok554.quantity, STATE_COND_FALSE);
        starts(Cardio_can_be_setup_for_Cardio.produce tok555);
        eq(tok555.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat.consume tok556);
        temporaldistance(tok556.time, 1800, start);
        eq(tok556.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok557);
        eq(tok557.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok558);
        temporaldistance(tok558.time, 14400, start);
        eq(tok558.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok559);
        eq(tok559.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise.consume tok560);
        temporaldistance(tok560.time, 3600, start);
        eq(tok560.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise.produce tok561);
        eq(tok561.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok562);
        temporaldistance(tok562.time, 82800, start);
        eq(tok562.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok563);
        eq(tok563.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.consume tok564);
        eq(tok564.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.produce tok565);
        temporaldistance(end, 28800, tok565.time);
        eq(tok565.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Vibe_EMG_RPX9 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok566);
        eq(tok566.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok567);
        eq(tok567.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_first_floor.consume tok568);
        eq(tok568.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_first_floor.produce tok569);
        eq(tok569.quantity, 1.0);

        starts(Continuable_Equipment_Vibe.consume tok570);
        eq(tok570.quantity, 1.0);
        ends(Continuable_Equipment_Vibe.produce tok571);
        eq(tok571.quantity, 1.0);

        starts(Operator_Rubin.consume tok572);
        eq(tok572.quantity, 1.0);
        ends(Operator_Rubin.produce tok573);
        eq(tok573.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.consume tok574);
        eq(tok574.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.produce tok575);
        eq(tok575.quantity, 1.0);

      }
    }
  }
}

Subject::Vibe_EMG_RPX9 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok576);
        temporaldistance(tok576.time, 1800, start);
        eq(tok576.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok577);
        eq(tok577.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok578);
        temporaldistance(tok578.time, 1800, start);
        eq(tok578.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok579);
        eq(tok579.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.consume tok580);
        eq(tok580.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.produce tok581);
        temporaldistance(end, 28800, tok581.time);
        eq(tok581.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Post_Vibration_FSR_RPX10 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(First_Floor_can_be_setup_for_Vibe.consume tok582);
        eq(tok582.quantity, 1.0);
        ends(First_Floor_can_be_setup_for_Vibe.produce tok583);
        eq(tok583.quantity, 1.0);

        starts(object.UCR_This_Subject_Availability.consume tok584);
        eq(tok584.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok585);
        eq(tok585.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_first_floor.consume tok586);
        eq(tok586.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_first_floor.produce tok587);
        eq(tok587.quantity, 1.0);

        starts(Continuable_Equipment_Vibe.consume tok588);
        eq(tok588.quantity, 1.0);
        ends(Continuable_Equipment_Vibe.produce tok589);
        eq(tok589.quantity, 1.0);

        starts(Continuable_Room_First_Floor.consume tok590);
        eq(tok590.quantity, 1.0);
        ends(Continuable_Room_First_Floor.produce tok591);
        eq(tok591.quantity, 1.0);

        starts(Operator_Rubin.consume tok592);
        eq(tok592.quantity, 1.0);
        ends(Operator_Rubin.produce tok593);
        eq(tok593.quantity, 1.0);

        starts(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.consume tok594);
        eq(tok594.quantity, 1.0);
        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.produce tok595);
        eq(tok595.quantity, 1.0);

      }
    }
  }
}

Subject::Post_Vibration_FSR_RPX10 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(First_Floor_can_be_setup_for_Neuro.consume tok596);
        temporaldistance(tok596.time, 900, start);
        eq(tok596.quantity, STATE_COND_FALSE);
        starts(First_Floor_can_be_setup_for_Neuro.produce tok597);
        eq(tok597.quantity, STATE_COND_TRUE);

        any(First_Floor_can_be_setup_for_Isokinetic.consume tok598);
        temporaldistance(tok598.time, 900, start);
        eq(tok598.quantity, STATE_COND_FALSE);
        starts(First_Floor_can_be_setup_for_Isokinetic.produce tok599);
        eq(tok599.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat.consume tok600);
        temporaldistance(tok600.time, 1800, start);
        eq(tok600.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok601);
        eq(tok601.quantity, STATE_COND_TRUE);

        any(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok602);
        temporaldistance(tok602.time, 1800, start);
        eq(tok602.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok603);
        eq(tok603.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.consume tok604);
        eq(tok604.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_May_Not_Have_Science_Constraint_vibration.produce tok605);
        temporaldistance(end, 28800, tok605.time);
        eq(tok605.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Vest_Fitting_RPX11 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok606);
        eq(tok606.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok607);
        eq(tok607.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok608);
        eq(tok608.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok609);
        eq(tok609.quantity, 1.0);

        starts(Operator_Rubin.consume tok610);
        eq(tok610.quantity, 1.0);
        ends(Operator_Rubin.produce tok611);
        eq(tok611.quantity, 1.0);

      }
    }
  }
}

Subject::Vest_Fitting_RPX11 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Vitals_V1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok612);
        eq(tok612.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok613);
        eq(tok613.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok614);
        eq(tok614.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok615);
        eq(tok615.quantity, 1.0);

      }
    }
  }
}

Subject::Vitals_V1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Vitals_No_Meds_V2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok616);
        eq(tok616.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok617);
        eq(tok617.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok618);
        eq(tok618.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok619);
        eq(tok619.quantity, 1.0);

      }
    }
  }
}

Subject::Vitals_No_Meds_V2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Physiotherapy_WP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok620);
        eq(tok620.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok621);
        eq(tok621.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok622);
        eq(tok622.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok623);
        eq(tok623.quantity, 1.0);

        starts(Operator_Therapist.consume tok624);
        eq(tok624.quantity, 1.0);
        ends(Operator_Therapist.produce tok625);
        eq(tok625.quantity, 1.0);

      }
    }
  }
}

Subject::Physiotherapy_WP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::AM_Stretching_WS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok626);
        eq(tok626.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok627);
        eq(tok627.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok628);
        eq(tok628.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok629);
        eq(tok629.quantity, 1.0);

      }
    }
  }
}

Subject::AM_Stretching_WS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::PM_Stretching_WS2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok630);
        eq(tok630.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok631);
        eq(tok631.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok632);
        eq(tok632.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok633);
        eq(tok633.quantity, 1.0);

      }
    }
  }
}

Subject::PM_Stretching_WS2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Stretch_FAM_WSF {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok634);
        eq(tok634.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok635);
        eq(tok635.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok636);
        eq(tok636.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok637);
        eq(tok637.quantity, 1.0);

      }
    }
  }
}

Subject::Stretch_FAM_WSF {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Reconditioning_WR1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok638);
        eq(tok638.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok639);
        eq(tok639.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok640);
        eq(tok640.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok641);
        eq(tok641.quantity, 1.0);

      }
    }
  }
}

Subject::Reconditioning_WR1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.consume tok642);
        temporaldistance(tok642.time, 28800, start);
        eq(tok642.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.produce tok643);
        eq(tok643.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Away_T1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok644);
        eq(tok644.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok645);
        eq(tok645.quantity, 1.0);

        starts(gurneys.consume tok646);
        eq(tok646.quantity, 1.0);
        ends(gurneys.produce tok647);
        eq(tok647.quantity, 1.0);

      }
    }
  }
}

Subject::Away_T1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        ends(object.SC_This_Subject_is_on_sixth_floor.consume tok648);
        eq(tok648.quantity, STATE_COND_FALSE);
        ends(object.SC_This_Subject_is_on_first_floor.produce tok649);
        eq(tok649.quantity, STATE_COND_TRUE);
      }
    }
  }
}

Subject::Come_back_T1R {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok650);
        eq(tok650.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok651);
        eq(tok651.quantity, 1.0);

        starts(gurneys.consume tok652);
        eq(tok652.quantity, 1.0);
        ends(gurneys.produce tok653);
        eq(tok653.quantity, 1.0);

      }
    }
  }
}

Subject::Come_back_T1R {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        ends(object.SC_This_Subject_is_on_first_floor.consume tok654);
        eq(tok654.quantity, STATE_COND_FALSE);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok655);
        eq(tok655.quantity, STATE_COND_TRUE);
      }
    }
  }
}

Subject::Go_to_JSC_T2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok656);
        eq(tok656.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok657);
        eq(tok657.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok658);
        eq(tok658.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok659);
        eq(tok659.quantity, 1.0);

        starts(van.consume tok660);
        eq(tok660.quantity, 1.0);
        ends(van.produce tok661);
        eq(tok661.quantity, 1.0);

      }
    }
  }
}

Subject::Go_to_JSC_T2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Return_from_JSC_T2R {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok662);
        eq(tok662.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok663);
        eq(tok663.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok664);
        eq(tok664.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok665);
        eq(tok665.quantity, 1.0);

        starts(van.consume tok666);
        eq(tok666.quantity, 1.0);
        ends(van.produce tok667);
        eq(tok667.quantity, 1.0);

      }
    }
  }
}

Subject::Return_from_JSC_T2R {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Hygiene_H1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok668);
        eq(tok668.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok669);
        eq(tok669.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok670);
        eq(tok670.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok671);
        eq(tok671.quantity, 1.0);

      }
    }
  }
}

Subject::Hygiene_H1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Admit_Physical_A1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok672);
        eq(tok672.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok673);
        eq(tok673.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok674);
        eq(tok674.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok675);
        eq(tok675.quantity, 1.0);

      }
    }
  }
}

Subject::Admit_Physical_A1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Dimissal_A2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok676);
        eq(tok676.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok677);
        eq(tok677.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok678);
        eq(tok678.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok679);
        eq(tok679.quantity, 1.0);

      }
    }
  }
}

Subject::Dimissal_A2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Subject_Briefing_A3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok680);
        eq(tok680.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok681);
        eq(tok681.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok682);
        eq(tok682.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok683);
        eq(tok683.quantity, 1.0);

      }
    }
  }
}

Subject::Subject_Briefing_A3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Head_Down_A4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok684);
        eq(tok684.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok685);
        eq(tok685.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok686);
        eq(tok686.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok687);
        eq(tok687.quantity, 1.0);

      }
    }
  }
}

Subject::Head_Down_A4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
      }
    }
  }
}

Subject::Breakfast_B1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok688);
        eq(tok688.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok689);
        eq(tok689.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok690);
        eq(tok690.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok691);
        eq(tok691.quantity, 1.0);

        any(kitchen_staff.consume tok692);
        temporaldistance(tok692.time, 900, start);
        eq(tok692.quantity, 1.0);
        starts(kitchen_staff.produce tok693);
        eq(tok693.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok694);
        eq(tok694.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok695);
        eq(tok695.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.consume tok696);
        eq(tok696.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.produce tok697);
        eq(tok697.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat.consume tok698);
        eq(tok698.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat.produce tok699);
        eq(tok699.quantity, 1.0);

      }
    }
  }
}

Subject::Breakfast_B1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        ends(object.SC_This_Subject_Allowed_To_Exercise.consume tok700);
        eq(tok700.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise.produce tok701);
        temporaldistance(end, 1800, tok701.time);
        eq(tok701.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok702);
        eq(tok702.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok703);
        temporaldistance(end, 1800, tok703.time);
        eq(tok703.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Light_Breakfast___Complex_Carbs_B2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok704);
        eq(tok704.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok705);
        eq(tok705.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok706);
        eq(tok706.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok707);
        eq(tok707.quantity, 1.0);

        any(kitchen_staff.consume tok708);
        temporaldistance(tok708.time, 900, start);
        eq(tok708.quantity, 1.0);
        starts(kitchen_staff.produce tok709);
        eq(tok709.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.consume tok710);
        eq(tok710.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.produce tok711);
        eq(tok711.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat.consume tok712);
        eq(tok712.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat.produce tok713);
        eq(tok713.quantity, 1.0);

      }
    }
  }
}

Subject::Light_Breakfast___Complex_Carbs_B2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        ends(object.SC_This_Subject_Allowed_To_Exercise.consume tok714);
        eq(tok714.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise.produce tok715);
        temporaldistance(end, 1800, tok715.time);
        eq(tok715.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok716);
        eq(tok716.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok717);
        temporaldistance(end, 1800, tok717.time);
        eq(tok717.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Lunch_L1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok718);
        eq(tok718.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok719);
        eq(tok719.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok720);
        eq(tok720.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok721);
        eq(tok721.quantity, 1.0);

        any(kitchen_staff.consume tok722);
        temporaldistance(tok722.time, 900, start);
        eq(tok722.quantity, 1.0);
        starts(kitchen_staff.produce tok723);
        eq(tok723.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok724);
        eq(tok724.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok725);
        eq(tok725.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.consume tok726);
        eq(tok726.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.produce tok727);
        eq(tok727.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat.consume tok728);
        eq(tok728.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat.produce tok729);
        eq(tok729.quantity, 1.0);

      }
    }
  }
}

Subject::Lunch_L1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        ends(object.SC_This_Subject_Allowed_To_Exercise.consume tok730);
        eq(tok730.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise.produce tok731);
        temporaldistance(end, 1800, tok731.time);
        eq(tok731.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok732);
        eq(tok732.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok733);
        temporaldistance(end, 1800, tok733.time);
        eq(tok733.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Light_Lunch___Complex_Carbs_L2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok734);
        eq(tok734.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok735);
        eq(tok735.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok736);
        eq(tok736.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok737);
        eq(tok737.quantity, 1.0);

        any(kitchen_staff.consume tok738);
        temporaldistance(tok738.time, 900, start);
        eq(tok738.quantity, 1.0);
        starts(kitchen_staff.produce tok739);
        eq(tok739.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.consume tok740);
        eq(tok740.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.produce tok741);
        eq(tok741.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat.consume tok742);
        eq(tok742.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat.produce tok743);
        eq(tok743.quantity, 1.0);

      }
    }
  }
}

Subject::Light_Lunch___Complex_Carbs_L2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        ends(object.SC_This_Subject_Allowed_To_Exercise.consume tok744);
        eq(tok744.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise.produce tok745);
        temporaldistance(end, 1800, tok745.time);
        eq(tok745.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok746);
        eq(tok746.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok747);
        temporaldistance(end, 1800, tok747.time);
        eq(tok747.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Special_Lact_Light_Lunch___Complex_Carbs_L3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok748);
        eq(tok748.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok749);
        eq(tok749.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok750);
        eq(tok750.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok751);
        eq(tok751.quantity, 1.0);

        any(kitchen_staff.consume tok752);
        temporaldistance(tok752.time, 900, start);
        eq(tok752.quantity, 1.0);
        starts(kitchen_staff.produce tok753);
        eq(tok753.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat.consume tok754);
        eq(tok754.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat.produce tok755);
        eq(tok755.quantity, 1.0);

      }
    }
  }
}

Subject::Special_Lact_Light_Lunch___Complex_Carbs_L3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        ends(object.SC_This_Subject_Allowed_To_Exercise.consume tok756);
        eq(tok756.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise.produce tok757);
        temporaldistance(end, 1800, tok757.time);
        eq(tok757.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok758);
        eq(tok758.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok759);
        temporaldistance(end, 1800, tok759.time);
        eq(tok759.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Special_Lact_Lunch_L4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok760);
        eq(tok760.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok761);
        eq(tok761.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok762);
        eq(tok762.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok763);
        eq(tok763.quantity, 1.0);

        any(kitchen_staff.consume tok764);
        temporaldistance(tok764.time, 900, start);
        eq(tok764.quantity, 1.0);
        starts(kitchen_staff.produce tok765);
        eq(tok765.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok766);
        eq(tok766.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok767);
        eq(tok767.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat.consume tok768);
        eq(tok768.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat.produce tok769);
        eq(tok769.quantity, 1.0);

      }
    }
  }
}

Subject::Special_Lact_Lunch_L4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        ends(object.SC_This_Subject_Allowed_To_Exercise.consume tok770);
        eq(tok770.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise.produce tok771);
        temporaldistance(end, 1800, tok771.time);
        eq(tok771.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok772);
        eq(tok772.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok773);
        temporaldistance(end, 1800, tok773.time);
        eq(tok773.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Remaining_Meal_RM1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok774);
        eq(tok774.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok775);
        eq(tok775.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok776);
        eq(tok776.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok777);
        eq(tok777.quantity, 1.0);

        any(kitchen_staff.consume tok778);
        temporaldistance(tok778.time, 900, start);
        eq(tok778.quantity, 1.0);
        starts(kitchen_staff.produce tok779);
        eq(tok779.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.consume tok780);
        eq(tok780.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.produce tok781);
        eq(tok781.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat.consume tok782);
        eq(tok782.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat.produce tok783);
        eq(tok783.quantity, 1.0);

      }
    }
  }
}

Subject::Remaining_Meal_RM1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok784);
        temporaldistance(tok784.time, 1800, start);
        eq(tok784.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok785);
        eq(tok785.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Eat.consume tok786);
        eq(tok786.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Eat.produce tok787);
        temporaldistance(end, 3600, tok787.time);
        eq(tok787.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise.consume tok788);
        eq(tok788.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise.produce tok789);
        temporaldistance(end, 1800, tok789.time);
        eq(tok789.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok790);
        eq(tok790.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok791);
        temporaldistance(end, 1800, tok791.time);
        eq(tok791.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Special_Lact_Remaining_Meal_RM2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok792);
        eq(tok792.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok793);
        eq(tok793.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok794);
        eq(tok794.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok795);
        eq(tok795.quantity, 1.0);

        any(kitchen_staff.consume tok796);
        temporaldistance(tok796.time, 900, start);
        eq(tok796.quantity, 1.0);
        starts(kitchen_staff.produce tok797);
        eq(tok797.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat.consume tok798);
        eq(tok798.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat.produce tok799);
        eq(tok799.quantity, 1.0);

      }
    }
  }
}

Subject::Special_Lact_Remaining_Meal_RM2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        any(object.SC_This_Subject_Allowed_To_Eat.consume tok800);
        temporaldistance(tok800.time, 1800, start);
        eq(tok800.quantity, STATE_COND_FALSE);
        starts(object.SC_This_Subject_Allowed_To_Eat.produce tok801);
        eq(tok801.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Eat.consume tok802);
        eq(tok802.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Eat.produce tok803);
        temporaldistance(end, 3600, tok803.time);
        eq(tok803.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise.consume tok804);
        eq(tok804.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise.produce tok805);
        temporaldistance(end, 1800, tok805.time);
        eq(tok805.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok806);
        eq(tok806.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok807);
        temporaldistance(end, 1800, tok807.time);
        eq(tok807.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Dinner_D1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok808);
        eq(tok808.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok809);
        eq(tok809.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok810);
        eq(tok810.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok811);
        eq(tok811.quantity, 1.0);

        any(kitchen_staff.consume tok812);
        temporaldistance(tok812.time, 900, start);
        eq(tok812.quantity, 1.0);
        starts(kitchen_staff.produce tok813);
        eq(tok813.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok814);
        eq(tok814.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok815);
        eq(tok815.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.consume tok816);
        eq(tok816.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Non_Special_Food.produce tok817);
        eq(tok817.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat.consume tok818);
        eq(tok818.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat.produce tok819);
        eq(tok819.quantity, 1.0);

      }
    }
  }
}

Subject::Dinner_D1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        ends(object.SC_This_Subject_Allowed_To_Exercise.consume tok820);
        eq(tok820.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise.produce tok821);
        temporaldistance(end, 1800, tok821.time);
        eq(tok821.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok822);
        eq(tok822.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok823);
        temporaldistance(end, 1800, tok823.time);
        eq(tok823.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Special_Lact_Dinner_D2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        starts(object.UCR_This_Subject_Availability.consume tok824);
        eq(tok824.quantity, 1.0);
        ends(object.UCR_This_Subject_Availability.produce tok825);
        eq(tok825.quantity, 1.0);

        starts(object.SC_This_Subject_is_on_sixth_floor.consume tok826);
        eq(tok826.quantity, 1.0);
        ends(object.SC_This_Subject_is_on_sixth_floor.produce tok827);
        eq(tok827.quantity, 1.0);

        any(kitchen_staff.consume tok828);
        temporaldistance(tok828.time, 900, start);
        eq(tok828.quantity, 1.0);
        starts(kitchen_staff.produce tok829);
        eq(tok829.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.consume tok830);
        eq(tok830.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat_Regular_Food.produce tok831);
        eq(tok831.quantity, 1.0);

        starts(object.SC_This_Subject_Allowed_To_Eat.consume tok832);
        eq(tok832.quantity, 1.0);
        ends(object.SC_This_Subject_Allowed_To_Eat.produce tok833);
        eq(tok833.quantity, 1.0);

      }
    }
  }
}

Subject::Special_Lact_Dinner_D2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Passive_Checking == true) {
        ends(object.SC_This_Subject_Allowed_To_Exercise.consume tok834);
        eq(tok834.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise.produce tok835);
        temporaldistance(end, 1800, tok835.time);
        eq(tok835.quantity, STATE_COND_TRUE);

        ends(object.SC_This_Subject_Allowed_To_Exercise_Maximally.consume tok836);
        eq(tok836.quantity, STATE_COND_FALSE);
        any(object.SC_This_Subject_Allowed_To_Exercise_Maximally.produce tok837);
        temporaldistance(end, 1800, tok837.time);
        eq(tok837.quantity, STATE_COND_TRUE);

      }
    }
  }
}

Subject::Sleep {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok838);
	    neq(tok838.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok839);
	    neq(tok839.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Other {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok840);
	    neq(tok840.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Response_to_Tilt_CT1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Cardio_MX == true) {
	    equals(Active_Cardio_can_be_setup_for_Cardio.Mutex_Cardio_can_be_setup_for_Cardio tok841);
	    neq(tok841.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok842);
	    neq(tok842.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok843);
	    neq(tok843.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Cardio_MX == true) {
	    ends(Active_Continuable_Equipment_Cardio.Mutex_Continuable_Equipment_Cardio tok844);
            temporaldistance(tok844.start, 1800, start);
	    eq(tok844.index, object.index);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok845);
	    eq(tok845.index, object.index);
	  }

	  if (Enforce_Operator_Cardio_Team_MX == true) {
	    equals(Active_Operator_Cardio_Team.Mutex_Operator_Cardio_Team tok846);
	    neq(tok846.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Response_to_Tilt_CT2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Cardio_MX == true) {
	    equals(Active_Cardio_can_be_setup_for_Cardio.Mutex_Cardio_can_be_setup_for_Cardio tok850);
	    neq(tok850.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok851);
	    neq(tok851.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok852);
	    neq(tok852.state, MERGED);
	  }

	  if (Enforce_Level1_MX == true) {
	    equals(Active_Level1.Mutex_Level1 tok853);
	    neq(tok853.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Cardio_MX == true) {
	    ends(Active_Continuable_Equipment_Cardio.Mutex_Continuable_Equipment_Cardio tok854);
            temporaldistance(tok854.start, 1800, start);
	    eq(tok854.index, object.index);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok855);
	    eq(tok855.index, object.index);
	  }

	  if (Enforce_Operator_Cardio_Team_MX == true) {
	    equals(Active_Operator_Cardio_Team.Mutex_Operator_Cardio_Team tok856);
	    neq(tok856.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Vascular_Function_CV1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Cardio_MX == true) {
	    equals(Active_Cardio_can_be_setup_for_Cardio.Mutex_Cardio_can_be_setup_for_Cardio tok860);
	    neq(tok860.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok861);
	    neq(tok861.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok862);
	    neq(tok862.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Cardio_MX == true) {
	    ends(Active_Continuable_Equipment_Cardio.Mutex_Continuable_Equipment_Cardio tok863);
            temporaldistance(tok863.start, 1800, start);
	    eq(tok863.index, object.index);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok864);
	    eq(tok864.index, object.index);
	  }

	  if (Enforce_Operator_Cardio_Team_MX == true) {
	    equals(Active_Operator_Cardio_Team.Mutex_Operator_Cardio_Team tok865);
	    neq(tok865.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Vascular_Function_CV2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Cardio_MX == true) {
	    equals(Active_Cardio_can_be_setup_for_Cardio.Mutex_Cardio_can_be_setup_for_Cardio tok869);
	    neq(tok869.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok870);
	    neq(tok870.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok871);
	    neq(tok871.state, MERGED);
	  }

	  if (Enforce_Level1_MX == true) {
	    equals(Active_Level1.Mutex_Level1 tok872);
	    neq(tok872.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Cardio_MX == true) {
	    ends(Active_Continuable_Equipment_Cardio.Mutex_Continuable_Equipment_Cardio tok873);
            temporaldistance(tok873.start, 1800, start);
	    eq(tok873.index, object.index);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok874);
	    eq(tok874.index, object.index);
	  }

	  if (Enforce_Operator_Cardio_Team_MX == true) {
	    equals(Active_Operator_Cardio_Team.Mutex_Operator_Cardio_Team tok875);
	    neq(tok875.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Plasma_Volume_CP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Cardio_MX == true) {
	    equals(Active_Cardio_can_be_setup_for_Cardio.Mutex_Cardio_can_be_setup_for_Cardio tok879);
	    neq(tok879.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok880);
	    neq(tok880.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok881);
	    neq(tok881.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Cardio_MX == true) {
	    ends(Active_Continuable_Equipment_Cardio.Mutex_Continuable_Equipment_Cardio tok882);
            temporaldistance(tok882.start, 1800, start);
	    eq(tok882.index, object.index);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok883);
	    eq(tok883.index, object.index);
	  }

	  if (Enforce_Operator_Cardio_Team_MX == true) {
	    equals(Active_Operator_Cardio_Team.Mutex_Operator_Cardio_Team tok884);
	    neq(tok884.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Cardiac_Function_Echo_CE1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Cardio_MX == true) {
	    equals(Active_Cardio_can_be_setup_for_Cardio.Mutex_Cardio_can_be_setup_for_Cardio tok888);
	    neq(tok888.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok889);
	    neq(tok889.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok890);
	    neq(tok890.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Cardio_MX == true) {
	    ends(Active_Continuable_Equipment_Cardio.Mutex_Continuable_Equipment_Cardio tok891);
            temporaldistance(tok891.start, 1800, start);
	    eq(tok891.index, object.index);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok892);
	    eq(tok892.index, object.index);
	  }

	  if (Enforce_Operator_Cardio_Team_MX == true) {
	    equals(Active_Operator_Cardio_Team.Mutex_Operator_Cardio_Team tok893);
	    neq(tok893.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::PE_Nitroprusside_CPX1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Cardio_MX == true) {
	    equals(Active_Cardio_can_be_setup_for_Cardio.Mutex_Cardio_can_be_setup_for_Cardio tok898);
	    neq(tok898.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok899);
	    neq(tok899.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok900);
	    neq(tok900.state, MERGED);
	  }

	  if (Enforce_Level1_MX == true) {
	    equals(Active_Level1.Mutex_Level1 tok901);
	    neq(tok901.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Cardio_MX == true) {
	    ends(Active_Continuable_Equipment_Cardio.Mutex_Continuable_Equipment_Cardio tok902);
            temporaldistance(tok902.start, 1800, start);
	    eq(tok902.index, object.index);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok903);
	    eq(tok903.index, object.index);
	  }

	  if (Enforce_Operator_Meck_MX == true) {
	    equals(Active_Operator_Meck.Mutex_Operator_Meck tok904);
	    neq(tok904.state, MERGED);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_CPX_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Have_Science_Constraint_CPX.Mutex_This_Subject_May_Not_Have_Science_Constraint_CPX tok905);
	    neq(tok905.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Dorsal_Foot_Vein_CPX2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Cardio_MX == true) {
	    equals(Active_Cardio_can_be_setup_for_Cardio.Mutex_Cardio_can_be_setup_for_Cardio tok910);
	    neq(tok910.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok911);
	    neq(tok911.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok912);
	    neq(tok912.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Cardio_MX == true) {
	    ends(Active_Continuable_Equipment_Cardio.Mutex_Continuable_Equipment_Cardio tok913);
            temporaldistance(tok913.start, 1800, start);
	    eq(tok913.index, object.index);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok914);
	    eq(tok914.index, object.index);
	  }

	  if (Enforce_Operator_Meck_MX == true) {
	    equals(Active_Operator_Meck.Mutex_Operator_Meck tok915);
	    neq(tok915.state, MERGED);
	  }

	  if (Enforce_This_Subject_May_Not_Be_Subjected_To_Sore_Foot_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.Mutex_This_Subject_May_Not_Be_Subjected_To_Sore_Foot tok916);
	    neq(tok916.state, MERGED);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_CPX_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Have_Science_Constraint_CPX.Mutex_This_Subject_May_Not_Have_Science_Constraint_CPX tok917);
	    neq(tok917.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Dorsal_Hand_Vein_CPX3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Cardio_MX == true) {
	    equals(Active_Cardio_can_be_setup_for_Cardio.Mutex_Cardio_can_be_setup_for_Cardio tok922);
	    neq(tok922.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok923);
	    neq(tok923.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok924);
	    neq(tok924.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Cardio_MX == true) {
	    ends(Active_Continuable_Equipment_Cardio.Mutex_Continuable_Equipment_Cardio tok925);
            temporaldistance(tok925.start, 1800, start);
	    eq(tok925.index, object.index);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok926);
	    eq(tok926.index, object.index);
	  }

	  if (Enforce_Operator_Meck_MX == true) {
	    equals(Active_Operator_Meck.Mutex_Operator_Meck tok927);
	    neq(tok927.state, MERGED);
	  }

	  if (Enforce_This_Subject_May_Not_Be_Subjected_To_Sore_Foot_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.Mutex_This_Subject_May_Not_Be_Subjected_To_Sore_Foot tok928);
	    neq(tok928.state, MERGED);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_CPX_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Have_Science_Constraint_CPX.Mutex_This_Subject_May_Not_Have_Science_Constraint_CPX tok929);
	    neq(tok929.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Leg_Compliance_CPX4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Cardio_MX == true) {
	    equals(Active_Cardio_can_be_setup_for_Cardio.Mutex_Cardio_can_be_setup_for_Cardio tok934);
	    neq(tok934.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok935);
	    neq(tok935.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok936);
	    neq(tok936.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Cardio_MX == true) {
	    ends(Active_Continuable_Equipment_Cardio.Mutex_Continuable_Equipment_Cardio tok937);
            temporaldistance(tok937.start, 1800, start);
	    eq(tok937.index, object.index);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok938);
	    eq(tok938.index, object.index);
	  }

	  if (Enforce_Operator_Meck_MX == true) {
	    equals(Active_Operator_Meck.Mutex_Operator_Meck tok939);
	    neq(tok939.state, MERGED);
	  }

	  if (Enforce_This_Subject_May_Not_Be_Subjected_To_Sore_Foot_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.Mutex_This_Subject_May_Not_Be_Subjected_To_Sore_Foot tok940);
	    neq(tok940.state, MERGED);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_CPX_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Have_Science_Constraint_CPX.Mutex_This_Subject_May_Not_Have_Science_Constraint_CPX tok941);
	    neq(tok941.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Cycle_Ergometer_EC1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok946);
	    neq(tok946.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok947);
	    neq(tok947.state, MERGED);
	  }

	  if (Enforce_Level1_MX == true) {
	    equals(Active_Level1.Mutex_Level1 tok948);
	    neq(tok948.state, MERGED);
	  }

	  if (Enforce_Operator_Hagan_MX == true) {
	    equals(Active_Operator_Hagan.Mutex_Operator_Hagan tok949);
	    neq(tok949.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok950);
	    neq(tok950.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok951);
	    neq(tok951.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Functional_Fitness_EF1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok956);
	    neq(tok956.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok957);
	    neq(tok957.state, MERGED);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok958);
	    eq(tok958.index, object.index);
	  }

	  if (Enforce_Operator_Hagan_MX == true) {
	    equals(Active_Operator_Hagan.Mutex_Operator_Hagan tok959);
	    neq(tok959.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok960);
	    neq(tok960.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok961);
	    neq(tok961.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Isokinetic_EK1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_First_Floor_can_be_setup_for_Isokinetic_MX == true) {
	    equals(Active_First_Floor_can_be_setup_for_Isokinetic.Mutex_First_Floor_can_be_setup_for_Isokinetic tok965);
	    neq(tok965.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok966);
	    neq(tok966.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_first_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_first_floor.Mutex_This_Subject_is_on_first_floor tok967);
	    neq(tok967.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Isokinetic_MX == true) {
	    ends(Active_Continuable_Equipment_Isokinetic.Mutex_Continuable_Equipment_Isokinetic tok968);
            temporaldistance(tok968.start, 900, start);
	    eq(tok968.index, object.index);
	  }

	  if (Enforce_Continuable_Room_First_Floor_MX == true) {
	    equals(Active_Continuable_Room_First_Floor.Mutex_Continuable_Room_First_Floor tok969);
	    eq(tok969.index, object.index);
	  }

	  if (Enforce_Operator_Baldwin_MX == true) {
	    equals(Active_Operator_Baldwin.Mutex_Operator_Baldwin tok970);
	    neq(tok970.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok971);
	    neq(tok971.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok972);
	    neq(tok972.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Isokinetic_EK2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_First_Floor_can_be_setup_for_Isokinetic_MX == true) {
	    equals(Active_First_Floor_can_be_setup_for_Isokinetic.Mutex_First_Floor_can_be_setup_for_Isokinetic tok979);
	    neq(tok979.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok980);
	    neq(tok980.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_first_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_first_floor.Mutex_This_Subject_is_on_first_floor tok981);
	    neq(tok981.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Isokinetic_MX == true) {
	    ends(Active_Continuable_Equipment_Isokinetic.Mutex_Continuable_Equipment_Isokinetic tok982);
            temporaldistance(tok982.start, 900, start);
	    eq(tok982.index, object.index);
	  }

	  if (Enforce_Continuable_Room_First_Floor_MX == true) {
	    equals(Active_Continuable_Room_First_Floor.Mutex_Continuable_Room_First_Floor tok983);
	    eq(tok983.index, object.index);
	  }

	  if (Enforce_Operator_Baldwin_MX == true) {
	    equals(Active_Operator_Baldwin.Mutex_Operator_Baldwin tok984);
	    neq(tok984.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok985);
	    neq(tok985.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok986);
	    neq(tok986.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Serum_Preg___Blood_PS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok993);
	    neq(tok993.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok994);
	    neq(tok994.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::DEXA_BD1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok995);
	    neq(tok995.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok996);
	    neq(tok996.state, MERGED);
	  }

	  if (Enforce_Operator_LeBlanc_MX == true) {
	    equals(Active_Operator_LeBlanc.Mutex_Operator_LeBlanc tok997);
	    neq(tok997.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::pQCT_BP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok998);
	    neq(tok998.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok999);
	    neq(tok999.state, MERGED);
	  }

	  if (Enforce_Operator_LeBlanc_MX == true) {
	    equals(Active_Operator_LeBlanc.Mutex_Operator_LeBlanc tok1000);
	    neq(tok1000.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Clinical_Nutritional_Assessment_NN1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1001);
	    neq(tok1001.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Clinical_Laboratory_Assessment_NL1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1004);
	    neq(tok1004.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Sublingual_Scrape_NSS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1007);
	    neq(tok1007.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Stress_Measures_SM1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1010);
	    neq(tok1010.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Saliva_Sample_SS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1013);
	    neq(tok1013.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Saliva_Briefing_SB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1016);
	    neq(tok1016.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1017);
	    neq(tok1017.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Functional_Stretch_Reflex_NS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_First_Floor_can_be_setup_for_Neuro_MX == true) {
	    equals(Active_First_Floor_can_be_setup_for_Neuro.Mutex_First_Floor_can_be_setup_for_Neuro tok1018);
	    neq(tok1018.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1019);
	    neq(tok1019.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_first_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_first_floor.Mutex_This_Subject_is_on_first_floor tok1020);
	    neq(tok1020.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Neuro_MX == true) {
	    ends(Active_Continuable_Equipment_Neuro.Mutex_Continuable_Equipment_Neuro tok1021);
            temporaldistance(tok1021.start, 900, start);
	    eq(tok1021.index, object.index);
	  }

	  if (Enforce_Continuable_Room_First_Floor_MX == true) {
	    equals(Active_Continuable_Room_First_Floor.Mutex_Continuable_Room_First_Floor tok1022);
	    eq(tok1022.index, object.index);
	  }

	  if (Enforce_Operator_Taylor_MX == true) {
	    equals(Active_Operator_Taylor.Mutex_Operator_Taylor tok1023);
	    neq(tok1023.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Balance_Control_NB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1028);
	    neq(tok1028.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1029);
	    neq(tok1029.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Neuro_MX == true) {
	    ends(Active_Continuable_Equipment_Neuro.Mutex_Continuable_Equipment_Neuro tok1030);
            temporaldistance(tok1030.start, 900, start);
	    eq(tok1030.index, object.index);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_NB_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Have_Science_Constraint_NB.Mutex_This_Subject_May_Not_Have_Science_Constraint_NB tok1031);
	    neq(tok1031.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Balance_Control_NB2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1037);
	    neq(tok1037.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1038);
	    neq(tok1038.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Neuro_MX == true) {
	    ends(Active_Continuable_Equipment_Neuro.Mutex_Continuable_Equipment_Neuro tok1039);
            temporaldistance(tok1039.start, 900, start);
	    eq(tok1039.index, object.index);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_NB_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Have_Science_Constraint_NB.Mutex_This_Subject_May_Not_Have_Science_Constraint_NB tok1040);
	    neq(tok1040.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Balance_Control_NB3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1046);
	    neq(tok1046.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1047);
	    neq(tok1047.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Neuro_MX == true) {
	    ends(Active_Continuable_Equipment_Neuro.Mutex_Continuable_Equipment_Neuro tok1048);
            temporaldistance(tok1048.start, 900, start);
	    eq(tok1048.index, object.index);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_NB_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Have_Science_Constraint_NB.Mutex_This_Subject_May_Not_Have_Science_Constraint_NB tok1049);
	    neq(tok1049.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Balance_Control_NB4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1055);
	    neq(tok1055.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1056);
	    neq(tok1056.state, MERGED);
	  }

	  if (Enforce_Level1_MX == true) {
	    equals(Active_Level1.Mutex_Level1 tok1057);
	    neq(tok1057.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Neuro_MX == true) {
	    ends(Active_Continuable_Equipment_Neuro.Mutex_Continuable_Equipment_Neuro tok1058);
            temporaldistance(tok1058.start, 900, start);
	    eq(tok1058.index, object.index);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_NB_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Have_Science_Constraint_NB.Mutex_This_Subject_May_Not_Have_Science_Constraint_NB tok1059);
	    neq(tok1059.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Lactulose_Acetaminophen_Test_PL1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1063);
	    neq(tok1063.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1064);
	    neq(tok1064.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Non_Special_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Non_Special_Food.Mutex_This_Subject_Allowed_To_Eat_Non_Special_Food tok1065);
	    neq(tok1065.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1066);
	    neq(tok1066.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Lactulose_Post_5_PL2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1069);
	    neq(tok1069.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1070);
	    neq(tok1070.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Lactulose_Post_6_PL3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1073);
	    neq(tok1073.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1074);
	    neq(tok1074.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Pharmacy_Briefing_PB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1077);
	    neq(tok1077.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1078);
	    neq(tok1078.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::WinSCAT_PW1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1079);
	    neq(tok1079.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1080);
	    neq(tok1080.state, MERGED);
	  }

	  if (Enforce_Operator_Seaton_MX == true) {
	    equals(Active_Operator_Seaton.Mutex_Operator_Seaton tok1081);
	    neq(tok1081.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Quantitative_Ultrasound_Scan_RPX1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1084);
	    neq(tok1084.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1085);
	    neq(tok1085.state, MERGED);
	  }

	  if (Enforce_Operator_Rubin_MX == true) {
	    equals(Active_Operator_Rubin.Mutex_Operator_Rubin tok1086);
	    neq(tok1086.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Posture_Study_RPX2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1087);
	    neq(tok1087.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1088);
	    neq(tok1088.state, MERGED);
	  }

	  if (Enforce_Operator_Rubin_MX == true) {
	    equals(Active_Operator_Rubin.Mutex_Operator_Rubin tok1089);
	    neq(tok1089.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::QCT_Scan_RPX3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1090);
	    neq(tok1090.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_first_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_first_floor.Mutex_This_Subject_is_on_first_floor tok1091);
	    neq(tok1091.state, MERGED);
	  }

	  if (Enforce_Operator_Rubin_MX == true) {
	    equals(Active_Operator_Rubin.Mutex_Operator_Rubin tok1092);
	    neq(tok1092.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::MRI_Lumbar_RPX4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1093);
	    neq(tok1093.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_first_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_first_floor.Mutex_This_Subject_is_on_first_floor tok1094);
	    neq(tok1094.state, MERGED);
	  }

	  if (Enforce_Operator_Rubin_MX == true) {
	    equals(Active_Operator_Rubin.Mutex_Operator_Rubin tok1095);
	    neq(tok1095.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Serum_Pregnancy_Test_RPX5 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1096);
	    neq(tok1096.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1097);
	    neq(tok1097.state, MERGED);
	  }

	  if (Enforce_Operator_Rubin_MX == true) {
	    equals(Active_Operator_Rubin.Mutex_Operator_Rubin tok1098);
	    neq(tok1098.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::DEXA_RPX6 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1099);
	    neq(tok1099.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1100);
	    neq(tok1100.state, MERGED);
	  }

	  if (Enforce_Operator_Rubin_MX == true) {
	    equals(Active_Operator_Rubin.Mutex_Operator_Rubin tok1101);
	    neq(tok1101.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Vibration_RPX7 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1102);
	    neq(tok1102.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1103);
	    neq(tok1103.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Vibe_MX == true) {
	    equals(Active_Continuable_Equipment_Vibe.Mutex_Continuable_Equipment_Vibe tok1104);
	    eq(tok1104.index, object.index);
	  }

	  if (Enforce_Operator_Rubin_MX == true) {
	    equals(Active_Operator_Rubin.Mutex_Operator_Rubin tok1105);
	    neq(tok1105.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Vibe_Echo_RPX8 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Vibe_MX == true) {
	    equals(Active_Cardio_can_be_setup_for_Vibe.Mutex_Cardio_can_be_setup_for_Vibe tok1108);
	    neq(tok1108.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1109);
	    neq(tok1109.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1110);
	    neq(tok1110.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Vibe_MX == true) {
	    equals(Active_Continuable_Equipment_Vibe.Mutex_Continuable_Equipment_Vibe tok1111);
	    eq(tok1111.index, object.index);
	  }

	  if (Enforce_Continuable_Room_Cardio_MX == true) {
	    equals(Active_Continuable_Room_Cardio.Mutex_Continuable_Room_Cardio tok1112);
	    eq(tok1112.index, object.index);
	  }

	  if (Enforce_Operator_Rubin_MX == true) {
	    equals(Active_Operator_Rubin.Mutex_Operator_Rubin tok1113);
	    neq(tok1113.state, MERGED);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_vibration_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Have_Science_Constraint_vibration.Mutex_This_Subject_May_Not_Have_Science_Constraint_vibration tok1114);
	    neq(tok1114.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Vibe_EMG_RPX9 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1121);
	    neq(tok1121.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_first_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_first_floor.Mutex_This_Subject_is_on_first_floor tok1122);
	    neq(tok1122.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Vibe_MX == true) {
	    equals(Active_Continuable_Equipment_Vibe.Mutex_Continuable_Equipment_Vibe tok1123);
	    eq(tok1123.index, object.index);
	  }

	  if (Enforce_Operator_Rubin_MX == true) {
	    equals(Active_Operator_Rubin.Mutex_Operator_Rubin tok1124);
	    neq(tok1124.state, MERGED);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_vibration_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Have_Science_Constraint_vibration.Mutex_This_Subject_May_Not_Have_Science_Constraint_vibration tok1125);
	    neq(tok1125.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Post_Vibration_FSR_RPX10 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_First_Floor_can_be_setup_for_Vibe_MX == true) {
	    equals(Active_First_Floor_can_be_setup_for_Vibe.Mutex_First_Floor_can_be_setup_for_Vibe tok1129);
	    neq(tok1129.state, MERGED);
	  }

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1130);
	    neq(tok1130.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_first_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_first_floor.Mutex_This_Subject_is_on_first_floor tok1131);
	    neq(tok1131.state, MERGED);
	  }

	  if (Enforce_Continuable_Equipment_Vibe_MX == true) {
	    equals(Active_Continuable_Equipment_Vibe.Mutex_Continuable_Equipment_Vibe tok1132);
	    eq(tok1132.index, object.index);
	  }

	  if (Enforce_Continuable_Room_First_Floor_MX == true) {
	    equals(Active_Continuable_Room_First_Floor.Mutex_Continuable_Room_First_Floor tok1133);
	    eq(tok1133.index, object.index);
	  }

	  if (Enforce_Operator_Rubin_MX == true) {
	    equals(Active_Operator_Rubin.Mutex_Operator_Rubin tok1134);
	    neq(tok1134.state, MERGED);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_vibration_MX == true) {
	    equals(object.TL_This_Subject_May_Not_Have_Science_Constraint_vibration.Mutex_This_Subject_May_Not_Have_Science_Constraint_vibration tok1135);
	    neq(tok1135.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Vest_Fitting_RPX11 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1141);
	    neq(tok1141.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1142);
	    neq(tok1142.state, MERGED);
	  }

	  if (Enforce_Operator_Rubin_MX == true) {
	    equals(Active_Operator_Rubin.Mutex_Operator_Rubin tok1143);
	    neq(tok1143.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Vitals_V1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1144);
	    neq(tok1144.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1145);
	    neq(tok1145.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Vitals_No_Meds_V2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1146);
	    neq(tok1146.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1147);
	    neq(tok1147.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Physiotherapy_WP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1148);
	    neq(tok1148.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1149);
	    neq(tok1149.state, MERGED);
	  }

	  if (Enforce_Operator_Therapist_MX == true) {
	    equals(Active_Operator_Therapist.Mutex_Operator_Therapist tok1150);
	    neq(tok1150.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::AM_Stretching_WS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1151);
	    neq(tok1151.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1152);
	    neq(tok1152.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::PM_Stretching_WS2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1153);
	    neq(tok1153.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1154);
	    neq(tok1154.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Stretch_FAM_WSF {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1155);
	    neq(tok1155.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1156);
	    neq(tok1156.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Reconditioning_WR1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1157);
	    neq(tok1157.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1158);
	    neq(tok1158.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Away_T1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1160);
	    neq(tok1160.state, MERGED);
	  }

	  if (Enforce_gurneys_MX == true) {
	    equals(Active_gurneys.Mutex_gurneys tok1161);
	    neq(tok1161.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Come_back_T1R {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1162);
	    neq(tok1162.state, MERGED);
	  }

	  if (Enforce_gurneys_MX == true) {
	    equals(Active_gurneys.Mutex_gurneys tok1163);
	    neq(tok1163.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Go_to_JSC_T2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1164);
	    neq(tok1164.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1165);
	    neq(tok1165.state, MERGED);
	  }

	  if (Enforce_van_MX == true) {
	    equals(Active_van.Mutex_van tok1166);
	    neq(tok1166.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Return_from_JSC_T2R {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1167);
	    neq(tok1167.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1168);
	    neq(tok1168.state, MERGED);
	  }

	  if (Enforce_van_MX == true) {
	    equals(Active_van.Mutex_van tok1169);
	    neq(tok1169.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Hygiene_H1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1170);
	    neq(tok1170.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1171);
	    neq(tok1171.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Admit_Physical_A1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1172);
	    neq(tok1172.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1173);
	    neq(tok1173.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Dimissal_A2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1174);
	    neq(tok1174.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1175);
	    neq(tok1175.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Subject_Briefing_A3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1176);
	    neq(tok1176.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1177);
	    neq(tok1177.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Head_Down_A4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1178);
	    neq(tok1178.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1179);
	    neq(tok1179.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Breakfast_B1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1180);
	    neq(tok1180.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1181);
	    neq(tok1181.state, MERGED);
	  }

	  if (Enforce_kitchen_staff_MX == true) {
	    any(Active_kitchen_staff.Mutex_kitchen_staff tok1182);
            temporaldistance(tok1182.start, 900, start);
	    temporaldistance(start, 0, tok1182.end);
	    neq(tok1182.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1183);
	    neq(tok1183.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Non_Special_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Non_Special_Food.Mutex_This_Subject_Allowed_To_Eat_Non_Special_Food tok1184);
	    neq(tok1184.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1185);
	    neq(tok1185.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Light_Breakfast___Complex_Carbs_B2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1188);
	    neq(tok1188.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1189);
	    neq(tok1189.state, MERGED);
	  }

	  if (Enforce_kitchen_staff_MX == true) {
	    any(Active_kitchen_staff.Mutex_kitchen_staff tok1190);
            temporaldistance(tok1190.start, 900, start);
	    temporaldistance(start, 0, tok1190.end);
	    neq(tok1190.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Non_Special_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Non_Special_Food.Mutex_This_Subject_Allowed_To_Eat_Non_Special_Food tok1191);
	    neq(tok1191.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1192);
	    neq(tok1192.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Lunch_L1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1195);
	    neq(tok1195.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1196);
	    neq(tok1196.state, MERGED);
	  }

	  if (Enforce_kitchen_staff_MX == true) {
	    any(Active_kitchen_staff.Mutex_kitchen_staff tok1197);
            temporaldistance(tok1197.start, 900, start);
	    temporaldistance(start, 0, tok1197.end);
	    neq(tok1197.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1198);
	    neq(tok1198.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Non_Special_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Non_Special_Food.Mutex_This_Subject_Allowed_To_Eat_Non_Special_Food tok1199);
	    neq(tok1199.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1200);
	    neq(tok1200.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Light_Lunch___Complex_Carbs_L2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1203);
	    neq(tok1203.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1204);
	    neq(tok1204.state, MERGED);
	  }

	  if (Enforce_kitchen_staff_MX == true) {
	    any(Active_kitchen_staff.Mutex_kitchen_staff tok1205);
            temporaldistance(tok1205.start, 900, start);
	    temporaldistance(start, 0, tok1205.end);
	    neq(tok1205.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Non_Special_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Non_Special_Food.Mutex_This_Subject_Allowed_To_Eat_Non_Special_Food tok1206);
	    neq(tok1206.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1207);
	    neq(tok1207.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Special_Lact_Light_Lunch___Complex_Carbs_L3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1210);
	    neq(tok1210.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1211);
	    neq(tok1211.state, MERGED);
	  }

	  if (Enforce_kitchen_staff_MX == true) {
	    any(Active_kitchen_staff.Mutex_kitchen_staff tok1212);
            temporaldistance(tok1212.start, 900, start);
	    temporaldistance(start, 0, tok1212.end);
	    neq(tok1212.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1213);
	    neq(tok1213.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Special_Lact_Lunch_L4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1216);
	    neq(tok1216.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1217);
	    neq(tok1217.state, MERGED);
	  }

	  if (Enforce_kitchen_staff_MX == true) {
	    any(Active_kitchen_staff.Mutex_kitchen_staff tok1218);
            temporaldistance(tok1218.start, 900, start);
	    temporaldistance(start, 0, tok1218.end);
	    neq(tok1218.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1219);
	    neq(tok1219.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1220);
	    neq(tok1220.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Remaining_Meal_RM1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1223);
	    neq(tok1223.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1224);
	    neq(tok1224.state, MERGED);
	  }

	  if (Enforce_kitchen_staff_MX == true) {
	    any(Active_kitchen_staff.Mutex_kitchen_staff tok1225);
            temporaldistance(tok1225.start, 900, start);
	    temporaldistance(start, 0, tok1225.end);
	    neq(tok1225.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Non_Special_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Non_Special_Food.Mutex_This_Subject_Allowed_To_Eat_Non_Special_Food tok1226);
	    neq(tok1226.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1227);
	    neq(tok1227.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Special_Lact_Remaining_Meal_RM2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1232);
	    neq(tok1232.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1233);
	    neq(tok1233.state, MERGED);
	  }

	  if (Enforce_kitchen_staff_MX == true) {
	    any(Active_kitchen_staff.Mutex_kitchen_staff tok1234);
            temporaldistance(tok1234.start, 900, start);
	    temporaldistance(start, 0, tok1234.end);
	    neq(tok1234.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1235);
	    neq(tok1235.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Dinner_D1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1240);
	    neq(tok1240.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1241);
	    neq(tok1241.state, MERGED);
	  }

	  if (Enforce_kitchen_staff_MX == true) {
	    any(Active_kitchen_staff.Mutex_kitchen_staff tok1242);
            temporaldistance(tok1242.start, 900, start);
	    temporaldistance(start, 0, tok1242.end);
	    neq(tok1242.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1243);
	    neq(tok1243.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Non_Special_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Non_Special_Food.Mutex_This_Subject_Allowed_To_Eat_Non_Special_Food tok1244);
	    neq(tok1244.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1245);
	    neq(tok1245.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Special_Lact_Dinner_D2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Availability_MX == true) {
	    equals(object.TL_This_Subject_Availability.Mutex_This_Subject_Availability tok1248);
	    neq(tok1248.state, MERGED);
	  }

	  if (Enforce_This_Subject_is_on_sixth_floor_MX == true) {
	    equals(object.TL_This_Subject_is_on_sixth_floor.Mutex_This_Subject_is_on_sixth_floor tok1249);
	    neq(tok1249.state, MERGED);
	  }

	  if (Enforce_kitchen_staff_MX == true) {
	    any(Active_kitchen_staff.Mutex_kitchen_staff tok1250);
            temporaldistance(tok1250.start, 900, start);
	    temporaldistance(start, 0, tok1250.end);
	    neq(tok1250.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1251);
	    neq(tok1251.state, MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    equals(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1252);
	    neq(tok1252.state, MERGED);
	  }

          }
	}
      }
    }
  }
}

Subject::Sleep {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Other {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Response_to_Tilt_CT1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1256);
            temporaldistance(tok1256.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1259);
            temporaldistance(tok1259.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1262);
            temporaldistance(tok1262.start,[82800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Response_to_Tilt_CT2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1265);
            temporaldistance(tok1265.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1268);
            temporaldistance(tok1268.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1271);
            temporaldistance(tok1271.start,[82800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Vascular_Function_CV1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1274);
            temporaldistance(tok1274.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1277);
            temporaldistance(tok1277.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1280);
            temporaldistance(tok1280.start,[82800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Vascular_Function_CV2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1283);
            temporaldistance(tok1283.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1286);
            temporaldistance(tok1286.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1289);
            temporaldistance(tok1289.start,[82800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Plasma_Volume_CP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1292);
            temporaldistance(tok1292.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1295);
            temporaldistance(tok1295.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1298);
            temporaldistance(tok1298.start,[82800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Cardiac_Function_Echo_CE1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1301);
            temporaldistance(tok1301.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1304);
            temporaldistance(tok1304.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1307);
            temporaldistance(tok1307.start,[3600 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1310);
            temporaldistance(tok1310.start,[82800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::PE_Nitroprusside_CPX1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1313);
            temporaldistance(tok1313.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1316);
            temporaldistance(tok1316.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1319);
            temporaldistance(tok1319.start,[82800 +inf],start);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_CPX_MX == true) {
	    meets(object.TL_This_Subject_May_Not_Have_Science_Constraint_CPX.Mutex_This_Subject_May_Not_Have_Science_Constraint_CPX tok1322);
            temporaldistance(end,[28800 +inf],tok1322.end);
            neq(tok1322.state,MERGED);
	  }

          }
        }
      }
    }
  }
}

Subject::Dorsal_Foot_Vein_CPX2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1324);
            temporaldistance(tok1324.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1327);
            temporaldistance(tok1327.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1330);
            temporaldistance(tok1330.start,[82800 +inf],start);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_CPX_MX == true) {
	    meets(object.TL_This_Subject_May_Not_Have_Science_Constraint_CPX.Mutex_This_Subject_May_Not_Have_Science_Constraint_CPX tok1333);
            temporaldistance(end,[28800 +inf],tok1333.end);
            neq(tok1333.state,MERGED);
	  }

          }
        }
      }
    }
  }
}

Subject::Dorsal_Hand_Vein_CPX3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1335);
            temporaldistance(tok1335.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1338);
            temporaldistance(tok1338.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1341);
            temporaldistance(tok1341.start,[82800 +inf],start);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_CPX_MX == true) {
	    meets(object.TL_This_Subject_May_Not_Have_Science_Constraint_CPX.Mutex_This_Subject_May_Not_Have_Science_Constraint_CPX tok1344);
            temporaldistance(end,[28800 +inf],tok1344.end);
            neq(tok1344.state,MERGED);
	  }

          }
        }
      }
    }
  }
}

Subject::Leg_Compliance_CPX4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1346);
            temporaldistance(tok1346.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1349);
            temporaldistance(tok1349.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1352);
            temporaldistance(tok1352.start,[82800 +inf],start);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_CPX_MX == true) {
	    meets(object.TL_This_Subject_May_Not_Have_Science_Constraint_CPX.Mutex_This_Subject_May_Not_Have_Science_Constraint_CPX tok1355);
            temporaldistance(end,[28800 +inf],tok1355.end);
            neq(tok1355.state,MERGED);
	  }

          }
        }
      }
    }
  }
}

Subject::Cycle_Ergometer_EC1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1357);
            temporaldistance(tok1357.start,[7200 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1360);
            temporaldistance(tok1360.start,[7200 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    met_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1363);
            temporaldistance(tok1363.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    met_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1366);
            temporaldistance(tok1366.start,[82800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Functional_Fitness_EF1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1369);
            temporaldistance(tok1369.start,[5400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1372);
            temporaldistance(tok1372.start,[5400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    met_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1375);
            temporaldistance(tok1375.start,[14400 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Isokinetic_EK1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_First_Floor_can_be_setup_for_Vibe_MX == true) {
	    contained_by(Active_First_Floor_can_be_setup_for_Vibe.Mutex_First_Floor_can_be_setup_for_Vibe tok1378);
            temporaldistance(tok1378.start,[2700 +inf],start);
	  }

	  if (Enforce_First_Floor_can_be_setup_for_Neuro_MX == true) {
	    contained_by(Active_First_Floor_can_be_setup_for_Neuro.Mutex_First_Floor_can_be_setup_for_Neuro tok1381);
            temporaldistance(tok1381.start,[2700 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1384);
            temporaldistance(tok1384.start,[7200 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1387);
            temporaldistance(tok1387.start,[7200 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    met_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1390);
            temporaldistance(tok1390.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    met_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1393);
            temporaldistance(tok1393.start,[82800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Isokinetic_EK2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_First_Floor_can_be_setup_for_Vibe_MX == true) {
	    contained_by(Active_First_Floor_can_be_setup_for_Vibe.Mutex_First_Floor_can_be_setup_for_Vibe tok1396);
            temporaldistance(tok1396.start,[2700 +inf],start);
	  }

	  if (Enforce_First_Floor_can_be_setup_for_Neuro_MX == true) {
	    contained_by(Active_First_Floor_can_be_setup_for_Neuro.Mutex_First_Floor_can_be_setup_for_Neuro tok1399);
            temporaldistance(tok1399.start,[2700 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1402);
            temporaldistance(tok1402.start,[7200 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1405);
            temporaldistance(tok1405.start,[7200 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    met_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1408);
            temporaldistance(tok1408.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    met_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1411);
            temporaldistance(tok1411.start,[82800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Serum_Preg___Blood_PS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::DEXA_BD1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::pQCT_BP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Clinical_Nutritional_Assessment_NN1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1414);
            temporaldistance(tok1414.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1417);
            temporaldistance(tok1417.start,[28800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Clinical_Laboratory_Assessment_NL1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1420);
            temporaldistance(tok1420.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1423);
            temporaldistance(tok1423.start,[28800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Sublingual_Scrape_NSS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1426);
            temporaldistance(tok1426.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1429);
            temporaldistance(tok1429.start,[28800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Stress_Measures_SM1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1432);
            temporaldistance(tok1432.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1435);
            temporaldistance(tok1435.start,[28800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Saliva_Sample_SS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1438);
            temporaldistance(tok1438.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1441);
            temporaldistance(tok1441.start,[28800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Saliva_Briefing_SB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Functional_Stretch_Reflex_NS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_First_Floor_can_be_setup_for_Vibe_MX == true) {
	    contained_by(Active_First_Floor_can_be_setup_for_Vibe.Mutex_First_Floor_can_be_setup_for_Vibe tok1444);
            temporaldistance(tok1444.start,[2700 +inf],start);
	  }

	  if (Enforce_First_Floor_can_be_setup_for_Isokinetic_MX == true) {
	    contained_by(Active_First_Floor_can_be_setup_for_Isokinetic.Mutex_First_Floor_can_be_setup_for_Isokinetic tok1447);
            temporaldistance(tok1447.start,[2700 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1450);
            temporaldistance(tok1450.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1453);
            temporaldistance(tok1453.start,[82800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Balance_Control_NB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1456);
            temporaldistance(tok1456.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1459);
            temporaldistance(tok1459.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1462);
            temporaldistance(tok1462.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1465);
            temporaldistance(tok1465.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_NB_MX == true) {
	    meets(object.TL_This_Subject_May_Not_Have_Science_Constraint_NB.Mutex_This_Subject_May_Not_Have_Science_Constraint_NB tok1468);
            temporaldistance(end,[28800 +inf],tok1468.end);
            neq(tok1468.state,MERGED);
	  }

          }
        }
      }
    }
  }
}

Subject::Balance_Control_NB2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1470);
            temporaldistance(tok1470.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1473);
            temporaldistance(tok1473.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1476);
            temporaldistance(tok1476.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1479);
            temporaldistance(tok1479.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_NB_MX == true) {
	    meets(object.TL_This_Subject_May_Not_Have_Science_Constraint_NB.Mutex_This_Subject_May_Not_Have_Science_Constraint_NB tok1482);
            temporaldistance(end,[28800 +inf],tok1482.end);
            neq(tok1482.state,MERGED);
	  }

          }
        }
      }
    }
  }
}

Subject::Balance_Control_NB3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1484);
            temporaldistance(tok1484.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1487);
            temporaldistance(tok1487.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1490);
            temporaldistance(tok1490.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1493);
            temporaldistance(tok1493.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_NB_MX == true) {
	    meets(object.TL_This_Subject_May_Not_Have_Science_Constraint_NB.Mutex_This_Subject_May_Not_Have_Science_Constraint_NB tok1496);
            temporaldistance(end,[28800 +inf],tok1496.end);
            neq(tok1496.state,MERGED);
	  }

          }
        }
      }
    }
  }
}

Subject::Balance_Control_NB4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1498);
            temporaldistance(tok1498.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1501);
            temporaldistance(tok1501.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_NB_MX == true) {
	    meets(object.TL_This_Subject_May_Not_Have_Science_Constraint_NB.Mutex_This_Subject_May_Not_Have_Science_Constraint_NB tok1504);
            temporaldistance(end,[28800 +inf],tok1504.end);
            neq(tok1504.state,MERGED);
	  }

          }
        }
      }
    }
  }
}

Subject::Lactulose_Acetaminophen_Test_PL1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    met_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1506);
            temporaldistance(tok1506.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1509);
            temporaldistance(tok1509.start,[72000 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Lactulose_Post_5_PL2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1512);
            temporaldistance(tok1512.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1515);
            temporaldistance(tok1515.start,[72000 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Lactulose_Post_6_PL3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1518);
            temporaldistance(tok1518.start,[28800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1521);
            temporaldistance(tok1521.start,[72000 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Pharmacy_Briefing_PB1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::WinSCAT_PW1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1524);
            temporaldistance(tok1524.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1527);
            temporaldistance(tok1527.start,[1800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Quantitative_Ultrasound_Scan_RPX1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Posture_Study_RPX2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::QCT_Scan_RPX3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::MRI_Lumbar_RPX4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Serum_Pregnancy_Test_RPX5 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::DEXA_RPX6 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Vibration_RPX7 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1530);
            temporaldistance(tok1530.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1533);
            temporaldistance(tok1533.start,[1800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Vibe_Echo_RPX8 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_Cardio_can_be_setup_for_Cardio_MX == true) {
	    contained_by(Active_Cardio_can_be_setup_for_Cardio.Mutex_Cardio_can_be_setup_for_Cardio tok1536);
            temporaldistance(tok1536.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1539);
            temporaldistance(tok1539.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1542);
            temporaldistance(tok1542.start,[14400 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1545);
            temporaldistance(tok1545.start,[3600 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1548);
            temporaldistance(tok1548.start,[82800 +inf],start);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_vibration_MX == true) {
	    meets(object.TL_This_Subject_May_Not_Have_Science_Constraint_vibration.Mutex_This_Subject_May_Not_Have_Science_Constraint_vibration tok1551);
            temporaldistance(end,[28800 +inf],tok1551.end);
            neq(tok1551.state,MERGED);
	  }

          }
        }
      }
    }
  }
}

Subject::Vibe_EMG_RPX9 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1553);
            temporaldistance(tok1553.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1556);
            temporaldistance(tok1556.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_vibration_MX == true) {
	    meets(object.TL_This_Subject_May_Not_Have_Science_Constraint_vibration.Mutex_This_Subject_May_Not_Have_Science_Constraint_vibration tok1559);
            temporaldistance(end,[28800 +inf],tok1559.end);
            neq(tok1559.state,MERGED);
	  }

          }
        }
      }
    }
  }
}

Subject::Post_Vibration_FSR_RPX10 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_First_Floor_can_be_setup_for_Neuro_MX == true) {
	    contained_by(Active_First_Floor_can_be_setup_for_Neuro.Mutex_First_Floor_can_be_setup_for_Neuro tok1561);
            temporaldistance(tok1561.start,[900 +inf],start);
	  }

	  if (Enforce_First_Floor_can_be_setup_for_Isokinetic_MX == true) {
	    contained_by(Active_First_Floor_can_be_setup_for_Isokinetic.Mutex_First_Floor_can_be_setup_for_Isokinetic tok1564);
            temporaldistance(tok1564.start,[900 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1567);
            temporaldistance(tok1567.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_Regular_Food_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Eat_Regular_Food.Mutex_This_Subject_Allowed_To_Eat_Regular_Food tok1570);
            temporaldistance(tok1570.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_May_Not_Have_Science_Constraint_vibration_MX == true) {
	    meets(object.TL_This_Subject_May_Not_Have_Science_Constraint_vibration.Mutex_This_Subject_May_Not_Have_Science_Constraint_vibration tok1573);
            temporaldistance(end,[28800 +inf],tok1573.end);
            neq(tok1573.state,MERGED);
	  }

          }
        }
      }
    }
  }
}

Subject::Vest_Fitting_RPX11 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Vitals_V1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Vitals_No_Meds_V2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Physiotherapy_WP1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::AM_Stretching_WS1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::PM_Stretching_WS2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Stretch_FAM_WSF {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Reconditioning_WR1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_May_Not_Be_Subjected_To_Sore_Foot_MX == true) {
	    contained_by(object.TL_This_Subject_May_Not_Be_Subjected_To_Sore_Foot.Mutex_This_Subject_May_Not_Be_Subjected_To_Sore_Foot tok1575);
            temporaldistance(tok1575.start,[28800 +inf],start);
	  }

          }
        }
      }
    }
  }
}

Subject::Away_T1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Come_back_T1R {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Go_to_JSC_T2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Return_from_JSC_T2R {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Hygiene_H1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Admit_Physical_A1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Dimissal_A2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Subject_Briefing_A3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Head_Down_A4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

          }
        }
      }
    }
  }
}

Subject::Breakfast_B1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1582);
            temporaldistance(end,[1800 +inf],tok1582.end);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1584);
            temporaldistance(end,[1800 +inf],tok1584.end);
	  }

          }
        }
      }
    }
  }
}

Subject::Light_Breakfast___Complex_Carbs_B2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1586);
            temporaldistance(end,[1800 +inf],tok1586.end);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1588);
            temporaldistance(end,[1800 +inf],tok1588.end);
	  }

          }
        }
      }
    }
  }
}

Subject::Lunch_L1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1590);
            temporaldistance(end,[1800 +inf],tok1590.end);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1592);
            temporaldistance(end,[1800 +inf],tok1592.end);
	  }

          }
        }
      }
    }
  }
}

Subject::Light_Lunch___Complex_Carbs_L2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1594);
            temporaldistance(end,[1800 +inf],tok1594.end);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1596);
            temporaldistance(end,[1800 +inf],tok1596.end);
	  }

          }
        }
      }
    }
  }
}

Subject::Special_Lact_Light_Lunch___Complex_Carbs_L3 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1598);
            temporaldistance(end,[1800 +inf],tok1598.end);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1600);
            temporaldistance(end,[1800 +inf],tok1600.end);
	  }

          }
        }
      }
    }
  }
}

Subject::Special_Lact_Lunch_L4 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1602);
            temporaldistance(end,[1800 +inf],tok1602.end);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1604);
            temporaldistance(end,[1800 +inf],tok1604.end);
	  }

          }
        }
      }
    }
  }
}

Subject::Remaining_Meal_RM1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    met_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1606);
            temporaldistance(tok1606.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    meets(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1609);
            temporaldistance(end,[3600 +inf],tok1609.end);
            neq(tok1609.state,MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1611);
            temporaldistance(end,[1800 +inf],tok1611.end);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1613);
            temporaldistance(end,[1800 +inf],tok1613.end);
	  }

          }
        }
      }
    }
  }
}

Subject::Special_Lact_Remaining_Meal_RM2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    met_by(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1615);
            temporaldistance(tok1615.start,[1800 +inf],start);
	  }

	  if (Enforce_This_Subject_Allowed_To_Eat_MX == true) {
	    meets(object.TL_This_Subject_Allowed_To_Eat.Mutex_This_Subject_Allowed_To_Eat tok1618);
            temporaldistance(end,[3600 +inf],tok1618.end);
            neq(tok1618.state,MERGED);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1620);
            temporaldistance(end,[1800 +inf],tok1620.end);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1622);
            temporaldistance(end,[1800 +inf],tok1622.end);
	  }

          }
        }
      }
    }
  }
}

Subject::Dinner_D1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1624);
            temporaldistance(end,[1800 +inf],tok1624.end);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1626);
            temporaldistance(end,[1800 +inf],tok1626.end);
	  }

          }
        }
      }
    }
  }
}

Subject::Special_Lact_Dinner_D2 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

	  if (Enforce_This_Subject_Allowed_To_Exercise_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise.Mutex_This_Subject_Allowed_To_Exercise tok1628);
            temporaldistance(end,[1800 +inf],tok1628.end);
	  }

	  if (Enforce_This_Subject_Allowed_To_Exercise_Maximally_MX == true) {
	    contained_by(object.TL_This_Subject_Allowed_To_Exercise_Maximally.Mutex_This_Subject_Allowed_To_Exercise_Maximally tok1630);
            temporaldistance(end,[1800 +inf],tok1630.end);
	  }

          }
        }
      }
    }
  }
}


Subject::Away_T1 {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

            meets(object.TL_This_Subject_Tripline.Mutex_This_Subject_Trip_to_first_floor tok);
            neq(tok.state, MERGED);

          }
        }
      }
    }
  }
}

Subject::Come_back_T1R {
  if (object) {
    if (scheduled == true) {
      if (Enable_Active_Enforcement == true) {
        if (solved == true) {
	  if (enforce == true) {

            met_by(object.TL_This_Subject_Tripline.Mutex_This_Subject_Trip_to_first_floor tok);
            eq(tok.state, MERGED);

          }
        }
      }
    }
  }
}

Active_This_Subject_is_on_first_floor::Mutex_This_Subject_is_on_first_floor {
  if (object) {
    Subject subject;
    contained_by(subject.TL_This_Subject_Tripline.Mutex_This_Subject_Trip_to_first_floor tok);
    commonAncestor(tok.object, object, subject);
    eq(tok.state, MERGED);
  }
}

Active_This_Subject_is_on_sixth_floor::Mutex_This_Subject_is_on_sixth_floor {
  if (object) {
    Subject subject;
    equals(subject.TL_This_Subject_Tripline.Mutex_This_Subject_Stay_on_sixth_floor tok);
    commonAncestor(tok.object, object, subject);
    neq(tok.state, MERGED);
  }
}
