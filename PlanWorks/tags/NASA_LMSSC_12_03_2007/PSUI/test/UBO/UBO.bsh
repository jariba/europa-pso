// UBO.bsh

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import java.util.regex.*;
import javax.swing.JInternalFrame;
import org.ops.ui.util.Util;
import org.ops.ui.PSDesktop;
import dsa.*;
import org.ops.ui.mouse.*;
import org.ops.ui.gantt.*;
import org.ops.ui.chart.*;

int month = GregorianCalendar.SEPTEMBER, day = 11; 
GregorianCalendar start = new GregorianCalendar(2006,month,day,0,0);
GregorianCalendar end = new GregorianCalendar(2006,month,day,1,30);

void initDSA()
{
	cwd = bsh.cwd;
    dsa.loadModel(cwd+"/libUBO_o.so");
    dsa.addPlan(cwd+"/UBO-initial-state.xml",false);		
    //dsa.addPlan("psp2.46.xml",false);		
}

void setupDesktop()
    throws Exception
{
    ActionViolationsPanel vp = (ActionViolationsPanel)desktop.makeViolationsFrame().getContentPane().getComponent(0);
    ActionDetailsPanel dp = (ActionDetailsPanel)desktop.makeDetailsFrame().getContentPane().getComponent(0);

    JInternalFrame ganttFrame = desktop.makeResourceGanttFrame(start,end);
    ganttFrame.setLocation(0,0);
    ganttFrame.setSize(1100,180);
    PSGantt gantt = (PSGantt)ganttFrame.getContentPane().getComponent(0);
    gantt.addMouseListener(vp);
    gantt.addMouseListener(dp);
    
    resourceFrame = desktop.makeResourcesFrame(start);
    resourceFrame.setLocation(0,180);
    resourceFrame.setSize(500,300);    
}

class PlanHistoryEntry
{
    Integer step_;
    Long remainingTreeSize_;
    String currentTree_;
    String currentPlan_;
               
    public PlanHistoryEntry(
               Integer step,
               Long remainingTreeSize,
               String currentTree,
               String currentPlan)
    {
        step_ = step;
        remainingTreeSize_ = remainingTreeSize;
        currentTree_ = currentTree;
        currentPlan_ = currentPlan;
    }
    
    public Integer getStepNumber() { return step_; }
    public Long getRemainingTreeSize() { return remainingTreeSize_; }
    public String getCurrentTree() { return currentTree_; }
    public String getCurrentPlan() { return currentPlan_; }               
    
    public String toString()
    {
        StringBuffer buf = new StringBuffer();
        buf.append(step_).append(": ")
           .append("(").append(remianingTreeSize_).append(")")
           .append(currentTree_)
           .append(currentPlan_); 
        return buf.toString();
    }
}

class UBOSolverListener
    implements SolverListener
{
    int lastDepth_;
    Vector plan_;
    Vector decisionHistory_;
    Vector planHistory_;
    Vector treeSize_;
    Vector currentTree_;
    
    public UBOSolverListener()
    {
        lastDepth_ = 0;
        plan_ = new Vector/*<String>*/();
        decisionHistory_ = new Vector();
        planHistory_ = new Vector();
        treeSize_ = new Vector();
        currentTree_ = new Vector();
    }
    
    public Vector getDecisionHistory() { return decisionHistory_; }
    public Vector getPlanHistory() { return planHistory_; }
    
    protected PlanHistoryEntry makePlanHistoryEntry(Solver s)
    {
        // Compute remaining nodes to explore
        long size = 1;
        for (Integer i : treeSize_) {
            if (i != null)
                size *= i;
        }        
        
        PlanHistoryEntry entry = new PlanHistoryEntry(s.getStepCount(),size,currentTree_.toString(),plan_.toString());

        return entry;
    }
    
    protected void setPlanSize(int size)
    {
        plan_.setSize(size);
        treeSize_.setSize(size);
        currentTree_.setSize(size);
    }
    
    public void stepCompleted(Solver s)
    {
        String lastDecision = s.getLastExecutedDecision();        
        if (lastDecision.startsWith("INSTANT") && (lastDepth_ <= s.getDepth())) {
            Pattern p = Pattern.compile("token=[0-9]+");
            Matcher m = p.matcher(lastDecision);
            m.find();
            Integer predId = new Integer(lastDecision.substring(m.start()+6,m.end()));
            m.find();
            Integer succId = new Integer(lastDecision.substring(m.start()+6,m.end()));
            String tokenDecision = " tokens:{" + predId + "} < {" + succId +"}";
            
            dsa.Component resource = dsa.getAction(predId).getComponent();
            dsa.Action pred = dsa.getAction(predId).getMaster();
            dsa.Action succ = dsa.getAction(succId).getMaster();
            String predAct = pred.getParameters().get(0).getValue().substring(11,12);
            String succAct = succ.getParameters().get(0).getValue().substring(11,12);

            // Get info to compute max remaining size of search tree
            Pattern p1 = Pattern.compile("CHOICE=[0-9]+");
            Matcher m1 = p1.matcher(lastDecision);
            m1.find();
            Integer choiceIdx = new Integer(lastDecision.substring(m1.start()+7,m1.end()));
            m1.find();
            Integer choiceCnt = new Integer(lastDecision.substring(m1.start()+7,m1.end()));
            Integer remaining = choiceCnt - choiceIdx;

            StringBuffer decisionBuf = new StringBuffer();
            decisionBuf.append("{").append(predAct).append("} < {").append(succAct).append("}");
            String decision = decisionBuf.toString();
            String decisionMsg = s.getStepCount() + ": "+ decision + " because of " + resource.getName() + tokenDecision;
            decisionHistory_.add(decisionMsg);
            //System.out.println(decisionMsg);            

            plan_.add(decision);
            treeSize_.add((remaining > 0) ? remaining : new Integer(1));
            currentTree_.add("("+choiceIdx+","+choiceCnt+")");
            PlanHistoryEntry entry = makePlanHistoryEntry(s);
            planHistory_.add(entry);        
            //System.out.println(entry);           
        }        
        
        if (lastDepth_ >= s.getDepth()) {
            String btMsg = s.getStepCount() + ": Backtracked! from "+plan_.size()+" to "+s.getDepth();
            decisionHistory_.add(btMsg);
            //System.out.println(btMsg); 

            setPlanSize(s.getDepth());
            PlanHistoryEntry entry = makePlanHistoryEntry(s);
            planHistory_.add(entry);        
            //System.out.println(entry);           
        }

        lastDepth_ = s.getDepth();        
    }
} 

void showHistory()
{
    String[] fields1 = {"toString"};
    desktop.makeTableFrame("Decision History",listener.getDecisionHistory(),fields1);
    String[] fields2 = {"StepNumber","RemainingTreeSize","CurrentTree","CurrentPlan"};
    desktop.makeTableFrame("Plan History",listener.getPlanHistory(),fields2);
}

// main()
horizonStart = 0;
horizonEnd = 1000;
maxSteps = 150;
maxDepth = 100000;
config = "PlannerConfig.xml";

initDSA();
solver = SolverManager.createInstance(config,horizonStart,horizonEnd,maxSteps,maxDepth);
desktop.makeSolverDialog();

UBOSolverListener listener = new UBOSolverListener();
solver.addListener(listener);

//setupDesktop();

//Example of table using JoSQL query
//desktop.makeTableFrame("Components",dsa.getComponents(),"SELECT key,name FROM dsa.Component");


