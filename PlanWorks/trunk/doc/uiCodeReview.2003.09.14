General questions/comments:
1. How would I add another view?
2. How can I disable some views? (configure file ?)
3. What if I wanted to customize or change a view? Could I?
4. One could imagine a generic graph navigation model that would allow navigation of the whole partial plan in one view. May be a stupid idea.
5. What is .place-holder for?

PlanWorks:
1. renderView - invokes open<ViewName> with a fixed pattern and a fixed set of views hard-coded.
2. menu handling - could we factor out common patterns for dyanmica menu bar handling. For example, the code in buildViewSubMenu
3. Is MySQLDB required for import? Could not find a reference - happy to see :-)
4. Note that this is quite a large file.

ViewManager:
1. open<ViewName> all take the same arguments and return an object of the same type. It looks like the code in each case is the same pattern.
2. Do we need to timport java.sql.SQLException. Happily, could not find a reference.
3. The set of views available is fixed. Should it be?

ViewSet:
1. Is MySQLDB required for import? Could not find a reference - happy to see :-)
2. open<ViewName> pattern extends to this too. Can use a factory pattern here customized by the name of the implementation class. class.forName(implName). and then set the paramters on each. Defining the interface for this is a crucial part of the architecture at this level. Must be able to pass the necessary context and provide the hooks to respond to appropriate events like setting the focus or redrawing based on a revision to the content spec.

VizView:
1. Special casing pattern for each view occurs here too.
2. What is the role of this class? Base class for other views.
3. Would prefer if the notion of Slot was not coupled here in the base class. It looks like the base class implements methods that should be
on a content spec object. It is orthogonal behavior to the view. Can these methods be over-ridden? They should not be.
4. Perhaps constructor should take the PartialPlan and the ContentSpec and respond to notifications for content-spec changes. Be an observer of the content spec for example.

ConstraintNetworkView:
1. It looks like the graph management is specialized for different nodes and links and yet the code is remarkably similary. It may be worth thinking about a more generic node and link approach that could also be tested as a component independently of the UI.
2. What would happen if we remove all Tokens and only had links and variables? This would be the way a pure constraint network would be viewed. How would the code have to change?
3. Note that this is quite a large file.

TemporalExtentView:

TimelineView:

TokenNetworkView:

Nodes:
1. Should we break out nodes spearate from views if they only belong to the view? For example, SlotNode and TimelineNode apply only to TimelineView.

ContentSpec:
1. Coupling of ContentSpec to viz.viewMgr.redrawNotifier is a major violation of the layering in the architecture. Views should be able to register as listeners to the content space. This is easily fixed!