
import java.util.List;
import java.util.Vector;
import psengine.*;

public class Entity
{
	public int id;
	
	public Entity(int i)
	{
		id = i;
	}
}

public class TemporalObject
{
	public Entity entity;
	public int start_time_id;
	public int end_time_id;
	
	public TemporalObject(int id,int start, int end)
	{
		entity = new Entity(id);
		start_time_id = start;
		end_time_id = end;
	}
}

public class ActionStructure
{
	public TemporalObject temporal_object;
	public int[] parameter_ids;
	public int[] effect_ids;
	
    public ActionStructure(int id,int start,int end,int[] param_ids)
    {
    	temporal_object = new TemporalObject(id,start,end);
    	parameter_ids = param_ids;
    	effect_ids = new int[0];
    }
    
    public String toString()
    {
		StringBuffer buf = new StringBuffer();
		
		buf.append("        ")
		   .append("Action { ")
		   .append("id=").append(temporal_object.entity.id).append(" ")
		   .append("start_time_id=").append(temporal_object.start_time_id).append(" ")
		   .append("end_time_id=").append(temporal_object.end_time_id).append(" ");
		
		buf.append("parameter_ids(").append(parameter_ids.length).append(") {");
		for (int i=0;i<parameter_ids.length;i++) {
		    if (i>0)
		    	buf.append(",");
		    buf.append(parameter_ids[i]);
		}
        buf.append("} ");
        
		buf.append("effect_ids(").append(effect_ids.length).append(") {");
		for (int i=0;i<effect_ids.length;i++) {
		    if (i>0)
		    	buf.append(",");
		    buf.append(effect_ids[i]);
		}
        buf.append("} ");
        
		buf.append("}\n");		
		
		return buf.toString();    	
    }
}

public class ParameterType
{
	protected String name_;

	public ParameterType(String n) { name_ = n; }

	public static ParameterType STRING_TYPE;
	public static ParameterType LONG_TYPE;
	public static ParameterType DOUBLE_TYPE;	
	
	public String toString() { return name_; }
}

ParameterType.STRING_TYPE = new ParameterType("string");
ParameterType.LONG_TYPE = new ParameterType("long");
ParameterType.DOUBLE_TYPE = new ParameterType("double");

public class DSATime
{
	public int seconds;
	
    public DSATime(int secs)
    {
        seconds = secs;	
    }
}

public class ParameterValue
{
	protected ParameterType type_;
	protected String value_;
	
	public ParameterValue(ParameterType type,String value)
	{
		type_ = type;
		value_ = value;
	}
	
    public ParameterType discriminator() { return type_; }
    public String string_value() { return value_; }
    public long long_value() { return Long.valueOf(value_).longValue(); }
    public double double_value() { return Double.valueOf(value_).doubleValue(); }
    public DSATime time_value() { return new DSATime(Integer.valueOf(value_).intValue()); }
    
    public String toString() { return type_.toString() + "("+value_+")"; }
}

public class ParameterStructure
{
	public Entity entity;
	public String name;
	public ParameterValue value;
	
	public ParameterStructure(int id,String n,ParameterType type,String v)
	{
		entity = new Entity(id);
		name = n;
	    value = new ParameterValue(type,v);	
	}
	
	public String toString() 
	{ 
	    StringBuffer buf = new StringBuffer();
	    
	    buf.append("        ").append("parameter { ")
	       .append("id=").append(entity.id).append(" ")
	       .append("name=").append(name).append(" ")
	       .append(value.toString()).append(" }\n");
	    
		return buf.toString(); 
    }
}

// EUROPA models don't have propositions, so this is an empty class
public class PropositionStructure {}

public class PlanStructure
{
	public ActionStructure[]      actions;
	public ParameterStructure[]   parameters;
	public PropositionStructure[] propositions; 

	public PlanStructure()
	{
		propositions = new PropositionStructure[0];
	}
	
	public String toString()
	{
		StringBuffer buf = new StringBuffer();
		
		buf.append("PlanStructure {\n");
		
		buf.append("   Actions(").append(actions.length).append(")\n");
		for (int i=0;i<actions.length;i++)
			buf.append(actions[i].toString());
		
		buf.append("   Parameters(").append(parameters.length).append(")\n");
		for (int i=0;i<parameters.length;i++)
			buf.append(parameters[i].toString());

		buf.append("   Propositions(").append(propositions.length).append(")\n");
		for (int i=0;i<propositions.length;i++)
			buf.append(propositions[i].toString());

		buf.append("}\n");
		
		return buf.toString();
	}
}

