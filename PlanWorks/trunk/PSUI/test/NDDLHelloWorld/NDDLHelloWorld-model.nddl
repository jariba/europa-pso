#include "Plasma.nddl"
#include "PlannerConfig.nddl"

typedef int [0 +inf] positiveInt;
typedef int {1,2,3} intEnum;
typedef float {1.0,2.0,3.0} floatEnum;
typedef string {"a","bb","ccc"} stringEnum;

/**
 * @brief Place holder class with a single predicate
 */
class YourObject {
 predicate helloWorld{ duration=10; } /*!< Predicate with no arguments */
 predicate parallelTest {}
}

/**
 * @brief A simple rule to force a repeated cycle
 */
YourObject::helloWorld{
 positiveInt dur = [10 10];
 
 eq(duration, dur);
 
 meets (object.helloWorld);
 met_by(object.helloWorld);
 
 /* parallels test
 parallels(object.parallelTest);
 any(object.parallelTest slave);
 precedes(start,slave.start);
 precedes(slave.end,end);
 */
}

class TestPC extends PlannerConfig
{
    TestPC()
    {
        super(0,100,500,+inf);
    }
}

