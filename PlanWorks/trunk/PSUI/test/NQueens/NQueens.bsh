// NQueens.bsh

import psengine.*;
import java.io.StringReader;

source("NQueensBoard.java");

String model = "NQueens";
int N = 8;

String generateModel(int n)
{
    StringBuffer buf = new StringBuffer();
    buf.append("typedef int [0 ").append(n-1).append("] Row;\n\n");
    
    buf.append("Row ");
    for (int i=0; i<n;i++) {
    	if (i>0)
    		buf.append(",");
    	buf.append("v").append(i);
    }
    buf.append(";\n\n");
    
    // check for same row
    for (int i=0; i<n;i++) {
    	for (int j=i+1; j<n; j++) {
            buf.append("neq(")
        	   .append("v").append(i)
        	   .append(",")
        	   .append("v").append(j)
        	   .append(");").append("\n");
    	}
    }
    
    // check for diagonals
    for (int i=0; i<n;i++) {
    	for (int j=i+1; j<n; j++) {
    		String varName = "v"+i+"down"+j;
            buf.append("int ").append(varName).append(";\n")
               .append("addEq(v").append(i).append(",").append(j-i).append(",").append(varName).append(");\n")
               .append("AllDiff(")
               .append("v").append(i)
        	   .append(",")
               .append("v").append(j)
        	   .append(",")
        	   .append(varName)
        	   .append(");").append("\n");
            
    		varName = "v"+i+"up"+j;
            buf.append("int ").append(varName).append(";\n")
               .append("addEq(v").append(i).append(",").append(i-j).append(",").append(varName).append(");\n") 
               .append("AllDiff(")
               .append("v").append(i)
        	   .append(",")
               .append("v").append(j)
        	   .append(",")
        	   .append(varName)
        	   .append(");").append("\n");
            
    	}
    }

    return buf.toString();
}

void loadModel()
{
	String nddlModel = generateModel(N);
	//System.out.println(nddlModel);
	psengine.setAllowViolations(true);
	psengine.executeScript("nddl",new StringReader(nddlModel));
}


String queensToString()
{
    StringBuffer buf = new StringBuffer();
    
    buf.append("{");
    for (int i=0; i<N;i++) {
    	if (i>0)
    		buf.append(",");
    	buf.append(psengine.getGlobalVariables().get(i).toString());
    }
    buf.append("}");
    buf.append(" violation:").append(psengine.getViolation());
    
    return buf.toString();
}

void printQueens()
{
    print(queensToString());	
}

void initQueens()
{	
	PSVariableList l = psengine.getGlobalVariables();	
	PSVarValue value = PSVarValue.getInstance(0);
	
	for (int i=0;i<N;i++) {
		v = l.get(i);
		v.specifyValue(value);
	}    		
}

void showQueens()
{
	JTextArea mouseInfo = new JTextArea("");
    f = desktop.makeNewFrame("Queens");
    f.getContentPane().add(new NQueensBoard(psengine,N,mouseInfo));
    f.setSize(450,500);

    f = desktop.makeNewFrame("Mouse Info");
    f.getContentPane().add(mouseInfo);
    f.setSize(200,300);    
}

PSVariable getQueenWithMaxViolation()
{
	double maxViolation = 0;
	int maxVar=0;
	
	PSVariableList l = psengine.getGlobalVariables();	
	
	for (int i=0;i<N;i++) {
		PSVariable v = l.get(i);
		if (v.getViolation() > maxViolation) {
			maxVar = i;
			maxViolation = v.getViolation();
		}
	}    			
	
	return l.get(maxVar);
}

int getSlotWithMinViolation(PSVariable queen,int curPos)
{
	int bestSlot = 0;
	double minViolation = psengine.getViolation();
	
    for (int i=0;i<N;i++) {
    	if (i != curPos) {
    		PSVarValue value = PSVarValue.getInstance(i);
    		queen.specifyValue(value);
    		double v = psengine.getViolation();
    		if (v < minViolation) {
    			bestSlot = i;
    			minViolation = v;
    		}
    	}
    }
    
    return bestSlot;
}

void search()
{
	for (int i=0;psengine.getViolation() > 0 && i < 500;i++) {
	    PSVariable queenToMove = getQueenWithMaxViolation();
		int curPos = queenToMove.getSingletonValue().asInt();
	    int slot = getSlotWithMinViolation(queenToMove,curPos);
		PSVarValue value = PSVarValue.getInstance(slot);
		queenToMove.specifyValue(value);
		print("Moved queen "+queenToMove.getName()+" from "+curPos+" to "+slot);
	    print(i+":"+queensToString());
	}
}

loadModel();
initQueens();
showQueens();
//search();

//print(generateModel(N));
//desktop.makeNddlConsole();
