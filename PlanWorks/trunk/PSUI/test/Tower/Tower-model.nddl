#include "Plasma.nddl"
#include "PlannerConfig.nddl"

enum Case1 {case11, case12, case13};
enum Case2 {case21, case22, case23, case24};


////Classes////

//Atoms//

class Var0 extends Timeline{

predicate Holding_b2{};
predicate OnTable_b2{};
predicate On_b2b1{};
predicate On_b2b2{};
predicate None_var0{};

}

class Var1 extends Timeline{

predicate Holding_b1{};
predicate OnTable_b1{};
predicate On_b1b2{};
predicate On_b1b1{};
predicate None_var1{};

}

class Var2 extends Timeline{

predicate Clear_b1{};
predicate None_var2{};

}

class Var3 extends Timeline{

predicate ArmEmpty{};
predicate None_var3{};

}

class Var4 extends Timeline{

predicate Clear_b2{};
predicate None_var4{};

}

class Goal extends Timeline{

predicate GoalAchieved{
eq(duration, [1 1]);
};

}

//Operators//

class Operator extends Timeline{

predicate PickUp_b1{
eq(duration, [1 1]);
};

predicate PickUp_b2{
eq(duration, [1 1]);
}

predicate PutDown_b1{
eq(duration, [1 1]);
}

predicate PutDown_b2{
eq(duration, [1 1]);
}

predicate Stack_b1b2{
eq(duration, [1 1]);
}

predicate Stack_b2b1{
eq(duration, [1 1]);
}

predicate Unstack_b1b2{
eq(duration, [1 1]);
}

predicate Unstack_b2b1{
eq(duration, [1 1]);
}

predicate Nop{};

}


////Compatibilities/////


///Operators///

Operator::PickUp_b1{

contained_by(Var1.OnTable_b1 onTableB1);
meets(Var1.Holding_b1 holdingB1);

contained_by(Var2.Clear_b1 clearB1);
meets(Var2.None_var2 noneV2);

contained_by(Var3.ArmEmpty armEmpty);
meets(Var3.None_var3 noneV3);

}

Operator::PickUp_b2{

contained_by(Var0.OnTable_b2 onTableB2);
meets(Var0.Holding_b2 holdingB2);

contained_by(Var4.Clear_b2 clearB2);
meets(Var4.None_var4 noneV4);

contained_by(Var3.ArmEmpty armEmpty);
meets(Var3.None_var3 noneV3);

}

Operator::PutDown_b1{

contained_by(Var1.Holding_b1 holdingB1);
meets(Var1.OnTable_b1 onTableB1);

bool OR1;

if (OR1==true){
ends_during(Var2.Clear_b1 clearB1);
precedes(end, clearB1.end);
}

if (OR1==false){
meets(Var2.Clear_b1 clearB1);
}

bool OR2;

if (OR2==true){
ends_during(Var3.ArmEmpty armEmpty);
precedes(end,armEmpty.end);
}

if (OR2==false){
meets(Var3.ArmEmpty armEmpty);
}

}

Operator::PutDown_b2{

contained_by(Var0.Holding_b2 holdingB2);
meets(Var0.OnTable_b2 onTableB2);

bool OR3;

if (OR3==true){
ends_during(Var4.Clear_b2 clearB2);
precedes(end, clearB2.end);
}

if (OR3==false){
meets(Var4.Clear_b2 clearB2);
}

bool OR4;

if (OR4==true){
ends_during(Var3.ArmEmpty armEmpty);
precedes(end,armEmpty.end);
}

if (OR4==false){
meets(Var3.ArmEmpty armEmpty);
}

}

Operator::Stack_b1b2{

contained_by(Var1.Holding_b1 holdingB1);
meets(Var1.On_b1b2 onB1B2);

contained_by(Var4.Clear_b2 clearB2);
meets(Var4.None_var4 noneV4);

bool OR5;

if (OR5==true){
ends_during(Var2.Clear_b1 clearB1);
precedes(end, clearB1.end);
}

if (OR5==false){
meets(Var2.Clear_b1 clearB1);
}

bool OR6;

if (OR6==true){
ends_during(Var3.ArmEmpty armEmpty);
precedes(end, armEmpty.end);
}

if (OR6==false){
meets(Var3.ArmEmpty armEmpty);
}

}

Operator::Stack_b2b1{

contained_by(Var0.Holding_b2 holdingB2);
meets(Var0.On_b2b1 onB2B1);

contained_by(Var2.Clear_b1 clearB1);
meets(Var2.None_var2 noneV2);

bool OR7;

if (OR7==true){
ends_during(Var4.Clear_b2 clearB2);
precedes(end, clearB2.end);
}

if (OR7==false){
meets(Var4.Clear_b2 clearB2);
}

bool OR8;

if (OR8==true){
ends_during(Var3.ArmEmpty armEmpty);
precedes(end, armEmpty.end);
}

if (OR8==false){
meets(Var3.ArmEmpty armEmpty);
}

}

Operator::Unstack_b1b2{

contained_by(Var2.Clear_b1 clearB1);
meets(Var2.None_var2 noneV2);

contained_by(Var3.ArmEmpty armEmpty);
meets(Var3.None_var3 noneV3);

contained_by(Var1.On_b1b2 onB1B2);
meets(Var1.Holding_b1 holdingB1);


bool OR9;

if (OR9==true){
ends_during(Var4.Clear_b2 clearB2);
precedes(end, clearB2.end);
}

if (OR9==false){
meets(Var4.Clear_b2 clearB2);
}

}

Operator::Unstack_b2b1{

contained_by(Var4.Clear_b2 clearB2);
meets(Var4.None_var4 noneV4);

contained_by(Var3.ArmEmpty armEmpty);
meets(Var3.None_var3 noneV3);

contained_by(Var0.On_b2b1 onB2B1);
meets(Var0.Holding_b2 holdingB2);

bool OR10;

if (OR10==true){
ends_during(Var4.Clear_b2 clearB2);
precedes(end, clearB2.end);
}

if (OR10==false){
meets(Var4.Clear_b2 clearB2);
}

}

////Atoms////


Var0::Holding_b2{

bool OR11;

if(OR11==true){
ends(Operator.PutDown_b2 putDownB2Exe);}

if(OR11==false){
ends(Operator.Stack_b2b1 stackB2B1Exe);}

bool OR12;

if(OR12==true){
met_by(Operator.PickUp_b2 pickUpB2);}

if(OR12==false){
met_by(Operator.Unstack_b2b1 unstackB2B1);}

}

Var0::OnTable_b2{

  ends(Operator.PickUp_b2 pickUpB2);
met_by(Operator.PutDown_b2 putDownB2Exe);

}

Var0::On_b2b1{

  ends(Operator.Unstack_b2b1 unstackB2B1Exe);
met_by(Operator.Stack_b2b1 stackB2B1Exe);

}

Var1::Holding_b1{

bool OR13;

if(OR13==true){
ends(Operator.PutDown_b1 putDownB1Exe);}

if(OR13==false){
ends(Operator.Stack_b1b2 stackB1B2Exe);}


bool OR14;

if(OR14==true){
met_by(Operator.PickUp_b1 pickUpB1);}

if(OR14==false){
met_by(Operator.Unstack_b1b2 unstackB1B2);}

}

Var1::OnTable_b1{

  ends(Operator.PickUp_b1 pickUpB1);
met_by(Operator.PutDown_b1 putDownB1Exe);

}

Var1::On_b1b2{

  ends(Operator.Unstack_b1b2 unstackB1B2Exe);
met_by(Operator.Stack_b1b2 stackB1B2Exe);

}

Var2::Clear_b1{

Case1 OR15;
Case1 OR16;


if (OR15==case11){
ends(Operator.PickUp_b1 pickB1exe);}
if (OR15==case12){
ends(Operator.Stack_b2b1 stackB2B1exe);}
if (OR15==case13){
ends(Operator.Unstack_b1b2 unstackB1B2exe);}

if (OR16==case11){
met_by(Operator.PutDown_b1 putDownB1exe);}
if (OR16==case12){
met_by(Operator.Stack_b1b2 stackB1B2exe);}
if (OR16==case13){
met_by(Operator.Unstack_b2b1 unstackB2B1exe);
}
}

Var2::None_var2{

Case1 OR17;
Case1 OR18;

if (OR17==case11){
ends(Operator.PutDown_b1 putDownB1exe);}
if (OR17==case12){
ends(Operator.Stack_b1b2 stackB1B2exe);}
if (OR17==case13){
ends(Operator.Unstack_b2b1 unstackB2B1exe);}

if (OR18==case11){
met_by(Operator.PickUp_b1 pickB1exe);}
if (OR18==case12){
met_by(Operator.Stack_b2b1 stackB2B1exe);}
if (OR18==case13){
met_by(Operator.Unstack_b1b2 unstackB1B2exe);}

}

Var3::ArmEmpty{

Case2 OR19;
Case2 OR20;

if (OR19==case21){
ends(Operator.PickUp_b1 pickB1exe);}
if (OR19==case22){
ends(Operator.PickUp_b2 pickB2exe);}
if (OR19==case23){
ends(Operator.Unstack_b1b2 unstackB1B2exe);}
if (OR19==case24){
ends(Operator.Unstack_b2b1 unstackB2B1exe);}

if (OR20==case21){
met_by(Operator.PutDown_b1 putB1exe);}
if (OR20==case22){
met_by(Operator.PutDown_b2 putB2exe);}
if (OR20==case23){
met_by(Operator.Stack_b1b2 stackB1B2exe);}
if (OR20==case24){
met_by(Operator.Stack_b2b1 stackB2B1exe);}

}

Var3::None_var3{

Case2 OR21;
Case2 OR22;

if (OR21==case21){
met_by(Operator.PickUp_b1 pickB1exe);}
if (OR21==case22){
met_by(Operator.PickUp_b2 pickB2exe);}
if (OR21==case23){
met_by(Operator.Unstack_b1b2 unstackB1B2exe);}
if (OR21==case24){
met_by(Operator.Unstack_b2b1 unstackB2B1exe);}

if (OR22==case21){
ends(Operator.PutDown_b1 putB1exe);}
if (OR22==case22){
ends(Operator.PutDown_b2 putB2exe);}
if (OR22==case23){
ends(Operator.Stack_b1b2 stackB1B2exe);}
if (OR22==case24){
ends(Operator.Stack_b2b1 stackB2B1exe);}

}

Var4::Clear_b2{

Case1 OR23;
Case1 OR24;

if (OR23==case11){
ends(Operator.PickUp_b2 pickB2exe);}
if (OR23==case12){
ends(Operator.Stack_b1b2 stackB1B2exe);}
if (OR23==case13){
ends(Operator.Unstack_b2b1 unstackB2B1exe);}

if (OR24==case11){
met_by(Operator.PutDown_b2 putDownB2exe);}
if (OR24==case12){
met_by(Operator.Stack_b2b1 stackB2B1exe);}
if (OR24==case13){
met_by(Operator.Unstack_b1b2 unstackB1B2exe);}

}

Var4::None_var4{

Case1 OR25;
Case1 OR26;

if (OR25==case11){
ends(Operator.PutDown_b2 putDownB2exe);}
if (OR25==case12){
ends(Operator.Stack_b2b1 stackB2B1exe);}
if (OR25==case13){
ends(Operator.Unstack_b1b2 unstackB1B2exe);
}

if (OR26==case11){
met_by(Operator.PickUp_b2 pickB2exe);}
if (OR26==case12){
met_by(Operator.Stack_b1b2 stackB1B2exe);}
if (OR26==case13){
met_by(Operator.Unstack_b2b1 unstacB2B1exe);}

}

///Goal////

Goal::GoalAchieved{
contained_by(Var0.OnTable_b2 onTableB2true);
contained_by(Var2.Clear_b1 clearB1true);
contained_by(Var3.ArmEmpty armEmptyTrue);
contained_by(Var4.None_var4 clearB2false);
contained_by(Var1.On_b1b2 onB1B2true);
}

