#include "Constraints.nddl"
#include "Plasma.nddl"
#include "PlannerConfig.nddl"

// avoiding warnings:
constraint LessThan(a, b) { a <: numeric && b <: numeric }

typedef int {1, 2, 3} intEnum;
typedef int [1 10] intRange;

/**
 * 
 */
class FastingWindow extends Timeline
{
    predicate fasting {}
    predicate not_fasting {}
}

/*
 * Multi-capacity resources 
 */
// TDRS satellites 
class TDRS extends Reusable
{
    TDRS()
    {
        // Capacity, Lower Limit
        super(4.0,0.0);
    }
}    
        
// Max number of Physically Restraining activities 
class PRACapacity extends Reusable
{
    PRACapacity()
    {
        // Capacity, Lower Limit
        super(3.0,0.0);
    }
}    
        
class ExerciseEquipment extends Reusable
{
    ExerciseEquipment()
    {
        // Capacity, Lower Limit
        super(2.0,0.0);
    }
}    
        
// TDRS satellites 
class Power extends Reusable
{
    Power()
    {
        // Capacity, Lower Limit
        super(1300.0,0.0);
    }
}    
        
class Crew extends Timeline
{
    FastingWindow fw;
    
    Crew()
    {
        fw = new FastingWindow();
    }

    predicate pre_sleep { duration = 120; }
    predicate sleep { duration = 480; }
    predicate post_sleep { duration = 180; }
    predicate dpc { duration = 15;}
    predicate meal { duration = 60; }
    predicate exercise { duration = 60; }
    
    predicate payload_activity {
        int id; 
        StringData desc; 
        int length; 
        int priority; 
        int dueDate;
        int usesComms;
        int isPhysicallyRestraining;
    }
    
    predicate comm_payload_activity {
        int id; 
        StringData desc; 
        int length; 
        int priority; 
        int dueDate;
    }
    
    predicate restraint_payload_activity {
        int id; 
        StringData desc; 
        int length; 
        int priority; 
        int dueDate;
    }
    
    predicate power_activity {
        int id; 
        StringData desc; 
        int length; 
        float usage; 
        int dueDate;
    }
    
    predicate change_filter { duration = 60; }    
    predicate medical_conference { duration = 60; }
    
    // RPCM R&R Predicates
    predicate remove_sleep_station { duration = 60; }
    predicate reconfigure_thermal_loops {  duration = 60; int loopCnt;}
    predicate remove_power_source { duration = 60; }
    predicate replace_rpcm { duration = 60; }
    predicate place_power_source { duration = 60; }
    predicate assemble_sleep_station { duration = 60; }
}

Crew::pre_sleep
{
    equals(object.fw.not_fasting f);
    meets(object.fw.fasting t);
}

Crew::sleep
{
    met_by(pre_sleep);
}

Crew::post_sleep
{
    equals(object.fw.not_fasting f);
    meets(object.fw.fasting t);
    LessThan(240,t.duration);
    
    meets(dpc);
}

Crew::dpc
{
    equals(TDRS.uses t);
    eq(t.quantity, 1.0); 
}

Crew::exercise
{
    // Can't exercise unless fasting for 1 hour or more
    contained_by(object.fw.fasting f);
    int lb;
    
    temporalDistance(lb,1,start);
    precedes(f.start,lb);
    //leq(f.start,lb);

    // use capacity on excercise equipment
    equals(ExerciseEquipment.uses equipment);
    eq(equipment.quantity, 1); 
}

Crew::meal
{
    equals(object.fw.not_fasting);
    meets(object.fw.fasting t);
    LessThan(240,t.duration);
}

Crew::payload_activity
{
    eq(duration,length);
    precedes(0,start);
    precedes(end,dueDate);    
    
    // optional, use capacity on comms
    if (usesComms == 1) {
        equals(TDRS.uses comms);
        eq(comms.quantity, 1);                 
    }        
    else if (isPhysicallyRestraining == 1) { // optional, require physical restraining of crew member
        equals(PRACapacity.uses pra);
        eq(pra.quantity, 1);         
    }    
}

Crew::comm_payload_activity
{
    eq(duration,length);
    precedes(0,start);
    precedes(end,dueDate);     
    equals(TDRS.uses comms);
    eq(comms.quantity, 1);                 
}


Crew::power_activity
{
    eq(duration,length);
    precedes(0,start);
    precedes(end,dueDate);     
    equals(Power.uses power);
    eq(power.quantity, usage);                 
}


Crew::restraint_payload_activity
{
    eq(duration,length);
    precedes(0,start);
    precedes(end,dueDate);    
    equals(PRACapacity.uses pra);
    eq(pra.quantity, 1);         
}


Crew::change_filter
{
    //eq(duration,60);
    precedes(0,start);

    // Setup next filter change
    before(Crew.change_filter cf);

    // ensure next filter change happens within limits
    int earliestNextEnd;
    temporalDistance(end,1440,earliestNextEnd); // 24 hours
    precedes(earliestNextEnd,cf.end);

    int latestNextEnd;
    temporalDistance(end,2880,latestNextEnd); // 48 hours
    precedes(cf.end,latestNextEnd);
}

Crew::medical_conference
{
    //eq(duration,60);
    precedes(0,start);
    
    equals(TDRS.uses comms);
    eq(comms.quantity, 1); 
    
    // Setup next medical conference
    before(object.medical_conference mc);

    // ensure next medical conference happens within limits
    int earliestNextEnd;
    temporalDistance(end,1440,earliestNextEnd); // 24 hours
    precedes(earliestNextEnd,mc.end);

    int latestNextEnd;
    temporalDistance(end,2880,latestNextEnd);
    precedes(mc.end,latestNextEnd);
}


Crew::remove_sleep_station 
{
}

Crew::reconfigure_thermal_loops 
{
}

Crew::remove_power_source 
{
}

Crew::replace_rpcm 
{
}

Crew::place_power_source 
{
}

Crew::assemble_sleep_station 
{
}


class CrewActivity extends Timeline
{
}

// RPCM Replace & Repair procedure
class RPCM_RR extends CrewActivity
{
    predicate perform {}
}


RPCM_RR::perform
{
    contains(Crew.remove_sleep_station step1);
    contains(Crew.remove_power_source step2);
    precedes(step1.end,step2.start);
    
    // Reconfigure thermal loops as single loop
    contains(Crew.reconfigure_thermal_loops step3);
    eq(step3.loopCnt,1);
        
    contains(Crew.replace_rpcm step4);
    precedes(step2.end,step4.start);
    precedes(step3.end,step4.start);
    
    contains(Crew.place_power_source step5);
    contains(Crew.assemble_sleep_station step6);
    precedes(step4.end,step5.start);
    precedes(step5.end,step6.start);
    
    // Reconfigure thermal loops as redundant loops
    contains(Crew.reconfigure_thermal_loops step7);
    precedes(step4.end,step7.start);
    eq(step7.loopCnt,2);
}


class CrewPlanner extends Timeline
{
    Crew c_;
    
    CrewPlanner(Crew c)
    {
        c_ = c;
    }
    
    predicate daily_routine {}
}

/*
 * Use concurrent instead of eq to get temporal network propagation
 */
CrewPlanner::daily_routine
{   
    eq(duration,1440); // 24 hours

    contains(object.c_.post_sleep ps);
    concurrent(ps.start,start);
    
    contains(object.c_.sleep sleep);
    concurrent(sleep.end,end);
    
    // Breakfast is part of post-sleep and dinner part of pre-sleep
    // so we only generate lunch
    // TODO: need to express a preference for scheduling all crew members together
    contains(object.c_.meal lunch); 
    
    /*
    int bfstLunchDist;
    temporalDistance(bfstLunchDist,ps.end,lunch.start);
    precedes(bfstLunchDist,240);
    precedes(180,bfstLunchDist);
    */
        
    contains(object.c_.exercise exercise);    
        
    // generate routine for the next day...
    meets(daily_routine);
}






