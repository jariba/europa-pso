// ResourceViolations.bsh

import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JInternalFrame;
import org.ops.ui.PSDesktop;
import org.ops.ui.mouse.*;
import org.ops.ui.gantt.*;
import org.ops.ui.chart.*;
import org.ops.ui.util.Util;
import psengine.*;

int month = GregorianCalendar.SEPTEMBER, day = 11; 
GregorianCalendar start = new GregorianCalendar(2006,month,day,0,0);
GregorianCalendar end = new GregorianCalendar(2006,month,day,0,200);

void usingCodeGeneration()
{
	cwd = bsh.cwd;
    psengine.loadModel(cwd+"/libResourceViolations_g.so");
    boolean isFile = true;
    boolean useInterpreter = false;
    psengine.executeTxns(cwd+"/ResourceViolations-initial-state.xml",isFile,useInterpreter);		
}

void usingInterpreter()
{
	cwd = bsh.cwd;
    String nddlModel = cwd+"/ResourceViolations-initial-state.nddl";
    psengine.executeScript("nddl",nddlModel);
}

void initPSEngine()
{
	psengine.setAllowViolations(true);
	//usingCodeGeneration();
	usingInterpreter();
}

void setupDesktop()
    throws Exception
{
    ActionDetailsPanel dp = (ActionDetailsPanel)desktop.makeDetailsFrame().getContentPane().getComponent(0);
    ActionViolationsPanel vp = (ActionViolationsPanel)desktop.makeViolationsFrame().getContentPane().getComponent(0);

    JInternalFrame ganttFrame = desktop.makeResourceGanttFrame("CapacityResource",start,end);
    ganttFrame.setLocation(0,0);
    ganttFrame.setSize(700,300);
    PSGantt gantt = (PSGantt)ganttFrame.getContentPane().getComponent(0);
    gantt.addMouseListener(dp);    
    gantt.addMouseListener(vp);  
    
    desktop.showTokens(psengine.getObjectsByType("CapacityResource").get(0));
}

void showResourceLevels()
{
    resourceFrame = desktop.makeResourcesFrame("CapacityResource",start);
    resourceFrame.setLocation(0,180);
    resourceFrame.setSize(500,300);    	
}

String getBounds(PSToken t)
{
    StringBuffer buf = new StringBuffer();
    
    buf.append(t.getParameter("start"))
       .append("\n ")
       .append(t.getParameter("end"))
       .append("\n");
    
    return buf.toString();
}


initPSEngine();
desktop.makeNddlConsole();
solver = desktop.makeSolver(
    "PlannerConfig.xml" // config
	, 0                 // startHorizon
	, 100               // endHorizon
);

PSVarValue vv5,vv6,vv7,vv8,vv9,vv10,vv11,vv12;

void createVarValues()
{
	vv5 = PSVarValue.getInstance(5);
	vv6 = PSVarValue.getInstance(6);
	vv7 = PSVarValue.getInstance(7);
	vv8 = PSVarValue.getInstance(8);
	vv9 = PSVarValue.getInstance(9);
	vv10 = PSVarValue.getInstance(10);
	vv11 = PSVarValue.getInstance(11);
	vv12 = PSVarValue.getInstance(12);
}

PSToken t1,t2,act1,act2;
PSVariable s1,s2;

void findTokens()
{
	res = psengine.getObjectsByType("CapacityResource").get(0);
	t1 = res.getTokens().get(0);
	t2 = res.getTokens().get(1);

	act_obj1 = psengine.getObjectsByType("Activity").get(0);
	act_obj2 = psengine.getObjectsByType("Activity").get(1);

	act1 = act_obj1.getTokens().get(0);
	act2 = act_obj2.getTokens().get(0);	
	s1 = act1.getParameter("start");
	s2 = act2.getParameter("start");
}

void setStart(PSVarValue a, PSVarValue b)
{
	s1.specifyValue(a);
	s2.specifyValue(b);
	print(psengine.getViolation() + " : " + psengine.getViolationExpl());	
}

desktop.makeSolverDialog(solver);
createVarValues();
//setupDesktop();

/*

findTokens();
setStart(vv5,vv5); // Cause Violation
setStart(vv5,vv11); // Remove Violation
 
*/




