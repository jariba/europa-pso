// ResourceViolations.bsh

import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JInternalFrame;
import org.ops.ui.PSDesktop;
import org.ops.ui.mouse.*;
import org.ops.ui.gantt.*;
import org.ops.ui.chart.*;
import org.ops.ui.util.Util;
import psengine.*;

int month = GregorianCalendar.SEPTEMBER, day = 11; 
GregorianCalendar start = new GregorianCalendar(2006,month,day,0,0);
GregorianCalendar end = new GregorianCalendar(2006,month,day,0,200);

void usingCodeGeneration()
{
	cwd = bsh.cwd;
    psengine.loadModel(cwd+"/libResourceViolations_g.so");
    boolean isFile = true;
    boolean useInterpreter = false;
    psengine.executeTxns(cwd+"/ResourceViolations-initial-state.xml",isFile,useInterpreter);		
}

void usingInterpreter()
{
	cwd = bsh.cwd;
    String nddlModel = cwd+"/ResourceViolations-initial-state.nddl";
    psengine.executeScript("nddl",nddlModel);
}

void initPSEngine()
{
	psengine.setAllowViolations(true);
	//usingCodeGeneration();
	usingInterpreter();
}

PSGantt gantt;
JInternalFrame ganttFrame;

void setupDesktop()
    throws Exception
{
    ActionDetailsPanel dp = (ActionDetailsPanel)desktop.makeDetailsFrame().getContentPane().getComponent(0);
    ActionViolationsPanel vp = (ActionViolationsPanel)desktop.makeViolationsFrame().getContentPane().getComponent(0);

    ganttFrame = desktop.makeResourceGanttFrame("CapacityResource",start,end);
    ganttFrame.setLocation(0,0);
    ganttFrame.setSize(700,300);
    gantt = (PSGantt)ganttFrame.getContentPane().getComponent(0);
    gantt.addMouseListener(dp);    
    gantt.addMouseListener(vp);      
}

void showResourceTokens()
{
    desktop.showTokens(psengine.getObjectsByType("CapacityResource").get(0));	
}

void showResourceLevels()
{
    resourceFrame = desktop.makeResourcesFrame("CapacityResource",start);
    resourceFrame.setLocation(0,180);
    resourceFrame.setSize(500,300);    	
}

String getBounds(PSToken t)
{
    StringBuffer buf = new StringBuffer();
    
    buf.append(t.getParameter("start"))
       .append("\n ")
       .append(t.getParameter("end"))
       .append("\n");
    
    return buf.toString();
}


initPSEngine();
desktop.makeNddlConsole();
solver = desktop.makeSolver(
    "PlannerConfig.xml" // config
	, 0                 // startHorizon
	, 100               // endHorizon
);

PSObject act_obj1,act_obj2,act_obj3;
PSToken t1,t2,act1,act2,act3,act4;
PSVariable s1,s2,s3,s4;

void findTokens()
{
	res = psengine.getObjectsByType("CapacityResource").get(0);
	t1 = res.getTokens().get(0);
	t2 = res.getTokens().get(1);

	activities = psengine.getObjectsByType("Activity"); 
	act_obj1 = activities.get(0);
	act_obj2 = activities.get(1);
	act_obj3 = activities.get(2);

	act1 = act_obj1.getTokens().get(0);
	act2 = act_obj2.getTokens().get(0);	
	act3 = act_obj3.getTokens().get(0);	
	act4 = act_obj3.getTokens().get(1);
	
	s1 = act1.getParameter("start");
	s2 = act2.getParameter("start");
	s3 = act3.getParameter("start");
	s4 = act4.getParameter("start");
}

void setStart(PSVarValue a, PSVarValue b, PSVarValue c)
{
	s1.specifyValue(a);
	s2.specifyValue(b);
	s3.specifyValue(c);
	print(psengine.getViolation() + " : " + psengine.getViolationExpl());	
	gantt.refresh();	
	ganttFrame.setSize(ganttFrame.getSize());
}

void setStart(int a, int b, int c)
{
    setStart(PSVarValue.getInstance(a),PSVarValue.getInstance(b),PSVarValue.getInstance(c));	
}

desktop.makeSolverDialog(solver);
createVarValues();
setupDesktop();

/*
to test, run solver, then from the BeanShell listener:

findTokens();
setStart(vv5,vv7,vv6); // Cause Violation
setStart(vv3,vv8,vv14); // Remove Violation
 
*/




